// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MasterData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MasterData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#pragma warning(disable:4125)

namespace b2 {
namespace protocol {
namespace masterdata {

namespace {

const ::google::protobuf::Descriptor* mdSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSkillOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSkillOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSkillLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSkillLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemLevelupExpFactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemLevelupExpFactor_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemOptionAddValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemOptionAddValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemLevelupCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemLevelupCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemLevelupFactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemLevelupFactor_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemEnhanceCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemEnhanceCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdCostumeEnhanceCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdCostumeEnhanceCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemSealCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemSealCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemEnhanceEffectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemEnhanceEffectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemSurpassLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemSurpassLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemDismantleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemDismantleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdResurrectionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdResurrectionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTeamBattleFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTeamBattleFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMainQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMainQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDailyQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDailyQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDailyMatchReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDailyMatchReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMatchRankingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMatchRankingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdCounterDungeon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdCounterDungeon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* mdCounterDungeon_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* mdCounterDungeon_DIFFICULTY_descriptor_ = NULL;
const ::google::protobuf::Descriptor* mdCounterDungeonPeriod_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdCounterDungeonPeriod_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdCounterDungeonWeekReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdCounterDungeonWeekReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSerialMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSerialMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMissionCompletePointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMissionCompletePointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdWingEnhance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdWingEnhance_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdWingUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdWingUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdWingOptionValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdWingOptionValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdWingOptionOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdWingOptionOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdWingOptionMaxLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdWingOptionMaxLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdHeroTowerFloor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdHeroTowerFloor_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRelicInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRelicInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRelicGradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRelicGradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRelicLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRelicLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildBattleResultReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildBattleResultReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildBattleSeasonReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildBattleSeasonReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildBattleScheduleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildBattleScheduleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildSupportItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildSupportItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildMercenary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildMercenary_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildMercenarySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildMercenarySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildMercenaryMastery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildMercenaryMastery_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGuildMercenaryDonation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGuildMercenaryDonation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* mdGuildMercenaryDonation_DonationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* mdStageFixedDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdStageFixedDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopCashBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopCashBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopFundsSale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopFundsSale_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopLotteryPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopLotteryPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopLotteryPossibleGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopLotteryPossibleGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopLotterySpecialGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopLotterySpecialGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopLotteryDailyLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopLotteryDailyLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopLotterySale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopLotterySale_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdCostumeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdCostumeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopPackageProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopPackageProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopMileageReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopMileageReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMarketProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMarketProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDailyAttendanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDailyAttendanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRaidInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRaidInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGeneralLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGeneralLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFixedGradeLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFixedGradeLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdPrefixSelectiveLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdPrefixSelectiveLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSelectiveLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSelectiveLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAdditionalMatchCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAdditionalMatchCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDuelRewardBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDuelRewardBoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRandomRewardGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRandomRewardGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAssaultVictoryRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAssaultVictoryRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAssaultMvpRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAssaultMvpRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdCollectionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdCollectionReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdItemSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdItemSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSelectItemOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSelectItemOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSelectItemSealOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSelectItemSealOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdEventAttendance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdEventAttendance_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* mdEventAttendance_BonusType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* mdEventAttendanceReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdEventAttendanceReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDailyPlayTimeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDailyPlayTimeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTutorialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTutorialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAetherOptionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAetherOptionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAetherSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAetherSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAetherEnhanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAetherEnhanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAetherEnhanceOptionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAetherEnhanceOptionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdAetherSetOptionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdAetherSetOptionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDuelModeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDuelModeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRaidExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRaidExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdUnitySkillMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdUnitySkillMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdUnitySkillOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdUnitySkillOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdUnitySkillAwakenMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdUnitySkillAwakenMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdRestReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdRestReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdPointEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdPointEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdPointEventReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdPointEventReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdGemPurchaseEventReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdGemPurchaseEventReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdLevelUpEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdLevelUpEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdHotTimeEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdHotTimeEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSeasonMissionEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSeasonMissionEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdStageClearEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdStageClearEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdKakaoFriendInviteReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdKakaoFriendInviteReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdHotTimeProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdHotTimeProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMagicShopProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMagicShopProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdMagicShopRenewalCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdMagicShopRenewalCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDuelModeSettleSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDuelModeSettleSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopLevelUpPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopLevelUpPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopReachLevelPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopReachLevelPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopFlatRatePackageBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopFlatRatePackageBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdShopPackageTab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdShopPackageTab_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdWebUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdWebUrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTenLotteryEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTenLotteryEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSpendGemEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSpendGemEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTenLotterySavingsEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTenLotterySavingsEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDiceEventMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDiceEventMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDiceEventCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDiceEventCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDiceEventFinishReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDiceEventFinishReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDiceEventBuyPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDiceEventBuyPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDiceEventMileage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDiceEventMileage_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDonationEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDonationEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDonationPointRankingRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDonationPointRankingRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDonationBundleFixedRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDonationBundleFixedRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDonationPointStepRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDonationPointStepRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFairyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFairyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFairyLevelupCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFairyLevelupCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFairyOpenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFairyOpenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSelectTotemOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSelectTotemOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemRefineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemRefineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemRefineRateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemRefineRateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemDismantleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemDismantleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemBonusOptionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemBonusOptionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDimensionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDimensionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemDropGradeRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemDropGradeRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemDropGroupRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemDropGroupRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdDimensionWeekReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdDimensionWeekReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdTotemPrefixLotteryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdTotemPrefixLotteryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdExchangeSystemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdExchangeSystemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdExchangeSystemCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdExchangeSystemCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdQualityTransRateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdQualityTransRateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdLotteryShopRateQualityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdLotteryShopRateQualityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFactoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFactoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFactoryMaterialTransInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFactoryMaterialTransInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdFactoryLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdFactoryLimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSealBoxInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSealBoxInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSealBoxRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSealBoxRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* mdSealBoxRewardRateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  mdSealBoxRewardRateInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MasterData_2eproto() {
  protobuf_AddDesc_MasterData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MasterData.proto");
  GOOGLE_CHECK(file != NULL);
  mdSkillInfo_descriptor_ = file->message_type(0);
  static const int mdSkillInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, learn_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, max_skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, usable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, level_up_cost_factor_),
  };
  mdSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSkillInfo_descriptor_,
      mdSkillInfo::default_instance_,
      mdSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSkillInfo));
  mdSkillOption_descriptor_ = file->message_type(1);
  static const int mdSkillOption_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, power_),
  };
  mdSkillOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSkillOption_descriptor_,
      mdSkillOption::default_instance_,
      mdSkillOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSkillOption));
  mdSkillLevelUp_descriptor_ = file->message_type(2);
  static const int mdSkillLevelUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillLevelUp, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillLevelUp, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillLevelUp, req_skill_point_),
  };
  mdSkillLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSkillLevelUp_descriptor_,
      mdSkillLevelUp::default_instance_,
      mdSkillLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSkillLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSkillLevelUp));
  mdItemLevelupExpFactor_descriptor_ = file->message_type(3);
  static const int mdItemLevelupExpFactor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupExpFactor, type_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupExpFactor, key_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupExpFactor, factor_),
  };
  mdItemLevelupExpFactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemLevelupExpFactor_descriptor_,
      mdItemLevelupExpFactor::default_instance_,
      mdItemLevelupExpFactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupExpFactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupExpFactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemLevelupExpFactor));
  mdItemOptionAddValue_descriptor_ = file->message_type(4);
  static const int mdItemOptionAddValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemOptionAddValue, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemOptionAddValue, add_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemOptionAddValue, power_factor_),
  };
  mdItemOptionAddValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemOptionAddValue_descriptor_,
      mdItemOptionAddValue::default_instance_,
      mdItemOptionAddValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemOptionAddValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemOptionAddValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemOptionAddValue));
  mdItemLevelupCost_descriptor_ = file->message_type(5);
  static const int mdItemLevelupCost_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, price_grade12_),
  };
  mdItemLevelupCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemLevelupCost_descriptor_,
      mdItemLevelupCost::default_instance_,
      mdItemLevelupCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemLevelupCost));
  mdItemLevelupFactor_descriptor_ = file->message_type(6);
  static const int mdItemLevelupFactor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupFactor, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupFactor, factor_),
  };
  mdItemLevelupFactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemLevelupFactor_descriptor_,
      mdItemLevelupFactor::default_instance_,
      mdItemLevelupFactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupFactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemLevelupFactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemLevelupFactor));
  mdItemEnhanceCost_descriptor_ = file->message_type(7);
  static const int mdItemEnhanceCost_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, enhance_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, enhance_scroll_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, protection_scroll_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, money_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, exchange_cost_dary_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, exchange_cost_gem_),
  };
  mdItemEnhanceCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemEnhanceCost_descriptor_,
      mdItemEnhanceCost::default_instance_,
      mdItemEnhanceCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemEnhanceCost));
  mdCostumeEnhanceCost_descriptor_ = file->message_type(8);
  static const int mdCostumeEnhanceCost_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, money_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, weapon_material_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, weapon_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, weapon_restore_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, armor_material_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, armor_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, armor_restore_amount_),
  };
  mdCostumeEnhanceCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdCostumeEnhanceCost_descriptor_,
      mdCostumeEnhanceCost::default_instance_,
      mdCostumeEnhanceCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeEnhanceCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdCostumeEnhanceCost));
  mdItemSealCost_descriptor_ = file->message_type(9);
  static const int mdItemSealCost_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, open_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, open_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, template_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, amount1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, template_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, amount2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, template_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, amount3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, template_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, amount4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, seal_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, seal_price_),
  };
  mdItemSealCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemSealCost_descriptor_,
      mdItemSealCost::default_instance_,
      mdItemSealCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSealCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemSealCost));
  mdItemEnhanceEffectInfo_descriptor_ = file->message_type(10);
  static const int mdItemEnhanceEffectInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, set_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, item_aura_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, channel_alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, channel_red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, channel_green_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, channel_blue_),
  };
  mdItemEnhanceEffectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemEnhanceEffectInfo_descriptor_,
      mdItemEnhanceEffectInfo::default_instance_,
      mdItemEnhanceEffectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemEnhanceEffectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemEnhanceEffectInfo));
  mdItemSurpassLevel_descriptor_ = file->message_type(11);
  static const int mdItemSurpassLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSurpassLevel, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSurpassLevel, increase_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSurpassLevel, max_surpass_level_),
  };
  mdItemSurpassLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemSurpassLevel_descriptor_,
      mdItemSurpassLevel::default_instance_,
      mdItemSurpassLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSurpassLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSurpassLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemSurpassLevel));
  mdItemDismantleInfo_descriptor_ = file->message_type(12);
  static const int mdItemDismantleInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, material1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, material_amount1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, material2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, material_amount2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, material3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, material_amount3_),
  };
  mdItemDismantleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemDismantleInfo_descriptor_,
      mdItemDismantleInfo::default_instance_,
      mdItemDismantleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemDismantleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemDismantleInfo));
  mdResurrectionInfo_descriptor_ = file->message_type(13);
  static const int mdResurrectionInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, mode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, attribute_change1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, change_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, attribute_change2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, change_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, attribute_change3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, change_value3_),
  };
  mdResurrectionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdResurrectionInfo_descriptor_,
      mdResurrectionInfo::default_instance_,
      mdResurrectionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdResurrectionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdResurrectionInfo));
  mdTeamBattleFormationInfo_descriptor_ = file->message_type(14);
  static const int mdTeamBattleFormationInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTeamBattleFormationInfo, formation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTeamBattleFormationInfo, formation_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTeamBattleFormationInfo, enhance_gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTeamBattleFormationInfo, buffs_),
  };
  mdTeamBattleFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTeamBattleFormationInfo_descriptor_,
      mdTeamBattleFormationInfo::default_instance_,
      mdTeamBattleFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTeamBattleFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTeamBattleFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTeamBattleFormationInfo));
  mdRankInfo_descriptor_ = file->message_type(15);
  static const int mdRankInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, open_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, attribute_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, change_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, need_rank_promotion_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, need_activate_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, rate_),
  };
  mdRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRankInfo_descriptor_,
      mdRankInfo::default_instance_,
      mdRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRankInfo));
  mdMainQuestInfo_descriptor_ = file->message_type(16);
  static const int mdMainQuestInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, main_quest_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, act_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, main_view_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, condition_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, condition_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, condition_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, condition_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, rewards_),
  };
  mdMainQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMainQuestInfo_descriptor_,
      mdMainQuestInfo::default_instance_,
      mdMainQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMainQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMainQuestInfo));
  mdDailyQuestInfo_descriptor_ = file->message_type(17);
  static const int mdDailyQuestInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, condition_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, condition_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, condition_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, condition_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, rewards_),
  };
  mdDailyQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDailyQuestInfo_descriptor_,
      mdDailyQuestInfo::default_instance_,
      mdDailyQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDailyQuestInfo));
  mdRewardInfo_descriptor_ = file->message_type(18);
  static const int mdRewardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRewardInfo, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRewardInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRewardInfo, reward_push_type_),
  };
  mdRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRewardInfo_descriptor_,
      mdRewardInfo::default_instance_,
      mdRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRewardInfo));
  mdDailyMatchReward_descriptor_ = file->message_type(19);
  static const int mdDailyMatchReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, require_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, reward_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, reward_bladepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, reward_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, reward_item_template_id_),
  };
  mdDailyMatchReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDailyMatchReward_descriptor_,
      mdDailyMatchReward::default_instance_,
      mdDailyMatchReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyMatchReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDailyMatchReward));
  mdMatchRankingReward_descriptor_ = file->message_type(20);
  static const int mdMatchRankingReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMatchRankingReward, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMatchRankingReward, ranking_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMatchRankingReward, ranking_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMatchRankingReward, rewards_),
  };
  mdMatchRankingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMatchRankingReward_descriptor_,
      mdMatchRankingReward::default_instance_,
      mdMatchRankingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMatchRankingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMatchRankingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMatchRankingReward));
  mdStageInfo_descriptor_ = file->message_type(21);
  static const int mdStageInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, difficulty_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, clear_time_grade_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, clear_time_grade_medium_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, recommend_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, recommend_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, recommend_defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, gold_cost_exp_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, gold_cost_gold_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, gold_cost_auto_skill_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, gold_cost_boost_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, aether_type_),
  };
  mdStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdStageInfo_descriptor_,
      mdStageInfo::default_instance_,
      mdStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdStageInfo));
  mdCounterDungeon_descriptor_ = file->message_type(22);
  static const int mdCounterDungeon_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, dungeon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, difficulty_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, recommend_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, recommend_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, recommend_defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, drop_gold_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, drop_gold_max_),
  };
  mdCounterDungeon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdCounterDungeon_descriptor_,
      mdCounterDungeon::default_instance_,
      mdCounterDungeon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdCounterDungeon));
  mdCounterDungeon_TYPE_descriptor_ = mdCounterDungeon_descriptor_->enum_type(0);
  mdCounterDungeon_DIFFICULTY_descriptor_ = mdCounterDungeon_descriptor_->enum_type(1);
  mdCounterDungeonPeriod_descriptor_ = file->message_type(23);
  static const int mdCounterDungeonPeriod_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, dungeon_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, day_of_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, begin_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, begin_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, end_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, end_min_),
  };
  mdCounterDungeonPeriod_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdCounterDungeonPeriod_descriptor_,
      mdCounterDungeonPeriod::default_instance_,
      mdCounterDungeonPeriod_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonPeriod, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdCounterDungeonPeriod));
  mdCounterDungeonWeekReward_descriptor_ = file->message_type(24);
  static const int mdCounterDungeonWeekReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonWeekReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonWeekReward, require_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonWeekReward, rewards_),
  };
  mdCounterDungeonWeekReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdCounterDungeonWeekReward_descriptor_,
      mdCounterDungeonWeekReward::default_instance_,
      mdCounterDungeonWeekReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonWeekReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCounterDungeonWeekReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdCounterDungeonWeekReward));
  mdMissionInfo_descriptor_ = file->message_type(25);
  static const int mdMissionInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, condition1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, condition2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, condition3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, condition4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, complete_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, reward_count_),
  };
  mdMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMissionInfo_descriptor_,
      mdMissionInfo::default_instance_,
      mdMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMissionInfo));
  mdSerialMissionInfo_descriptor_ = file->message_type(26);
  static const int mdSerialMissionInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, mission_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, condition1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, condition2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, condition3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, condition4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, reward_count_),
  };
  mdSerialMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSerialMissionInfo_descriptor_,
      mdSerialMissionInfo::default_instance_,
      mdSerialMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSerialMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSerialMissionInfo));
  mdMissionCompletePointInfo_descriptor_ = file->message_type(27);
  static const int mdMissionCompletePointInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionCompletePointInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionCompletePointInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionCompletePointInfo, require_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionCompletePointInfo, rewards_),
  };
  mdMissionCompletePointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMissionCompletePointInfo_descriptor_,
      mdMissionCompletePointInfo::default_instance_,
      mdMissionCompletePointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionCompletePointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMissionCompletePointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMissionCompletePointInfo));
  mdWingEnhance_descriptor_ = file->message_type(28);
  static const int mdWingEnhance_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, need_item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, need_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, enhance_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, need_enhance_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, option_type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, option_type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, option_type3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, option_value3_),
  };
  mdWingEnhance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdWingEnhance_descriptor_,
      mdWingEnhance::default_instance_,
      mdWingEnhance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingEnhance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdWingEnhance));
  mdWingUpgrade_descriptor_ = file->message_type(29);
  static const int mdWingUpgrade_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, need_item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, need_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, fail_point_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, option_type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, option_type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, option_type3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, option_value3_),
  };
  mdWingUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdWingUpgrade_descriptor_,
      mdWingUpgrade::default_instance_,
      mdWingUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdWingUpgrade));
  mdWingOptionValue_descriptor_ = file->message_type(30);
  static const int mdWingOptionValue_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, option_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, option_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, need_item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, need_item_count_),
  };
  mdWingOptionValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdWingOptionValue_descriptor_,
      mdWingOptionValue::default_instance_,
      mdWingOptionValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdWingOptionValue));
  mdWingOptionOpen_descriptor_ = file->message_type(31);
  static const int mdWingOptionOpen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionOpen, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionOpen, option_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionOpen, need_grade_),
  };
  mdWingOptionOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdWingOptionOpen_descriptor_,
      mdWingOptionOpen::default_instance_,
      mdWingOptionOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdWingOptionOpen));
  mdWingOptionMaxLevel_descriptor_ = file->message_type(32);
  static const int mdWingOptionMaxLevel_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionMaxLevel, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionMaxLevel, option_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionMaxLevel, wing_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionMaxLevel, max_level_),
  };
  mdWingOptionMaxLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdWingOptionMaxLevel_descriptor_,
      mdWingOptionMaxLevel::default_instance_,
      mdWingOptionMaxLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionMaxLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWingOptionMaxLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdWingOptionMaxLevel));
  mdHeroTowerFloor_descriptor_ = file->message_type(33);
  static const int mdHeroTowerFloor_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, recommend_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, recommend_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, recommend_defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, clear_limit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, difficulty_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, monster_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, first_rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, rewards_),
  };
  mdHeroTowerFloor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdHeroTowerFloor_descriptor_,
      mdHeroTowerFloor::default_instance_,
      mdHeroTowerFloor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHeroTowerFloor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdHeroTowerFloor));
  mdRelicInfo_descriptor_ = file->message_type(34);
  static const int mdRelicInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicInfo, relic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicInfo, open_stage_id_),
  };
  mdRelicInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRelicInfo_descriptor_,
      mdRelicInfo::default_instance_,
      mdRelicInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRelicInfo));
  mdRelicGradeInfo_descriptor_ = file->message_type(35);
  static const int mdRelicGradeInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, relic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, option_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, option_value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, option_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, option_value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, option_id_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, option_value_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, promotion_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, promotion_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, promotion_boss_piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, boss_piece_id_),
  };
  mdRelicGradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRelicGradeInfo_descriptor_,
      mdRelicGradeInfo::default_instance_,
      mdRelicGradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicGradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRelicGradeInfo));
  mdRelicLevelInfo_descriptor_ = file->message_type(36);
  static const int mdRelicLevelInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, relic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, mode_option_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, mode_option_value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, mode_option_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, mode_option_value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, mode_option_id_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, mode_option_value_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, enhance_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, need_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, need_hero_piece_),
  };
  mdRelicLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRelicLevelInfo_descriptor_,
      mdRelicLevelInfo::default_instance_,
      mdRelicLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRelicLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRelicLevelInfo));
  mdGuildBattleResultReward_descriptor_ = file->message_type(37);
  static const int mdGuildBattleResultReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleResultReward, reward_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleResultReward, req_count_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleResultReward, req_count_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleResultReward, rewards_),
  };
  mdGuildBattleResultReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildBattleResultReward_descriptor_,
      mdGuildBattleResultReward::default_instance_,
      mdGuildBattleResultReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleResultReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleResultReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildBattleResultReward));
  mdGuildBattleSeasonReward_descriptor_ = file->message_type(38);
  static const int mdGuildBattleSeasonReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, ranking_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, ranking_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, ranking_rate_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, ranking_rate_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, rewards_),
  };
  mdGuildBattleSeasonReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildBattleSeasonReward_descriptor_,
      mdGuildBattleSeasonReward::default_instance_,
      mdGuildBattleSeasonReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleSeasonReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildBattleSeasonReward));
  mdGuildBattleScheduleInfo_descriptor_ = file->message_type(39);
  static const int mdGuildBattleScheduleInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, start_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, start_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, start_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, end_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, end_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, end_min_),
  };
  mdGuildBattleScheduleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildBattleScheduleInfo_descriptor_,
      mdGuildBattleScheduleInfo::default_instance_,
      mdGuildBattleScheduleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildBattleScheduleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildBattleScheduleInfo));
  mdGuildSkill_descriptor_ = file->message_type(40);
  static const int mdGuildSkill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, upgrade_cost_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, upgrade_req_guild_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, buy_cost_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, buff_option_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, buff_option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, buff_time_sec_),
  };
  mdGuildSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildSkill_descriptor_,
      mdGuildSkill::default_instance_,
      mdGuildSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildSkill));
  mdGuildExp_descriptor_ = file->message_type(41);
  static const int mdGuildExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildExp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildExp, exp_max_),
  };
  mdGuildExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildExp_descriptor_,
      mdGuildExp::default_instance_,
      mdGuildExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildExp));
  mdGuildSupportItem_descriptor_ = file->message_type(42);
  static const int mdGuildSupportItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSupportItem, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSupportItem, support_max_count_),
  };
  mdGuildSupportItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildSupportItem_descriptor_,
      mdGuildSupportItem::default_instance_,
      mdGuildSupportItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSupportItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildSupportItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildSupportItem));
  mdGuildMercenary_descriptor_ = file->message_type(43);
  static const int mdGuildMercenary_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, mastery_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, max_armor_override_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, skill_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, skill_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, skill_id_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, max_use_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, is_usable_),
  };
  mdGuildMercenary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildMercenary_descriptor_,
      mdGuildMercenary::default_instance_,
      mdGuildMercenary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildMercenary));
  mdGuildMercenarySkill_descriptor_ = file->message_type(44);
  static const int mdGuildMercenarySkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenarySkill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenarySkill, require_mercenary_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenarySkill, cool_time_sec_),
  };
  mdGuildMercenarySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildMercenarySkill_descriptor_,
      mdGuildMercenarySkill::default_instance_,
      mdGuildMercenarySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenarySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenarySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildMercenarySkill));
  mdGuildMercenaryMastery_descriptor_ = file->message_type(45);
  static const int mdGuildMercenaryMastery_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, max_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, option_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, option_value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, option_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, option_value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, option_id_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, option_value_3_),
  };
  mdGuildMercenaryMastery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildMercenaryMastery_descriptor_,
      mdGuildMercenaryMastery::default_instance_,
      mdGuildMercenaryMastery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryMastery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildMercenaryMastery));
  mdGuildMercenaryDonation_descriptor_ = file->message_type(46);
  static const int mdGuildMercenaryDonation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryDonation, donation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryDonation, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryDonation, donation_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryDonation, exp_increment_),
  };
  mdGuildMercenaryDonation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGuildMercenaryDonation_descriptor_,
      mdGuildMercenaryDonation::default_instance_,
      mdGuildMercenaryDonation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryDonation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGuildMercenaryDonation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGuildMercenaryDonation));
  mdGuildMercenaryDonation_DonationType_descriptor_ = mdGuildMercenaryDonation_descriptor_->enum_type(0);
  mdStageFixedDrop_descriptor_ = file->message_type(47);
  static const int mdStageFixedDrop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, rate_),
  };
  mdStageFixedDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdStageFixedDrop_descriptor_,
      mdStageFixedDrop::default_instance_,
      mdStageFixedDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageFixedDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdStageFixedDrop));
  mdShopCashBonus_descriptor_ = file->message_type(48);
  static const int mdShopCashBonus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopCashBonus, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopCashBonus, increase_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopCashBonus, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopCashBonus, end_time_),
  };
  mdShopCashBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopCashBonus_descriptor_,
      mdShopCashBonus::default_instance_,
      mdShopCashBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopCashBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopCashBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopCashBonus));
  mdShopFundsSale_descriptor_ = file->message_type(49);
  static const int mdShopFundsSale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFundsSale, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFundsSale, discount_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFundsSale, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFundsSale, end_time_),
  };
  mdShopFundsSale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopFundsSale_descriptor_,
      mdShopFundsSale::default_instance_,
      mdShopFundsSale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFundsSale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFundsSale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopFundsSale));
  mdShopLotteryPrice_descriptor_ = file->message_type(50);
  static const int mdShopLotteryPrice_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, is_again_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, calculated_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, social_point_),
  };
  mdShopLotteryPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopLotteryPrice_descriptor_,
      mdShopLotteryPrice::default_instance_,
      mdShopLotteryPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopLotteryPrice));
  mdShopLotteryPossibleGrade_descriptor_ = file->message_type(51);
  static const int mdShopLotteryPossibleGrade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPossibleGrade, draw_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPossibleGrade, is_continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPossibleGrade, min_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPossibleGrade, max_grade_),
  };
  mdShopLotteryPossibleGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopLotteryPossibleGrade_descriptor_,
      mdShopLotteryPossibleGrade::default_instance_,
      mdShopLotteryPossibleGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPossibleGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryPossibleGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopLotteryPossibleGrade));
  mdShopLotterySpecialGrade_descriptor_ = file->message_type(52);
  static const int mdShopLotterySpecialGrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySpecialGrade, min_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySpecialGrade, max_grade_),
  };
  mdShopLotterySpecialGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopLotterySpecialGrade_descriptor_,
      mdShopLotterySpecialGrade::default_instance_,
      mdShopLotterySpecialGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySpecialGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySpecialGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopLotterySpecialGrade));
  mdShopLotteryDailyLimit_descriptor_ = file->message_type(53);
  static const int mdShopLotteryDailyLimit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryDailyLimit, draw_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryDailyLimit, is_continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryDailyLimit, limit_count_),
  };
  mdShopLotteryDailyLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopLotteryDailyLimit_descriptor_,
      mdShopLotteryDailyLimit::default_instance_,
      mdShopLotteryDailyLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryDailyLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotteryDailyLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopLotteryDailyLimit));
  mdShopLotterySale_descriptor_ = file->message_type(54);
  static const int mdShopLotterySale_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, draw_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, is_continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, discount_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, end_time_),
  };
  mdShopLotterySale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopLotterySale_descriptor_,
      mdShopLotterySale::default_instance_,
      mdShopLotterySale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLotterySale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopLotterySale));
  mdItemInfo_descriptor_ = file->message_type(55);
  static const int mdItemInfo_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_max_levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_main_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_level_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_option_value4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_unique_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, seal_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, seal_slot_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_random_option_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_next_grade_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_buy_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, md_sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_stackable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_saleable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_equipable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_levelupable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_enhanceable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_upgradable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_composable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_surpassable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, is_sealable_),
  };
  mdItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemInfo_descriptor_,
      mdItemInfo::default_instance_,
      mdItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemInfo));
  mdCostumeInfo_descriptor_ = file->message_type(56);
  static const int mdCostumeInfo_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_max_levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_main_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_level_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_option_value4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_unique_skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_max_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_random_option_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_next_grade_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_buy_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, md_sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_stackable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_saleable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_equipable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_levelupable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_enhanceable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_upgradable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_composable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, is_surpassable_),
  };
  mdCostumeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdCostumeInfo_descriptor_,
      mdCostumeInfo::default_instance_,
      mdCostumeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCostumeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdCostumeInfo));
  mdShopProduct_descriptor_ = file->message_type(57);
  static const int mdShopProduct_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, shop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, shop_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, product_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, product_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, bonus_product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, bonus_product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, bonus_product_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, calculated_bonus_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, buy_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, calculated_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, restric_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, buy_limit_count_),
  };
  mdShopProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopProduct_descriptor_,
      mdShopProduct::default_instance_,
      mdShopProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopProduct));
  mdShopPackage_descriptor_ = file->message_type(58);
  static const int mdShopPackage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, tab_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, pay_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, period_bonus_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, period_bonus_reward_count_),
  };
  mdShopPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopPackage_descriptor_,
      mdShopPackage::default_instance_,
      mdShopPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopPackage));
  mdShopPackageProduct_descriptor_ = file->message_type(59);
  static const int mdShopPackageProduct_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageProduct, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageProduct, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageProduct, product_),
  };
  mdShopPackageProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopPackageProduct_descriptor_,
      mdShopPackageProduct::default_instance_,
      mdShopPackageProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopPackageProduct));
  mdShopMileageReward_descriptor_ = file->message_type(60);
  static const int mdShopMileageReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopMileageReward, mileage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopMileageReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopMileageReward, mileage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopMileageReward, rewards_),
  };
  mdShopMileageReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopMileageReward_descriptor_,
      mdShopMileageReward::default_instance_,
      mdShopMileageReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopMileageReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopMileageReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopMileageReward));
  mdMarketProduct_descriptor_ = file->message_type(61);
  static const int mdMarketProduct_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMarketProduct, shop_product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMarketProduct, market_product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMarketProduct, currency_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMarketProduct, price_),
  };
  mdMarketProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMarketProduct_descriptor_,
      mdMarketProduct::default_instance_,
      mdMarketProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMarketProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMarketProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMarketProduct));
  mdDailyAttendanceInfo_descriptor_ = file->message_type(62);
  static const int mdDailyAttendanceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyAttendanceInfo, attendance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyAttendanceInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyAttendanceInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyAttendanceInfo, reward_count_),
  };
  mdDailyAttendanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDailyAttendanceInfo_descriptor_,
      mdDailyAttendanceInfo::default_instance_,
      mdDailyAttendanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyAttendanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyAttendanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDailyAttendanceInfo));
  mdRaidInfo_descriptor_ = file->message_type(63);
  static const int mdRaidInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, difficulty_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, recommend_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, recommend_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, recommend_defense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, reward_min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, reward_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, main_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, main_reward_min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, main_reward_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, reward_item_min_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, reward_item_max_grade_),
  };
  mdRaidInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRaidInfo_descriptor_,
      mdRaidInfo::default_instance_,
      mdRaidInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRaidInfo));
  mdMonsterInfo_descriptor_ = file->message_type(64);
  static const int mdMonsterInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, hp_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, attack_defense_level_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, max_armor_override_),
  };
  mdMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMonsterInfo_descriptor_,
      mdMonsterInfo::default_instance_,
      mdMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMonsterInfo));
  mdGeneralLottery_descriptor_ = file->message_type(65);
  static const int mdGeneralLottery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGeneralLottery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGeneralLottery, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGeneralLottery, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGeneralLottery, equip_category_),
  };
  mdGeneralLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGeneralLottery_descriptor_,
      mdGeneralLottery::default_instance_,
      mdGeneralLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGeneralLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGeneralLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGeneralLottery));
  mdFixedGradeLottery_descriptor_ = file->message_type(66);
  static const int mdFixedGradeLottery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFixedGradeLottery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFixedGradeLottery, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFixedGradeLottery, equip_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFixedGradeLottery, item_grade_),
  };
  mdFixedGradeLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFixedGradeLottery_descriptor_,
      mdFixedGradeLottery::default_instance_,
      mdFixedGradeLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFixedGradeLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFixedGradeLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFixedGradeLottery));
  mdPrefixSelectiveLottery_descriptor_ = file->message_type(67);
  static const int mdPrefixSelectiveLottery_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, equip_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, item_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, surpass_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, quality_),
  };
  mdPrefixSelectiveLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdPrefixSelectiveLottery_descriptor_,
      mdPrefixSelectiveLottery::default_instance_,
      mdPrefixSelectiveLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPrefixSelectiveLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdPrefixSelectiveLottery));
  mdSelectiveLottery_descriptor_ = file->message_type(68);
  static const int mdSelectiveLottery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectiveLottery, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectiveLottery, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectiveLottery, equip_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectiveLottery, item_grade_),
  };
  mdSelectiveLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSelectiveLottery_descriptor_,
      mdSelectiveLottery::default_instance_,
      mdSelectiveLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectiveLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectiveLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSelectiveLottery));
  mdAdditionalMatchCost_descriptor_ = file->message_type(69);
  static const int mdAdditionalMatchCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAdditionalMatchCost, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAdditionalMatchCost, cost_),
  };
  mdAdditionalMatchCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAdditionalMatchCost_descriptor_,
      mdAdditionalMatchCost::default_instance_,
      mdAdditionalMatchCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAdditionalMatchCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAdditionalMatchCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAdditionalMatchCost));
  mdDuelRewardBoxInfo_descriptor_ = file->message_type(70);
  static const int mdDuelRewardBoxInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelRewardBoxInfo, duel_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelRewardBoxInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelRewardBoxInfo, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelRewardBoxInfo, reward_group_ids_),
  };
  mdDuelRewardBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDuelRewardBoxInfo_descriptor_,
      mdDuelRewardBoxInfo::default_instance_,
      mdDuelRewardBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelRewardBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelRewardBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDuelRewardBoxInfo));
  mdRandomRewardGroupInfo_descriptor_ = file->message_type(71);
  static const int mdRandomRewardGroupInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, max_count_),
  };
  mdRandomRewardGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRandomRewardGroupInfo_descriptor_,
      mdRandomRewardGroupInfo::default_instance_,
      mdRandomRewardGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRandomRewardGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRandomRewardGroupInfo));
  mdAssaultVictoryRewardInfo_descriptor_ = file->message_type(72);
  static const int mdAssaultVictoryRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultVictoryRewardInfo, match_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultVictoryRewardInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultVictoryRewardInfo, reward_count_),
  };
  mdAssaultVictoryRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAssaultVictoryRewardInfo_descriptor_,
      mdAssaultVictoryRewardInfo::default_instance_,
      mdAssaultVictoryRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultVictoryRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultVictoryRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAssaultVictoryRewardInfo));
  mdAssaultMvpRewardInfo_descriptor_ = file->message_type(73);
  static const int mdAssaultMvpRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultMvpRewardInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultMvpRewardInfo, reward_min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultMvpRewardInfo, reward_max_count_),
  };
  mdAssaultMvpRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAssaultMvpRewardInfo_descriptor_,
      mdAssaultMvpRewardInfo::default_instance_,
      mdAssaultMvpRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultMvpRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAssaultMvpRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAssaultMvpRewardInfo));
  mdCollectionReward_descriptor_ = file->message_type(74);
  static const int mdCollectionReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCollectionReward, collection_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCollectionReward, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCollectionReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCollectionReward, reward_count_),
  };
  mdCollectionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdCollectionReward_descriptor_,
      mdCollectionReward::default_instance_,
      mdCollectionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCollectionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdCollectionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdCollectionReward));
  mdItemSet_descriptor_ = file->message_type(75);
  static const int mdItemSet_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_option_id_set2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_value_set2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_option_id_set3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_value_set3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_option_id_set4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, set_value_set4_),
  };
  mdItemSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdItemSet_descriptor_,
      mdItemSet::default_instance_,
      mdItemSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdItemSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdItemSet));
  mdSelectItemOption_descriptor_ = file->message_type(76);
  static const int mdSelectItemOption_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, decimal_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, max_),
  };
  mdSelectItemOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSelectItemOption_descriptor_,
      mdSelectItemOption::default_instance_,
      mdSelectItemOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSelectItemOption));
  mdSelectItemSealOption_descriptor_ = file->message_type(77);
  static const int mdSelectItemSealOption_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, prob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, decimal_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, max_),
  };
  mdSelectItemSealOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSelectItemSealOption_descriptor_,
      mdSelectItemSealOption::default_instance_,
      mdSelectItemSealOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectItemSealOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSelectItemSealOption));
  mdEventAttendance_descriptor_ = file->message_type(78);
  static const int mdEventAttendance_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, total_attendance_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, explain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, event_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, bonus_type_),
  };
  mdEventAttendance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdEventAttendance_descriptor_,
      mdEventAttendance::default_instance_,
      mdEventAttendance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdEventAttendance));
  mdEventAttendance_BonusType_descriptor_ = mdEventAttendance_descriptor_->enum_type(0);
  mdEventAttendanceReward_descriptor_ = file->message_type(79);
  static const int mdEventAttendanceReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendanceReward, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendanceReward, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendanceReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendanceReward, reward_count_),
  };
  mdEventAttendanceReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdEventAttendanceReward_descriptor_,
      mdEventAttendanceReward::default_instance_,
      mdEventAttendanceReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendanceReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventAttendanceReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdEventAttendanceReward));
  mdDailyPlayTimeReward_descriptor_ = file->message_type(80);
  static const int mdDailyPlayTimeReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyPlayTimeReward, reward_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyPlayTimeReward, play_time_inmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyPlayTimeReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyPlayTimeReward, reward_count_),
  };
  mdDailyPlayTimeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDailyPlayTimeReward_descriptor_,
      mdDailyPlayTimeReward::default_instance_,
      mdDailyPlayTimeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyPlayTimeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDailyPlayTimeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDailyPlayTimeReward));
  mdTutorialInfo_descriptor_ = file->message_type(81);
  static const int mdTutorialInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, tutorial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, prev_tutorial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, character_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, act_cleared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, reward_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, reward_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, reward_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, reward_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, reward_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, reward_count3_),
  };
  mdTutorialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTutorialInfo_descriptor_,
      mdTutorialInfo::default_instance_,
      mdTutorialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTutorialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTutorialInfo));
  mdAetherOptionInfo_descriptor_ = file->message_type(82);
  static const int mdAetherOptionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, option_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, default_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, increase_value_per_level_),
  };
  mdAetherOptionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAetherOptionInfo_descriptor_,
      mdAetherOptionInfo::default_instance_,
      mdAetherOptionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherOptionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAetherOptionInfo));
  mdAetherSlotInfo_descriptor_ = file->message_type(83);
  static const int mdAetherSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSlotInfo, slot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSlotInfo, option_id_),
  };
  mdAetherSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAetherSlotInfo_descriptor_,
      mdAetherSlotInfo::default_instance_,
      mdAetherSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAetherSlotInfo));
  mdAetherEnhanceInfo_descriptor_ = file->message_type(84);
  static const int mdAetherEnhanceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, aether_piece_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, enhance_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, dismantle_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, sell_price_),
  };
  mdAetherEnhanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAetherEnhanceInfo_descriptor_,
      mdAetherEnhanceInfo::default_instance_,
      mdAetherEnhanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAetherEnhanceInfo));
  mdAetherEnhanceOptionInfo_descriptor_ = file->message_type(85);
  static const int mdAetherEnhanceOptionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceOptionInfo, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceOptionInfo, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceOptionInfo, state_main_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceOptionInfo, state_sub_option_),
  };
  mdAetherEnhanceOptionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAetherEnhanceOptionInfo_descriptor_,
      mdAetherEnhanceOptionInfo::default_instance_,
      mdAetherEnhanceOptionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceOptionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherEnhanceOptionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAetherEnhanceOptionInfo));
  mdAetherSetOptionInfo_descriptor_ = file->message_type(86);
  static const int mdAetherSetOptionInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, set_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, min_apply_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, trigger_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, cooldown_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, damage_rate_),
  };
  mdAetherSetOptionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdAetherSetOptionInfo_descriptor_,
      mdAetherSetOptionInfo::default_instance_,
      mdAetherSetOptionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdAetherSetOptionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdAetherSetOptionInfo));
  mdDuelModeReward_descriptor_ = file->message_type(87);
  static const int mdDuelModeReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeReward, duel_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeReward, match_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeReward, rewards_),
  };
  mdDuelModeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDuelModeReward_descriptor_,
      mdDuelModeReward::default_instance_,
      mdDuelModeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDuelModeReward));
  mdRaidExp_descriptor_ = file->message_type(88);
  static const int mdRaidExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidExp, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidExp, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidExp, exp_),
  };
  mdRaidExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRaidExp_descriptor_,
      mdRaidExp::default_instance_,
      mdRaidExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRaidExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRaidExp));
  mdUnitySkillMission_descriptor_ = file->message_type(89);
  static const int mdUnitySkillMission_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, main_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, unity_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, condition1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, condition2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, condition3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, condition4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, reward_count_),
  };
  mdUnitySkillMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdUnitySkillMission_descriptor_,
      mdUnitySkillMission::default_instance_,
      mdUnitySkillMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdUnitySkillMission));
  mdUnitySkillOption_descriptor_ = file->message_type(90);
  static const int mdUnitySkillOption_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, main_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, unity_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, power_),
  };
  mdUnitySkillOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdUnitySkillOption_descriptor_,
      mdUnitySkillOption::default_instance_,
      mdUnitySkillOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdUnitySkillOption));
  mdUnitySkillAwakenMission_descriptor_ = file->message_type(91);
  static const int mdUnitySkillAwakenMission_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, req_item_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, req_item_count_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, req_item_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, req_item_count_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, req_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, success_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, success_rate_add_),
  };
  mdUnitySkillAwakenMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdUnitySkillAwakenMission_descriptor_,
      mdUnitySkillAwakenMission::default_instance_,
      mdUnitySkillAwakenMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdUnitySkillAwakenMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdUnitySkillAwakenMission));
  mdRestReward_descriptor_ = file->message_type(92);
  static const int mdRestReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRestReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRestReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRestReward, reward_count_per_point_),
  };
  mdRestReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdRestReward_descriptor_,
      mdRestReward::default_instance_,
      mdRestReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRestReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdRestReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdRestReward));
  mdEventInfo_descriptor_ = file->message_type(93);
  static const int mdEventInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, event_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, event_tab_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, explain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, banner_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, link_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, link_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, tab_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, event_sub_category_),
  };
  mdEventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdEventInfo_descriptor_,
      mdEventInfo::default_instance_,
      mdEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdEventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdEventInfo));
  mdPointEvent_descriptor_ = file->message_type(94);
  static const int mdPointEvent_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, condition1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, condition2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, condition3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, condition4_),
  };
  mdPointEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdPointEvent_descriptor_,
      mdPointEvent::default_instance_,
      mdPointEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdPointEvent));
  mdPointEventReward_descriptor_ = file->message_type(95);
  static const int mdPointEventReward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, need_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, tab_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, buy_limit_count_),
  };
  mdPointEventReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdPointEventReward_descriptor_,
      mdPointEventReward::default_instance_,
      mdPointEventReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdPointEventReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdPointEventReward));
  mdGemPurchaseEventReward_descriptor_ = file->message_type(96);
  static const int mdGemPurchaseEventReward_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, reward_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, reward_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, reward_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, reward_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, reward_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, reward_count3_),
  };
  mdGemPurchaseEventReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdGemPurchaseEventReward_descriptor_,
      mdGemPurchaseEventReward::default_instance_,
      mdGemPurchaseEventReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdGemPurchaseEventReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdGemPurchaseEventReward));
  mdLevelUpEvent_descriptor_ = file->message_type(97);
  static const int mdLevelUpEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, reward_count_),
  };
  mdLevelUpEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdLevelUpEvent_descriptor_,
      mdLevelUpEvent::default_instance_,
      mdLevelUpEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLevelUpEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdLevelUpEvent));
  mdHotTimeEvent_descriptor_ = file->message_type(98);
  static const int mdHotTimeEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, day_of_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, buff_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, begin_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, begin_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, end_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, end_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, increase_rate_),
  };
  mdHotTimeEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdHotTimeEvent_descriptor_,
      mdHotTimeEvent::default_instance_,
      mdHotTimeEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdHotTimeEvent));
  mdSeasonMissionEvent_descriptor_ = file->message_type(99);
  static const int mdSeasonMissionEvent_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, condition1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, condition2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, condition3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, condition4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, goalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, tutorial_id_),
  };
  mdSeasonMissionEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSeasonMissionEvent_descriptor_,
      mdSeasonMissionEvent::default_instance_,
      mdSeasonMissionEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSeasonMissionEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSeasonMissionEvent));
  mdStageClearEvent_descriptor_ = file->message_type(100);
  static const int mdStageClearEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, reward_count_),
  };
  mdStageClearEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdStageClearEvent_descriptor_,
      mdStageClearEvent::default_instance_,
      mdStageClearEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdStageClearEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdStageClearEvent));
  mdKakaoFriendInviteReward_descriptor_ = file->message_type(101);
  static const int mdKakaoFriendInviteReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, invite_reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, reward_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, reward_count_),
  };
  mdKakaoFriendInviteReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdKakaoFriendInviteReward_descriptor_,
      mdKakaoFriendInviteReward::default_instance_,
      mdKakaoFriendInviteReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdKakaoFriendInviteReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdKakaoFriendInviteReward));
  mdHotTimeProduct_descriptor_ = file->message_type(102);
  static const int mdHotTimeProduct_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeProduct, buff_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeProduct, period_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeProduct, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeProduct, increase_rate_),
  };
  mdHotTimeProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdHotTimeProduct_descriptor_,
      mdHotTimeProduct::default_instance_,
      mdHotTimeProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdHotTimeProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdHotTimeProduct));
  mdMagicShopProduct_descriptor_ = file->message_type(103);
  static const int mdMagicShopProduct_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, magic_shop_group_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, product_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, product_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, price_),
  };
  mdMagicShopProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMagicShopProduct_descriptor_,
      mdMagicShopProduct::default_instance_,
      mdMagicShopProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMagicShopProduct));
  mdMagicShopRenewalCost_descriptor_ = file->message_type(104);
  static const int mdMagicShopRenewalCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopRenewalCost, renewal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopRenewalCost, gem_cost_),
  };
  mdMagicShopRenewalCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdMagicShopRenewalCost_descriptor_,
      mdMagicShopRenewalCost::default_instance_,
      mdMagicShopRenewalCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopRenewalCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdMagicShopRenewalCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdMagicShopRenewalCost));
  mdDuelModeSettleSchedule_descriptor_ = file->message_type(105);
  static const int mdDuelModeSettleSchedule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, mode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, ranking_settle_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, end_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, end_min_),
  };
  mdDuelModeSettleSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDuelModeSettleSchedule_descriptor_,
      mdDuelModeSettleSchedule::default_instance_,
      mdDuelModeSettleSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDuelModeSettleSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDuelModeSettleSchedule));
  mdShopLevelUpPackage_descriptor_ = file->message_type(106);
  static const int mdShopLevelUpPackage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, reward_count_),
  };
  mdShopLevelUpPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopLevelUpPackage_descriptor_,
      mdShopLevelUpPackage::default_instance_,
      mdShopLevelUpPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopLevelUpPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopLevelUpPackage));
  mdShopReachLevelPackage_descriptor_ = file->message_type(107);
  static const int mdShopReachLevelPackage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, reach_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, limit_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, buy_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, buy_reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, complete_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, complete_reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, expire_day_),
  };
  mdShopReachLevelPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopReachLevelPackage_descriptor_,
      mdShopReachLevelPackage::default_instance_,
      mdShopReachLevelPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopReachLevelPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopReachLevelPackage));
  mdShopFlatRatePackageBonus_descriptor_ = file->message_type(108);
  static const int mdShopFlatRatePackageBonus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFlatRatePackageBonus, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFlatRatePackageBonus, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFlatRatePackageBonus, reward_count_),
  };
  mdShopFlatRatePackageBonus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopFlatRatePackageBonus_descriptor_,
      mdShopFlatRatePackageBonus::default_instance_,
      mdShopFlatRatePackageBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFlatRatePackageBonus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopFlatRatePackageBonus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopFlatRatePackageBonus));
  mdShopPackageTab_descriptor_ = file->message_type(109);
  static const int mdShopPackageTab_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageTab, tab_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageTab, sort_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageTab, is_open_),
  };
  mdShopPackageTab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdShopPackageTab_descriptor_,
      mdShopPackageTab::default_instance_,
      mdShopPackageTab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageTab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdShopPackageTab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdShopPackageTab));
  mdWebUrl_descriptor_ = file->message_type(110);
  static const int mdWebUrl_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWebUrl, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWebUrl, url_),
  };
  mdWebUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdWebUrl_descriptor_,
      mdWebUrl::default_instance_,
      mdWebUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWebUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdWebUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdWebUrl));
  mdTenLotteryEvent_descriptor_ = file->message_type(111);
  static const int mdTenLotteryEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotteryEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotteryEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotteryEvent, goal_lottery_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotteryEvent, rewards_),
  };
  mdTenLotteryEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTenLotteryEvent_descriptor_,
      mdTenLotteryEvent::default_instance_,
      mdTenLotteryEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotteryEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotteryEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTenLotteryEvent));
  mdSpendGemEvent_descriptor_ = file->message_type(112);
  static const int mdSpendGemEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSpendGemEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSpendGemEvent, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSpendGemEvent, goal_spend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSpendGemEvent, rewards_),
  };
  mdSpendGemEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSpendGemEvent_descriptor_,
      mdSpendGemEvent::default_instance_,
      mdSpendGemEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSpendGemEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSpendGemEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSpendGemEvent));
  mdTenLotterySavingsEvent_descriptor_ = file->message_type(113);
  static const int mdTenLotterySavingsEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotterySavingsEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotterySavingsEvent, gain_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotterySavingsEvent, need_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotterySavingsEvent, rewards_),
  };
  mdTenLotterySavingsEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTenLotterySavingsEvent_descriptor_,
      mdTenLotterySavingsEvent::default_instance_,
      mdTenLotterySavingsEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotterySavingsEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTenLotterySavingsEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTenLotterySavingsEvent));
  mdDiceEventMission_descriptor_ = file->message_type(114);
  static const int mdDiceEventMission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMission, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMission, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMission, goal_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMission, point_),
  };
  mdDiceEventMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDiceEventMission_descriptor_,
      mdDiceEventMission::default_instance_,
      mdDiceEventMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDiceEventMission));
  mdDiceEventCell_descriptor_ = file->message_type(115);
  static const int mdDiceEventCell_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, cell_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, cell_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, reward_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, effect_value_),
  };
  mdDiceEventCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDiceEventCell_descriptor_,
      mdDiceEventCell::default_instance_,
      mdDiceEventCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDiceEventCell));
  mdDiceEventFinishReward_descriptor_ = file->message_type(116);
  static const int mdDiceEventFinishReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventFinishReward, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventFinishReward, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventFinishReward, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventFinishReward, reward_count_),
  };
  mdDiceEventFinishReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDiceEventFinishReward_descriptor_,
      mdDiceEventFinishReward::default_instance_,
      mdDiceEventFinishReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventFinishReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventFinishReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDiceEventFinishReward));
  mdDiceEventBuyPoint_descriptor_ = file->message_type(117);
  static const int mdDiceEventBuyPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventBuyPoint, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventBuyPoint, buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventBuyPoint, gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventBuyPoint, point_),
  };
  mdDiceEventBuyPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDiceEventBuyPoint_descriptor_,
      mdDiceEventBuyPoint::default_instance_,
      mdDiceEventBuyPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventBuyPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventBuyPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDiceEventBuyPoint));
  mdDiceEventMileage_descriptor_ = file->message_type(118);
  static const int mdDiceEventMileage_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, dice_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, reward_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, reward_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, reward_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, reward_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, reward_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, reward_count3_),
  };
  mdDiceEventMileage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDiceEventMileage_descriptor_,
      mdDiceEventMileage::default_instance_,
      mdDiceEventMileage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDiceEventMileage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDiceEventMileage));
  mdDonationEventInfo_descriptor_ = file->message_type(119);
  static const int mdDonationEventInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, donation_open_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, banner_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, link_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, link_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, donation_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, cost_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, extra_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, cut_off_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, obtain_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, bundle_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, extra_bundle_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, bundle_obtain_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, serial_donation_count_),
  };
  mdDonationEventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDonationEventInfo_descriptor_,
      mdDonationEventInfo::default_instance_,
      mdDonationEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationEventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDonationEventInfo));
  mdDonationPointRankingRewardInfo_descriptor_ = file->message_type(120);
  static const int mdDonationPointRankingRewardInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, donation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_count3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_count4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_id5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, reward_count5_),
  };
  mdDonationPointRankingRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDonationPointRankingRewardInfo_descriptor_,
      mdDonationPointRankingRewardInfo::default_instance_,
      mdDonationPointRankingRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointRankingRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDonationPointRankingRewardInfo));
  mdDonationBundleFixedRewardInfo_descriptor_ = file->message_type(121);
  static const int mdDonationBundleFixedRewardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationBundleFixedRewardInfo, donation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationBundleFixedRewardInfo, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationBundleFixedRewardInfo, min_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationBundleFixedRewardInfo, max_amount_),
  };
  mdDonationBundleFixedRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDonationBundleFixedRewardInfo_descriptor_,
      mdDonationBundleFixedRewardInfo::default_instance_,
      mdDonationBundleFixedRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationBundleFixedRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationBundleFixedRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDonationBundleFixedRewardInfo));
  mdDonationPointStepRewardInfo_descriptor_ = file->message_type(122);
  static const int mdDonationPointStepRewardInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, donation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, reward_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, reward_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, reward_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, reward_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, reward_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, reward_count3_),
  };
  mdDonationPointStepRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDonationPointStepRewardInfo_descriptor_,
      mdDonationPointStepRewardInfo::default_instance_,
      mdDonationPointStepRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDonationPointStepRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDonationPointStepRewardInfo));
  mdFairyInfo_descriptor_ = file->message_type(123);
  static const int mdFairyInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, fairy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, bless_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, level_),
  };
  mdFairyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFairyInfo_descriptor_,
      mdFairyInfo::default_instance_,
      mdFairyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFairyInfo));
  mdFairyLevelupCost_descriptor_ = file->message_type(124);
  static const int mdFairyLevelupCost_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyLevelupCost, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyLevelupCost, material_cost_),
  };
  mdFairyLevelupCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFairyLevelupCost_descriptor_,
      mdFairyLevelupCost::default_instance_,
      mdFairyLevelupCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyLevelupCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyLevelupCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFairyLevelupCost));
  mdFairyOpenInfo_descriptor_ = file->message_type(125);
  static const int mdFairyOpenInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyOpenInfo, fairy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyOpenInfo, stage_id_),
  };
  mdFairyOpenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFairyOpenInfo_descriptor_,
      mdFairyOpenInfo::default_instance_,
      mdFairyOpenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyOpenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFairyOpenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFairyOpenInfo));
  mdTotemInfo_descriptor_ = file->message_type(126);
  static const int mdTotemInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, bonus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, sell_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, refine_limit_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, refine_limit_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, refine_limit_count3_),
  };
  mdTotemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemInfo_descriptor_,
      mdTotemInfo::default_instance_,
      mdTotemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemInfo));
  mdSelectTotemOption_descriptor_ = file->message_type(127);
  static const int mdSelectTotemOption_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, min_main_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, max_main_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, min_sub_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, max_sub_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, decimal_point_),
  };
  mdSelectTotemOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSelectTotemOption_descriptor_,
      mdSelectTotemOption::default_instance_,
      mdSelectTotemOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSelectTotemOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSelectTotemOption));
  mdTotemRefineInfo_descriptor_ = file->message_type(128);
  static const int mdTotemRefineInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineInfo, refine_chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineInfo, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineInfo, dimensional_piece_cost_),
  };
  mdTotemRefineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemRefineInfo_descriptor_,
      mdTotemRefineInfo::default_instance_,
      mdTotemRefineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemRefineInfo));
  mdTotemRefineRateInfo_descriptor_ = file->message_type(129);
  static const int mdTotemRefineRateInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, base_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, gold_decrease_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, gold_increase_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, piece_decrease_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, piece_increase_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, min_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, max_rate_),
  };
  mdTotemRefineRateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemRefineRateInfo_descriptor_,
      mdTotemRefineRateInfo::default_instance_,
      mdTotemRefineRateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemRefineRateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemRefineRateInfo));
  mdTotemDismantleInfo_descriptor_ = file->message_type(130);
  static const int mdTotemDismantleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDismantleInfo, refine_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDismantleInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDismantleInfo, amount_),
  };
  mdTotemDismantleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemDismantleInfo_descriptor_,
      mdTotemDismantleInfo::default_instance_,
      mdTotemDismantleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDismantleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDismantleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemDismantleInfo));
  mdTotemBonusOptionInfo_descriptor_ = file->message_type(131);
  static const int mdTotemBonusOptionInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, condition1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_option_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, condition2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_option_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, condition3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_option_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, bonus_value3_),
  };
  mdTotemBonusOptionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemBonusOptionInfo_descriptor_,
      mdTotemBonusOptionInfo::default_instance_,
      mdTotemBonusOptionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemBonusOptionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemBonusOptionInfo));
  mdDimensionInfo_descriptor_ = file->message_type(132);
  static const int mdDimensionInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, difficulty_scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, fixed_drop_item_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, fixed_drop_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, drop_totem_count_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, drop_totem_count_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, recommend_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, recommend_attack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, recommend_defense_),
  };
  mdDimensionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDimensionInfo_descriptor_,
      mdDimensionInfo::default_instance_,
      mdDimensionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDimensionInfo));
  mdTotemDropGradeRate_descriptor_ = file->message_type(133);
  static const int mdTotemDropGradeRate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, rare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, hero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, legend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, artifact_),
  };
  mdTotemDropGradeRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemDropGradeRate_descriptor_,
      mdTotemDropGradeRate::default_instance_,
      mdTotemDropGradeRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGradeRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemDropGradeRate));
  mdTotemDropGroupRate_descriptor_ = file->message_type(134);
  static const int mdTotemDropGroupRate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGroupRate, difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGroupRate, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGroupRate, rate_),
  };
  mdTotemDropGroupRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemDropGroupRate_descriptor_,
      mdTotemDropGroupRate::default_instance_,
      mdTotemDropGroupRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGroupRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemDropGroupRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemDropGroupRate));
  mdDimensionWeekReward_descriptor_ = file->message_type(135);
  static const int mdDimensionWeekReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionWeekReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionWeekReward, ranking_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionWeekReward, ranking_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionWeekReward, rewards_),
  };
  mdDimensionWeekReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdDimensionWeekReward_descriptor_,
      mdDimensionWeekReward::default_instance_,
      mdDimensionWeekReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionWeekReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdDimensionWeekReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdDimensionWeekReward));
  mdTotemPrefixLotteryInfo_descriptor_ = file->message_type(136);
  static const int mdTotemPrefixLotteryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemPrefixLotteryInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemPrefixLotteryInfo, base_prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemPrefixLotteryInfo, grade_),
  };
  mdTotemPrefixLotteryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdTotemPrefixLotteryInfo_descriptor_,
      mdTotemPrefixLotteryInfo::default_instance_,
      mdTotemPrefixLotteryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemPrefixLotteryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdTotemPrefixLotteryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdTotemPrefixLotteryInfo));
  mdExchangeSystemInfo_descriptor_ = file->message_type(137);
  static const int mdExchangeSystemInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, request_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, exchange_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, result_count_),
  };
  mdExchangeSystemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdExchangeSystemInfo_descriptor_,
      mdExchangeSystemInfo::default_instance_,
      mdExchangeSystemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdExchangeSystemInfo));
  mdExchangeSystemCost_descriptor_ = file->message_type(138);
  static const int mdExchangeSystemCost_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemCost, exchange_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemCost, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemCost, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemCost, gem_cost_),
  };
  mdExchangeSystemCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdExchangeSystemCost_descriptor_,
      mdExchangeSystemCost::default_instance_,
      mdExchangeSystemCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdExchangeSystemCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdExchangeSystemCost));
  mdQualityTransRateInfo_descriptor_ = file->message_type(139);
  static const int mdQualityTransRateInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, equip_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, trans_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, trans_cond_quality_),
  };
  mdQualityTransRateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdQualityTransRateInfo_descriptor_,
      mdQualityTransRateInfo::default_instance_,
      mdQualityTransRateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdQualityTransRateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdQualityTransRateInfo));
  mdLotteryShopRateQualityInfo_descriptor_ = file->message_type(140);
  static const int mdLotteryShopRateQualityInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLotteryShopRateQualityInfo, equip_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLotteryShopRateQualityInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLotteryShopRateQualityInfo, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLotteryShopRateQualityInfo, quality_inc_level_),
  };
  mdLotteryShopRateQualityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdLotteryShopRateQualityInfo_descriptor_,
      mdLotteryShopRateQualityInfo::default_instance_,
      mdLotteryShopRateQualityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLotteryShopRateQualityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdLotteryShopRateQualityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdLotteryShopRateQualityInfo));
  mdFactoryInfo_descriptor_ = file->message_type(141);
  static const int mdFactoryInfo_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, factory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, factory_tab_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, group_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, item_sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, limit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, gem_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, dark_crystal_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, success_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, huge_success_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, fail_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, huge_success_add_item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, huge_success_add_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, fail_add_item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, fail_add_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, result_item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, result_item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, main_material_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, main_material_cond_reinforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, main_material_cond_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, main_material_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, main_material_fail_refund_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_template_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_fail_refund_rate1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_template_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_fail_refund_rate2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_template_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_count3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_fail_refund_rate3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_template_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_count4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, material_fail_refund_rate4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, visible_type_),
  };
  mdFactoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFactoryInfo_descriptor_,
      mdFactoryInfo::default_instance_,
      mdFactoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFactoryInfo));
  mdFactoryMaterialTransInfo_descriptor_ = file->message_type(142);
  static const int mdFactoryMaterialTransInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, factory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_main_material_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_main_material_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_template_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_template_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_template_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_count3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_template_id4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, trans_material_count4_),
  };
  mdFactoryMaterialTransInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFactoryMaterialTransInfo_descriptor_,
      mdFactoryMaterialTransInfo::default_instance_,
      mdFactoryMaterialTransInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryMaterialTransInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFactoryMaterialTransInfo));
  mdFactoryLimitInfo_descriptor_ = file->message_type(143);
  static const int mdFactoryLimitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryLimitInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryLimitInfo, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryLimitInfo, limit_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryLimitInfo, limit_time_type_),
  };
  mdFactoryLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdFactoryLimitInfo_descriptor_,
      mdFactoryLimitInfo::default_instance_,
      mdFactoryLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdFactoryLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdFactoryLimitInfo));
  mdSealBoxInfo_descriptor_ = file->message_type(144);
  static const int mdSealBoxInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, seal_box_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, reward_slot1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, reward_slot2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, reward_slot3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, reward_slot4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, reward_slot5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, is_rate_visible_),
  };
  mdSealBoxInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSealBoxInfo_descriptor_,
      mdSealBoxInfo::default_instance_,
      mdSealBoxInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSealBoxInfo));
  mdSealBoxRewardInfo_descriptor_ = file->message_type(145);
  static const int mdSealBoxRewardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardInfo, seal_box_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardInfo, min_fixed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardInfo, max_fixed_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardInfo, is_recycle_),
  };
  mdSealBoxRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSealBoxRewardInfo_descriptor_,
      mdSealBoxRewardInfo::default_instance_,
      mdSealBoxRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSealBoxRewardInfo));
  mdSealBoxRewardRateInfo_descriptor_ = file->message_type(146);
  static const int mdSealBoxRewardRateInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, seal_box_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, min_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, max_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, equip_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, surpass_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, reward_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, is_fixed_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, fixed_reward_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, effect_grade_),
  };
  mdSealBoxRewardRateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      mdSealBoxRewardRateInfo_descriptor_,
      mdSealBoxRewardRateInfo::default_instance_,
      mdSealBoxRewardRateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(mdSealBoxRewardRateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(mdSealBoxRewardRateInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MasterData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSkillInfo_descriptor_, &mdSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSkillOption_descriptor_, &mdSkillOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSkillLevelUp_descriptor_, &mdSkillLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemLevelupExpFactor_descriptor_, &mdItemLevelupExpFactor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemOptionAddValue_descriptor_, &mdItemOptionAddValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemLevelupCost_descriptor_, &mdItemLevelupCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemLevelupFactor_descriptor_, &mdItemLevelupFactor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemEnhanceCost_descriptor_, &mdItemEnhanceCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdCostumeEnhanceCost_descriptor_, &mdCostumeEnhanceCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemSealCost_descriptor_, &mdItemSealCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemEnhanceEffectInfo_descriptor_, &mdItemEnhanceEffectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemSurpassLevel_descriptor_, &mdItemSurpassLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemDismantleInfo_descriptor_, &mdItemDismantleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdResurrectionInfo_descriptor_, &mdResurrectionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTeamBattleFormationInfo_descriptor_, &mdTeamBattleFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRankInfo_descriptor_, &mdRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMainQuestInfo_descriptor_, &mdMainQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDailyQuestInfo_descriptor_, &mdDailyQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRewardInfo_descriptor_, &mdRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDailyMatchReward_descriptor_, &mdDailyMatchReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMatchRankingReward_descriptor_, &mdMatchRankingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdStageInfo_descriptor_, &mdStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdCounterDungeon_descriptor_, &mdCounterDungeon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdCounterDungeonPeriod_descriptor_, &mdCounterDungeonPeriod::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdCounterDungeonWeekReward_descriptor_, &mdCounterDungeonWeekReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMissionInfo_descriptor_, &mdMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSerialMissionInfo_descriptor_, &mdSerialMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMissionCompletePointInfo_descriptor_, &mdMissionCompletePointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdWingEnhance_descriptor_, &mdWingEnhance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdWingUpgrade_descriptor_, &mdWingUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdWingOptionValue_descriptor_, &mdWingOptionValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdWingOptionOpen_descriptor_, &mdWingOptionOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdWingOptionMaxLevel_descriptor_, &mdWingOptionMaxLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdHeroTowerFloor_descriptor_, &mdHeroTowerFloor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRelicInfo_descriptor_, &mdRelicInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRelicGradeInfo_descriptor_, &mdRelicGradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRelicLevelInfo_descriptor_, &mdRelicLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildBattleResultReward_descriptor_, &mdGuildBattleResultReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildBattleSeasonReward_descriptor_, &mdGuildBattleSeasonReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildBattleScheduleInfo_descriptor_, &mdGuildBattleScheduleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildSkill_descriptor_, &mdGuildSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildExp_descriptor_, &mdGuildExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildSupportItem_descriptor_, &mdGuildSupportItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildMercenary_descriptor_, &mdGuildMercenary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildMercenarySkill_descriptor_, &mdGuildMercenarySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildMercenaryMastery_descriptor_, &mdGuildMercenaryMastery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGuildMercenaryDonation_descriptor_, &mdGuildMercenaryDonation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdStageFixedDrop_descriptor_, &mdStageFixedDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopCashBonus_descriptor_, &mdShopCashBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopFundsSale_descriptor_, &mdShopFundsSale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopLotteryPrice_descriptor_, &mdShopLotteryPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopLotteryPossibleGrade_descriptor_, &mdShopLotteryPossibleGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopLotterySpecialGrade_descriptor_, &mdShopLotterySpecialGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopLotteryDailyLimit_descriptor_, &mdShopLotteryDailyLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopLotterySale_descriptor_, &mdShopLotterySale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemInfo_descriptor_, &mdItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdCostumeInfo_descriptor_, &mdCostumeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopProduct_descriptor_, &mdShopProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopPackage_descriptor_, &mdShopPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopPackageProduct_descriptor_, &mdShopPackageProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopMileageReward_descriptor_, &mdShopMileageReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMarketProduct_descriptor_, &mdMarketProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDailyAttendanceInfo_descriptor_, &mdDailyAttendanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRaidInfo_descriptor_, &mdRaidInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMonsterInfo_descriptor_, &mdMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGeneralLottery_descriptor_, &mdGeneralLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFixedGradeLottery_descriptor_, &mdFixedGradeLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdPrefixSelectiveLottery_descriptor_, &mdPrefixSelectiveLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSelectiveLottery_descriptor_, &mdSelectiveLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAdditionalMatchCost_descriptor_, &mdAdditionalMatchCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDuelRewardBoxInfo_descriptor_, &mdDuelRewardBoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRandomRewardGroupInfo_descriptor_, &mdRandomRewardGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAssaultVictoryRewardInfo_descriptor_, &mdAssaultVictoryRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAssaultMvpRewardInfo_descriptor_, &mdAssaultMvpRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdCollectionReward_descriptor_, &mdCollectionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdItemSet_descriptor_, &mdItemSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSelectItemOption_descriptor_, &mdSelectItemOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSelectItemSealOption_descriptor_, &mdSelectItemSealOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdEventAttendance_descriptor_, &mdEventAttendance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdEventAttendanceReward_descriptor_, &mdEventAttendanceReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDailyPlayTimeReward_descriptor_, &mdDailyPlayTimeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTutorialInfo_descriptor_, &mdTutorialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAetherOptionInfo_descriptor_, &mdAetherOptionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAetherSlotInfo_descriptor_, &mdAetherSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAetherEnhanceInfo_descriptor_, &mdAetherEnhanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAetherEnhanceOptionInfo_descriptor_, &mdAetherEnhanceOptionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdAetherSetOptionInfo_descriptor_, &mdAetherSetOptionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDuelModeReward_descriptor_, &mdDuelModeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRaidExp_descriptor_, &mdRaidExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdUnitySkillMission_descriptor_, &mdUnitySkillMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdUnitySkillOption_descriptor_, &mdUnitySkillOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdUnitySkillAwakenMission_descriptor_, &mdUnitySkillAwakenMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdRestReward_descriptor_, &mdRestReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdEventInfo_descriptor_, &mdEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdPointEvent_descriptor_, &mdPointEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdPointEventReward_descriptor_, &mdPointEventReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdGemPurchaseEventReward_descriptor_, &mdGemPurchaseEventReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdLevelUpEvent_descriptor_, &mdLevelUpEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdHotTimeEvent_descriptor_, &mdHotTimeEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSeasonMissionEvent_descriptor_, &mdSeasonMissionEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdStageClearEvent_descriptor_, &mdStageClearEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdKakaoFriendInviteReward_descriptor_, &mdKakaoFriendInviteReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdHotTimeProduct_descriptor_, &mdHotTimeProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMagicShopProduct_descriptor_, &mdMagicShopProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdMagicShopRenewalCost_descriptor_, &mdMagicShopRenewalCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDuelModeSettleSchedule_descriptor_, &mdDuelModeSettleSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopLevelUpPackage_descriptor_, &mdShopLevelUpPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopReachLevelPackage_descriptor_, &mdShopReachLevelPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopFlatRatePackageBonus_descriptor_, &mdShopFlatRatePackageBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdShopPackageTab_descriptor_, &mdShopPackageTab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdWebUrl_descriptor_, &mdWebUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTenLotteryEvent_descriptor_, &mdTenLotteryEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSpendGemEvent_descriptor_, &mdSpendGemEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTenLotterySavingsEvent_descriptor_, &mdTenLotterySavingsEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDiceEventMission_descriptor_, &mdDiceEventMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDiceEventCell_descriptor_, &mdDiceEventCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDiceEventFinishReward_descriptor_, &mdDiceEventFinishReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDiceEventBuyPoint_descriptor_, &mdDiceEventBuyPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDiceEventMileage_descriptor_, &mdDiceEventMileage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDonationEventInfo_descriptor_, &mdDonationEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDonationPointRankingRewardInfo_descriptor_, &mdDonationPointRankingRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDonationBundleFixedRewardInfo_descriptor_, &mdDonationBundleFixedRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDonationPointStepRewardInfo_descriptor_, &mdDonationPointStepRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFairyInfo_descriptor_, &mdFairyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFairyLevelupCost_descriptor_, &mdFairyLevelupCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFairyOpenInfo_descriptor_, &mdFairyOpenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemInfo_descriptor_, &mdTotemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSelectTotemOption_descriptor_, &mdSelectTotemOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemRefineInfo_descriptor_, &mdTotemRefineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemRefineRateInfo_descriptor_, &mdTotemRefineRateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemDismantleInfo_descriptor_, &mdTotemDismantleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemBonusOptionInfo_descriptor_, &mdTotemBonusOptionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDimensionInfo_descriptor_, &mdDimensionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemDropGradeRate_descriptor_, &mdTotemDropGradeRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemDropGroupRate_descriptor_, &mdTotemDropGroupRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdDimensionWeekReward_descriptor_, &mdDimensionWeekReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdTotemPrefixLotteryInfo_descriptor_, &mdTotemPrefixLotteryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdExchangeSystemInfo_descriptor_, &mdExchangeSystemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdExchangeSystemCost_descriptor_, &mdExchangeSystemCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdQualityTransRateInfo_descriptor_, &mdQualityTransRateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdLotteryShopRateQualityInfo_descriptor_, &mdLotteryShopRateQualityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFactoryInfo_descriptor_, &mdFactoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFactoryMaterialTransInfo_descriptor_, &mdFactoryMaterialTransInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdFactoryLimitInfo_descriptor_, &mdFactoryLimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSealBoxInfo_descriptor_, &mdSealBoxInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSealBoxRewardInfo_descriptor_, &mdSealBoxRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    mdSealBoxRewardRateInfo_descriptor_, &mdSealBoxRewardRateInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MasterData_2eproto() {
  delete mdSkillInfo::default_instance_;
  delete mdSkillInfo_reflection_;
  delete mdSkillOption::default_instance_;
  delete mdSkillOption_reflection_;
  delete mdSkillLevelUp::default_instance_;
  delete mdSkillLevelUp_reflection_;
  delete mdItemLevelupExpFactor::default_instance_;
  delete mdItemLevelupExpFactor_reflection_;
  delete mdItemOptionAddValue::default_instance_;
  delete mdItemOptionAddValue_reflection_;
  delete mdItemLevelupCost::default_instance_;
  delete mdItemLevelupCost_reflection_;
  delete mdItemLevelupFactor::default_instance_;
  delete mdItemLevelupFactor_reflection_;
  delete mdItemEnhanceCost::default_instance_;
  delete mdItemEnhanceCost_reflection_;
  delete mdCostumeEnhanceCost::default_instance_;
  delete mdCostumeEnhanceCost_reflection_;
  delete mdItemSealCost::default_instance_;
  delete mdItemSealCost_reflection_;
  delete mdItemEnhanceEffectInfo::default_instance_;
  delete mdItemEnhanceEffectInfo_reflection_;
  delete mdItemSurpassLevel::default_instance_;
  delete mdItemSurpassLevel_reflection_;
  delete mdItemDismantleInfo::default_instance_;
  delete mdItemDismantleInfo_reflection_;
  delete mdResurrectionInfo::default_instance_;
  delete mdResurrectionInfo_reflection_;
  delete mdTeamBattleFormationInfo::default_instance_;
  delete mdTeamBattleFormationInfo_reflection_;
  delete mdRankInfo::default_instance_;
  delete mdRankInfo_reflection_;
  delete mdMainQuestInfo::default_instance_;
  delete mdMainQuestInfo_reflection_;
  delete mdDailyQuestInfo::default_instance_;
  delete mdDailyQuestInfo_reflection_;
  delete mdRewardInfo::default_instance_;
  delete mdRewardInfo_reflection_;
  delete mdDailyMatchReward::default_instance_;
  delete mdDailyMatchReward_reflection_;
  delete mdMatchRankingReward::default_instance_;
  delete mdMatchRankingReward_reflection_;
  delete mdStageInfo::default_instance_;
  delete mdStageInfo_reflection_;
  delete mdCounterDungeon::default_instance_;
  delete mdCounterDungeon_reflection_;
  delete mdCounterDungeonPeriod::default_instance_;
  delete mdCounterDungeonPeriod_reflection_;
  delete mdCounterDungeonWeekReward::default_instance_;
  delete mdCounterDungeonWeekReward_reflection_;
  delete mdMissionInfo::default_instance_;
  delete mdMissionInfo_reflection_;
  delete mdSerialMissionInfo::default_instance_;
  delete mdSerialMissionInfo_reflection_;
  delete mdMissionCompletePointInfo::default_instance_;
  delete mdMissionCompletePointInfo_reflection_;
  delete mdWingEnhance::default_instance_;
  delete mdWingEnhance_reflection_;
  delete mdWingUpgrade::default_instance_;
  delete mdWingUpgrade_reflection_;
  delete mdWingOptionValue::default_instance_;
  delete mdWingOptionValue_reflection_;
  delete mdWingOptionOpen::default_instance_;
  delete mdWingOptionOpen_reflection_;
  delete mdWingOptionMaxLevel::default_instance_;
  delete mdWingOptionMaxLevel_reflection_;
  delete mdHeroTowerFloor::default_instance_;
  delete mdHeroTowerFloor_reflection_;
  delete mdRelicInfo::default_instance_;
  delete mdRelicInfo_reflection_;
  delete mdRelicGradeInfo::default_instance_;
  delete mdRelicGradeInfo_reflection_;
  delete mdRelicLevelInfo::default_instance_;
  delete mdRelicLevelInfo_reflection_;
  delete mdGuildBattleResultReward::default_instance_;
  delete mdGuildBattleResultReward_reflection_;
  delete mdGuildBattleSeasonReward::default_instance_;
  delete mdGuildBattleSeasonReward_reflection_;
  delete mdGuildBattleScheduleInfo::default_instance_;
  delete mdGuildBattleScheduleInfo_reflection_;
  delete mdGuildSkill::default_instance_;
  delete mdGuildSkill_reflection_;
  delete mdGuildExp::default_instance_;
  delete mdGuildExp_reflection_;
  delete mdGuildSupportItem::default_instance_;
  delete mdGuildSupportItem_reflection_;
  delete mdGuildMercenary::default_instance_;
  delete mdGuildMercenary_reflection_;
  delete mdGuildMercenarySkill::default_instance_;
  delete mdGuildMercenarySkill_reflection_;
  delete mdGuildMercenaryMastery::default_instance_;
  delete mdGuildMercenaryMastery_reflection_;
  delete mdGuildMercenaryDonation::default_instance_;
  delete mdGuildMercenaryDonation_reflection_;
  delete mdStageFixedDrop::default_instance_;
  delete mdStageFixedDrop_reflection_;
  delete mdShopCashBonus::default_instance_;
  delete mdShopCashBonus_reflection_;
  delete mdShopFundsSale::default_instance_;
  delete mdShopFundsSale_reflection_;
  delete mdShopLotteryPrice::default_instance_;
  delete mdShopLotteryPrice_reflection_;
  delete mdShopLotteryPossibleGrade::default_instance_;
  delete mdShopLotteryPossibleGrade_reflection_;
  delete mdShopLotterySpecialGrade::default_instance_;
  delete mdShopLotterySpecialGrade_reflection_;
  delete mdShopLotteryDailyLimit::default_instance_;
  delete mdShopLotteryDailyLimit_reflection_;
  delete mdShopLotterySale::default_instance_;
  delete mdShopLotterySale_reflection_;
  delete mdItemInfo::default_instance_;
  delete mdItemInfo_reflection_;
  delete mdCostumeInfo::default_instance_;
  delete mdCostumeInfo_reflection_;
  delete mdShopProduct::default_instance_;
  delete mdShopProduct_reflection_;
  delete mdShopPackage::default_instance_;
  delete mdShopPackage_reflection_;
  delete mdShopPackageProduct::default_instance_;
  delete mdShopPackageProduct_reflection_;
  delete mdShopMileageReward::default_instance_;
  delete mdShopMileageReward_reflection_;
  delete mdMarketProduct::default_instance_;
  delete mdMarketProduct_reflection_;
  delete mdDailyAttendanceInfo::default_instance_;
  delete mdDailyAttendanceInfo_reflection_;
  delete mdRaidInfo::default_instance_;
  delete mdRaidInfo_reflection_;
  delete mdMonsterInfo::default_instance_;
  delete mdMonsterInfo_reflection_;
  delete mdGeneralLottery::default_instance_;
  delete mdGeneralLottery_reflection_;
  delete mdFixedGradeLottery::default_instance_;
  delete mdFixedGradeLottery_reflection_;
  delete mdPrefixSelectiveLottery::default_instance_;
  delete mdPrefixSelectiveLottery_reflection_;
  delete mdSelectiveLottery::default_instance_;
  delete mdSelectiveLottery_reflection_;
  delete mdAdditionalMatchCost::default_instance_;
  delete mdAdditionalMatchCost_reflection_;
  delete mdDuelRewardBoxInfo::default_instance_;
  delete mdDuelRewardBoxInfo_reflection_;
  delete mdRandomRewardGroupInfo::default_instance_;
  delete mdRandomRewardGroupInfo_reflection_;
  delete mdAssaultVictoryRewardInfo::default_instance_;
  delete mdAssaultVictoryRewardInfo_reflection_;
  delete mdAssaultMvpRewardInfo::default_instance_;
  delete mdAssaultMvpRewardInfo_reflection_;
  delete mdCollectionReward::default_instance_;
  delete mdCollectionReward_reflection_;
  delete mdItemSet::default_instance_;
  delete mdItemSet_reflection_;
  delete mdSelectItemOption::default_instance_;
  delete mdSelectItemOption_reflection_;
  delete mdSelectItemSealOption::default_instance_;
  delete mdSelectItemSealOption_reflection_;
  delete mdEventAttendance::default_instance_;
  delete mdEventAttendance_reflection_;
  delete mdEventAttendanceReward::default_instance_;
  delete mdEventAttendanceReward_reflection_;
  delete mdDailyPlayTimeReward::default_instance_;
  delete mdDailyPlayTimeReward_reflection_;
  delete mdTutorialInfo::default_instance_;
  delete mdTutorialInfo_reflection_;
  delete mdAetherOptionInfo::default_instance_;
  delete mdAetherOptionInfo_reflection_;
  delete mdAetherSlotInfo::default_instance_;
  delete mdAetherSlotInfo_reflection_;
  delete mdAetherEnhanceInfo::default_instance_;
  delete mdAetherEnhanceInfo_reflection_;
  delete mdAetherEnhanceOptionInfo::default_instance_;
  delete mdAetherEnhanceOptionInfo_reflection_;
  delete mdAetherSetOptionInfo::default_instance_;
  delete mdAetherSetOptionInfo_reflection_;
  delete mdDuelModeReward::default_instance_;
  delete mdDuelModeReward_reflection_;
  delete mdRaidExp::default_instance_;
  delete mdRaidExp_reflection_;
  delete mdUnitySkillMission::default_instance_;
  delete mdUnitySkillMission_reflection_;
  delete mdUnitySkillOption::default_instance_;
  delete mdUnitySkillOption_reflection_;
  delete mdUnitySkillAwakenMission::default_instance_;
  delete mdUnitySkillAwakenMission_reflection_;
  delete mdRestReward::default_instance_;
  delete mdRestReward_reflection_;
  delete mdEventInfo::default_instance_;
  delete mdEventInfo_reflection_;
  delete mdPointEvent::default_instance_;
  delete mdPointEvent_reflection_;
  delete mdPointEventReward::default_instance_;
  delete mdPointEventReward_reflection_;
  delete mdGemPurchaseEventReward::default_instance_;
  delete mdGemPurchaseEventReward_reflection_;
  delete mdLevelUpEvent::default_instance_;
  delete mdLevelUpEvent_reflection_;
  delete mdHotTimeEvent::default_instance_;
  delete mdHotTimeEvent_reflection_;
  delete mdSeasonMissionEvent::default_instance_;
  delete mdSeasonMissionEvent_reflection_;
  delete mdStageClearEvent::default_instance_;
  delete mdStageClearEvent_reflection_;
  delete mdKakaoFriendInviteReward::default_instance_;
  delete mdKakaoFriendInviteReward_reflection_;
  delete mdHotTimeProduct::default_instance_;
  delete mdHotTimeProduct_reflection_;
  delete mdMagicShopProduct::default_instance_;
  delete mdMagicShopProduct_reflection_;
  delete mdMagicShopRenewalCost::default_instance_;
  delete mdMagicShopRenewalCost_reflection_;
  delete mdDuelModeSettleSchedule::default_instance_;
  delete mdDuelModeSettleSchedule_reflection_;
  delete mdShopLevelUpPackage::default_instance_;
  delete mdShopLevelUpPackage_reflection_;
  delete mdShopReachLevelPackage::default_instance_;
  delete mdShopReachLevelPackage_reflection_;
  delete mdShopFlatRatePackageBonus::default_instance_;
  delete mdShopFlatRatePackageBonus_reflection_;
  delete mdShopPackageTab::default_instance_;
  delete mdShopPackageTab_reflection_;
  delete mdWebUrl::default_instance_;
  delete mdWebUrl_reflection_;
  delete mdTenLotteryEvent::default_instance_;
  delete mdTenLotteryEvent_reflection_;
  delete mdSpendGemEvent::default_instance_;
  delete mdSpendGemEvent_reflection_;
  delete mdTenLotterySavingsEvent::default_instance_;
  delete mdTenLotterySavingsEvent_reflection_;
  delete mdDiceEventMission::default_instance_;
  delete mdDiceEventMission_reflection_;
  delete mdDiceEventCell::default_instance_;
  delete mdDiceEventCell_reflection_;
  delete mdDiceEventFinishReward::default_instance_;
  delete mdDiceEventFinishReward_reflection_;
  delete mdDiceEventBuyPoint::default_instance_;
  delete mdDiceEventBuyPoint_reflection_;
  delete mdDiceEventMileage::default_instance_;
  delete mdDiceEventMileage_reflection_;
  delete mdDonationEventInfo::default_instance_;
  delete mdDonationEventInfo_reflection_;
  delete mdDonationPointRankingRewardInfo::default_instance_;
  delete mdDonationPointRankingRewardInfo_reflection_;
  delete mdDonationBundleFixedRewardInfo::default_instance_;
  delete mdDonationBundleFixedRewardInfo_reflection_;
  delete mdDonationPointStepRewardInfo::default_instance_;
  delete mdDonationPointStepRewardInfo_reflection_;
  delete mdFairyInfo::default_instance_;
  delete mdFairyInfo_reflection_;
  delete mdFairyLevelupCost::default_instance_;
  delete mdFairyLevelupCost_reflection_;
  delete mdFairyOpenInfo::default_instance_;
  delete mdFairyOpenInfo_reflection_;
  delete mdTotemInfo::default_instance_;
  delete mdTotemInfo_reflection_;
  delete mdSelectTotemOption::default_instance_;
  delete mdSelectTotemOption_reflection_;
  delete mdTotemRefineInfo::default_instance_;
  delete mdTotemRefineInfo_reflection_;
  delete mdTotemRefineRateInfo::default_instance_;
  delete mdTotemRefineRateInfo_reflection_;
  delete mdTotemDismantleInfo::default_instance_;
  delete mdTotemDismantleInfo_reflection_;
  delete mdTotemBonusOptionInfo::default_instance_;
  delete mdTotemBonusOptionInfo_reflection_;
  delete mdDimensionInfo::default_instance_;
  delete mdDimensionInfo_reflection_;
  delete mdTotemDropGradeRate::default_instance_;
  delete mdTotemDropGradeRate_reflection_;
  delete mdTotemDropGroupRate::default_instance_;
  delete mdTotemDropGroupRate_reflection_;
  delete mdDimensionWeekReward::default_instance_;
  delete mdDimensionWeekReward_reflection_;
  delete mdTotemPrefixLotteryInfo::default_instance_;
  delete mdTotemPrefixLotteryInfo_reflection_;
  delete mdExchangeSystemInfo::default_instance_;
  delete mdExchangeSystemInfo_reflection_;
  delete mdExchangeSystemCost::default_instance_;
  delete mdExchangeSystemCost_reflection_;
  delete mdQualityTransRateInfo::default_instance_;
  delete mdQualityTransRateInfo_reflection_;
  delete mdLotteryShopRateQualityInfo::default_instance_;
  delete mdLotteryShopRateQualityInfo_reflection_;
  delete mdFactoryInfo::default_instance_;
  delete mdFactoryInfo_reflection_;
  delete mdFactoryMaterialTransInfo::default_instance_;
  delete mdFactoryMaterialTransInfo_reflection_;
  delete mdFactoryLimitInfo::default_instance_;
  delete mdFactoryLimitInfo_reflection_;
  delete mdSealBoxInfo::default_instance_;
  delete mdSealBoxInfo_reflection_;
  delete mdSealBoxRewardInfo::default_instance_;
  delete mdSealBoxRewardInfo_reflection_;
  delete mdSealBoxRewardRateInfo::default_instance_;
  delete mdSealBoxRewardRateInfo_reflection_;
}

void protobuf_AddDesc_MasterData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::b2::protocol::commondata::protobuf_AddDesc_CommonData_2eproto();
  static const char descriptor[] = {
      "\n\020MasterData.proto\022\026b2.protocol.masterda"
      "ta\032\020CommonData.proto\"\273\001\n\013mdSkillInfo\022\020\n\010"
      "skill_id\030\001 \002(\005\022>\n\016character_type\030\002 \002(\0162&"
      ".b2.protocol.commondata.Character.TYPE\022\023"
      "\n\013learn_level\030\003 \002(\005\022\027\n\017max_skill_level\030\004"
      " \002(\005\022\016\n\006usable\030\005 \002(\010\022\034\n\024level_up_cost_fa"
      "ctor\030\006 \002(\005\"n\n\rmdSkillOption\022\020\n\010skill_id\030"
      "\001 \002(\005\022\023\n\013skill_level\030\002 \002(\005\022\021\n\toption_id\030"
      "\003 \002(\005\022\024\n\014option_value\030\004 \002(\002\022\r\n\005power\030\005 \002"
      "(\002\"P\n\016mdSkillLevelUp\022\020\n\010skill_id\030\001 \002(\005\022\023"
      "\n\013skill_level\030\002 \002(\005\022\027\n\017req_skill_point\030\003"
      " \002(\005\"M\n\026mdItemLevelupExpFactor\022\021\n\ttype_n"
      "ame\030\001 \002(\t\022\020\n\010key_code\030\002 \002(\005\022\016\n\006factor\030\003 "
      "\002(\001\"R\n\024mdItemOptionAddValue\022\021\n\toption_id"
      "\030\001 \002(\005\022\021\n\tadd_value\030\002 \002(\002\022\024\n\014power_facto"
      "r\030\003 \002(\002\"\355\002\n\021mdItemLevelupCost\022>\n\016invento"
      "ry_type\030\001 \002(\0162&.b2.protocol.commondata.I"
      "nventory.TYPE\022\r\n\005level\030\002 \002(\005\022\024\n\014price_gr"
      "ade1\030\003 \002(\005\022\024\n\014price_grade2\030\004 \002(\005\022\024\n\014pric"
      "e_grade3\030\005 \002(\005\022\024\n\014price_grade4\030\006 \002(\005\022\024\n\014"
      "price_grade5\030\007 \002(\005\022\024\n\014price_grade6\030\010 \002(\005"
      "\022\024\n\014price_grade7\030\t \002(\005\022\024\n\014price_grade8\030\n"
      " \002(\005\022\024\n\014price_grade9\030\013 \002(\005\022\025\n\rprice_grad"
      "e10\030\014 \002(\005\022\025\n\rprice_grade11\030\r \002(\005\022\025\n\rpric"
      "e_grade12\030\016 \002(\005\"4\n\023mdItemLevelupFactor\022\r"
      "\n\005level\030\001 \002(\005\022\016\n\006factor\030\002 \002(\001\"\320\001\n\021mdItem"
      "EnhanceCost\022\025\n\renhance_level\030\001 \002(\005\022\024\n\014en"
      "hance_rate\030\002 \002(\005\022\033\n\023enhance_scroll_cost\030"
      "\003 \002(\005\022\036\n\026protection_scroll_cost\030\004 \002(\005\022\022\n"
      "\nmoney_cost\030\005 \002(\005\022\"\n\032exchange_cost_dary_"
      "crystal\030\006 \002(\005\022\031\n\021exchange_cost_gem\030\007 \002(\005"
      "\"\361\001\n\024mdCostumeEnhanceCost\022\r\n\005grade\030\001 \002(\005"
      "\022\025\n\renhance_level\030\002 \002(\005\022\022\n\nmoney_cost\030\003 "
      "\002(\005\022\032\n\022weapon_material_id\030\004 \002(\005\022\025\n\rweapo"
      "n_amount\030\005 \002(\005\022\035\n\025weapon_restore_amount\030"
      "\006 \002(\005\022\031\n\021armor_material_id\030\007 \002(\005\022\024\n\014armo"
      "r_amount\030\010 \002(\005\022\034\n\024armor_restore_amount\030\t"
      " \002(\005\"\224\002\n\016mdItemSealCost\022\014\n\004slot\030\001 \002(\005\022\027\n"
      "\017open_price_type\030\002 \002(\005\022\022\n\nopen_price\030\003 \002"
      "(\005\022\024\n\014template_id1\030\004 \002(\005\022\017\n\007amount1\030\005 \002("
      "\005\022\024\n\014template_id2\030\006 \002(\005\022\017\n\007amount2\030\007 \002(\005"
      "\022\024\n\014template_id3\030\010 \002(\005\022\017\n\007amount3\030\t \002(\005\022"
      "\024\n\014template_id4\030\n \002(\005\022\017\n\007amount4\030\013 \002(\005\022\027"
      "\n\017seal_price_type\030\014 \002(\005\022\022\n\nseal_price\030\r "
      "\002(\005\"\260\001\n\027mdItemEnhanceEffectInfo\022\025\n\renhan"
      "ce_level\030\001 \002(\005\022\022\n\nset_effect\030\002 \002(\001\022\021\n\tit"
      "em_aura\030\003 \002(\005\022\025\n\rchannel_alpha\030\004 \002(\002\022\023\n\013"
      "channel_red\030\005 \002(\002\022\025\n\rchannel_green\030\006 \002(\002"
      "\022\024\n\014channel_blue\030\007 \002(\002\"V\n\022mdItemSurpassL"
      "evel\022\r\n\005grade\030\001 \002(\005\022\026\n\016increase_level\030\002 "
      "\002(\005\022\031\n\021max_surpass_level\030\003 \002(\005\"\353\001\n\023mdIte"
      "mDismantleInfo\022>\n\016inventory_type\030\001 \002(\0162&"
      ".b2.protocol.commondata.Inventory.TYPE\022\r"
      "\n\005grade\030\002 \002(\005\022\021\n\tmaterial1\030\003 \002(\005\022\030\n\020mate"
      "rial_amount1\030\004 \002(\005\022\021\n\tmaterial2\030\005 \002(\005\022\030\n"
      "\020material_amount2\030\006 \002(\005\022\021\n\tmaterial3\030\007 \002"
      "(\005\022\030\n\020material_amount3\030\010 \002(\005\"\370\002\n\022mdResur"
      "rectionInfo\0223\n\tmode_type\030\001 \002(\0162 .b2.prot"
      "ocol.commondata.ModeType\022\r\n\005count\030\002 \002(\005\022"
      "\r\n\005price\030\003 \002(\005\022B\n\021attribute_change1\030\004 \002("
      "\0162\'.b2.protocol.commondata.AttributeChan"
      "ge\022\025\n\rchange_value1\030\005 \002(\005\022B\n\021attribute_c"
      "hange2\030\006 \002(\0162\'.b2.protocol.commondata.At"
      "tributeChange\022\025\n\rchange_value2\030\007 \002(\005\022B\n\021"
      "attribute_change3\030\010 \002(\0162\'.b2.protocol.co"
      "mmondata.AttributeChange\022\025\n\rchange_value"
      "3\030\t \002(\005\"\321\001\n\031mdTeamBattleFormationInfo\022D\n"
      "\016formation_type\030\001 \002(\0162,.b2.protocol.comm"
      "ondata.BattleFormation.TYPE\022\027\n\017formation"
      "_level\030\002 \002(\005\022\031\n\021enhance_gold_cost\030\003 \002(\005\022"
      ":\n\005buffs\030\004 \003(\0132+.b2.protocol.commondata."
      "BattleFormationBuff\"\350\001\n\nmdRankInfo\022\014\n\004ra"
      "nk\030\001 \002(\005\022\022\n\nnode_index\030\002 \002(\005\022\022\n\nopen_lev"
      "el\030\003 \002(\005\022A\n\020attribute_change\030\004 \002(\0162\'.b2."
      "protocol.commondata.AttributeChange\022\024\n\014c"
      "hange_value\030\005 \002(\002\022!\n\031need_rank_promotion"
      "_point\030\006 \002(\005\022\032\n\022need_activate_gold\030\007 \002(\005"
      "\022\014\n\004rate\030\010 \002(\005\"\364\002\n\017mdMainQuestInfo\022\n\n\002id"
      "\030\001 \002(\005\022>\n\017main_quest_type\030\002 \002(\0162%.b2.pro"
      "tocol.commondata.MainQuestType\022\016\n\006act_id"
      "\030\003 \002(\005\022;\n\ndifficulty\030\004 \002(\0162\'.b2.protocol"
      ".commondata.StageDifficulty\022\022\n\nevent_typ"
      "e\030\005 \002(\005\022\033\n\023main_view_condition\030\006 \002(\005\022\023\n\013"
      "condition_1\030\007 \002(\005\022\023\n\013condition_2\030\010 \002(\005\022\023"
      "\n\013condition_3\030\t \002(\005\022\023\n\013condition_4\030\n \002(\005"
      "\022\022\n\ngoal_count\030\013 \002(\005\022/\n\007rewards\030\014 \003(\0132\036."
      "b2.protocol.commondata.Reward\"\313\001\n\020mdDail"
      "yQuestInfo\022\n\n\002id\030\001 \002(\005\022\022\n\nevent_type\030\002 \002"
      "(\005\022\023\n\013condition_1\030\003 \002(\005\022\023\n\013condition_2\030\004"
      " \002(\005\022\023\n\013condition_3\030\005 \002(\005\022\023\n\013condition_4"
      "\030\006 \002(\005\022\022\n\ngoal_count\030\007 \002(\005\022/\n\007rewards\030\010 "
      "\003(\0132\036.b2.protocol.commondata.Reward\"\250\001\n\014"
      "mdRewardInfo\022\n\n\002id\030\001 \002(\005\0227\n\013reward_type\030"
      "\002 \002(\0162\".b2.protocol.commondata.RewardTyp"
      "e\022\021\n\treward_id\030\003 \002(\003\022@\n\020reward_push_type"
      "\030\004 \002(\0162&.b2.protocol.commondata.RewardPu"
      "shType\"\314\001\n\022mdDailyMatchReward\022:\n\nmatch_t"
      "ype\030\001 \002(\0162&.b2.protocol.commondata.Match"
      "Info.TYPE\022\025\n\rrequire_count\030\002 \002(\005\022\023\n\013rewa"
      "rd_gold\030\003 \002(\005\022\031\n\021reward_bladepoint\030\004 \002(\005"
      "\022\022\n\nreward_gem\030\005 \002(\005\022\037\n\027reward_item_temp"
      "late_id\030\006 \002(\005\"\200\001\n\024mdMatchRankingReward\022\r"
      "\n\005grade\030\001 \002(\005\022\023\n\013ranking_min\030\002 \002(\005\022\023\n\013ra"
      "nking_max\030\003 \002(\005\022/\n\007rewards\030\004 \003(\0132\036.b2.pr"
      "otocol.commondata.Reward\"\310\003\n\013mdStageInfo"
      "\022\020\n\010stage_id\030\001 \002(\005\022;\n\ndifficulty\030\002 \002(\0162\'"
      ".b2.protocol.commondata.StageDifficulty\022"
      "\030\n\020difficulty_scale\030\003 \002(\005\022\016\n\006map_id\030\004 \002("
      "\005\022\035\n\025clear_time_grade_high\030\005 \002(\005\022\037\n\027clea"
      "r_time_grade_medium\030\006 \002(\005\022\027\n\017recommend_p"
      "ower\030\007 \002(\005\022\030\n\020recommend_attack\030\010 \002(\005\022\031\n\021"
      "recommend_defense\030\t \002(\005\022\032\n\022gold_cost_exp"
      "_buff\030\n \002(\005\022\033\n\023gold_cost_gold_buff\030\013 \002(\005"
      "\022!\n\031gold_cost_auto_skill_buff\030\014 \002(\005\022\034\n\024g"
      "old_cost_boost_buff\030\r \002(\005\0228\n\013aether_type"
      "\030\016 \002(\0162#.b2.protocol.commondata.Aether.T"
      "YPE\"\206\004\n\020mdCounterDungeon\022\022\n\ndungeon_id\030\001"
      " \002(\005\022C\n\014dungeon_type\030\002 \002(\0162-.b2.protocol"
      ".masterdata.mdCounterDungeon.TYPE\022G\n\ndif"
      "ficulty\030\003 \002(\01623.b2.protocol.masterdata.m"
      "dCounterDungeon.DIFFICULTY\022\030\n\020difficulty"
      "_level\030\004 \002(\005\022\030\n\020difficulty_scale\030\005 \002(\005\022\027"
      "\n\017recommend_power\030\006 \002(\005\022\030\n\020recommend_att"
      "ack\030\007 \002(\005\022\031\n\021recommend_defense\030\010 \002(\005\022:\n\007"
      "rewards\030\n \003(\0132).b2.protocol.commondata.R"
      "ewardRandomCount\022\025\n\rdrop_gold_min\030\013 \002(\005\022"
      "\025\n\rdrop_gold_max\030\014 \002(\005\"6\n\004TYPE\022\t\n\005ARMOR\020"
      "\001\022\n\n\006WEAPON\020\002\022\r\n\tACCESSORY\020\003\022\010\n\004GOLD\020\004\","
      "\n\nDIFFICULTY\022\010\n\004EASY\020\001\022\n\n\006NORMAL\020\002\022\010\n\004HA"
      "RD\020\003\"\337\001\n\026mdCounterDungeonPeriod\022C\n\014dunge"
      "on_type\030\001 \002(\0162-.b2.protocol.masterdata.m"
      "dCounterDungeon.TYPE\0226\n\013day_of_week\030\002 \002("
      "\0162!.b2.protocol.commondata.DayOfWeek\022\022\n\n"
      "begin_hour\030\003 \002(\005\022\021\n\tbegin_min\030\004 \002(\005\022\020\n\010e"
      "nd_hour\030\005 \002(\005\022\017\n\007end_min\030\006 \002(\005\"s\n\032mdCoun"
      "terDungeonWeekReward\022\r\n\005index\030\001 \002(\005\022\025\n\rr"
      "equire_count\030\002 \002(\005\022/\n\007rewards\030\003 \003(\0132\036.b2"
      ".protocol.commondata.Reward\"\243\002\n\rmdMissio"
      "nInfo\022\022\n\nmission_id\030\001 \002(\005\022E\n\014mission_typ"
      "e\030\002 \002(\0162/.b2.protocol.commondata.Mission"
      "Info.MissionType\022\022\n\nevent_type\030\003 \002(\005\022\022\n\n"
      "condition1\030\004 \002(\005\022\022\n\ncondition2\030\005 \002(\005\022\022\n\n"
      "condition3\030\006 \002(\005\022\022\n\ncondition4\030\007 \002(\005\022\022\n\n"
      "goal_count\030\010 \002(\005\022\026\n\016complete_point\030\t \002(\005"
      "\022\021\n\treward_id\030\n \002(\005\022\024\n\014reward_count\030\013 \002("
      "\005\"\340\001\n\023mdSerialMissionInfo\022\022\n\nmission_id\030"
      "\001 \002(\005\022\024\n\014mission_step\030\002 \002(\005\022\022\n\nevent_typ"
      "e\030\003 \002(\005\022\022\n\ncondition1\030\004 \002(\005\022\022\n\ncondition"
      "2\030\005 \002(\005\022\022\n\ncondition3\030\006 \002(\005\022\022\n\ncondition"
      "4\030\007 \002(\005\022\022\n\ngoal_count\030\010 \002(\005\022\021\n\treward_id"
      "\030\t \002(\005\022\024\n\014reward_count\030\n \002(\005\"\272\001\n\032mdMissi"
      "onCompletePointInfo\022E\n\014mission_type\030\001 \002("
      "\0162/.b2.protocol.commondata.MissionInfo.M"
      "issionType\022\r\n\005index\030\002 \002(\005\022\025\n\rrequire_poi"
      "nt\030\003 \002(\005\022/\n\007rewards\030\004 \003(\0132\036.b2.protocol."
      "commondata.Reward\"\262\002\n\rmdWingEnhance\022\r\n\005g"
      "rade\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\035\n\025need_item_t"
      "emplate_id\030\003 \002(\005\022\027\n\017need_item_count\030\004 \002("
      "\005\022\025\n\renhance_point\030\005 \002(\005\022\032\n\022need_enhance"
      "_point\030\006 \002(\005\022\021\n\tgold_cost\030\007 \002(\005\022\024\n\014optio"
      "n_type1\030\010 \002(\005\022\025\n\roption_value1\030\t \002(\002\022\024\n\014"
      "option_type2\030\n \002(\005\022\025\n\roption_value2\030\013 \002("
      "\002\022\024\n\014option_type3\030\014 \002(\005\022\025\n\roption_value3"
      "\030\r \002(\002\"\226\002\n\rmdWingUpgrade\022\r\n\005grade\030\001 \002(\005\022"
      "\035\n\025need_item_template_id\030\002 \002(\005\022\027\n\017need_i"
      "tem_count\030\003 \002(\005\022\014\n\004rate\030\004 \002(\005\022\021\n\tgold_co"
      "st\030\005 \002(\005\022\026\n\016fail_point_max\030\006 \002(\005\022\024\n\014opti"
      "on_type1\030\007 \002(\005\022\025\n\roption_value1\030\010 \002(\002\022\024\n"
      "\014option_type2\030\t \002(\005\022\025\n\roption_value2\030\n \002"
      "(\002\022\024\n\014option_type3\030\013 \002(\005\022\025\n\roption_value"
      "3\030\014 \002(\002\"\263\001\n\021mdWingOptionValue\022\026\n\016charact"
      "er_type\030\001 \002(\005\022\024\n\014option_index\030\002 \002(\005\022\r\n\005l"
      "evel\030\003 \002(\005\022\023\n\013option_type\030\004 \002(\005\022\024\n\014optio"
      "n_value\030\005 \002(\002\022\035\n\025need_item_template_id\030\006"
      " \002(\005\022\027\n\017need_item_count\030\007 \002(\005\"T\n\020mdWingO"
      "ptionOpen\022\026\n\016character_type\030\001 \002(\005\022\024\n\014opt"
      "ion_index\030\002 \002(\005\022\022\n\nneed_grade\030\003 \002(\005\"k\n\024m"
      "dWingOptionMaxLevel\022\026\n\016character_type\030\001 "
      "\002(\005\022\024\n\014option_index\030\002 \002(\005\022\022\n\nwing_grade\030"
      "\003 \002(\005\022\021\n\tmax_level\030\004 \002(\005\"\262\002\n\020mdHeroTower"
      "Floor\022\r\n\005floor\030\001 \002(\005\022\027\n\017recommend_power\030"
      "\002 \002(\005\022\030\n\020recommend_attack\030\003 \002(\005\022\031\n\021recom"
      "mend_defense\030\004 \002(\005\022\030\n\020clear_limit_time\030\005"
      " \002(\005\022\016\n\006map_id\030\006 \002(\005\022\030\n\020difficulty_scale"
      "\030\007 \002(\005\022\025\n\rmonster_level\030\010 \002(\005\0225\n\rfirst_r"
      "ewards\030\t \003(\0132\036.b2.protocol.commondata.Re"
      "ward\022/\n\007rewards\030\n \003(\0132\036.b2.protocol.comm"
      "ondata.Reward\"6\n\013mdRelicInfo\022\020\n\010relic_id"
      "\030\001 \002(\005\022\025\n\ropen_stage_id\030\002 \002(\005\"\237\002\n\020mdReli"
      "cGradeInfo\022\020\n\010relic_id\030\001 \002(\005\022\r\n\005grade\030\002 "
      "\002(\005\022\023\n\013option_id_1\030\003 \002(\005\022\026\n\016option_value"
      "_1\030\004 \002(\005\022\023\n\013option_id_2\030\005 \002(\005\022\026\n\016option_"
      "value_2\030\006 \002(\005\022\023\n\013option_id_3\030\007 \002(\005\022\026\n\016op"
      "tion_value_3\030\010 \002(\005\022\026\n\016promotion_rate\030\t \002"
      "(\005\022\026\n\016promotion_gold\030\n \002(\005\022\034\n\024promotion_"
      "boss_piece\030\013 \002(\005\022\025\n\rboss_piece_id\030\014 \002(\005\""
      "\242\002\n\020mdRelicLevelInfo\022\020\n\010relic_id\030\001 \002(\005\022\025"
      "\n\renhance_level\030\002 \002(\005\022\030\n\020mode_option_id_"
      "1\030\003 \002(\005\022\033\n\023mode_option_value_1\030\004 \002(\005\022\030\n\020"
      "mode_option_id_2\030\005 \002(\005\022\033\n\023mode_option_va"
      "lue_2\030\006 \002(\005\022\030\n\020mode_option_id_3\030\007 \002(\005\022\033\n"
      "\023mode_option_value_3\030\010 \002(\005\022\024\n\014enhance_ra"
      "te\030\t \002(\005\022\021\n\tneed_gold\030\n \002(\005\022\027\n\017need_hero"
      "_piece\030\013 \002(\005\"\220\001\n\031mdGuildBattleResultRewa"
      "rd\022\024\n\014reward_grade\030\001 \002(\005\022\025\n\rreq_count_mi"
      "n\030\002 \002(\005\022\025\n\rreq_count_max\030\003 \002(\005\022/\n\007reward"
      "s\030\004 \003(\0132\036.b2.protocol.commondata.Reward\""
      "\271\001\n\031mdGuildBattleSeasonReward\022\r\n\005order\030\001"
      " \002(\005\022\023\n\013ranking_min\030\002 \002(\005\022\023\n\013ranking_max"
      "\030\003 \002(\005\022\030\n\020ranking_rate_min\030\004 \002(\002\022\030\n\020rank"
      "ing_rate_max\030\005 \002(\002\022/\n\007rewards\030\006 \003(\0132\036.b2"
      ".protocol.commondata.Reward\"\246\001\n\031mdGuildB"
      "attleScheduleInfo\022\014\n\004turn\030\001 \002(\005\022\r\n\005state"
      "\030\002 \002(\005\022\021\n\tstart_day\030\003 \002(\005\022\022\n\nstart_hour\030"
      "\004 \002(\005\022\021\n\tstart_min\030\005 \002(\005\022\017\n\007end_day\030\006 \002("
      "\005\022\020\n\010end_hour\030\007 \002(\005\022\017\n\007end_min\030\010 \002(\005\"\310\001\n"
      "\014mdGuildSkill\022\n\n\002id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005"
      "\022\031\n\021upgrade_cost_gold\030\003 \002(\005\022\037\n\027upgrade_r"
      "eq_guild_level\030\004 \002(\005\022\025\n\rbuy_cost_gold\030\005 "
      "\002(\005\022\030\n\020buff_option_type\030\006 \002(\005\022\031\n\021buff_op"
      "tion_value\030\007 \002(\002\022\025\n\rbuff_time_sec\030\010 \002(\005\""
      ",\n\nmdGuildExp\022\r\n\005level\030\001 \002(\005\022\017\n\007exp_max\030"
      "\002 \002(\005\"I\n\022mdGuildSupportItem\022\030\n\020item_temp"
      "late_id\030\001 \002(\005\022\031\n\021support_max_count\030\002 \002(\005"
      "\"\266\001\n\020mdGuildMercenary\022\n\n\002id\030\001 \002(\005\022\024\n\014mas"
      "tery_type\030\002 \002(\005\022\032\n\022max_armor_override\030\003 "
      "\002(\005\022\022\n\nskill_id_1\030\004 \002(\005\022\022\n\nskill_id_2\030\005 "
      "\002(\005\022\022\n\nskill_id_3\030\006 \002(\005\022\025\n\rmax_use_count"
      "\030\007 \002(\005\022\021\n\tis_usable\030\010 \002(\010\"a\n\025mdGuildMerc"
      "enarySkill\022\020\n\010skill_id\030\001 \002(\005\022\037\n\027require_"
      "mercenary_level\030\002 \002(\005\022\025\n\rcool_time_sec\030\003"
      " \002(\005\"\314\001\n\027mdGuildMercenaryMastery\022\n\n\002id\030\001"
      " \002(\005\022\r\n\005level\030\002 \002(\005\022\017\n\007max_exp\030\003 \002(\005\022\023\n\013"
      "option_id_1\030\n \002(\005\022\026\n\016option_value_1\030\013 \002("
      "\002\022\023\n\013option_id_2\030\014 \002(\005\022\026\n\016option_value_2"
      "\030\r \002(\002\022\023\n\013option_id_3\030\016 \002(\005\022\026\n\016option_va"
      "lue_3\030\017 \002(\002\"\335\001\n\030mdGuildMercenaryDonation"
      "\022T\n\rdonation_type\030\001 \002(\0162=.b2.protocol.ma"
      "sterdata.mdGuildMercenaryDonation.Donati"
      "onType\022\030\n\020item_template_id\030\002 \002(\005\022\027\n\017dona"
      "tion_amount\030\003 \002(\005\022\025\n\rexp_increment\030\004 \002(\005"
      "\"!\n\014DonationType\022\010\n\004GOLD\020\001\022\007\n\003GEM\020\002\"n\n\020m"
      "dStageFixedDrop\022\020\n\010stage_id\030\001 \002(\005\022\013\n\003idx"
      "\030\002 \002(\005\022\023\n\013template_id\030\003 \002(\005\022\013\n\003min\030\004 \002(\005"
      "\022\013\n\003max\030\005 \002(\005\022\014\n\004rate\030\006 \002(\005\"Z\n\017mdShopCas"
      "hBonus\022\n\n\002id\030\001 \002(\005\022\025\n\rincrease_rate\030\002 \002("
      "\005\022\022\n\nstart_time\030\004 \002(\003\022\020\n\010end_time\030\005 \002(\003\""
      "Z\n\017mdShopFundsSale\022\n\n\002id\030\001 \002(\005\022\025\n\rdiscou"
      "nt_rate\030\002 \002(\005\022\022\n\nstart_time\030\004 \002(\003\022\020\n\010end"
      "_time\030\005 \002(\003\"u\n\022mdShopLotteryPrice\022\022\n\ncon"
      "tinuous\030\001 \002(\010\022\020\n\010is_again\030\002 \002(\010\022\013\n\003gem\030\003"
      " \002(\005\022\026\n\016calculated_gem\030\004 \002(\005\022\024\n\014social_p"
      "oint\030\005 \002(\005\"\236\001\n\032mdShopLotteryPossibleGrad"
      "e\022C\n\017draw_price_type\030\001 \002(\0162*.b2.protocol"
      ".commondata.Shop.DrawPriceType\022\025\n\ris_con"
      "tinuous\030\002 \002(\010\022\021\n\tmin_grade\030\003 \002(\005\022\021\n\tmax_"
      "grade\030\004 \002(\005\"A\n\031mdShopLotterySpecialGrade"
      "\022\021\n\tmin_grade\030\001 \002(\005\022\021\n\tmax_grade\030\002 \002(\005\"\212"
      "\001\n\027mdShopLotteryDailyLimit\022C\n\017draw_price"
      "_type\030\001 \002(\0162*.b2.protocol.commondata.Sho"
      "p.DrawPriceType\022\025\n\ris_continuous\030\002 \002(\010\022\023"
      "\n\013limit_count\030\003 \002(\005\"\254\001\n\021mdShopLotterySal"
      "e\022C\n\017draw_price_type\030\001 \002(\0162*.b2.protocol"
      ".commondata.Shop.DrawPriceType\022\025\n\ris_con"
      "tinuous\030\002 \002(\010\022\025\n\rdiscount_rate\030\003 \002(\005\022\022\n\n"
      "start_time\030\005 \002(\003\022\020\n\010end_time\030\006 \002(\003\"\235\010\n\nm"
      "dItemInfo\022\026\n\016md_template_id\030\001 \002(\005\0228\n\013md_"
      "group_id\030\002 \002(\0162#.b2.protocol.commondata."
      "GroupPrefix\022\021\n\tmd_set_id\030\003 \002(\005\0222\n\007md_typ"
      "e\030\004 \002(\0162!.b2.protocol.commondata.Item.TY"
      "PE\022\020\n\010md_grade\030\005 \002(\005\022A\n\021md_inventory_typ"
      "e\030\006 \002(\0162&.b2.protocol.commondata.Invento"
      "ry.TYPE\022@\n\021md_equip_position\030\007 \002(\0162%.b2."
      "protocol.commondata.EquipPosition\022\026\n\016md_"
      "max_levelup\030\010 \002(\005\022\031\n\021md_main_attribute\030\t"
      " \002(\005\022\027\n\017md_level_factor\030\n \002(\002\022\034\n\024md_uniq"
      "ue_option_id1\030\013 \002(\005\022\037\n\027md_unique_option_"
      "value1\030\014 \002(\002\022\034\n\024md_unique_option_id2\030\r \002"
      "(\005\022\037\n\027md_unique_option_value2\030\016 \002(\002\022\034\n\024m"
      "d_unique_option_id3\030\017 \002(\005\022\037\n\027md_unique_o"
      "ption_value3\030\020 \002(\002\022\034\n\024md_unique_option_i"
      "d4\030\021 \002(\005\022\037\n\027md_unique_option_value4\030\022 \002("
      "\002\022\032\n\022md_unique_skill_id\030\023 \002(\005\022\021\n\tseal_sl"
      "ot\030\024 \002(\005\022\026\n\016seal_slot_open\030\025 \002(\005\022\024\n\014md_m"
      "ax_grade\030\026 \002(\005\022\036\n\026md_random_option_count"
      "\030\027 \002(\005\022!\n\031md_next_grade_template_id\030\030 \002("
      "\005\022\024\n\014md_buy_price\030\031 \002(\005\022\025\n\rmd_sell_price"
      "\030\032 \002(\005\022\024\n\014is_stackable\030\033 \002(\010\022\023\n\013is_salea"
      "ble\030\034 \002(\010\022\024\n\014is_equipable\030\035 \002(\010\022\026\n\016is_le"
      "velupable\030\036 \002(\010\022\026\n\016is_enhanceable\030\037 \002(\010\022"
      "\025\n\ris_upgradable\030  \002(\010\022\025\n\ris_composable\030"
      "! \002(\010\022\026\n\016is_surpassable\030\" \002(\010\022\023\n\013is_seal"
      "able\030# \002(\010\"\343\007\n\rmdCostumeInfo\022\026\n\016md_templ"
      "ate_id\030\001 \002(\005\0228\n\013md_group_id\030\002 \002(\0162#.b2.p"
      "rotocol.commondata.GroupPrefix\022\021\n\tmd_set"
      "_id\030\003 \002(\005\0225\n\007md_type\030\004 \002(\0162$.b2.protocol"
      ".commondata.Costume.TYPE\022\020\n\010md_grade\030\005 \002"
      "(\005\022A\n\021md_inventory_type\030\006 \002(\0162&.b2.proto"
      "col.commondata.Inventory.TYPE\022@\n\021md_equi"
      "p_position\030\007 \002(\0162%.b2.protocol.commondat"
      "a.EquipPosition\022\026\n\016md_max_levelup\030\010 \002(\005\022"
      "\031\n\021md_main_attribute\030\t \002(\005\022\027\n\017md_level_f"
      "actor\030\n \002(\002\022\034\n\024md_unique_option_id1\030\013 \002("
      "\005\022\037\n\027md_unique_option_value1\030\014 \002(\002\022\034\n\024md"
      "_unique_option_id2\030\r \002(\005\022\037\n\027md_unique_op"
      "tion_value2\030\016 \002(\002\022\034\n\024md_unique_option_id"
      "3\030\017 \002(\005\022\037\n\027md_unique_option_value3\030\020 \002(\002"
      "\022\034\n\024md_unique_option_id4\030\021 \002(\005\022\037\n\027md_uni"
      "que_option_value4\030\022 \002(\002\022\032\n\022md_unique_ski"
      "ll_id\030\023 \002(\005\022\024\n\014md_max_grade\030\024 \002(\005\022\036\n\026md_"
      "random_option_count\030\025 \002(\005\022!\n\031md_next_gra"
      "de_template_id\030\026 \002(\005\022\024\n\014md_buy_price\030\027 \002"
      "(\005\022\025\n\rmd_sell_price\030\030 \002(\005\022\024\n\014is_stackabl"
      "e\030\031 \002(\010\022\023\n\013is_saleable\030\032 \002(\010\022\024\n\014is_equip"
      "able\030\033 \002(\010\022\026\n\016is_levelupable\030\034 \002(\010\022\026\n\016is"
      "_enhanceable\030\035 \002(\010\022\025\n\ris_upgradable\030\036 \002("
      "\010\022\025\n\ris_composable\030\037 \002(\010\022\026\n\016is_surpassab"
      "le\030  \002(\010\"\316\004\n\rmdShopProduct\022\n\n\002id\030\001 \002(\005\0228"
      "\n\tshop_type\030\002 \002(\0162%.b2.protocol.commonda"
      "ta.Shop.ShopType\022\022\n\nshop_order\030\003 \002(\005\022>\n\014"
      "product_type\030\004 \002(\0162(.b2.protocol.commond"
      "ata.Shop.ProductType\022\025\n\rproduct_order\030\005 "
      "\002(\005\022\022\n\nproduct_id\030\006 \002(\005\022\025\n\rproduct_count"
      "\030\007 \002(\005\022D\n\022bonus_product_type\030\010 \002(\0162(.b2."
      "protocol.commondata.Shop.ProductType\022\030\n\020"
      "bonus_product_id\030\t \002(\005\022\033\n\023bonus_product_"
      "count\030\n \002(\005\022\036\n\026calculated_bonus_count\030\013 "
      "\002(\005\022A\n\016buy_price_type\030\014 \002(\0162).b2.protoco"
      "l.commondata.Shop.BuyPriceType\022\r\n\005price\030"
      "\r \002(\005\022\030\n\020calculated_price\030\016 \002(\005\022\?\n\014restr"
      "ic_type\030\017 \002(\0162).b2.protocol.commondata.S"
      "hop.RestrictType\022\027\n\017buy_limit_count\030\020 \002("
      "\005\"\244\001\n\rmdShopPackage\022\n\n\002id\030\001 \002(\005\022\020\n\010categ"
      "ory\030\002 \002(\005\022\020\n\010tab_type\030\003 \002(\005\022\014\n\004name\030\004 \002("
      "\t\022\022\n\npay_period\030\005 \002(\005\022\036\n\026period_bonus_re"
      "ward_id\030\006 \002(\005\022!\n\031period_bonus_reward_cou"
      "nt\030\007 \002(\005\"o\n\024mdShopPackageProduct\022\022\n\npack"
      "age_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\0224\n\007product\030\003"
      " \002(\0132#.b2.protocol.commondata.ShopProduc"
      "t\"\246\001\n\023mdShopMileageReward\022>\n\014mileage_typ"
      "e\030\001 \002(\0162(.b2.protocol.commondata.Shop.Mi"
      "leageType\022\r\n\005index\030\002 \002(\005\022\017\n\007mileage\030\003 \002("
      "\005\022/\n\007rewards\030\004 \003(\0132\036.b2.protocol.commond"
      "ata.Reward\"k\n\017mdMarketProduct\022\027\n\017shop_pr"
      "oduct_id\030\001 \002(\005\022\031\n\021market_product_id\030\002 \002("
      "\t\022\025\n\rcurrency_code\030\003 \002(\t\022\r\n\005price\030\014 \002(\002\""
      "\223\001\n\025mdDailyAttendanceInfo\022D\n\017attendance_"
      "type\030\001 \002(\0162+.b2.protocol.commondata.Dail"
      "yAttendanceType\022\013\n\003day\030\002 \002(\005\022\021\n\treward_i"
      "d\030\003 \002(\005\022\024\n\014reward_count\030\004 \002(\005\"\360\002\n\nmdRaid"
      "Info\022\021\n\traid_type\030\001 \002(\005\022\014\n\004step\030\002 \002(\005\022\030\n"
      "\020difficulty_scale\030\003 \002(\005\022\027\n\017recommend_pow"
      "er\030\004 \002(\005\022\030\n\020recommend_attack\030\005 \002(\005\022\031\n\021re"
      "commend_defense\030\006 \002(\005\022\021\n\treward_id\030\007 \002(\005"
      "\022\030\n\020reward_min_count\030\010 \002(\005\022\030\n\020reward_max"
      "_count\030\t \002(\005\022\026\n\016main_reward_id\030\n \002(\005\022\035\n\025"
      "main_reward_min_count\030\013 \002(\005\022\035\n\025main_rewa"
      "rd_max_count\030\014 \002(\005\022\035\n\025reward_item_min_gr"
      "ade\030\024 \002(\005\022\035\n\025reward_item_max_grade\030\025 \002(\005"
      "\"\266\001\n\rmdMonsterInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004name\030\002"
      " \002(\t\022\016\n\006symbol\030\003 \002(\t\022\r\n\005grade\030\004 \002(\t\022\014\n\004t"
      "ype\030\005 \002(\t\022\014\n\004desc\030\006 \002(\t\022\020\n\010hp_scale\030\007 \002("
      "\005\022\"\n\032attack_defense_level_scale\030\010 \002(\005\022\032\n"
      "\022max_armor_override\030\t \002(\005\"\326\001\n\020mdGeneralL"
      "ottery\022\n\n\002id\030\001 \002(\005\0223\n\005grade\030\002 \002(\0162$.b2.p"
      "rotocol.commondata.LotteryGrade\022B\n\016chara"
      "cter_type\030\003 \002(\0162*.b2.protocol.commondata"
      ".Item.CharacterType\022=\n\016equip_category\030\004 "
      "\002(\0162%.b2.protocol.commondata.EquipCatego"
      "ry\"\270\001\n\023mdFixedGradeLottery\022\n\n\002id\030\001 \002(\005\022B"
      "\n\016character_type\030\002 \002(\0162*.b2.protocol.com"
      "mondata.Item.CharacterType\022=\n\016equip_cate"
      "gory\030\003 \002(\0162%.b2.protocol.commondata.Equi"
      "pCategory\022\022\n\nitem_grade\030\004 \002(\005\"\234\002\n\030mdPref"
      "ixSelectiveLottery\022\n\n\002id\030\001 \002(\005\022B\n\016charac"
      "ter_type\030\002 \002(\0162*.b2.protocol.commondata."
      "Item.CharacterType\0225\n\010group_id\030\003 \002(\0162#.b"
      "2.protocol.commondata.GroupPrefix\022=\n\016equ"
      "ip_category\030\004 \002(\0162%.b2.protocol.commonda"
      "ta.EquipCategory\022\022\n\nitem_grade\030\005 \002(\005\022\025\n\r"
      "surpass_level\030\006 \002(\005\022\017\n\007quality\030\007 \002(\005\"\267\001\n"
      "\022mdSelectiveLottery\022\n\n\002id\030\001 \002(\005\022B\n\016chara"
      "cter_type\030\002 \002(\0162*.b2.protocol.commondata"
      ".Item.CharacterType\022=\n\016equip_category\030\003 "
      "\002(\0162%.b2.protocol.commondata.EquipCatego"
      "ry\022\022\n\nitem_grade\030\004 \002(\005\"4\n\025mdAdditionalMa"
      "tchCost\022\r\n\005count\030\001 \002(\005\022\014\n\004cost\030\002 \002(\005\"\256\001\n"
      "\023mdDuelRewardBoxInfo\0223\n\tduel_mode\030\001 \002(\0162"
      " .b2.protocol.commondata.DuelMode\0225\n\005gra"
      "de\030\002 \002(\0162&.b2.protocol.commondata.Reward"
      "BoxGrade\022\021\n\twin_count\030\003 \002(\005\022\030\n\020reward_gr"
      "oup_ids\030\n \003(\005\"\201\001\n\027mdRandomRewardGroupInf"
      "o\022\020\n\010group_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\021\n\tre"
      "ward_id\030\003 \002(\005\022\014\n\004rate\030\004 \002(\005\022\021\n\tmin_count"
      "\030\005 \002(\005\022\021\n\tmax_count\030\006 \002(\005\"\205\001\n\032mdAssaultV"
      "ictoryRewardInfo\022>\n\014match_result\030\001 \002(\0162("
      ".b2.protocol.commondata.MatchResult.TYPE"
      "\022\021\n\treward_id\030\002 \002(\005\022\024\n\014reward_count\030\003 \002("
      "\005\"_\n\026mdAssaultMvpRewardInfo\022\021\n\treward_id"
      "\030\001 \002(\005\022\030\n\020reward_min_count\030\002 \002(\005\022\030\n\020rewa"
      "rd_max_count\030\003 \002(\005\"\225\001\n\022mdCollectionRewar"
      "d\022G\n\023collection_category\030\001 \002(\0162*.b2.prot"
      "ocol.commondata.CollectionCategory\022\r\n\005gr"
      "ade\030\002 \002(\005\022\021\n\treward_id\030\003 \002(\005\022\024\n\014reward_c"
      "ount\030\004 \002(\005\"\305\001\n\tmdItemSet\022\016\n\006set_id\030\001 \002(\005"
      "\022\014\n\004name\030\002 \002(\t\022\032\n\022set_option_id_set2\030\003 \002"
      "(\005\022\026\n\016set_value_set2\030\004 \002(\002\022\032\n\022set_option"
      "_id_set3\030\005 \002(\005\022\026\n\016set_value_set3\030\006 \002(\002\022\032"
      "\n\022set_option_id_set4\030\007 \002(\005\022\026\n\016set_value_"
      "set4\030\010 \002(\002\"\215\001\n\022mdSelectItemOption\022\021\n\topt"
      "ion_id\030\001 \002(\005\022\r\n\005grade\030\002 \002(\005\022\026\n\016equip_pos"
      "ition\030\003 \002(\005\022\014\n\004prob\030\004 \002(\002\022\025\n\rdecimal_poi"
      "nt\030\005 \002(\005\022\013\n\003min\030\006 \002(\002\022\013\n\003max\030\007 \002(\002\"x\n\026md"
      "SelectItemSealOption\022\021\n\toption_id\030\001 \002(\005\022"
      "\014\n\004slot\030\002 \002(\005\022\014\n\004prob\030\003 \002(\002\022\025\n\rdecimal_p"
      "oint\030\004 \002(\005\022\013\n\003min\030\005 \002(\002\022\013\n\003max\030\006 \002(\002\"\223\002\n"
      "\021mdEventAttendance\022\020\n\010event_id\030\001 \002(\005\022\r\n\005"
      "title\030\002 \002(\t\022\035\n\025total_attendance_days\030\003 \002"
      "(\005\022\022\n\nstart_time\030\004 \002(\003\022\020\n\010end_time\030\005 \002(\003"
      "\022\017\n\007explain\030\006 \002(\t\022\021\n\tevent_url\030\007 \002(\t\022G\n\n"
      "bonus_type\030\010 \002(\01623.b2.protocol.masterdat"
      "a.mdEventAttendance.BonusType\"+\n\tBonusTy"
      "pe\022\010\n\004NONE\020\000\022\024\n\020PERIODIC_PACKAGE\020\001\"a\n\027md"
      "EventAttendanceReward\022\020\n\010event_id\030\001 \002(\005\022"
      "\013\n\003day\030\002 \002(\005\022\021\n\treward_id\030\003 \002(\005\022\024\n\014rewar"
      "d_count\030\004 \002(\005\"o\n\025mdDailyPlayTimeReward\022\024"
      "\n\014reward_index\030\001 \002(\005\022\027\n\017play_time_inmin\030"
      "\002 \002(\005\022\021\n\treward_id\030\003 \002(\005\022\024\n\014reward_count"
      "\030\004 \002(\005\"\212\002\n\016mdTutorialInfo\022\023\n\013tutorial_id"
      "\030\001 \002(\005\022\030\n\020prev_tutorial_id\030\002 \002(\005\022\027\n\017char"
      "acter_level\030\003 \002(\005\022\023\n\013act_cleared\030\004 \002(\005\022\014"
      "\n\004cash\030\005 \002(\005\022\014\n\004gold\030\006 \002(\005\022\022\n\nreward_id1"
      "\030\007 \002(\005\022\025\n\rreward_count1\030\010 \002(\005\022\022\n\nreward_"
      "id2\030\t \002(\005\022\025\n\rreward_count2\030\n \002(\005\022\022\n\nrewa"
      "rd_id3\030\013 \002(\005\022\025\n\rreward_count3\030\014 \002(\005\"\205\001\n\022"
      "mdAetherOptionInfo\022\021\n\toption_id\030\001 \002(\005\022\024\n"
      "\014option_group\030\002 \002(\005\022\r\n\005grade\030\003 \002(\005\022\025\n\rde"
      "fault_value\030\004 \002(\002\022 \n\030increase_value_per_"
      "level\030\005 \002(\002\"6\n\020mdAetherSlotInfo\022\017\n\007slot_"
      "id\030\001 \002(\005\022\021\n\toption_id\030\002 \002(\005\"\232\001\n\023mdAether"
      "EnhanceInfo\022\025\n\renhance_level\030\001 \002(\005\022\r\n\005gr"
      "ade\030\002 \002(\005\022\031\n\021aether_piece_cost\030\003 \002(\005\022\024\n\014"
      "enhance_rate\030\004 \002(\005\022\030\n\020dismantle_amount\030\005"
      " \002(\005\022\022\n\nsell_price\030\006 \002(\005\"u\n\031mdAetherEnha"
      "nceOptionInfo\022\025\n\renhance_level\030\001 \002(\005\022\014\n\004"
      "tier\030\002 \002(\005\022\031\n\021state_main_option\030\003 \002(\005\022\030\n"
      "\020state_sub_option\030\004 \002(\005\"\247\001\n\025mdAetherSetO"
      "ptionInfo\022\014\n\004type\030\001 \002(\005\022\014\n\004tier\030\002 \002(\005\022\025\n"
      "\rset_option_id\030\003 \002(\005\022\027\n\017min_apply_count\030"
      "\004 \002(\005\022\024\n\014trigger_rate\030\005 \002(\005\022\027\n\017cooldown_"
      "second\030\006 \002(\005\022\023\n\013damage_rate\030\007 \002(\005\"\270\001\n\020md"
      "DuelModeReward\0223\n\tduel_mode\030\001 \002(\0162 .b2.p"
      "rotocol.commondata.DuelMode\022>\n\014match_res"
      "ult\030\002 \002(\0162(.b2.protocol.commondata.Match"
      "Result.TYPE\022/\n\007rewards\030\003 \003(\0132\036.b2.protoc"
      "ol.commondata.Reward\"9\n\tmdRaidExp\022\021\n\trai"
      "d_type\030\001 \002(\005\022\014\n\004step\030\002 \002(\005\022\013\n\003exp\030\003 \002(\005\""
      "\213\003\n\023mdUnitySkillMission\022C\n\023main_characte"
      "r_type\030\001 \002(\0162&.b2.protocol.commondata.Ch"
      "aracter.TYPE\022D\n\024unity_character_type\030\002 \002"
      "(\0162&.b2.protocol.commondata.Character.TY"
      "PE\022\014\n\004step\030\003 \002(\005\022\r\n\005index\030\004 \002(\005\022\?\n\nevent"
      "_type\030\005 \002(\0162+.b2.protocol.commondata.Uni"
      "tySkillEventType\022\022\n\ncondition1\030\006 \002(\005\022\022\n\n"
      "condition2\030\007 \002(\005\022\022\n\ncondition3\030\010 \002(\005\022\022\n\n"
      "condition4\030\t \002(\005\022\022\n\ngoal_count\030\n \002(\005\022\021\n\t"
      "reward_id\030\013 \002(\005\022\024\n\014reward_count\030\014 \002(\005\"\345\001"
      "\n\022mdUnitySkillOption\022C\n\023main_character_t"
      "ype\030\001 \002(\0162&.b2.protocol.commondata.Chara"
      "cter.TYPE\022D\n\024unity_character_type\030\002 \002(\0162"
      "&.b2.protocol.commondata.Character.TYPE\022"
      "\014\n\004step\030\003 \002(\005\022\021\n\toption_id\030\004 \002(\005\022\024\n\014opti"
      "on_value\030\005 \002(\001\022\r\n\005power\030\006 \002(\001\"\223\002\n\031mdUnit"
      "ySkillAwakenMission\022>\n\016character_type\030\001 "
      "\002(\0162&.b2.protocol.commondata.Character.T"
      "YPE\022\022\n\nmission_id\030\002 \002(\005\022\025\n\rreq_item_id_1"
      "\030\003 \002(\005\022\030\n\020req_item_count_1\030\004 \002(\005\022\025\n\rreq_"
      "item_id_2\030\005 \002(\005\022\030\n\020req_item_count_2\030\006 \002("
      "\005\022\020\n\010req_gold\030\007 \002(\005\022\024\n\014success_rate\030\010 \002("
      "\005\022\030\n\020success_rate_add\030\t \002(\005\"M\n\014mdRestRew"
      "ard\022\n\n\002id\030\001 \002(\005\022\021\n\treward_id\030\002 \002(\005\022\036\n\026re"
      "ward_count_per_point\030\003 \002(\002\"\244\002\n\013mdEventIn"
      "fo\022\020\n\010event_id\030\001 \002(\005\022=\n\016event_category\030\002"
      " \002(\0162%.b2.protocol.commondata.EventCateg"
      "ory\022\026\n\016event_tab_name\030\003 \002(\t\022\r\n\005title\030\004 \002"
      "(\t\022\022\n\nstart_time\030\005 \002(\003\022\020\n\010end_time\030\006 \002(\003"
      "\022\017\n\007explain\030\007 \002(\t\022\022\n\nbanner_url\030\010 \002(\t\022\021\n"
      "\tlink_text\030\t \002(\t\022\020\n\010link_url\030\n \002(\t\022\021\n\tta"
      "b_order\030\013 \002(\005\022\032\n\022event_sub_category\030\014 \002("
      "\005\"\242\001\n\014mdPointEvent\022\020\n\010event_id\030\001 \002(\005\022\022\n\n"
      "event_type\030\002 \002(\005\022\r\n\005point\030\003 \002(\005\022\r\n\005index"
      "\030\004 \002(\005\022\022\n\ncondition1\030\005 \002(\005\022\022\n\ncondition2"
      "\030\006 \002(\005\022\022\n\ncondition3\030\007 \002(\005\022\022\n\ncondition4"
      "\030\010 \002(\005\"\241\001\n\022mdPointEventReward\022\020\n\010event_i"
      "d\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\021\n\treward_id\030\003 \002("
      "\005\022\024\n\014reward_count\030\004 \002(\005\022\022\n\nneed_point\030\005 "
      "\002(\005\022\024\n\014tab_group_id\030\006 \002(\005\022\027\n\017buy_limit_c"
      "ount\030\007 \002(\005\"\320\001\n\030mdGemPurchaseEventReward\022"
      "\020\n\010event_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\022\n\ngoal"
      "_count\030\003 \002(\005\022\022\n\nreward_id1\030\004 \002(\005\022\025\n\rrewa"
      "rd_count1\030\005 \002(\005\022\022\n\nreward_id2\030\006 \002(\005\022\025\n\rr"
      "eward_count2\030\007 \002(\005\022\022\n\nreward_id3\030\010 \002(\005\022\025"
      "\n\rreward_count3\030\t \002(\005\"i\n\016mdLevelUpEvent\022"
      "\020\n\010event_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\r\n\005leve"
      "l\030\003 \002(\005\022\021\n\treward_id\030\004 \002(\005\022\024\n\014reward_cou"
      "nt\030\005 \002(\005\"\343\001\n\016mdHotTimeEvent\022\020\n\010event_id\030"
      "\001 \002(\005\022\023\n\013day_of_week\030\002 \002(\005\022\r\n\005index\030\003 \002("
      "\005\022:\n\tbuff_type\030\004 \002(\0162\'.b2.protocol.commo"
      "ndata.HotTimeBuffType\022\022\n\nbegin_hour\030\005 \002("
      "\005\022\021\n\tbegin_min\030\006 \002(\005\022\020\n\010end_hour\030\007 \002(\005\022\017"
      "\n\007end_min\030\010 \002(\005\022\025\n\rincrease_rate\030\t \002(\005\"\371"
      "\001\n\024mdSeasonMissionEvent\022\020\n\010event_id\030\001 \002("
      "\005\022\013\n\003day\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\022\022\n\nevent_t"
      "ype\030\004 \002(\005\022\022\n\ncondition1\030\005 \002(\005\022\022\n\nconditi"
      "on2\030\006 \002(\005\022\022\n\ncondition3\030\007 \002(\005\022\022\n\nconditi"
      "on4\030\010 \002(\005\022\021\n\tgoalCount\030\t \002(\005\022\021\n\treward_i"
      "d\030\n \002(\005\022\024\n\014reward_count\030\013 \002(\005\022\023\n\013tutoria"
      "l_id\030\014 \002(\005\"l\n\021mdStageClearEvent\022\020\n\010event"
      "_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\r\n\005stage\030\003 \002(\005\022"
      "\021\n\treward_id\030\004 \002(\005\022\024\n\014reward_count\030\005 \002(\005"
      "\"\272\001\n\031mdKakaoFriendInviteReward\022J\n\022invite"
      "_reward_type\030\001 \002(\0162..b2.protocol.commond"
      "ata.FriendInviteRewardType\022\024\n\014reward_ind"
      "ex\030\002 \002(\005\022\022\n\ngoal_count\030\003 \002(\005\022\021\n\treward_i"
      "d\030\004 \002(\005\022\024\n\014reward_count\030\005 \002(\005\"`\n\020mdHotTi"
      "meProduct\022\021\n\tbuff_type\030\001 \002(\005\022\023\n\013period_h"
      "our\030\002 \002(\005\022\r\n\005price\030\003 \002(\005\022\025\n\rincrease_rat"
      "e\030\004 \002(\005\"\247\001\n\022mdMagicShopProduct\022\n\n\002id\030\001 \002"
      "(\005\022\035\n\025magic_shop_group_type\030\002 \002(\005\022\024\n\014pro"
      "duct_type\030\003 \002(\005\022\026\n\016product_detail\030\004 \002(\005\022"
      "\025\n\rproduct_count\030\005 \002(\005\022\022\n\nprice_type\030\006 \002"
      "(\005\022\r\n\005price\030\007 \002(\005\"A\n\026mdMagicShopRenewalC"
      "ost\022\025\n\rrenewal_count\030\001 \002(\005\022\020\n\010gem_cost\030\002"
      " \002(\005\"\357\001\n\030mdDuelModeSettleSchedule\0227\n\tmod"
      "e_type\030\001 \002(\0162$.b2.protocol.commondata.Co"
      "ntentsMode\022G\n\024ranking_settle_state\030\002 \002(\016"
      "2).b2.protocol.commondata.ContentsModeSt"
      "ate\022.\n\003day\030\003 \002(\0162!.b2.protocol.commondat"
      "a.DayOfWeek\022\020\n\010end_hour\030\004 \002(\005\022\017\n\007end_min"
      "\030\005 \002(\005\"\242\001\n\024mdShopLevelUpPackage\022\022\n\npacka"
      "ge_id\030\001 \002(\005\022>\n\016character_type\030\002 \002(\0162&.b2"
      ".protocol.commondata.Character.TYPE\022\r\n\005l"
      "evel\030\003 \002(\005\022\021\n\treward_id\030\004 \002(\005\022\024\n\014reward_"
      "count\030\005 \002(\005\"\227\002\n\027mdShopReachLevelPackage\022"
      "\022\n\npackage_id\030\001 \002(\005\022>\n\016character_type\030\002 "
      "\002(\0162&.b2.protocol.commondata.Character.T"
      "YPE\022\023\n\013reach_level\030\003 \002(\005\022\023\n\013limit_level\030"
      "\004 \002(\005\022\025\n\rbuy_reward_id\030\005 \002(\005\022\030\n\020buy_rewa"
      "rd_count\030\006 \002(\005\022\032\n\022complete_reward_id\030\007 \002"
      "(\005\022\035\n\025complete_reward_count\030\010 \002(\005\022\022\n\nexp"
      "ire_day\030\t \002(\005\"T\n\032mdShopFlatRatePackageBo"
      "nus\022\r\n\005index\030\001 \002(\005\022\021\n\treward_id\030\002 \002(\005\022\024\n"
      "\014reward_count\030\003 \002(\005\"I\n\020mdShopPackageTab\022"
      "\020\n\010tab_type\030\001 \002(\005\022\022\n\nsort_order\030\002 \002(\005\022\017\n"
      "\007is_open\030\003 \002(\010\"$\n\010mdWebUrl\022\013\n\003key\030\001 \002(\t\022"
      "\013\n\003url\030\002 \002(\t\"\204\001\n\021mdTenLotteryEvent\022\020\n\010ev"
      "ent_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\032\n\022goal_lott"
      "ery_count\030\003 \002(\005\0222\n\007rewards\030\004 \003(\0132!.b2.pr"
      "otocol.commondata.RawReward\"\200\001\n\017mdSpendG"
      "emEvent\022\020\n\010event_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005"
      "\022\030\n\020goal_spend_count\030\003 \002(\005\0222\n\007rewards\030\004 "
      "\003(\0132!.b2.protocol.commondata.RawReward\"\210"
      "\001\n\030mdTenLotterySavingsEvent\022\020\n\010event_id\030"
      "\001 \002(\005\022\022\n\ngain_point\030\002 \002(\005\022\022\n\nneed_point\030"
      "\003 \002(\005\0222\n\007rewards\030\004 \003(\0132!.b2.protocol.com"
      "mondata.RawReward\"]\n\022mdDiceEventMission\022"
      "\020\n\010event_id\030\001 \002(\005\022\022\n\nevent_type\030\002 \002(\005\022\022\n"
      "\ngoal_count\030\003 \002(\005\022\r\n\005point\030\004 \002(\005\"\265\001\n\017mdD"
      "iceEventCell\022\020\n\010event_id\030\001 \002(\005\022\023\n\013cell_n"
      "umber\030\002 \002(\005\022<\n\tcell_type\030\003 \002(\0162).b2.prot"
      "ocol.commondata.DiceEventCellType\022\021\n\trew"
      "ard_id\030\004 \002(\005\022\024\n\014reward_count\030\005 \002(\005\022\024\n\014ef"
      "fect_value\030\006 \002(\005\"d\n\027mdDiceEventFinishRew"
      "ard\022\020\n\010event_id\030\001 \002(\005\022\016\n\006number\030\002 \002(\005\022\021\n"
      "\treward_id\030\003 \002(\005\022\024\n\014reward_count\030\004 \002(\005\"V"
      "\n\023mdDiceEventBuyPoint\022\020\n\010event_id\030\001 \002(\005\022"
      "\021\n\tbuy_count\030\002 \002(\005\022\013\n\003gem\030\003 \002(\005\022\r\n\005point"
      "\030\004 \002(\005\"\312\001\n\022mdDiceEventMileage\022\020\n\010event_i"
      "d\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\022\n\ndice_count\030\003 \002"
      "(\005\022\022\n\nreward_id1\030\007 \002(\005\022\025\n\rreward_count1\030"
      "\010 \002(\005\022\022\n\nreward_id2\030\t \002(\005\022\025\n\rreward_coun"
      "t2\030\n \002(\005\022\022\n\nreward_id3\030\013 \002(\005\022\025\n\rreward_c"
      "ount3\030\014 \002(\005\"\263\003\n\023mdDonationEventInfo\022\030\n\020d"
      "onation_open_id\030\001 \002(\005\022\r\n\005title\030\002 \002(\t\022\023\n\013"
      "description\030\003 \002(\t\022\022\n\nbanner_url\030\004 \002(\t\022\021\n"
      "\tlink_text\030\005 \002(\t\022\020\n\010link_url\030\006 \002(\t\022\022\n\nst"
      "art_time\030\007 \002(\003\022\020\n\010end_time\030\010 \002(\003\022\023\n\013expi"
      "re_time\030\t \002(\003\022\034\n\024donation_template_id\030\013 "
      "\002(\005\022\021\n\tcost_type\030\014 \002(\005\022\014\n\004cost\030\r \002(\005\022\022\n\n"
      "extra_cost\030\016 \002(\005\022\025\n\rcut_off_point\030\017 \002(\005\022"
      "\024\n\014obtain_point\030\020 \002(\005\022\023\n\013bundle_cost\030\021 \002"
      "(\005\022\031\n\021extra_bundle_cost\030\022 \002(\005\022\033\n\023bundle_"
      "obtain_point\030\023 \002(\005\022\035\n\025serial_donation_co"
      "unt\030\024 \002(\005\"\234\002\n mdDonationPointRankingRewa"
      "rdInfo\022\023\n\013donation_id\030\001 \002(\005\022\014\n\004rank\030\002 \002("
      "\005\022\022\n\nreward_id1\030\003 \002(\005\022\025\n\rreward_count1\030\004"
      " \002(\005\022\022\n\nreward_id2\030\005 \002(\005\022\025\n\rreward_count"
      "2\030\006 \002(\005\022\022\n\nreward_id3\030\007 \002(\005\022\025\n\rreward_co"
      "unt3\030\010 \002(\005\022\022\n\nreward_id4\030\t \002(\005\022\025\n\rreward"
      "_count4\030\n \002(\005\022\022\n\nreward_id5\030\013 \002(\005\022\025\n\rrew"
      "ard_count5\030\014 \002(\005\"q\n\037mdDonationBundleFixe"
      "dRewardInfo\022\023\n\013donation_id\030\001 \002(\005\022\021\n\trewa"
      "rd_id\030\002 \002(\005\022\022\n\nmin_amount\030\003 \002(\005\022\022\n\nmax_a"
      "mount\030\004 \002(\005\"\322\001\n\035mdDonationPointStepRewar"
      "dInfo\022\023\n\013donation_id\030\001 \002(\005\022\014\n\004step\030\002 \002(\005"
      "\022\r\n\005point\030\003 \002(\005\022\022\n\nreward_id1\030\004 \002(\005\022\025\n\rr"
      "eward_count1\030\005 \002(\005\022\022\n\nreward_id2\030\006 \002(\005\022\025"
      "\n\rreward_count2\030\007 \002(\005\022\022\n\nreward_id3\030\010 \002("
      "\005\022\025\n\rreward_count3\030\t \002(\005\"\221\001\n\013mdFairyInfo"
      "\0225\n\nfairy_type\030\001 \002(\0162!.b2.protocol.commo"
      "ndata.FairyType\022\021\n\toption_id\030\002 \002(\005\022\023\n\013bl"
      "ess_level\030\003 \002(\005\022\024\n\014option_value\030\004 \002(\002\022\r\n"
      "\005level\030\005 \002(\005\":\n\022mdFairyLevelupCost\022\r\n\005le"
      "vel\030\001 \002(\005\022\025\n\rmaterial_cost\030\002 \002(\005\"Z\n\017mdFa"
      "iryOpenInfo\0225\n\nfairy_type\030\001 \002(\0162!.b2.pro"
      "tocol.commondata.FairyType\022\020\n\010stage_id\030\002"
      " \002(\005\"\324\001\n\013mdTotemInfo\022\023\n\013template_id\030\001 \002("
      "\005\022\020\n\010group_id\030\002 \002(\005\022\020\n\010bonus_id\030\003 \002(\005\022\r\n"
      "\005grade\030\004 \002(\005\022\022\n\nsell_price\030\005 \002(\005\022\022\n\nequi"
      "p_slot\030\006 \002(\005\022\033\n\023refine_limit_count1\030\007 \002("
      "\005\022\033\n\023refine_limit_count2\030\010 \002(\005\022\033\n\023refine"
      "_limit_count3\030\t \002(\005\"\254\001\n\023mdSelectTotemOpt"
      "ion\022\021\n\toption_id\030\001 \002(\005\022\r\n\005grade\030\002 \002(\005\022\026\n"
      "\016min_main_value\030\003 \002(\002\022\026\n\016max_main_value\030"
      "\004 \002(\002\022\025\n\rmin_sub_value\030\005 \002(\002\022\025\n\rmax_sub_"
      "value\030\006 \002(\002\022\025\n\rdecimal_point\030\007 \002(\005\"l\n\021md"
      "TotemRefineInfo\022\r\n\005grade\030\001 \002(\005\022\025\n\rrefine"
      "_chance\030\002 \002(\005\022\021\n\tgold_cost\030\003 \002(\005\022\036\n\026dime"
      "nsional_piece_cost\030\004 \002(\005\"\317\001\n\025mdTotemRefi"
      "neRateInfo\022\r\n\005grade\030\001 \002(\005\022\021\n\tbase_rate\030\002"
      " \002(\005\022\032\n\022gold_decrease_rate\030\003 \002(\005\022\032\n\022gold"
      "_increase_rate\030\004 \002(\005\022\033\n\023piece_decrease_r"
      "ate\030\005 \002(\005\022\033\n\023piece_increase_rate\030\006 \002(\005\022\020"
      "\n\010min_rate\030\007 \002(\005\022\020\n\010max_rate\030\010 \002(\005\"K\n\024md"
      "TotemDismantleInfo\022\024\n\014refine_level\030\001 \002(\005"
      "\022\r\n\005grade\030\002 \002(\005\022\016\n\006amount\030\003 \002(\005\"\366\001\n\026mdTo"
      "temBonusOptionInfo\022\020\n\010bonus_id\030\001 \002(\005\022\022\n\n"
      "condition1\030\002 \002(\005\022\030\n\020bonus_option_id1\030\003 \002"
      "(\005\022\024\n\014bonus_value1\030\004 \002(\002\022\022\n\ncondition2\030\005"
      " \002(\005\022\030\n\020bonus_option_id2\030\006 \002(\005\022\024\n\014bonus_"
      "value2\030\007 \002(\002\022\022\n\ncondition3\030\010 \002(\005\022\030\n\020bonu"
      "s_option_id3\030\t \002(\005\022\024\n\014bonus_value3\030\n \002(\002"
      "\"\207\002\n\017mdDimensionInfo\022\030\n\020difficulty_level"
      "\030\001 \002(\005\022\030\n\020difficulty_scale\030\002 \002(\005\022\033\n\023fixe"
      "d_drop_item_id1\030\003 \002(\005\022\031\n\021fixed_drop_coun"
      "t1\030\004 \002(\005\022\034\n\024drop_totem_count_min\030\005 \002(\005\022\034"
      "\n\024drop_totem_count_max\030\006 \002(\005\022\027\n\017recommen"
      "d_power\030\007 \002(\005\022\030\n\020recommend_attack\030\010 \002(\005\022"
      "\031\n\021recommend_defense\030\t \002(\005\"\215\001\n\024mdTotemDr"
      "opGradeRate\022\030\n\020difficulty_level\030\001 \002(\005\022\016\n"
      "\006normal\030\002 \002(\005\022\r\n\005magic\030\003 \002(\005\022\014\n\004rare\030\004 \002"
      "(\005\022\014\n\004hero\030\005 \002(\005\022\016\n\006legend\030\006 \002(\005\022\020\n\010arti"
      "fact\030\007 \002(\005\"P\n\024mdTotemDropGroupRate\022\030\n\020di"
      "fficulty_level\030\001 \002(\005\022\020\n\010group_id\030\002 \002(\005\022\014"
      "\n\004rate\030\003 \002(\005\"\204\001\n\025mdDimensionWeekReward\022\r"
      "\n\005index\030\001 \002(\005\022\023\n\013ranking_min\030\002 \002(\005\022\023\n\013ra"
      "nking_max\030\003 \002(\005\0222\n\007rewards\030\004 \003(\0132!.b2.pr"
      "otocol.commondata.RawReward\"J\n\030mdTotemPr"
      "efixLotteryInfo\022\n\n\002id\030\001 \002(\005\022\023\n\013base_pref"
      "ix\030\002 \002(\005\022\r\n\005grade\030\003 \002(\005\"\202\001\n\024mdExchangeSy"
      "stemInfo\022\n\n\002id\030\001 \002(\005\022\023\n\013template_id\030\002 \002("
      "\005\022\025\n\rrequest_count\030\003 \002(\005\022\034\n\024exchange_tem"
      "plate_id\030\004 \002(\005\022\024\n\014result_count\030\005 \002(\005\"_\n\024"
      "mdExchangeSystemCost\022\023\n\013exchange_id\030\001 \002("
      "\005\022\r\n\005count\030\002 \002(\005\022\021\n\tgold_cost\030\003 \002(\005\022\020\n\010g"
      "em_cost\030\004 \002(\005\"\255\001\n\026mdQualityTransRateInfo"
      "\022\023\n\013template_id\030\001 \002(\005\022=\n\016equip_category\030"
      "\002 \002(\0162%.b2.protocol.commondata.EquipCate"
      "gory\022\017\n\007quality\030\003 \002(\005\022\022\n\ntrans_rate\030\004 \002("
      "\005\022\032\n\022trans_cond_quality\030\005 \002(\005\"\227\001\n\034mdLott"
      "eryShopRateQualityInfo\022=\n\016equip_category"
      "\030\001 \002(\0162%.b2.protocol.commondata.EquipCat"
      "egory\022\017\n\007quality\030\002 \002(\005\022\014\n\004rate\030\003 \002(\005\022\031\n\021"
      "quality_inc_level\030\004 \002(\001\"\333\010\n\rmdFactoryInf"
      "o\022\n\n\002id\030\001 \002(\005\022\024\n\014factory_type\030\002 \002(\005\022\023\n\013f"
      "actory_tab\030\003 \002(\005\022\020\n\010group_id\030\004 \002(\005\022\022\n\ngr"
      "oup_sort\030\005 \002(\005\022\021\n\titem_sort\030\006 \002(\005\022\020\n\010lim"
      "it_id\030\007 \002(\005\022\026\n\016character_type\030\010 \002(\005\022\021\n\tg"
      "old_cost\030\t \002(\005\022\020\n\010gem_cost\030\n \002(\005\022\031\n\021dark"
      "_crystal_cost\030\013 \002(\005\022\024\n\014success_rate\030\014 \002("
      "\005\022\031\n\021huge_success_rate\030\r \002(\005\022\021\n\tfail_rat"
      "e\030\016 \002(\005\022)\n!huge_success_add_item_templat"
      "e_id\030\017 \002(\005\022#\n\033huge_success_add_item_coun"
      "t\030\020 \002(\005\022!\n\031fail_add_item_template_id\030\021 \002"
      "(\005\022\033\n\023fail_add_item_count\030\022 \002(\005\022\037\n\027resul"
      "t_item_template_id\030\023 \002(\005\022\031\n\021result_item_"
      "count\030\024 \002(\005\022!\n\031main_material_template_id"
      "\030\025 \002(\005\022$\n\034main_material_cond_reinforce\030\026"
      " \002(\005\022 \n\030main_material_cond_level\030\027 \002(\005\022\033"
      "\n\023main_material_count\030\030 \002(\005\022&\n\036main_mate"
      "rial_fail_refund_rate\030\031 \002(\005\022\035\n\025material_"
      "template_id1\030\032 \002(\005\022\027\n\017material_count1\030\033 "
      "\002(\005\022\"\n\032material_fail_refund_rate1\030\034 \002(\005\022"
      "\035\n\025material_template_id2\030\035 \002(\005\022\027\n\017materi"
      "al_count2\030\036 \002(\005\022\"\n\032material_fail_refund_"
      "rate2\030\037 \002(\005\022\035\n\025material_template_id3\030  \002"
      "(\005\022\027\n\017material_count3\030! \002(\005\022\"\n\032material_"
      "fail_refund_rate3\030\" \002(\005\022\035\n\025material_temp"
      "late_id4\030# \002(\005\022\027\n\017material_count4\030$ \002(\005\022"
      "\"\n\032material_fail_refund_rate4\030% \002(\005\022@\n\014v"
      "isible_type\030& \002(\0162*.b2.protocol.commonda"
      "ta.FactoryVisibleType\"\214\003\n\032mdFactoryMater"
      "ialTransInfo\022\022\n\nfactory_id\030\001 \002(\005\022\'\n\037tran"
      "s_main_material_template_id\030\002 \002(\005\022!\n\031tra"
      "ns_main_material_count\030\003 \002(\005\022#\n\033trans_ma"
      "terial_template_id1\030\004 \002(\005\022\035\n\025trans_mater"
      "ial_count1\030\005 \002(\005\022#\n\033trans_material_templ"
      "ate_id2\030\006 \002(\005\022\035\n\025trans_material_count2\030\007"
      " \002(\005\022#\n\033trans_material_template_id3\030\010 \002("
      "\005\022\035\n\025trans_material_count3\030\t \002(\005\022#\n\033tran"
      "s_material_template_id4\030\n \002(\005\022\035\n\025trans_m"
      "aterial_count4\030\013 \002(\005\"\272\001\n\022mdFactoryLimitI"
      "nfo\022\n\n\002id\030\001 \002(\005\022<\n\nlimit_type\030\002 \002(\0162(.b2"
      ".protocol.commondata.FactoryLimitType\022\023\n"
      "\013limit_count\030\003 \002(\005\022E\n\017limit_time_type\030\004 "
      "\002(\0162,.b2.protocol.commondata.FactoryLimi"
      "tTimeType\"\264\001\n\rmdSealBoxInfo\022\034\n\024seal_box_"
      "template_id\030\001 \002(\005\022\024\n\014reward_slot1\030\002 \002(\005\022"
      "\024\n\014reward_slot2\030\003 \002(\005\022\024\n\014reward_slot3\030\004 "
      "\002(\005\022\024\n\014reward_slot4\030\005 \002(\005\022\024\n\014reward_slot"
      "5\030\006 \002(\005\022\027\n\017is_rate_visible\030\007 \002(\010\"w\n\023mdSe"
      "alBoxRewardInfo\022\032\n\022seal_box_reward_id\030\001 "
      "\002(\005\022\027\n\017min_fixed_count\030\002 \002(\005\022\027\n\017max_fixe"
      "d_count\030\003 \002(\005\022\022\n\nis_recycle\030\004 \002(\010\"\215\004\n\027md"
      "SealBoxRewardRateInfo\022\032\n\022seal_box_reward"
      "_id\030\001 \002(\005\0227\n\013reward_type\030\002 \002(\0162\".b2.prot"
      "ocol.commondata.RewardType\022\023\n\013template_i"
      "d\030\003 \002(\005\022\022\n\nmin_amount\030\004 \002(\005\022\022\n\nmax_amoun"
      "t\030\005 \002(\005\022\r\n\005grade\030\006 \002(\005\0225\n\010group_id\030\007 \002(\016"
      "2#.b2.protocol.commondata.GroupPrefix\022=\n"
      "\016equip_category\030\010 \002(\0162%.b2.protocol.comm"
      "ondata.EquipCategory\022=\n\016equip_position\030\t"
      " \002(\0162%.b2.protocol.commondata.EquipPosit"
      "ion\022\017\n\007quality\030\n \002(\005\022\025\n\renhance_level\030\013 "
      "\002(\005\022\025\n\rsurpass_count\030\014 \002(\005\022\023\n\013reward_rat"
      "e\030\r \002(\005\022\027\n\017is_fixed_reward\030\016 \002(\010\022\031\n\021fixe"
      "d_reward_rate\030\017 \002(\005\022\024\n\014effect_grade\030\020 \002("
      "\005B\025\n\023com.a2q.b2.protocol"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 29504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MasterData.proto", &protobuf_RegisterTypes);
  mdSkillInfo::default_instance_ = new mdSkillInfo();
  mdSkillOption::default_instance_ = new mdSkillOption();
  mdSkillLevelUp::default_instance_ = new mdSkillLevelUp();
  mdItemLevelupExpFactor::default_instance_ = new mdItemLevelupExpFactor();
  mdItemOptionAddValue::default_instance_ = new mdItemOptionAddValue();
  mdItemLevelupCost::default_instance_ = new mdItemLevelupCost();
  mdItemLevelupFactor::default_instance_ = new mdItemLevelupFactor();
  mdItemEnhanceCost::default_instance_ = new mdItemEnhanceCost();
  mdCostumeEnhanceCost::default_instance_ = new mdCostumeEnhanceCost();
  mdItemSealCost::default_instance_ = new mdItemSealCost();
  mdItemEnhanceEffectInfo::default_instance_ = new mdItemEnhanceEffectInfo();
  mdItemSurpassLevel::default_instance_ = new mdItemSurpassLevel();
  mdItemDismantleInfo::default_instance_ = new mdItemDismantleInfo();
  mdResurrectionInfo::default_instance_ = new mdResurrectionInfo();
  mdTeamBattleFormationInfo::default_instance_ = new mdTeamBattleFormationInfo();
  mdRankInfo::default_instance_ = new mdRankInfo();
  mdMainQuestInfo::default_instance_ = new mdMainQuestInfo();
  mdDailyQuestInfo::default_instance_ = new mdDailyQuestInfo();
  mdRewardInfo::default_instance_ = new mdRewardInfo();
  mdDailyMatchReward::default_instance_ = new mdDailyMatchReward();
  mdMatchRankingReward::default_instance_ = new mdMatchRankingReward();
  mdStageInfo::default_instance_ = new mdStageInfo();
  mdCounterDungeon::default_instance_ = new mdCounterDungeon();
  mdCounterDungeonPeriod::default_instance_ = new mdCounterDungeonPeriod();
  mdCounterDungeonWeekReward::default_instance_ = new mdCounterDungeonWeekReward();
  mdMissionInfo::default_instance_ = new mdMissionInfo();
  mdSerialMissionInfo::default_instance_ = new mdSerialMissionInfo();
  mdMissionCompletePointInfo::default_instance_ = new mdMissionCompletePointInfo();
  mdWingEnhance::default_instance_ = new mdWingEnhance();
  mdWingUpgrade::default_instance_ = new mdWingUpgrade();
  mdWingOptionValue::default_instance_ = new mdWingOptionValue();
  mdWingOptionOpen::default_instance_ = new mdWingOptionOpen();
  mdWingOptionMaxLevel::default_instance_ = new mdWingOptionMaxLevel();
  mdHeroTowerFloor::default_instance_ = new mdHeroTowerFloor();
  mdRelicInfo::default_instance_ = new mdRelicInfo();
  mdRelicGradeInfo::default_instance_ = new mdRelicGradeInfo();
  mdRelicLevelInfo::default_instance_ = new mdRelicLevelInfo();
  mdGuildBattleResultReward::default_instance_ = new mdGuildBattleResultReward();
  mdGuildBattleSeasonReward::default_instance_ = new mdGuildBattleSeasonReward();
  mdGuildBattleScheduleInfo::default_instance_ = new mdGuildBattleScheduleInfo();
  mdGuildSkill::default_instance_ = new mdGuildSkill();
  mdGuildExp::default_instance_ = new mdGuildExp();
  mdGuildSupportItem::default_instance_ = new mdGuildSupportItem();
  mdGuildMercenary::default_instance_ = new mdGuildMercenary();
  mdGuildMercenarySkill::default_instance_ = new mdGuildMercenarySkill();
  mdGuildMercenaryMastery::default_instance_ = new mdGuildMercenaryMastery();
  mdGuildMercenaryDonation::default_instance_ = new mdGuildMercenaryDonation();
  mdStageFixedDrop::default_instance_ = new mdStageFixedDrop();
  mdShopCashBonus::default_instance_ = new mdShopCashBonus();
  mdShopFundsSale::default_instance_ = new mdShopFundsSale();
  mdShopLotteryPrice::default_instance_ = new mdShopLotteryPrice();
  mdShopLotteryPossibleGrade::default_instance_ = new mdShopLotteryPossibleGrade();
  mdShopLotterySpecialGrade::default_instance_ = new mdShopLotterySpecialGrade();
  mdShopLotteryDailyLimit::default_instance_ = new mdShopLotteryDailyLimit();
  mdShopLotterySale::default_instance_ = new mdShopLotterySale();
  mdItemInfo::default_instance_ = new mdItemInfo();
  mdCostumeInfo::default_instance_ = new mdCostumeInfo();
  mdShopProduct::default_instance_ = new mdShopProduct();
  mdShopPackage::default_instance_ = new mdShopPackage();
  mdShopPackageProduct::default_instance_ = new mdShopPackageProduct();
  mdShopMileageReward::default_instance_ = new mdShopMileageReward();
  mdMarketProduct::default_instance_ = new mdMarketProduct();
  mdDailyAttendanceInfo::default_instance_ = new mdDailyAttendanceInfo();
  mdRaidInfo::default_instance_ = new mdRaidInfo();
  mdMonsterInfo::default_instance_ = new mdMonsterInfo();
  mdGeneralLottery::default_instance_ = new mdGeneralLottery();
  mdFixedGradeLottery::default_instance_ = new mdFixedGradeLottery();
  mdPrefixSelectiveLottery::default_instance_ = new mdPrefixSelectiveLottery();
  mdSelectiveLottery::default_instance_ = new mdSelectiveLottery();
  mdAdditionalMatchCost::default_instance_ = new mdAdditionalMatchCost();
  mdDuelRewardBoxInfo::default_instance_ = new mdDuelRewardBoxInfo();
  mdRandomRewardGroupInfo::default_instance_ = new mdRandomRewardGroupInfo();
  mdAssaultVictoryRewardInfo::default_instance_ = new mdAssaultVictoryRewardInfo();
  mdAssaultMvpRewardInfo::default_instance_ = new mdAssaultMvpRewardInfo();
  mdCollectionReward::default_instance_ = new mdCollectionReward();
  mdItemSet::default_instance_ = new mdItemSet();
  mdSelectItemOption::default_instance_ = new mdSelectItemOption();
  mdSelectItemSealOption::default_instance_ = new mdSelectItemSealOption();
  mdEventAttendance::default_instance_ = new mdEventAttendance();
  mdEventAttendanceReward::default_instance_ = new mdEventAttendanceReward();
  mdDailyPlayTimeReward::default_instance_ = new mdDailyPlayTimeReward();
  mdTutorialInfo::default_instance_ = new mdTutorialInfo();
  mdAetherOptionInfo::default_instance_ = new mdAetherOptionInfo();
  mdAetherSlotInfo::default_instance_ = new mdAetherSlotInfo();
  mdAetherEnhanceInfo::default_instance_ = new mdAetherEnhanceInfo();
  mdAetherEnhanceOptionInfo::default_instance_ = new mdAetherEnhanceOptionInfo();
  mdAetherSetOptionInfo::default_instance_ = new mdAetherSetOptionInfo();
  mdDuelModeReward::default_instance_ = new mdDuelModeReward();
  mdRaidExp::default_instance_ = new mdRaidExp();
  mdUnitySkillMission::default_instance_ = new mdUnitySkillMission();
  mdUnitySkillOption::default_instance_ = new mdUnitySkillOption();
  mdUnitySkillAwakenMission::default_instance_ = new mdUnitySkillAwakenMission();
  mdRestReward::default_instance_ = new mdRestReward();
  mdEventInfo::default_instance_ = new mdEventInfo();
  mdPointEvent::default_instance_ = new mdPointEvent();
  mdPointEventReward::default_instance_ = new mdPointEventReward();
  mdGemPurchaseEventReward::default_instance_ = new mdGemPurchaseEventReward();
  mdLevelUpEvent::default_instance_ = new mdLevelUpEvent();
  mdHotTimeEvent::default_instance_ = new mdHotTimeEvent();
  mdSeasonMissionEvent::default_instance_ = new mdSeasonMissionEvent();
  mdStageClearEvent::default_instance_ = new mdStageClearEvent();
  mdKakaoFriendInviteReward::default_instance_ = new mdKakaoFriendInviteReward();
  mdHotTimeProduct::default_instance_ = new mdHotTimeProduct();
  mdMagicShopProduct::default_instance_ = new mdMagicShopProduct();
  mdMagicShopRenewalCost::default_instance_ = new mdMagicShopRenewalCost();
  mdDuelModeSettleSchedule::default_instance_ = new mdDuelModeSettleSchedule();
  mdShopLevelUpPackage::default_instance_ = new mdShopLevelUpPackage();
  mdShopReachLevelPackage::default_instance_ = new mdShopReachLevelPackage();
  mdShopFlatRatePackageBonus::default_instance_ = new mdShopFlatRatePackageBonus();
  mdShopPackageTab::default_instance_ = new mdShopPackageTab();
  mdWebUrl::default_instance_ = new mdWebUrl();
  mdTenLotteryEvent::default_instance_ = new mdTenLotteryEvent();
  mdSpendGemEvent::default_instance_ = new mdSpendGemEvent();
  mdTenLotterySavingsEvent::default_instance_ = new mdTenLotterySavingsEvent();
  mdDiceEventMission::default_instance_ = new mdDiceEventMission();
  mdDiceEventCell::default_instance_ = new mdDiceEventCell();
  mdDiceEventFinishReward::default_instance_ = new mdDiceEventFinishReward();
  mdDiceEventBuyPoint::default_instance_ = new mdDiceEventBuyPoint();
  mdDiceEventMileage::default_instance_ = new mdDiceEventMileage();
  mdDonationEventInfo::default_instance_ = new mdDonationEventInfo();
  mdDonationPointRankingRewardInfo::default_instance_ = new mdDonationPointRankingRewardInfo();
  mdDonationBundleFixedRewardInfo::default_instance_ = new mdDonationBundleFixedRewardInfo();
  mdDonationPointStepRewardInfo::default_instance_ = new mdDonationPointStepRewardInfo();
  mdFairyInfo::default_instance_ = new mdFairyInfo();
  mdFairyLevelupCost::default_instance_ = new mdFairyLevelupCost();
  mdFairyOpenInfo::default_instance_ = new mdFairyOpenInfo();
  mdTotemInfo::default_instance_ = new mdTotemInfo();
  mdSelectTotemOption::default_instance_ = new mdSelectTotemOption();
  mdTotemRefineInfo::default_instance_ = new mdTotemRefineInfo();
  mdTotemRefineRateInfo::default_instance_ = new mdTotemRefineRateInfo();
  mdTotemDismantleInfo::default_instance_ = new mdTotemDismantleInfo();
  mdTotemBonusOptionInfo::default_instance_ = new mdTotemBonusOptionInfo();
  mdDimensionInfo::default_instance_ = new mdDimensionInfo();
  mdTotemDropGradeRate::default_instance_ = new mdTotemDropGradeRate();
  mdTotemDropGroupRate::default_instance_ = new mdTotemDropGroupRate();
  mdDimensionWeekReward::default_instance_ = new mdDimensionWeekReward();
  mdTotemPrefixLotteryInfo::default_instance_ = new mdTotemPrefixLotteryInfo();
  mdExchangeSystemInfo::default_instance_ = new mdExchangeSystemInfo();
  mdExchangeSystemCost::default_instance_ = new mdExchangeSystemCost();
  mdQualityTransRateInfo::default_instance_ = new mdQualityTransRateInfo();
  mdLotteryShopRateQualityInfo::default_instance_ = new mdLotteryShopRateQualityInfo();
  mdFactoryInfo::default_instance_ = new mdFactoryInfo();
  mdFactoryMaterialTransInfo::default_instance_ = new mdFactoryMaterialTransInfo();
  mdFactoryLimitInfo::default_instance_ = new mdFactoryLimitInfo();
  mdSealBoxInfo::default_instance_ = new mdSealBoxInfo();
  mdSealBoxRewardInfo::default_instance_ = new mdSealBoxRewardInfo();
  mdSealBoxRewardRateInfo::default_instance_ = new mdSealBoxRewardRateInfo();
  mdSkillInfo::default_instance_->InitAsDefaultInstance();
  mdSkillOption::default_instance_->InitAsDefaultInstance();
  mdSkillLevelUp::default_instance_->InitAsDefaultInstance();
  mdItemLevelupExpFactor::default_instance_->InitAsDefaultInstance();
  mdItemOptionAddValue::default_instance_->InitAsDefaultInstance();
  mdItemLevelupCost::default_instance_->InitAsDefaultInstance();
  mdItemLevelupFactor::default_instance_->InitAsDefaultInstance();
  mdItemEnhanceCost::default_instance_->InitAsDefaultInstance();
  mdCostumeEnhanceCost::default_instance_->InitAsDefaultInstance();
  mdItemSealCost::default_instance_->InitAsDefaultInstance();
  mdItemEnhanceEffectInfo::default_instance_->InitAsDefaultInstance();
  mdItemSurpassLevel::default_instance_->InitAsDefaultInstance();
  mdItemDismantleInfo::default_instance_->InitAsDefaultInstance();
  mdResurrectionInfo::default_instance_->InitAsDefaultInstance();
  mdTeamBattleFormationInfo::default_instance_->InitAsDefaultInstance();
  mdRankInfo::default_instance_->InitAsDefaultInstance();
  mdMainQuestInfo::default_instance_->InitAsDefaultInstance();
  mdDailyQuestInfo::default_instance_->InitAsDefaultInstance();
  mdRewardInfo::default_instance_->InitAsDefaultInstance();
  mdDailyMatchReward::default_instance_->InitAsDefaultInstance();
  mdMatchRankingReward::default_instance_->InitAsDefaultInstance();
  mdStageInfo::default_instance_->InitAsDefaultInstance();
  mdCounterDungeon::default_instance_->InitAsDefaultInstance();
  mdCounterDungeonPeriod::default_instance_->InitAsDefaultInstance();
  mdCounterDungeonWeekReward::default_instance_->InitAsDefaultInstance();
  mdMissionInfo::default_instance_->InitAsDefaultInstance();
  mdSerialMissionInfo::default_instance_->InitAsDefaultInstance();
  mdMissionCompletePointInfo::default_instance_->InitAsDefaultInstance();
  mdWingEnhance::default_instance_->InitAsDefaultInstance();
  mdWingUpgrade::default_instance_->InitAsDefaultInstance();
  mdWingOptionValue::default_instance_->InitAsDefaultInstance();
  mdWingOptionOpen::default_instance_->InitAsDefaultInstance();
  mdWingOptionMaxLevel::default_instance_->InitAsDefaultInstance();
  mdHeroTowerFloor::default_instance_->InitAsDefaultInstance();
  mdRelicInfo::default_instance_->InitAsDefaultInstance();
  mdRelicGradeInfo::default_instance_->InitAsDefaultInstance();
  mdRelicLevelInfo::default_instance_->InitAsDefaultInstance();
  mdGuildBattleResultReward::default_instance_->InitAsDefaultInstance();
  mdGuildBattleSeasonReward::default_instance_->InitAsDefaultInstance();
  mdGuildBattleScheduleInfo::default_instance_->InitAsDefaultInstance();
  mdGuildSkill::default_instance_->InitAsDefaultInstance();
  mdGuildExp::default_instance_->InitAsDefaultInstance();
  mdGuildSupportItem::default_instance_->InitAsDefaultInstance();
  mdGuildMercenary::default_instance_->InitAsDefaultInstance();
  mdGuildMercenarySkill::default_instance_->InitAsDefaultInstance();
  mdGuildMercenaryMastery::default_instance_->InitAsDefaultInstance();
  mdGuildMercenaryDonation::default_instance_->InitAsDefaultInstance();
  mdStageFixedDrop::default_instance_->InitAsDefaultInstance();
  mdShopCashBonus::default_instance_->InitAsDefaultInstance();
  mdShopFundsSale::default_instance_->InitAsDefaultInstance();
  mdShopLotteryPrice::default_instance_->InitAsDefaultInstance();
  mdShopLotteryPossibleGrade::default_instance_->InitAsDefaultInstance();
  mdShopLotterySpecialGrade::default_instance_->InitAsDefaultInstance();
  mdShopLotteryDailyLimit::default_instance_->InitAsDefaultInstance();
  mdShopLotterySale::default_instance_->InitAsDefaultInstance();
  mdItemInfo::default_instance_->InitAsDefaultInstance();
  mdCostumeInfo::default_instance_->InitAsDefaultInstance();
  mdShopProduct::default_instance_->InitAsDefaultInstance();
  mdShopPackage::default_instance_->InitAsDefaultInstance();
  mdShopPackageProduct::default_instance_->InitAsDefaultInstance();
  mdShopMileageReward::default_instance_->InitAsDefaultInstance();
  mdMarketProduct::default_instance_->InitAsDefaultInstance();
  mdDailyAttendanceInfo::default_instance_->InitAsDefaultInstance();
  mdRaidInfo::default_instance_->InitAsDefaultInstance();
  mdMonsterInfo::default_instance_->InitAsDefaultInstance();
  mdGeneralLottery::default_instance_->InitAsDefaultInstance();
  mdFixedGradeLottery::default_instance_->InitAsDefaultInstance();
  mdPrefixSelectiveLottery::default_instance_->InitAsDefaultInstance();
  mdSelectiveLottery::default_instance_->InitAsDefaultInstance();
  mdAdditionalMatchCost::default_instance_->InitAsDefaultInstance();
  mdDuelRewardBoxInfo::default_instance_->InitAsDefaultInstance();
  mdRandomRewardGroupInfo::default_instance_->InitAsDefaultInstance();
  mdAssaultVictoryRewardInfo::default_instance_->InitAsDefaultInstance();
  mdAssaultMvpRewardInfo::default_instance_->InitAsDefaultInstance();
  mdCollectionReward::default_instance_->InitAsDefaultInstance();
  mdItemSet::default_instance_->InitAsDefaultInstance();
  mdSelectItemOption::default_instance_->InitAsDefaultInstance();
  mdSelectItemSealOption::default_instance_->InitAsDefaultInstance();
  mdEventAttendance::default_instance_->InitAsDefaultInstance();
  mdEventAttendanceReward::default_instance_->InitAsDefaultInstance();
  mdDailyPlayTimeReward::default_instance_->InitAsDefaultInstance();
  mdTutorialInfo::default_instance_->InitAsDefaultInstance();
  mdAetherOptionInfo::default_instance_->InitAsDefaultInstance();
  mdAetherSlotInfo::default_instance_->InitAsDefaultInstance();
  mdAetherEnhanceInfo::default_instance_->InitAsDefaultInstance();
  mdAetherEnhanceOptionInfo::default_instance_->InitAsDefaultInstance();
  mdAetherSetOptionInfo::default_instance_->InitAsDefaultInstance();
  mdDuelModeReward::default_instance_->InitAsDefaultInstance();
  mdRaidExp::default_instance_->InitAsDefaultInstance();
  mdUnitySkillMission::default_instance_->InitAsDefaultInstance();
  mdUnitySkillOption::default_instance_->InitAsDefaultInstance();
  mdUnitySkillAwakenMission::default_instance_->InitAsDefaultInstance();
  mdRestReward::default_instance_->InitAsDefaultInstance();
  mdEventInfo::default_instance_->InitAsDefaultInstance();
  mdPointEvent::default_instance_->InitAsDefaultInstance();
  mdPointEventReward::default_instance_->InitAsDefaultInstance();
  mdGemPurchaseEventReward::default_instance_->InitAsDefaultInstance();
  mdLevelUpEvent::default_instance_->InitAsDefaultInstance();
  mdHotTimeEvent::default_instance_->InitAsDefaultInstance();
  mdSeasonMissionEvent::default_instance_->InitAsDefaultInstance();
  mdStageClearEvent::default_instance_->InitAsDefaultInstance();
  mdKakaoFriendInviteReward::default_instance_->InitAsDefaultInstance();
  mdHotTimeProduct::default_instance_->InitAsDefaultInstance();
  mdMagicShopProduct::default_instance_->InitAsDefaultInstance();
  mdMagicShopRenewalCost::default_instance_->InitAsDefaultInstance();
  mdDuelModeSettleSchedule::default_instance_->InitAsDefaultInstance();
  mdShopLevelUpPackage::default_instance_->InitAsDefaultInstance();
  mdShopReachLevelPackage::default_instance_->InitAsDefaultInstance();
  mdShopFlatRatePackageBonus::default_instance_->InitAsDefaultInstance();
  mdShopPackageTab::default_instance_->InitAsDefaultInstance();
  mdWebUrl::default_instance_->InitAsDefaultInstance();
  mdTenLotteryEvent::default_instance_->InitAsDefaultInstance();
  mdSpendGemEvent::default_instance_->InitAsDefaultInstance();
  mdTenLotterySavingsEvent::default_instance_->InitAsDefaultInstance();
  mdDiceEventMission::default_instance_->InitAsDefaultInstance();
  mdDiceEventCell::default_instance_->InitAsDefaultInstance();
  mdDiceEventFinishReward::default_instance_->InitAsDefaultInstance();
  mdDiceEventBuyPoint::default_instance_->InitAsDefaultInstance();
  mdDiceEventMileage::default_instance_->InitAsDefaultInstance();
  mdDonationEventInfo::default_instance_->InitAsDefaultInstance();
  mdDonationPointRankingRewardInfo::default_instance_->InitAsDefaultInstance();
  mdDonationBundleFixedRewardInfo::default_instance_->InitAsDefaultInstance();
  mdDonationPointStepRewardInfo::default_instance_->InitAsDefaultInstance();
  mdFairyInfo::default_instance_->InitAsDefaultInstance();
  mdFairyLevelupCost::default_instance_->InitAsDefaultInstance();
  mdFairyOpenInfo::default_instance_->InitAsDefaultInstance();
  mdTotemInfo::default_instance_->InitAsDefaultInstance();
  mdSelectTotemOption::default_instance_->InitAsDefaultInstance();
  mdTotemRefineInfo::default_instance_->InitAsDefaultInstance();
  mdTotemRefineRateInfo::default_instance_->InitAsDefaultInstance();
  mdTotemDismantleInfo::default_instance_->InitAsDefaultInstance();
  mdTotemBonusOptionInfo::default_instance_->InitAsDefaultInstance();
  mdDimensionInfo::default_instance_->InitAsDefaultInstance();
  mdTotemDropGradeRate::default_instance_->InitAsDefaultInstance();
  mdTotemDropGroupRate::default_instance_->InitAsDefaultInstance();
  mdDimensionWeekReward::default_instance_->InitAsDefaultInstance();
  mdTotemPrefixLotteryInfo::default_instance_->InitAsDefaultInstance();
  mdExchangeSystemInfo::default_instance_->InitAsDefaultInstance();
  mdExchangeSystemCost::default_instance_->InitAsDefaultInstance();
  mdQualityTransRateInfo::default_instance_->InitAsDefaultInstance();
  mdLotteryShopRateQualityInfo::default_instance_->InitAsDefaultInstance();
  mdFactoryInfo::default_instance_->InitAsDefaultInstance();
  mdFactoryMaterialTransInfo::default_instance_->InitAsDefaultInstance();
  mdFactoryLimitInfo::default_instance_->InitAsDefaultInstance();
  mdSealBoxInfo::default_instance_->InitAsDefaultInstance();
  mdSealBoxRewardInfo::default_instance_->InitAsDefaultInstance();
  mdSealBoxRewardRateInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MasterData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MasterData_2eproto {
  StaticDescriptorInitializer_MasterData_2eproto() {
    protobuf_AddDesc_MasterData_2eproto();
  }
} static_descriptor_initializer_MasterData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int mdSkillInfo::kSkillIdFieldNumber;
const int mdSkillInfo::kCharacterTypeFieldNumber;
const int mdSkillInfo::kLearnLevelFieldNumber;
const int mdSkillInfo::kMaxSkillLevelFieldNumber;
const int mdSkillInfo::kUsableFieldNumber;
const int mdSkillInfo::kLevelUpCostFactorFieldNumber;
#endif  // !_MSC_VER

mdSkillInfo::mdSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSkillInfo)
}

void mdSkillInfo::InitAsDefaultInstance() {
}

mdSkillInfo::mdSkillInfo(const mdSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSkillInfo)
}

void mdSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  character_type_ = 1;
  learn_level_ = 0;
  max_skill_level_ = 0;
  usable_ = false;
  level_up_cost_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSkillInfo::~mdSkillInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSkillInfo)
  SharedDtor();
}

void mdSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSkillInfo_descriptor_;
}

const mdSkillInfo& mdSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSkillInfo* mdSkillInfo::default_instance_ = NULL;

mdSkillInfo* mdSkillInfo::New() const {
  return new mdSkillInfo;
}

void mdSkillInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSkillInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(learn_level_, level_up_cost_factor_);
    skill_id_ = 0;
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSkillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_learn_level;
        break;
      }

      // required int32 learn_level = 3;
      case 3: {
        if (tag == 24) {
         parse_learn_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learn_level_)));
          set_has_learn_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_skill_level;
        break;
      }

      // required int32 max_skill_level = 4;
      case 4: {
        if (tag == 32) {
         parse_max_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_skill_level_)));
          set_has_max_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_usable;
        break;
      }

      // required bool usable = 5;
      case 5: {
        if (tag == 40) {
         parse_usable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usable_)));
          set_has_usable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_level_up_cost_factor;
        break;
      }

      // required int32 level_up_cost_factor = 6;
      case 6: {
        if (tag == 48) {
         parse_level_up_cost_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_up_cost_factor_)));
          set_has_level_up_cost_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSkillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSkillInfo)
  return false;
#undef DO_
}

void mdSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSkillInfo)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required int32 learn_level = 3;
  if (has_learn_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->learn_level(), output);
  }

  // required int32 max_skill_level = 4;
  if (has_max_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_skill_level(), output);
  }

  // required bool usable = 5;
  if (has_usable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->usable(), output);
  }

  // required int32 level_up_cost_factor = 6;
  if (has_level_up_cost_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level_up_cost_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSkillInfo)
}

::google::protobuf::uint8* mdSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSkillInfo)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required int32 learn_level = 3;
  if (has_learn_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->learn_level(), target);
  }

  // required int32 max_skill_level = 4;
  if (has_max_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_skill_level(), target);
  }

  // required bool usable = 5;
  if (has_usable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->usable(), target);
  }

  // required int32 level_up_cost_factor = 6;
  if (has_level_up_cost_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level_up_cost_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSkillInfo)
  return target;
}

int mdSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 learn_level = 3;
    if (has_learn_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learn_level());
    }

    // required int32 max_skill_level = 4;
    if (has_max_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_skill_level());
    }

    // required bool usable = 5;
    if (has_usable()) {
      total_size += 1 + 1;
    }

    // required int32 level_up_cost_factor = 6;
    if (has_level_up_cost_factor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level_up_cost_factor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSkillInfo::MergeFrom(const mdSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_learn_level()) {
      set_learn_level(from.learn_level());
    }
    if (from.has_max_skill_level()) {
      set_max_skill_level(from.max_skill_level());
    }
    if (from.has_usable()) {
      set_usable(from.usable());
    }
    if (from.has_level_up_cost_factor()) {
      set_level_up_cost_factor(from.level_up_cost_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSkillInfo::CopyFrom(const mdSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdSkillInfo::Swap(mdSkillInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(learn_level_, other->learn_level_);
    std::swap(max_skill_level_, other->max_skill_level_);
    std::swap(usable_, other->usable_);
    std::swap(level_up_cost_factor_, other->level_up_cost_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSkillInfo_descriptor_;
  metadata.reflection = mdSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSkillOption::kSkillIdFieldNumber;
const int mdSkillOption::kSkillLevelFieldNumber;
const int mdSkillOption::kOptionIdFieldNumber;
const int mdSkillOption::kOptionValueFieldNumber;
const int mdSkillOption::kPowerFieldNumber;
#endif  // !_MSC_VER

mdSkillOption::mdSkillOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSkillOption)
}

void mdSkillOption::InitAsDefaultInstance() {
}

mdSkillOption::mdSkillOption(const mdSkillOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSkillOption)
}

void mdSkillOption::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  option_id_ = 0;
  option_value_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSkillOption::~mdSkillOption() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSkillOption)
  SharedDtor();
}

void mdSkillOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSkillOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSkillOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSkillOption_descriptor_;
}

const mdSkillOption& mdSkillOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSkillOption* mdSkillOption::default_instance_ = NULL;

mdSkillOption* mdSkillOption::New() const {
  return new mdSkillOption;
}

void mdSkillOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSkillOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(skill_id_, power_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSkillOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSkillOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required int32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_option_id;
        break;
      }

      // required int32 option_id = 3;
      case 3: {
        if (tag == 24) {
         parse_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_option_value;
        break;
      }

      // required float option_value = 4;
      case 4: {
        if (tag == 37) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_power;
        break;
      }

      // required float power = 5;
      case 5: {
        if (tag == 45) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSkillOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSkillOption)
  return false;
#undef DO_
}

void mdSkillOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSkillOption)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // required int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // required int32 option_id = 3;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->option_id(), output);
  }

  // required float option_value = 4;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->option_value(), output);
  }

  // required float power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSkillOption)
}

::google::protobuf::uint8* mdSkillOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSkillOption)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // required int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // required int32 option_id = 3;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->option_id(), target);
  }

  // required float option_value = 4;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->option_value(), target);
  }

  // required float power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSkillOption)
  return target;
}

int mdSkillOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // required int32 option_id = 3;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required float option_value = 4;
    if (has_option_value()) {
      total_size += 1 + 4;
    }

    // required float power = 5;
    if (has_power()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSkillOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSkillOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSkillOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSkillOption::MergeFrom(const mdSkillOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSkillOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSkillOption::CopyFrom(const mdSkillOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSkillOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdSkillOption::Swap(mdSkillOption* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(option_id_, other->option_id_);
    std::swap(option_value_, other->option_value_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSkillOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSkillOption_descriptor_;
  metadata.reflection = mdSkillOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSkillLevelUp::kSkillIdFieldNumber;
const int mdSkillLevelUp::kSkillLevelFieldNumber;
const int mdSkillLevelUp::kReqSkillPointFieldNumber;
#endif  // !_MSC_VER

mdSkillLevelUp::mdSkillLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSkillLevelUp)
}

void mdSkillLevelUp::InitAsDefaultInstance() {
}

mdSkillLevelUp::mdSkillLevelUp(const mdSkillLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSkillLevelUp)
}

void mdSkillLevelUp::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  req_skill_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSkillLevelUp::~mdSkillLevelUp() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSkillLevelUp)
  SharedDtor();
}

void mdSkillLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSkillLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSkillLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSkillLevelUp_descriptor_;
}

const mdSkillLevelUp& mdSkillLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSkillLevelUp* mdSkillLevelUp::default_instance_ = NULL;

mdSkillLevelUp* mdSkillLevelUp::New() const {
  return new mdSkillLevelUp;
}

void mdSkillLevelUp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSkillLevelUp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, req_skill_point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSkillLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSkillLevelUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required int32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_skill_point;
        break;
      }

      // required int32 req_skill_point = 3;
      case 3: {
        if (tag == 24) {
         parse_req_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_skill_point_)));
          set_has_req_skill_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSkillLevelUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSkillLevelUp)
  return false;
#undef DO_
}

void mdSkillLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSkillLevelUp)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // required int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  // required int32 req_skill_point = 3;
  if (has_req_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->req_skill_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSkillLevelUp)
}

::google::protobuf::uint8* mdSkillLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSkillLevelUp)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // required int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  // required int32 req_skill_point = 3;
  if (has_req_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->req_skill_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSkillLevelUp)
  return target;
}

int mdSkillLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

    // required int32 req_skill_point = 3;
    if (has_req_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_skill_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSkillLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSkillLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSkillLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSkillLevelUp::MergeFrom(const mdSkillLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_req_skill_point()) {
      set_req_skill_point(from.req_skill_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSkillLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSkillLevelUp::CopyFrom(const mdSkillLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSkillLevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdSkillLevelUp::Swap(mdSkillLevelUp* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(req_skill_point_, other->req_skill_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSkillLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSkillLevelUp_descriptor_;
  metadata.reflection = mdSkillLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemLevelupExpFactor::kTypeNameFieldNumber;
const int mdItemLevelupExpFactor::kKeyCodeFieldNumber;
const int mdItemLevelupExpFactor::kFactorFieldNumber;
#endif  // !_MSC_VER

mdItemLevelupExpFactor::mdItemLevelupExpFactor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemLevelupExpFactor)
}

void mdItemLevelupExpFactor::InitAsDefaultInstance() {
}

mdItemLevelupExpFactor::mdItemLevelupExpFactor(const mdItemLevelupExpFactor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemLevelupExpFactor)
}

void mdItemLevelupExpFactor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_code_ = 0;
  factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemLevelupExpFactor::~mdItemLevelupExpFactor() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemLevelupExpFactor)
  SharedDtor();
}

void mdItemLevelupExpFactor::SharedDtor() {
  if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_name_;
  }
  if (this != default_instance_) {
  }
}

void mdItemLevelupExpFactor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemLevelupExpFactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemLevelupExpFactor_descriptor_;
}

const mdItemLevelupExpFactor& mdItemLevelupExpFactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemLevelupExpFactor* mdItemLevelupExpFactor::default_instance_ = NULL;

mdItemLevelupExpFactor* mdItemLevelupExpFactor::New() const {
  return new mdItemLevelupExpFactor;
}

void mdItemLevelupExpFactor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemLevelupExpFactor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(factor_, key_code_);
    if (has_type_name()) {
      if (type_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemLevelupExpFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemLevelupExpFactor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type_name().data(), this->type_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_code;
        break;
      }

      // required int32 key_code = 2;
      case 2: {
        if (tag == 16) {
         parse_key_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_code_)));
          set_has_key_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_factor;
        break;
      }

      // required double factor = 3;
      case 3: {
        if (tag == 25) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemLevelupExpFactor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemLevelupExpFactor)
  return false;
#undef DO_
}

void mdItemLevelupExpFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemLevelupExpFactor)
  // required string type_name = 1;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type_name(), output);
  }

  // required int32 key_code = 2;
  if (has_key_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key_code(), output);
  }

  // required double factor = 3;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemLevelupExpFactor)
}

::google::protobuf::uint8* mdItemLevelupExpFactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemLevelupExpFactor)
  // required string type_name = 1;
  if (has_type_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type_name().data(), this->type_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type_name(), target);
  }

  // required int32 key_code = 2;
  if (has_key_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key_code(), target);
  }

  // required double factor = 3;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemLevelupExpFactor)
  return target;
}

int mdItemLevelupExpFactor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string type_name = 1;
    if (has_type_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type_name());
    }

    // required int32 key_code = 2;
    if (has_key_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_code());
    }

    // required double factor = 3;
    if (has_factor()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemLevelupExpFactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemLevelupExpFactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemLevelupExpFactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemLevelupExpFactor::MergeFrom(const mdItemLevelupExpFactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_name()) {
      set_type_name(from.type_name());
    }
    if (from.has_key_code()) {
      set_key_code(from.key_code());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemLevelupExpFactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemLevelupExpFactor::CopyFrom(const mdItemLevelupExpFactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemLevelupExpFactor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdItemLevelupExpFactor::Swap(mdItemLevelupExpFactor* other) {
  if (other != this) {
    std::swap(type_name_, other->type_name_);
    std::swap(key_code_, other->key_code_);
    std::swap(factor_, other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemLevelupExpFactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemLevelupExpFactor_descriptor_;
  metadata.reflection = mdItemLevelupExpFactor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemOptionAddValue::kOptionIdFieldNumber;
const int mdItemOptionAddValue::kAddValueFieldNumber;
const int mdItemOptionAddValue::kPowerFactorFieldNumber;
#endif  // !_MSC_VER

mdItemOptionAddValue::mdItemOptionAddValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemOptionAddValue)
}

void mdItemOptionAddValue::InitAsDefaultInstance() {
}

mdItemOptionAddValue::mdItemOptionAddValue(const mdItemOptionAddValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemOptionAddValue)
}

void mdItemOptionAddValue::SharedCtor() {
  _cached_size_ = 0;
  option_id_ = 0;
  add_value_ = 0;
  power_factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemOptionAddValue::~mdItemOptionAddValue() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemOptionAddValue)
  SharedDtor();
}

void mdItemOptionAddValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemOptionAddValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemOptionAddValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemOptionAddValue_descriptor_;
}

const mdItemOptionAddValue& mdItemOptionAddValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemOptionAddValue* mdItemOptionAddValue::default_instance_ = NULL;

mdItemOptionAddValue* mdItemOptionAddValue::New() const {
  return new mdItemOptionAddValue;
}

void mdItemOptionAddValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemOptionAddValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(option_id_, power_factor_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemOptionAddValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemOptionAddValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_add_value;
        break;
      }

      // required float add_value = 2;
      case 2: {
        if (tag == 21) {
         parse_add_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &add_value_)));
          set_has_add_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_power_factor;
        break;
      }

      // required float power_factor = 3;
      case 3: {
        if (tag == 29) {
         parse_power_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_factor_)));
          set_has_power_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemOptionAddValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemOptionAddValue)
  return false;
#undef DO_
}

void mdItemOptionAddValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemOptionAddValue)
  // required int32 option_id = 1;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option_id(), output);
  }

  // required float add_value = 2;
  if (has_add_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->add_value(), output);
  }

  // required float power_factor = 3;
  if (has_power_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->power_factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemOptionAddValue)
}

::google::protobuf::uint8* mdItemOptionAddValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemOptionAddValue)
  // required int32 option_id = 1;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option_id(), target);
  }

  // required float add_value = 2;
  if (has_add_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->add_value(), target);
  }

  // required float power_factor = 3;
  if (has_power_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->power_factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemOptionAddValue)
  return target;
}

int mdItemOptionAddValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 option_id = 1;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required float add_value = 2;
    if (has_add_value()) {
      total_size += 1 + 4;
    }

    // required float power_factor = 3;
    if (has_power_factor()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemOptionAddValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemOptionAddValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemOptionAddValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemOptionAddValue::MergeFrom(const mdItemOptionAddValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_add_value()) {
      set_add_value(from.add_value());
    }
    if (from.has_power_factor()) {
      set_power_factor(from.power_factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemOptionAddValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemOptionAddValue::CopyFrom(const mdItemOptionAddValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemOptionAddValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdItemOptionAddValue::Swap(mdItemOptionAddValue* other) {
  if (other != this) {
    std::swap(option_id_, other->option_id_);
    std::swap(add_value_, other->add_value_);
    std::swap(power_factor_, other->power_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemOptionAddValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemOptionAddValue_descriptor_;
  metadata.reflection = mdItemOptionAddValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemLevelupCost::kInventoryTypeFieldNumber;
const int mdItemLevelupCost::kLevelFieldNumber;
const int mdItemLevelupCost::kPriceGrade1FieldNumber;
const int mdItemLevelupCost::kPriceGrade2FieldNumber;
const int mdItemLevelupCost::kPriceGrade3FieldNumber;
const int mdItemLevelupCost::kPriceGrade4FieldNumber;
const int mdItemLevelupCost::kPriceGrade5FieldNumber;
const int mdItemLevelupCost::kPriceGrade6FieldNumber;
const int mdItemLevelupCost::kPriceGrade7FieldNumber;
const int mdItemLevelupCost::kPriceGrade8FieldNumber;
const int mdItemLevelupCost::kPriceGrade9FieldNumber;
const int mdItemLevelupCost::kPriceGrade10FieldNumber;
const int mdItemLevelupCost::kPriceGrade11FieldNumber;
const int mdItemLevelupCost::kPriceGrade12FieldNumber;
#endif  // !_MSC_VER

mdItemLevelupCost::mdItemLevelupCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemLevelupCost)
}

void mdItemLevelupCost::InitAsDefaultInstance() {
}

mdItemLevelupCost::mdItemLevelupCost(const mdItemLevelupCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemLevelupCost)
}

void mdItemLevelupCost::SharedCtor() {
  _cached_size_ = 0;
  inventory_type_ = 2;
  level_ = 0;
  price_grade1_ = 0;
  price_grade2_ = 0;
  price_grade3_ = 0;
  price_grade4_ = 0;
  price_grade5_ = 0;
  price_grade6_ = 0;
  price_grade7_ = 0;
  price_grade8_ = 0;
  price_grade9_ = 0;
  price_grade10_ = 0;
  price_grade11_ = 0;
  price_grade12_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemLevelupCost::~mdItemLevelupCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemLevelupCost)
  SharedDtor();
}

void mdItemLevelupCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemLevelupCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemLevelupCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemLevelupCost_descriptor_;
}

const mdItemLevelupCost& mdItemLevelupCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemLevelupCost* mdItemLevelupCost::default_instance_ = NULL;

mdItemLevelupCost* mdItemLevelupCost::New() const {
  return new mdItemLevelupCost;
}

void mdItemLevelupCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemLevelupCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(level_, price_grade6_);
    inventory_type_ = 2;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(price_grade7_, price_grade12_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemLevelupCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemLevelupCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Inventory_TYPE_IsValid(value)) {
            set_inventory_type(static_cast< ::b2::protocol::commondata::Inventory_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price_grade1;
        break;
      }

      // required int32 price_grade1 = 3;
      case 3: {
        if (tag == 24) {
         parse_price_grade1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade1_)));
          set_has_price_grade1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_price_grade2;
        break;
      }

      // required int32 price_grade2 = 4;
      case 4: {
        if (tag == 32) {
         parse_price_grade2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade2_)));
          set_has_price_grade2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_price_grade3;
        break;
      }

      // required int32 price_grade3 = 5;
      case 5: {
        if (tag == 40) {
         parse_price_grade3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade3_)));
          set_has_price_grade3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_price_grade4;
        break;
      }

      // required int32 price_grade4 = 6;
      case 6: {
        if (tag == 48) {
         parse_price_grade4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade4_)));
          set_has_price_grade4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price_grade5;
        break;
      }

      // required int32 price_grade5 = 7;
      case 7: {
        if (tag == 56) {
         parse_price_grade5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade5_)));
          set_has_price_grade5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_price_grade6;
        break;
      }

      // required int32 price_grade6 = 8;
      case 8: {
        if (tag == 64) {
         parse_price_grade6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade6_)));
          set_has_price_grade6();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_price_grade7;
        break;
      }

      // required int32 price_grade7 = 9;
      case 9: {
        if (tag == 72) {
         parse_price_grade7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade7_)));
          set_has_price_grade7();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_price_grade8;
        break;
      }

      // required int32 price_grade8 = 10;
      case 10: {
        if (tag == 80) {
         parse_price_grade8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade8_)));
          set_has_price_grade8();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_price_grade9;
        break;
      }

      // required int32 price_grade9 = 11;
      case 11: {
        if (tag == 88) {
         parse_price_grade9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade9_)));
          set_has_price_grade9();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_price_grade10;
        break;
      }

      // required int32 price_grade10 = 12;
      case 12: {
        if (tag == 96) {
         parse_price_grade10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade10_)));
          set_has_price_grade10();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_price_grade11;
        break;
      }

      // required int32 price_grade11 = 13;
      case 13: {
        if (tag == 104) {
         parse_price_grade11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade11_)));
          set_has_price_grade11();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_price_grade12;
        break;
      }

      // required int32 price_grade12 = 14;
      case 14: {
        if (tag == 112) {
         parse_price_grade12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_grade12_)));
          set_has_price_grade12();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemLevelupCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemLevelupCost)
  return false;
#undef DO_
}

void mdItemLevelupCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemLevelupCost)
  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
  if (has_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->inventory_type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 price_grade1 = 3;
  if (has_price_grade1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price_grade1(), output);
  }

  // required int32 price_grade2 = 4;
  if (has_price_grade2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->price_grade2(), output);
  }

  // required int32 price_grade3 = 5;
  if (has_price_grade3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price_grade3(), output);
  }

  // required int32 price_grade4 = 6;
  if (has_price_grade4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price_grade4(), output);
  }

  // required int32 price_grade5 = 7;
  if (has_price_grade5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price_grade5(), output);
  }

  // required int32 price_grade6 = 8;
  if (has_price_grade6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->price_grade6(), output);
  }

  // required int32 price_grade7 = 9;
  if (has_price_grade7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->price_grade7(), output);
  }

  // required int32 price_grade8 = 10;
  if (has_price_grade8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->price_grade8(), output);
  }

  // required int32 price_grade9 = 11;
  if (has_price_grade9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->price_grade9(), output);
  }

  // required int32 price_grade10 = 12;
  if (has_price_grade10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->price_grade10(), output);
  }

  // required int32 price_grade11 = 13;
  if (has_price_grade11()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->price_grade11(), output);
  }

  // required int32 price_grade12 = 14;
  if (has_price_grade12()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->price_grade12(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemLevelupCost)
}

::google::protobuf::uint8* mdItemLevelupCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemLevelupCost)
  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
  if (has_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->inventory_type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 price_grade1 = 3;
  if (has_price_grade1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price_grade1(), target);
  }

  // required int32 price_grade2 = 4;
  if (has_price_grade2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->price_grade2(), target);
  }

  // required int32 price_grade3 = 5;
  if (has_price_grade3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price_grade3(), target);
  }

  // required int32 price_grade4 = 6;
  if (has_price_grade4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price_grade4(), target);
  }

  // required int32 price_grade5 = 7;
  if (has_price_grade5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price_grade5(), target);
  }

  // required int32 price_grade6 = 8;
  if (has_price_grade6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->price_grade6(), target);
  }

  // required int32 price_grade7 = 9;
  if (has_price_grade7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->price_grade7(), target);
  }

  // required int32 price_grade8 = 10;
  if (has_price_grade8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->price_grade8(), target);
  }

  // required int32 price_grade9 = 11;
  if (has_price_grade9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->price_grade9(), target);
  }

  // required int32 price_grade10 = 12;
  if (has_price_grade10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->price_grade10(), target);
  }

  // required int32 price_grade11 = 13;
  if (has_price_grade11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->price_grade11(), target);
  }

  // required int32 price_grade12 = 14;
  if (has_price_grade12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->price_grade12(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemLevelupCost)
  return target;
}

int mdItemLevelupCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
    if (has_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inventory_type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 price_grade1 = 3;
    if (has_price_grade1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade1());
    }

    // required int32 price_grade2 = 4;
    if (has_price_grade2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade2());
    }

    // required int32 price_grade3 = 5;
    if (has_price_grade3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade3());
    }

    // required int32 price_grade4 = 6;
    if (has_price_grade4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade4());
    }

    // required int32 price_grade5 = 7;
    if (has_price_grade5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade5());
    }

    // required int32 price_grade6 = 8;
    if (has_price_grade6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade6());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 price_grade7 = 9;
    if (has_price_grade7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade7());
    }

    // required int32 price_grade8 = 10;
    if (has_price_grade8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade8());
    }

    // required int32 price_grade9 = 11;
    if (has_price_grade9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade9());
    }

    // required int32 price_grade10 = 12;
    if (has_price_grade10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade10());
    }

    // required int32 price_grade11 = 13;
    if (has_price_grade11()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade11());
    }

    // required int32 price_grade12 = 14;
    if (has_price_grade12()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_grade12());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemLevelupCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemLevelupCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemLevelupCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemLevelupCost::MergeFrom(const mdItemLevelupCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inventory_type()) {
      set_inventory_type(from.inventory_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_price_grade1()) {
      set_price_grade1(from.price_grade1());
    }
    if (from.has_price_grade2()) {
      set_price_grade2(from.price_grade2());
    }
    if (from.has_price_grade3()) {
      set_price_grade3(from.price_grade3());
    }
    if (from.has_price_grade4()) {
      set_price_grade4(from.price_grade4());
    }
    if (from.has_price_grade5()) {
      set_price_grade5(from.price_grade5());
    }
    if (from.has_price_grade6()) {
      set_price_grade6(from.price_grade6());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_price_grade7()) {
      set_price_grade7(from.price_grade7());
    }
    if (from.has_price_grade8()) {
      set_price_grade8(from.price_grade8());
    }
    if (from.has_price_grade9()) {
      set_price_grade9(from.price_grade9());
    }
    if (from.has_price_grade10()) {
      set_price_grade10(from.price_grade10());
    }
    if (from.has_price_grade11()) {
      set_price_grade11(from.price_grade11());
    }
    if (from.has_price_grade12()) {
      set_price_grade12(from.price_grade12());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemLevelupCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemLevelupCost::CopyFrom(const mdItemLevelupCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemLevelupCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void mdItemLevelupCost::Swap(mdItemLevelupCost* other) {
  if (other != this) {
    std::swap(inventory_type_, other->inventory_type_);
    std::swap(level_, other->level_);
    std::swap(price_grade1_, other->price_grade1_);
    std::swap(price_grade2_, other->price_grade2_);
    std::swap(price_grade3_, other->price_grade3_);
    std::swap(price_grade4_, other->price_grade4_);
    std::swap(price_grade5_, other->price_grade5_);
    std::swap(price_grade6_, other->price_grade6_);
    std::swap(price_grade7_, other->price_grade7_);
    std::swap(price_grade8_, other->price_grade8_);
    std::swap(price_grade9_, other->price_grade9_);
    std::swap(price_grade10_, other->price_grade10_);
    std::swap(price_grade11_, other->price_grade11_);
    std::swap(price_grade12_, other->price_grade12_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemLevelupCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemLevelupCost_descriptor_;
  metadata.reflection = mdItemLevelupCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemLevelupFactor::kLevelFieldNumber;
const int mdItemLevelupFactor::kFactorFieldNumber;
#endif  // !_MSC_VER

mdItemLevelupFactor::mdItemLevelupFactor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemLevelupFactor)
}

void mdItemLevelupFactor::InitAsDefaultInstance() {
}

mdItemLevelupFactor::mdItemLevelupFactor(const mdItemLevelupFactor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemLevelupFactor)
}

void mdItemLevelupFactor::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  factor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemLevelupFactor::~mdItemLevelupFactor() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemLevelupFactor)
  SharedDtor();
}

void mdItemLevelupFactor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemLevelupFactor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemLevelupFactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemLevelupFactor_descriptor_;
}

const mdItemLevelupFactor& mdItemLevelupFactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemLevelupFactor* mdItemLevelupFactor::default_instance_ = NULL;

mdItemLevelupFactor* mdItemLevelupFactor::New() const {
  return new mdItemLevelupFactor;
}

void mdItemLevelupFactor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemLevelupFactor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(factor_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemLevelupFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemLevelupFactor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_factor;
        break;
      }

      // required double factor = 2;
      case 2: {
        if (tag == 17) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemLevelupFactor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemLevelupFactor)
  return false;
#undef DO_
}

void mdItemLevelupFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemLevelupFactor)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required double factor = 2;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->factor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemLevelupFactor)
}

::google::protobuf::uint8* mdItemLevelupFactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemLevelupFactor)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required double factor = 2;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->factor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemLevelupFactor)
  return target;
}

int mdItemLevelupFactor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required double factor = 2;
    if (has_factor()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemLevelupFactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemLevelupFactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemLevelupFactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemLevelupFactor::MergeFrom(const mdItemLevelupFactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemLevelupFactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemLevelupFactor::CopyFrom(const mdItemLevelupFactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemLevelupFactor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdItemLevelupFactor::Swap(mdItemLevelupFactor* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(factor_, other->factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemLevelupFactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemLevelupFactor_descriptor_;
  metadata.reflection = mdItemLevelupFactor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemEnhanceCost::kEnhanceLevelFieldNumber;
const int mdItemEnhanceCost::kEnhanceRateFieldNumber;
const int mdItemEnhanceCost::kEnhanceScrollCostFieldNumber;
const int mdItemEnhanceCost::kProtectionScrollCostFieldNumber;
const int mdItemEnhanceCost::kMoneyCostFieldNumber;
const int mdItemEnhanceCost::kExchangeCostDaryCrystalFieldNumber;
const int mdItemEnhanceCost::kExchangeCostGemFieldNumber;
#endif  // !_MSC_VER

mdItemEnhanceCost::mdItemEnhanceCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemEnhanceCost)
}

void mdItemEnhanceCost::InitAsDefaultInstance() {
}

mdItemEnhanceCost::mdItemEnhanceCost(const mdItemEnhanceCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemEnhanceCost)
}

void mdItemEnhanceCost::SharedCtor() {
  _cached_size_ = 0;
  enhance_level_ = 0;
  enhance_rate_ = 0;
  enhance_scroll_cost_ = 0;
  protection_scroll_cost_ = 0;
  money_cost_ = 0;
  exchange_cost_dary_crystal_ = 0;
  exchange_cost_gem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemEnhanceCost::~mdItemEnhanceCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemEnhanceCost)
  SharedDtor();
}

void mdItemEnhanceCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemEnhanceCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemEnhanceCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemEnhanceCost_descriptor_;
}

const mdItemEnhanceCost& mdItemEnhanceCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemEnhanceCost* mdItemEnhanceCost::default_instance_ = NULL;

mdItemEnhanceCost* mdItemEnhanceCost::New() const {
  return new mdItemEnhanceCost;
}

void mdItemEnhanceCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemEnhanceCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(enhance_level_, exchange_cost_gem_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemEnhanceCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemEnhanceCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enhance_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enhance_rate;
        break;
      }

      // required int32 enhance_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_enhance_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_rate_)));
          set_has_enhance_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enhance_scroll_cost;
        break;
      }

      // required int32 enhance_scroll_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_enhance_scroll_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_scroll_cost_)));
          set_has_enhance_scroll_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_protection_scroll_cost;
        break;
      }

      // required int32 protection_scroll_cost = 4;
      case 4: {
        if (tag == 32) {
         parse_protection_scroll_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protection_scroll_cost_)));
          set_has_protection_scroll_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_money_cost;
        break;
      }

      // required int32 money_cost = 5;
      case 5: {
        if (tag == 40) {
         parse_money_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_cost_)));
          set_has_money_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exchange_cost_dary_crystal;
        break;
      }

      // required int32 exchange_cost_dary_crystal = 6;
      case 6: {
        if (tag == 48) {
         parse_exchange_cost_dary_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_cost_dary_crystal_)));
          set_has_exchange_cost_dary_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exchange_cost_gem;
        break;
      }

      // required int32 exchange_cost_gem = 7;
      case 7: {
        if (tag == 56) {
         parse_exchange_cost_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_cost_gem_)));
          set_has_exchange_cost_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemEnhanceCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemEnhanceCost)
  return false;
#undef DO_
}

void mdItemEnhanceCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemEnhanceCost)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enhance_level(), output);
  }

  // required int32 enhance_rate = 2;
  if (has_enhance_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enhance_rate(), output);
  }

  // required int32 enhance_scroll_cost = 3;
  if (has_enhance_scroll_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enhance_scroll_cost(), output);
  }

  // required int32 protection_scroll_cost = 4;
  if (has_protection_scroll_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->protection_scroll_cost(), output);
  }

  // required int32 money_cost = 5;
  if (has_money_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money_cost(), output);
  }

  // required int32 exchange_cost_dary_crystal = 6;
  if (has_exchange_cost_dary_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->exchange_cost_dary_crystal(), output);
  }

  // required int32 exchange_cost_gem = 7;
  if (has_exchange_cost_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exchange_cost_gem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemEnhanceCost)
}

::google::protobuf::uint8* mdItemEnhanceCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemEnhanceCost)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enhance_level(), target);
  }

  // required int32 enhance_rate = 2;
  if (has_enhance_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enhance_rate(), target);
  }

  // required int32 enhance_scroll_cost = 3;
  if (has_enhance_scroll_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enhance_scroll_cost(), target);
  }

  // required int32 protection_scroll_cost = 4;
  if (has_protection_scroll_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->protection_scroll_cost(), target);
  }

  // required int32 money_cost = 5;
  if (has_money_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money_cost(), target);
  }

  // required int32 exchange_cost_dary_crystal = 6;
  if (has_exchange_cost_dary_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->exchange_cost_dary_crystal(), target);
  }

  // required int32 exchange_cost_gem = 7;
  if (has_exchange_cost_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exchange_cost_gem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemEnhanceCost)
  return target;
}

int mdItemEnhanceCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enhance_level = 1;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 enhance_rate = 2;
    if (has_enhance_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_rate());
    }

    // required int32 enhance_scroll_cost = 3;
    if (has_enhance_scroll_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_scroll_cost());
    }

    // required int32 protection_scroll_cost = 4;
    if (has_protection_scroll_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->protection_scroll_cost());
    }

    // required int32 money_cost = 5;
    if (has_money_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_cost());
    }

    // required int32 exchange_cost_dary_crystal = 6;
    if (has_exchange_cost_dary_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_cost_dary_crystal());
    }

    // required int32 exchange_cost_gem = 7;
    if (has_exchange_cost_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_cost_gem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemEnhanceCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemEnhanceCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemEnhanceCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemEnhanceCost::MergeFrom(const mdItemEnhanceCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_enhance_rate()) {
      set_enhance_rate(from.enhance_rate());
    }
    if (from.has_enhance_scroll_cost()) {
      set_enhance_scroll_cost(from.enhance_scroll_cost());
    }
    if (from.has_protection_scroll_cost()) {
      set_protection_scroll_cost(from.protection_scroll_cost());
    }
    if (from.has_money_cost()) {
      set_money_cost(from.money_cost());
    }
    if (from.has_exchange_cost_dary_crystal()) {
      set_exchange_cost_dary_crystal(from.exchange_cost_dary_crystal());
    }
    if (from.has_exchange_cost_gem()) {
      set_exchange_cost_gem(from.exchange_cost_gem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemEnhanceCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemEnhanceCost::CopyFrom(const mdItemEnhanceCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemEnhanceCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdItemEnhanceCost::Swap(mdItemEnhanceCost* other) {
  if (other != this) {
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(enhance_rate_, other->enhance_rate_);
    std::swap(enhance_scroll_cost_, other->enhance_scroll_cost_);
    std::swap(protection_scroll_cost_, other->protection_scroll_cost_);
    std::swap(money_cost_, other->money_cost_);
    std::swap(exchange_cost_dary_crystal_, other->exchange_cost_dary_crystal_);
    std::swap(exchange_cost_gem_, other->exchange_cost_gem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemEnhanceCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemEnhanceCost_descriptor_;
  metadata.reflection = mdItemEnhanceCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdCostumeEnhanceCost::kGradeFieldNumber;
const int mdCostumeEnhanceCost::kEnhanceLevelFieldNumber;
const int mdCostumeEnhanceCost::kMoneyCostFieldNumber;
const int mdCostumeEnhanceCost::kWeaponMaterialIdFieldNumber;
const int mdCostumeEnhanceCost::kWeaponAmountFieldNumber;
const int mdCostumeEnhanceCost::kWeaponRestoreAmountFieldNumber;
const int mdCostumeEnhanceCost::kArmorMaterialIdFieldNumber;
const int mdCostumeEnhanceCost::kArmorAmountFieldNumber;
const int mdCostumeEnhanceCost::kArmorRestoreAmountFieldNumber;
#endif  // !_MSC_VER

mdCostumeEnhanceCost::mdCostumeEnhanceCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdCostumeEnhanceCost)
}

void mdCostumeEnhanceCost::InitAsDefaultInstance() {
}

mdCostumeEnhanceCost::mdCostumeEnhanceCost(const mdCostumeEnhanceCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdCostumeEnhanceCost)
}

void mdCostumeEnhanceCost::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  enhance_level_ = 0;
  money_cost_ = 0;
  weapon_material_id_ = 0;
  weapon_amount_ = 0;
  weapon_restore_amount_ = 0;
  armor_material_id_ = 0;
  armor_amount_ = 0;
  armor_restore_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdCostumeEnhanceCost::~mdCostumeEnhanceCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdCostumeEnhanceCost)
  SharedDtor();
}

void mdCostumeEnhanceCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdCostumeEnhanceCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdCostumeEnhanceCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCostumeEnhanceCost_descriptor_;
}

const mdCostumeEnhanceCost& mdCostumeEnhanceCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdCostumeEnhanceCost* mdCostumeEnhanceCost::default_instance_ = NULL;

mdCostumeEnhanceCost* mdCostumeEnhanceCost::New() const {
  return new mdCostumeEnhanceCost;
}

void mdCostumeEnhanceCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdCostumeEnhanceCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(grade_, armor_amount_);
  }
  armor_restore_amount_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdCostumeEnhanceCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdCostumeEnhanceCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 2;
      case 2: {
        if (tag == 16) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_money_cost;
        break;
      }

      // required int32 money_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_money_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_cost_)));
          set_has_money_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_weapon_material_id;
        break;
      }

      // required int32 weapon_material_id = 4;
      case 4: {
        if (tag == 32) {
         parse_weapon_material_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_material_id_)));
          set_has_weapon_material_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weapon_amount;
        break;
      }

      // required int32 weapon_amount = 5;
      case 5: {
        if (tag == 40) {
         parse_weapon_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_amount_)));
          set_has_weapon_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_weapon_restore_amount;
        break;
      }

      // required int32 weapon_restore_amount = 6;
      case 6: {
        if (tag == 48) {
         parse_weapon_restore_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_restore_amount_)));
          set_has_weapon_restore_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_armor_material_id;
        break;
      }

      // required int32 armor_material_id = 7;
      case 7: {
        if (tag == 56) {
         parse_armor_material_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_material_id_)));
          set_has_armor_material_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_armor_amount;
        break;
      }

      // required int32 armor_amount = 8;
      case 8: {
        if (tag == 64) {
         parse_armor_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_amount_)));
          set_has_armor_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_armor_restore_amount;
        break;
      }

      // required int32 armor_restore_amount = 9;
      case 9: {
        if (tag == 72) {
         parse_armor_restore_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_restore_amount_)));
          set_has_armor_restore_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdCostumeEnhanceCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdCostumeEnhanceCost)
  return false;
#undef DO_
}

void mdCostumeEnhanceCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdCostumeEnhanceCost)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 enhance_level = 2;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enhance_level(), output);
  }

  // required int32 money_cost = 3;
  if (has_money_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money_cost(), output);
  }

  // required int32 weapon_material_id = 4;
  if (has_weapon_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weapon_material_id(), output);
  }

  // required int32 weapon_amount = 5;
  if (has_weapon_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->weapon_amount(), output);
  }

  // required int32 weapon_restore_amount = 6;
  if (has_weapon_restore_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weapon_restore_amount(), output);
  }

  // required int32 armor_material_id = 7;
  if (has_armor_material_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->armor_material_id(), output);
  }

  // required int32 armor_amount = 8;
  if (has_armor_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->armor_amount(), output);
  }

  // required int32 armor_restore_amount = 9;
  if (has_armor_restore_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->armor_restore_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdCostumeEnhanceCost)
}

::google::protobuf::uint8* mdCostumeEnhanceCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdCostumeEnhanceCost)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 enhance_level = 2;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enhance_level(), target);
  }

  // required int32 money_cost = 3;
  if (has_money_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money_cost(), target);
  }

  // required int32 weapon_material_id = 4;
  if (has_weapon_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weapon_material_id(), target);
  }

  // required int32 weapon_amount = 5;
  if (has_weapon_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->weapon_amount(), target);
  }

  // required int32 weapon_restore_amount = 6;
  if (has_weapon_restore_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weapon_restore_amount(), target);
  }

  // required int32 armor_material_id = 7;
  if (has_armor_material_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->armor_material_id(), target);
  }

  // required int32 armor_amount = 8;
  if (has_armor_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->armor_amount(), target);
  }

  // required int32 armor_restore_amount = 9;
  if (has_armor_restore_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->armor_restore_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdCostumeEnhanceCost)
  return target;
}

int mdCostumeEnhanceCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 enhance_level = 2;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 money_cost = 3;
    if (has_money_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money_cost());
    }

    // required int32 weapon_material_id = 4;
    if (has_weapon_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_material_id());
    }

    // required int32 weapon_amount = 5;
    if (has_weapon_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_amount());
    }

    // required int32 weapon_restore_amount = 6;
    if (has_weapon_restore_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon_restore_amount());
    }

    // required int32 armor_material_id = 7;
    if (has_armor_material_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_material_id());
    }

    // required int32 armor_amount = 8;
    if (has_armor_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_amount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 armor_restore_amount = 9;
    if (has_armor_restore_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_restore_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdCostumeEnhanceCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdCostumeEnhanceCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdCostumeEnhanceCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdCostumeEnhanceCost::MergeFrom(const mdCostumeEnhanceCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_money_cost()) {
      set_money_cost(from.money_cost());
    }
    if (from.has_weapon_material_id()) {
      set_weapon_material_id(from.weapon_material_id());
    }
    if (from.has_weapon_amount()) {
      set_weapon_amount(from.weapon_amount());
    }
    if (from.has_weapon_restore_amount()) {
      set_weapon_restore_amount(from.weapon_restore_amount());
    }
    if (from.has_armor_material_id()) {
      set_armor_material_id(from.armor_material_id());
    }
    if (from.has_armor_amount()) {
      set_armor_amount(from.armor_amount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_armor_restore_amount()) {
      set_armor_restore_amount(from.armor_restore_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdCostumeEnhanceCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdCostumeEnhanceCost::CopyFrom(const mdCostumeEnhanceCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdCostumeEnhanceCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdCostumeEnhanceCost::Swap(mdCostumeEnhanceCost* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(money_cost_, other->money_cost_);
    std::swap(weapon_material_id_, other->weapon_material_id_);
    std::swap(weapon_amount_, other->weapon_amount_);
    std::swap(weapon_restore_amount_, other->weapon_restore_amount_);
    std::swap(armor_material_id_, other->armor_material_id_);
    std::swap(armor_amount_, other->armor_amount_);
    std::swap(armor_restore_amount_, other->armor_restore_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdCostumeEnhanceCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdCostumeEnhanceCost_descriptor_;
  metadata.reflection = mdCostumeEnhanceCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemSealCost::kSlotFieldNumber;
const int mdItemSealCost::kOpenPriceTypeFieldNumber;
const int mdItemSealCost::kOpenPriceFieldNumber;
const int mdItemSealCost::kTemplateId1FieldNumber;
const int mdItemSealCost::kAmount1FieldNumber;
const int mdItemSealCost::kTemplateId2FieldNumber;
const int mdItemSealCost::kAmount2FieldNumber;
const int mdItemSealCost::kTemplateId3FieldNumber;
const int mdItemSealCost::kAmount3FieldNumber;
const int mdItemSealCost::kTemplateId4FieldNumber;
const int mdItemSealCost::kAmount4FieldNumber;
const int mdItemSealCost::kSealPriceTypeFieldNumber;
const int mdItemSealCost::kSealPriceFieldNumber;
#endif  // !_MSC_VER

mdItemSealCost::mdItemSealCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemSealCost)
}

void mdItemSealCost::InitAsDefaultInstance() {
}

mdItemSealCost::mdItemSealCost(const mdItemSealCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemSealCost)
}

void mdItemSealCost::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  open_price_type_ = 0;
  open_price_ = 0;
  template_id1_ = 0;
  amount1_ = 0;
  template_id2_ = 0;
  amount2_ = 0;
  template_id3_ = 0;
  amount3_ = 0;
  template_id4_ = 0;
  amount4_ = 0;
  seal_price_type_ = 0;
  seal_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemSealCost::~mdItemSealCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemSealCost)
  SharedDtor();
}

void mdItemSealCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemSealCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemSealCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemSealCost_descriptor_;
}

const mdItemSealCost& mdItemSealCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemSealCost* mdItemSealCost::default_instance_ = NULL;

mdItemSealCost* mdItemSealCost::New() const {
  return new mdItemSealCost;
}

void mdItemSealCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemSealCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(slot_, template_id3_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(amount3_, seal_price_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemSealCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemSealCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open_price_type;
        break;
      }

      // required int32 open_price_type = 2;
      case 2: {
        if (tag == 16) {
         parse_open_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_price_type_)));
          set_has_open_price_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open_price;
        break;
      }

      // required int32 open_price = 3;
      case 3: {
        if (tag == 24) {
         parse_open_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_price_)));
          set_has_open_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_template_id1;
        break;
      }

      // required int32 template_id1 = 4;
      case 4: {
        if (tag == 32) {
         parse_template_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id1_)));
          set_has_template_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_amount1;
        break;
      }

      // required int32 amount1 = 5;
      case 5: {
        if (tag == 40) {
         parse_amount1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount1_)));
          set_has_amount1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_template_id2;
        break;
      }

      // required int32 template_id2 = 6;
      case 6: {
        if (tag == 48) {
         parse_template_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id2_)));
          set_has_template_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_amount2;
        break;
      }

      // required int32 amount2 = 7;
      case 7: {
        if (tag == 56) {
         parse_amount2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount2_)));
          set_has_amount2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_template_id3;
        break;
      }

      // required int32 template_id3 = 8;
      case 8: {
        if (tag == 64) {
         parse_template_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id3_)));
          set_has_template_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_amount3;
        break;
      }

      // required int32 amount3 = 9;
      case 9: {
        if (tag == 72) {
         parse_amount3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount3_)));
          set_has_amount3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_template_id4;
        break;
      }

      // required int32 template_id4 = 10;
      case 10: {
        if (tag == 80) {
         parse_template_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id4_)));
          set_has_template_id4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_amount4;
        break;
      }

      // required int32 amount4 = 11;
      case 11: {
        if (tag == 88) {
         parse_amount4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount4_)));
          set_has_amount4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_seal_price_type;
        break;
      }

      // required int32 seal_price_type = 12;
      case 12: {
        if (tag == 96) {
         parse_seal_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_price_type_)));
          set_has_seal_price_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_seal_price;
        break;
      }

      // required int32 seal_price = 13;
      case 13: {
        if (tag == 104) {
         parse_seal_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_price_)));
          set_has_seal_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemSealCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemSealCost)
  return false;
#undef DO_
}

void mdItemSealCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemSealCost)
  // required int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // required int32 open_price_type = 2;
  if (has_open_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_price_type(), output);
  }

  // required int32 open_price = 3;
  if (has_open_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open_price(), output);
  }

  // required int32 template_id1 = 4;
  if (has_template_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->template_id1(), output);
  }

  // required int32 amount1 = 5;
  if (has_amount1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->amount1(), output);
  }

  // required int32 template_id2 = 6;
  if (has_template_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->template_id2(), output);
  }

  // required int32 amount2 = 7;
  if (has_amount2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->amount2(), output);
  }

  // required int32 template_id3 = 8;
  if (has_template_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->template_id3(), output);
  }

  // required int32 amount3 = 9;
  if (has_amount3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->amount3(), output);
  }

  // required int32 template_id4 = 10;
  if (has_template_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->template_id4(), output);
  }

  // required int32 amount4 = 11;
  if (has_amount4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->amount4(), output);
  }

  // required int32 seal_price_type = 12;
  if (has_seal_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->seal_price_type(), output);
  }

  // required int32 seal_price = 13;
  if (has_seal_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->seal_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemSealCost)
}

::google::protobuf::uint8* mdItemSealCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemSealCost)
  // required int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // required int32 open_price_type = 2;
  if (has_open_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_price_type(), target);
  }

  // required int32 open_price = 3;
  if (has_open_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open_price(), target);
  }

  // required int32 template_id1 = 4;
  if (has_template_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->template_id1(), target);
  }

  // required int32 amount1 = 5;
  if (has_amount1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->amount1(), target);
  }

  // required int32 template_id2 = 6;
  if (has_template_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->template_id2(), target);
  }

  // required int32 amount2 = 7;
  if (has_amount2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->amount2(), target);
  }

  // required int32 template_id3 = 8;
  if (has_template_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->template_id3(), target);
  }

  // required int32 amount3 = 9;
  if (has_amount3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->amount3(), target);
  }

  // required int32 template_id4 = 10;
  if (has_template_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->template_id4(), target);
  }

  // required int32 amount4 = 11;
  if (has_amount4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->amount4(), target);
  }

  // required int32 seal_price_type = 12;
  if (has_seal_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->seal_price_type(), target);
  }

  // required int32 seal_price = 13;
  if (has_seal_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->seal_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemSealCost)
  return target;
}

int mdItemSealCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // required int32 open_price_type = 2;
    if (has_open_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_price_type());
    }

    // required int32 open_price = 3;
    if (has_open_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_price());
    }

    // required int32 template_id1 = 4;
    if (has_template_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id1());
    }

    // required int32 amount1 = 5;
    if (has_amount1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount1());
    }

    // required int32 template_id2 = 6;
    if (has_template_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id2());
    }

    // required int32 amount2 = 7;
    if (has_amount2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount2());
    }

    // required int32 template_id3 = 8;
    if (has_template_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 amount3 = 9;
    if (has_amount3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount3());
    }

    // required int32 template_id4 = 10;
    if (has_template_id4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id4());
    }

    // required int32 amount4 = 11;
    if (has_amount4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount4());
    }

    // required int32 seal_price_type = 12;
    if (has_seal_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_price_type());
    }

    // required int32 seal_price = 13;
    if (has_seal_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemSealCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemSealCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemSealCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemSealCost::MergeFrom(const mdItemSealCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_open_price_type()) {
      set_open_price_type(from.open_price_type());
    }
    if (from.has_open_price()) {
      set_open_price(from.open_price());
    }
    if (from.has_template_id1()) {
      set_template_id1(from.template_id1());
    }
    if (from.has_amount1()) {
      set_amount1(from.amount1());
    }
    if (from.has_template_id2()) {
      set_template_id2(from.template_id2());
    }
    if (from.has_amount2()) {
      set_amount2(from.amount2());
    }
    if (from.has_template_id3()) {
      set_template_id3(from.template_id3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_amount3()) {
      set_amount3(from.amount3());
    }
    if (from.has_template_id4()) {
      set_template_id4(from.template_id4());
    }
    if (from.has_amount4()) {
      set_amount4(from.amount4());
    }
    if (from.has_seal_price_type()) {
      set_seal_price_type(from.seal_price_type());
    }
    if (from.has_seal_price()) {
      set_seal_price(from.seal_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemSealCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemSealCost::CopyFrom(const mdItemSealCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemSealCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void mdItemSealCost::Swap(mdItemSealCost* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(open_price_type_, other->open_price_type_);
    std::swap(open_price_, other->open_price_);
    std::swap(template_id1_, other->template_id1_);
    std::swap(amount1_, other->amount1_);
    std::swap(template_id2_, other->template_id2_);
    std::swap(amount2_, other->amount2_);
    std::swap(template_id3_, other->template_id3_);
    std::swap(amount3_, other->amount3_);
    std::swap(template_id4_, other->template_id4_);
    std::swap(amount4_, other->amount4_);
    std::swap(seal_price_type_, other->seal_price_type_);
    std::swap(seal_price_, other->seal_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemSealCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemSealCost_descriptor_;
  metadata.reflection = mdItemSealCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemEnhanceEffectInfo::kEnhanceLevelFieldNumber;
const int mdItemEnhanceEffectInfo::kSetEffectFieldNumber;
const int mdItemEnhanceEffectInfo::kItemAuraFieldNumber;
const int mdItemEnhanceEffectInfo::kChannelAlphaFieldNumber;
const int mdItemEnhanceEffectInfo::kChannelRedFieldNumber;
const int mdItemEnhanceEffectInfo::kChannelGreenFieldNumber;
const int mdItemEnhanceEffectInfo::kChannelBlueFieldNumber;
#endif  // !_MSC_VER

mdItemEnhanceEffectInfo::mdItemEnhanceEffectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
}

void mdItemEnhanceEffectInfo::InitAsDefaultInstance() {
}

mdItemEnhanceEffectInfo::mdItemEnhanceEffectInfo(const mdItemEnhanceEffectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
}

void mdItemEnhanceEffectInfo::SharedCtor() {
  _cached_size_ = 0;
  enhance_level_ = 0;
  set_effect_ = 0;
  item_aura_ = 0;
  channel_alpha_ = 0;
  channel_red_ = 0;
  channel_green_ = 0;
  channel_blue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemEnhanceEffectInfo::~mdItemEnhanceEffectInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  SharedDtor();
}

void mdItemEnhanceEffectInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemEnhanceEffectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemEnhanceEffectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemEnhanceEffectInfo_descriptor_;
}

const mdItemEnhanceEffectInfo& mdItemEnhanceEffectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemEnhanceEffectInfo* mdItemEnhanceEffectInfo::default_instance_ = NULL;

mdItemEnhanceEffectInfo* mdItemEnhanceEffectInfo::New() const {
  return new mdItemEnhanceEffectInfo;
}

void mdItemEnhanceEffectInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemEnhanceEffectInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(set_effect_, channel_blue_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemEnhanceEffectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enhance_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_set_effect;
        break;
      }

      // required double set_effect = 2;
      case 2: {
        if (tag == 17) {
         parse_set_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &set_effect_)));
          set_has_set_effect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_aura;
        break;
      }

      // required int32 item_aura = 3;
      case 3: {
        if (tag == 24) {
         parse_item_aura:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_aura_)));
          set_has_item_aura();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_channel_alpha;
        break;
      }

      // required float channel_alpha = 4;
      case 4: {
        if (tag == 37) {
         parse_channel_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_alpha_)));
          set_has_channel_alpha();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_channel_red;
        break;
      }

      // required float channel_red = 5;
      case 5: {
        if (tag == 45) {
         parse_channel_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_red_)));
          set_has_channel_red();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_channel_green;
        break;
      }

      // required float channel_green = 6;
      case 6: {
        if (tag == 53) {
         parse_channel_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_green_)));
          set_has_channel_green();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_channel_blue;
        break;
      }

      // required float channel_blue = 7;
      case 7: {
        if (tag == 61) {
         parse_channel_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_blue_)));
          set_has_channel_blue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  return false;
#undef DO_
}

void mdItemEnhanceEffectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enhance_level(), output);
  }

  // required double set_effect = 2;
  if (has_set_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->set_effect(), output);
  }

  // required int32 item_aura = 3;
  if (has_item_aura()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_aura(), output);
  }

  // required float channel_alpha = 4;
  if (has_channel_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->channel_alpha(), output);
  }

  // required float channel_red = 5;
  if (has_channel_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->channel_red(), output);
  }

  // required float channel_green = 6;
  if (has_channel_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->channel_green(), output);
  }

  // required float channel_blue = 7;
  if (has_channel_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->channel_blue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
}

::google::protobuf::uint8* mdItemEnhanceEffectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enhance_level(), target);
  }

  // required double set_effect = 2;
  if (has_set_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->set_effect(), target);
  }

  // required int32 item_aura = 3;
  if (has_item_aura()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_aura(), target);
  }

  // required float channel_alpha = 4;
  if (has_channel_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->channel_alpha(), target);
  }

  // required float channel_red = 5;
  if (has_channel_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->channel_red(), target);
  }

  // required float channel_green = 6;
  if (has_channel_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->channel_green(), target);
  }

  // required float channel_blue = 7;
  if (has_channel_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->channel_blue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemEnhanceEffectInfo)
  return target;
}

int mdItemEnhanceEffectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enhance_level = 1;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required double set_effect = 2;
    if (has_set_effect()) {
      total_size += 1 + 8;
    }

    // required int32 item_aura = 3;
    if (has_item_aura()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_aura());
    }

    // required float channel_alpha = 4;
    if (has_channel_alpha()) {
      total_size += 1 + 4;
    }

    // required float channel_red = 5;
    if (has_channel_red()) {
      total_size += 1 + 4;
    }

    // required float channel_green = 6;
    if (has_channel_green()) {
      total_size += 1 + 4;
    }

    // required float channel_blue = 7;
    if (has_channel_blue()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemEnhanceEffectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemEnhanceEffectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemEnhanceEffectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemEnhanceEffectInfo::MergeFrom(const mdItemEnhanceEffectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_set_effect()) {
      set_set_effect(from.set_effect());
    }
    if (from.has_item_aura()) {
      set_item_aura(from.item_aura());
    }
    if (from.has_channel_alpha()) {
      set_channel_alpha(from.channel_alpha());
    }
    if (from.has_channel_red()) {
      set_channel_red(from.channel_red());
    }
    if (from.has_channel_green()) {
      set_channel_green(from.channel_green());
    }
    if (from.has_channel_blue()) {
      set_channel_blue(from.channel_blue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemEnhanceEffectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemEnhanceEffectInfo::CopyFrom(const mdItemEnhanceEffectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemEnhanceEffectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdItemEnhanceEffectInfo::Swap(mdItemEnhanceEffectInfo* other) {
  if (other != this) {
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(set_effect_, other->set_effect_);
    std::swap(item_aura_, other->item_aura_);
    std::swap(channel_alpha_, other->channel_alpha_);
    std::swap(channel_red_, other->channel_red_);
    std::swap(channel_green_, other->channel_green_);
    std::swap(channel_blue_, other->channel_blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemEnhanceEffectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemEnhanceEffectInfo_descriptor_;
  metadata.reflection = mdItemEnhanceEffectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemSurpassLevel::kGradeFieldNumber;
const int mdItemSurpassLevel::kIncreaseLevelFieldNumber;
const int mdItemSurpassLevel::kMaxSurpassLevelFieldNumber;
#endif  // !_MSC_VER

mdItemSurpassLevel::mdItemSurpassLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemSurpassLevel)
}

void mdItemSurpassLevel::InitAsDefaultInstance() {
}

mdItemSurpassLevel::mdItemSurpassLevel(const mdItemSurpassLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemSurpassLevel)
}

void mdItemSurpassLevel::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  increase_level_ = 0;
  max_surpass_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemSurpassLevel::~mdItemSurpassLevel() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemSurpassLevel)
  SharedDtor();
}

void mdItemSurpassLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemSurpassLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemSurpassLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemSurpassLevel_descriptor_;
}

const mdItemSurpassLevel& mdItemSurpassLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemSurpassLevel* mdItemSurpassLevel::default_instance_ = NULL;

mdItemSurpassLevel* mdItemSurpassLevel::New() const {
  return new mdItemSurpassLevel;
}

void mdItemSurpassLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemSurpassLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(grade_, max_surpass_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemSurpassLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemSurpassLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_increase_level;
        break;
      }

      // required int32 increase_level = 2;
      case 2: {
        if (tag == 16) {
         parse_increase_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_level_)));
          set_has_increase_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_surpass_level;
        break;
      }

      // required int32 max_surpass_level = 3;
      case 3: {
        if (tag == 24) {
         parse_max_surpass_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_surpass_level_)));
          set_has_max_surpass_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemSurpassLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemSurpassLevel)
  return false;
#undef DO_
}

void mdItemSurpassLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemSurpassLevel)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 increase_level = 2;
  if (has_increase_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->increase_level(), output);
  }

  // required int32 max_surpass_level = 3;
  if (has_max_surpass_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_surpass_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemSurpassLevel)
}

::google::protobuf::uint8* mdItemSurpassLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemSurpassLevel)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 increase_level = 2;
  if (has_increase_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->increase_level(), target);
  }

  // required int32 max_surpass_level = 3;
  if (has_max_surpass_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_surpass_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemSurpassLevel)
  return target;
}

int mdItemSurpassLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 increase_level = 2;
    if (has_increase_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase_level());
    }

    // required int32 max_surpass_level = 3;
    if (has_max_surpass_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_surpass_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemSurpassLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemSurpassLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemSurpassLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemSurpassLevel::MergeFrom(const mdItemSurpassLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_increase_level()) {
      set_increase_level(from.increase_level());
    }
    if (from.has_max_surpass_level()) {
      set_max_surpass_level(from.max_surpass_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemSurpassLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemSurpassLevel::CopyFrom(const mdItemSurpassLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemSurpassLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdItemSurpassLevel::Swap(mdItemSurpassLevel* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(increase_level_, other->increase_level_);
    std::swap(max_surpass_level_, other->max_surpass_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemSurpassLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemSurpassLevel_descriptor_;
  metadata.reflection = mdItemSurpassLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemDismantleInfo::kInventoryTypeFieldNumber;
const int mdItemDismantleInfo::kGradeFieldNumber;
const int mdItemDismantleInfo::kMaterial1FieldNumber;
const int mdItemDismantleInfo::kMaterialAmount1FieldNumber;
const int mdItemDismantleInfo::kMaterial2FieldNumber;
const int mdItemDismantleInfo::kMaterialAmount2FieldNumber;
const int mdItemDismantleInfo::kMaterial3FieldNumber;
const int mdItemDismantleInfo::kMaterialAmount3FieldNumber;
#endif  // !_MSC_VER

mdItemDismantleInfo::mdItemDismantleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemDismantleInfo)
}

void mdItemDismantleInfo::InitAsDefaultInstance() {
}

mdItemDismantleInfo::mdItemDismantleInfo(const mdItemDismantleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemDismantleInfo)
}

void mdItemDismantleInfo::SharedCtor() {
  _cached_size_ = 0;
  inventory_type_ = 2;
  grade_ = 0;
  material1_ = 0;
  material_amount1_ = 0;
  material2_ = 0;
  material_amount2_ = 0;
  material3_ = 0;
  material_amount3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemDismantleInfo::~mdItemDismantleInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemDismantleInfo)
  SharedDtor();
}

void mdItemDismantleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemDismantleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemDismantleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemDismantleInfo_descriptor_;
}

const mdItemDismantleInfo& mdItemDismantleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemDismantleInfo* mdItemDismantleInfo::default_instance_ = NULL;

mdItemDismantleInfo* mdItemDismantleInfo::New() const {
  return new mdItemDismantleInfo;
}

void mdItemDismantleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemDismantleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(grade_, material_amount3_);
    inventory_type_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemDismantleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemDismantleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Inventory_TYPE_IsValid(value)) {
            set_inventory_type(static_cast< ::b2::protocol::commondata::Inventory_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_material1;
        break;
      }

      // required int32 material1 = 3;
      case 3: {
        if (tag == 24) {
         parse_material1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material1_)));
          set_has_material1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_material_amount1;
        break;
      }

      // required int32 material_amount1 = 4;
      case 4: {
        if (tag == 32) {
         parse_material_amount1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_amount1_)));
          set_has_material_amount1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_material2;
        break;
      }

      // required int32 material2 = 5;
      case 5: {
        if (tag == 40) {
         parse_material2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material2_)));
          set_has_material2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_material_amount2;
        break;
      }

      // required int32 material_amount2 = 6;
      case 6: {
        if (tag == 48) {
         parse_material_amount2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_amount2_)));
          set_has_material_amount2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_material3;
        break;
      }

      // required int32 material3 = 7;
      case 7: {
        if (tag == 56) {
         parse_material3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material3_)));
          set_has_material3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_material_amount3;
        break;
      }

      // required int32 material_amount3 = 8;
      case 8: {
        if (tag == 64) {
         parse_material_amount3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_amount3_)));
          set_has_material_amount3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemDismantleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemDismantleInfo)
  return false;
#undef DO_
}

void mdItemDismantleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemDismantleInfo)
  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
  if (has_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->inventory_type(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required int32 material1 = 3;
  if (has_material1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->material1(), output);
  }

  // required int32 material_amount1 = 4;
  if (has_material_amount1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->material_amount1(), output);
  }

  // required int32 material2 = 5;
  if (has_material2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->material2(), output);
  }

  // required int32 material_amount2 = 6;
  if (has_material_amount2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->material_amount2(), output);
  }

  // required int32 material3 = 7;
  if (has_material3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->material3(), output);
  }

  // required int32 material_amount3 = 8;
  if (has_material_amount3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->material_amount3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemDismantleInfo)
}

::google::protobuf::uint8* mdItemDismantleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemDismantleInfo)
  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
  if (has_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->inventory_type(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required int32 material1 = 3;
  if (has_material1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->material1(), target);
  }

  // required int32 material_amount1 = 4;
  if (has_material_amount1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->material_amount1(), target);
  }

  // required int32 material2 = 5;
  if (has_material2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->material2(), target);
  }

  // required int32 material_amount2 = 6;
  if (has_material_amount2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->material_amount2(), target);
  }

  // required int32 material3 = 7;
  if (has_material3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->material3(), target);
  }

  // required int32 material_amount3 = 8;
  if (has_material_amount3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->material_amount3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemDismantleInfo)
  return target;
}

int mdItemDismantleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 1;
    if (has_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inventory_type());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 material1 = 3;
    if (has_material1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material1());
    }

    // required int32 material_amount1 = 4;
    if (has_material_amount1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_amount1());
    }

    // required int32 material2 = 5;
    if (has_material2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material2());
    }

    // required int32 material_amount2 = 6;
    if (has_material_amount2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_amount2());
    }

    // required int32 material3 = 7;
    if (has_material3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material3());
    }

    // required int32 material_amount3 = 8;
    if (has_material_amount3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_amount3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemDismantleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemDismantleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemDismantleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemDismantleInfo::MergeFrom(const mdItemDismantleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inventory_type()) {
      set_inventory_type(from.inventory_type());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_material1()) {
      set_material1(from.material1());
    }
    if (from.has_material_amount1()) {
      set_material_amount1(from.material_amount1());
    }
    if (from.has_material2()) {
      set_material2(from.material2());
    }
    if (from.has_material_amount2()) {
      set_material_amount2(from.material_amount2());
    }
    if (from.has_material3()) {
      set_material3(from.material3());
    }
    if (from.has_material_amount3()) {
      set_material_amount3(from.material_amount3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemDismantleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemDismantleInfo::CopyFrom(const mdItemDismantleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemDismantleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdItemDismantleInfo::Swap(mdItemDismantleInfo* other) {
  if (other != this) {
    std::swap(inventory_type_, other->inventory_type_);
    std::swap(grade_, other->grade_);
    std::swap(material1_, other->material1_);
    std::swap(material_amount1_, other->material_amount1_);
    std::swap(material2_, other->material2_);
    std::swap(material_amount2_, other->material_amount2_);
    std::swap(material3_, other->material3_);
    std::swap(material_amount3_, other->material_amount3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemDismantleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemDismantleInfo_descriptor_;
  metadata.reflection = mdItemDismantleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdResurrectionInfo::kModeTypeFieldNumber;
const int mdResurrectionInfo::kCountFieldNumber;
const int mdResurrectionInfo::kPriceFieldNumber;
const int mdResurrectionInfo::kAttributeChange1FieldNumber;
const int mdResurrectionInfo::kChangeValue1FieldNumber;
const int mdResurrectionInfo::kAttributeChange2FieldNumber;
const int mdResurrectionInfo::kChangeValue2FieldNumber;
const int mdResurrectionInfo::kAttributeChange3FieldNumber;
const int mdResurrectionInfo::kChangeValue3FieldNumber;
#endif  // !_MSC_VER

mdResurrectionInfo::mdResurrectionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdResurrectionInfo)
}

void mdResurrectionInfo::InitAsDefaultInstance() {
}

mdResurrectionInfo::mdResurrectionInfo(const mdResurrectionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdResurrectionInfo)
}

void mdResurrectionInfo::SharedCtor() {
  _cached_size_ = 0;
  mode_type_ = 1;
  count_ = 0;
  price_ = 0;
  attribute_change1_ = 1;
  change_value1_ = 0;
  attribute_change2_ = 1;
  change_value2_ = 0;
  attribute_change3_ = 1;
  change_value3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdResurrectionInfo::~mdResurrectionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdResurrectionInfo)
  SharedDtor();
}

void mdResurrectionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdResurrectionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdResurrectionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdResurrectionInfo_descriptor_;
}

const mdResurrectionInfo& mdResurrectionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdResurrectionInfo* mdResurrectionInfo::default_instance_ = NULL;

mdResurrectionInfo* mdResurrectionInfo::New() const {
  return new mdResurrectionInfo;
}

void mdResurrectionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdResurrectionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(count_, price_);
    mode_type_ = 1;
    attribute_change1_ = 1;
    change_value1_ = 0;
    attribute_change2_ = 1;
    change_value2_ = 0;
    attribute_change3_ = 1;
  }
  change_value3_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdResurrectionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdResurrectionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.ModeType mode_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ModeType_IsValid(value)) {
            set_mode_type(static_cast< ::b2::protocol::commondata::ModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // required int32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attribute_change1;
        break;
      }

      // required .b2.protocol.commondata.AttributeChange attribute_change1 = 4;
      case 4: {
        if (tag == 32) {
         parse_attribute_change1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::AttributeChange_IsValid(value)) {
            set_attribute_change1(static_cast< ::b2::protocol::commondata::AttributeChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_change_value1;
        break;
      }

      // required int32 change_value1 = 5;
      case 5: {
        if (tag == 40) {
         parse_change_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value1_)));
          set_has_change_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attribute_change2;
        break;
      }

      // required .b2.protocol.commondata.AttributeChange attribute_change2 = 6;
      case 6: {
        if (tag == 48) {
         parse_attribute_change2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::AttributeChange_IsValid(value)) {
            set_attribute_change2(static_cast< ::b2::protocol::commondata::AttributeChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_change_value2;
        break;
      }

      // required int32 change_value2 = 7;
      case 7: {
        if (tag == 56) {
         parse_change_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value2_)));
          set_has_change_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_attribute_change3;
        break;
      }

      // required .b2.protocol.commondata.AttributeChange attribute_change3 = 8;
      case 8: {
        if (tag == 64) {
         parse_attribute_change3:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::AttributeChange_IsValid(value)) {
            set_attribute_change3(static_cast< ::b2::protocol::commondata::AttributeChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_change_value3;
        break;
      }

      // required int32 change_value3 = 9;
      case 9: {
        if (tag == 72) {
         parse_change_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_value3_)));
          set_has_change_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdResurrectionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdResurrectionInfo)
  return false;
#undef DO_
}

void mdResurrectionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdResurrectionInfo)
  // required .b2.protocol.commondata.ModeType mode_type = 1;
  if (has_mode_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode_type(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change1 = 4;
  if (has_attribute_change1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->attribute_change1(), output);
  }

  // required int32 change_value1 = 5;
  if (has_change_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->change_value1(), output);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change2 = 6;
  if (has_attribute_change2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->attribute_change2(), output);
  }

  // required int32 change_value2 = 7;
  if (has_change_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->change_value2(), output);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change3 = 8;
  if (has_attribute_change3()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->attribute_change3(), output);
  }

  // required int32 change_value3 = 9;
  if (has_change_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->change_value3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdResurrectionInfo)
}

::google::protobuf::uint8* mdResurrectionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdResurrectionInfo)
  // required .b2.protocol.commondata.ModeType mode_type = 1;
  if (has_mode_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode_type(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change1 = 4;
  if (has_attribute_change1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->attribute_change1(), target);
  }

  // required int32 change_value1 = 5;
  if (has_change_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->change_value1(), target);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change2 = 6;
  if (has_attribute_change2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->attribute_change2(), target);
  }

  // required int32 change_value2 = 7;
  if (has_change_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->change_value2(), target);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change3 = 8;
  if (has_attribute_change3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->attribute_change3(), target);
  }

  // required int32 change_value3 = 9;
  if (has_change_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->change_value3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdResurrectionInfo)
  return target;
}

int mdResurrectionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.ModeType mode_type = 1;
    if (has_mode_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode_type());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required .b2.protocol.commondata.AttributeChange attribute_change1 = 4;
    if (has_attribute_change1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute_change1());
    }

    // required int32 change_value1 = 5;
    if (has_change_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value1());
    }

    // required .b2.protocol.commondata.AttributeChange attribute_change2 = 6;
    if (has_attribute_change2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute_change2());
    }

    // required int32 change_value2 = 7;
    if (has_change_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value2());
    }

    // required .b2.protocol.commondata.AttributeChange attribute_change3 = 8;
    if (has_attribute_change3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute_change3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 change_value3 = 9;
    if (has_change_value3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change_value3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdResurrectionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdResurrectionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdResurrectionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdResurrectionInfo::MergeFrom(const mdResurrectionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode_type()) {
      set_mode_type(from.mode_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_attribute_change1()) {
      set_attribute_change1(from.attribute_change1());
    }
    if (from.has_change_value1()) {
      set_change_value1(from.change_value1());
    }
    if (from.has_attribute_change2()) {
      set_attribute_change2(from.attribute_change2());
    }
    if (from.has_change_value2()) {
      set_change_value2(from.change_value2());
    }
    if (from.has_attribute_change3()) {
      set_attribute_change3(from.attribute_change3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_change_value3()) {
      set_change_value3(from.change_value3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdResurrectionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdResurrectionInfo::CopyFrom(const mdResurrectionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdResurrectionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdResurrectionInfo::Swap(mdResurrectionInfo* other) {
  if (other != this) {
    std::swap(mode_type_, other->mode_type_);
    std::swap(count_, other->count_);
    std::swap(price_, other->price_);
    std::swap(attribute_change1_, other->attribute_change1_);
    std::swap(change_value1_, other->change_value1_);
    std::swap(attribute_change2_, other->attribute_change2_);
    std::swap(change_value2_, other->change_value2_);
    std::swap(attribute_change3_, other->attribute_change3_);
    std::swap(change_value3_, other->change_value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdResurrectionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdResurrectionInfo_descriptor_;
  metadata.reflection = mdResurrectionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTeamBattleFormationInfo::kFormationTypeFieldNumber;
const int mdTeamBattleFormationInfo::kFormationLevelFieldNumber;
const int mdTeamBattleFormationInfo::kEnhanceGoldCostFieldNumber;
const int mdTeamBattleFormationInfo::kBuffsFieldNumber;
#endif  // !_MSC_VER

mdTeamBattleFormationInfo::mdTeamBattleFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTeamBattleFormationInfo)
}

void mdTeamBattleFormationInfo::InitAsDefaultInstance() {
}

mdTeamBattleFormationInfo::mdTeamBattleFormationInfo(const mdTeamBattleFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTeamBattleFormationInfo)
}

void mdTeamBattleFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  formation_type_ = 1;
  formation_level_ = 0;
  enhance_gold_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTeamBattleFormationInfo::~mdTeamBattleFormationInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  SharedDtor();
}

void mdTeamBattleFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTeamBattleFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTeamBattleFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTeamBattleFormationInfo_descriptor_;
}

const mdTeamBattleFormationInfo& mdTeamBattleFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTeamBattleFormationInfo* mdTeamBattleFormationInfo::default_instance_ = NULL;

mdTeamBattleFormationInfo* mdTeamBattleFormationInfo::New() const {
  return new mdTeamBattleFormationInfo;
}

void mdTeamBattleFormationInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    formation_type_ = 1;
    formation_level_ = 0;
    enhance_gold_cost_ = 0;
  }
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTeamBattleFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::BattleFormation_TYPE_IsValid(value)) {
            set_formation_type(static_cast< ::b2::protocol::commondata::BattleFormation_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_formation_level;
        break;
      }

      // required int32 formation_level = 2;
      case 2: {
        if (tag == 16) {
         parse_formation_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formation_level_)));
          set_has_formation_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enhance_gold_cost;
        break;
      }

      // required int32 enhance_gold_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_enhance_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_gold_cost_)));
          set_has_enhance_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buffs;
        break;
      }

      // repeated .b2.protocol.commondata.BattleFormationBuff buffs = 4;
      case 4: {
        if (tag == 34) {
         parse_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buffs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  return false;
#undef DO_
}

void mdTeamBattleFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->formation_type(), output);
  }

  // required int32 formation_level = 2;
  if (has_formation_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->formation_level(), output);
  }

  // required int32 enhance_gold_cost = 3;
  if (has_enhance_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enhance_gold_cost(), output);
  }

  // repeated .b2.protocol.commondata.BattleFormationBuff buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buffs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTeamBattleFormationInfo)
}

::google::protobuf::uint8* mdTeamBattleFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->formation_type(), target);
  }

  // required int32 formation_level = 2;
  if (has_formation_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->formation_level(), target);
  }

  // required int32 enhance_gold_cost = 3;
  if (has_enhance_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enhance_gold_cost(), target);
  }

  // repeated .b2.protocol.commondata.BattleFormationBuff buffs = 4;
  for (int i = 0; i < this->buffs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->buffs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTeamBattleFormationInfo)
  return target;
}

int mdTeamBattleFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

    // required int32 formation_level = 2;
    if (has_formation_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formation_level());
    }

    // required int32 enhance_gold_cost = 3;
    if (has_enhance_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_gold_cost());
    }

  }
  // repeated .b2.protocol.commondata.BattleFormationBuff buffs = 4;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTeamBattleFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTeamBattleFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTeamBattleFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTeamBattleFormationInfo::MergeFrom(const mdTeamBattleFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffs_.MergeFrom(from.buffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
    if (from.has_formation_level()) {
      set_formation_level(from.formation_level());
    }
    if (from.has_enhance_gold_cost()) {
      set_enhance_gold_cost(from.enhance_gold_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTeamBattleFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTeamBattleFormationInfo::CopyFrom(const mdTeamBattleFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTeamBattleFormationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->buffs())) return false;
  return true;
}

void mdTeamBattleFormationInfo::Swap(mdTeamBattleFormationInfo* other) {
  if (other != this) {
    std::swap(formation_type_, other->formation_type_);
    std::swap(formation_level_, other->formation_level_);
    std::swap(enhance_gold_cost_, other->enhance_gold_cost_);
    buffs_.Swap(&other->buffs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTeamBattleFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTeamBattleFormationInfo_descriptor_;
  metadata.reflection = mdTeamBattleFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRankInfo::kRankFieldNumber;
const int mdRankInfo::kNodeIndexFieldNumber;
const int mdRankInfo::kOpenLevelFieldNumber;
const int mdRankInfo::kAttributeChangeFieldNumber;
const int mdRankInfo::kChangeValueFieldNumber;
const int mdRankInfo::kNeedRankPromotionPointFieldNumber;
const int mdRankInfo::kNeedActivateGoldFieldNumber;
const int mdRankInfo::kRateFieldNumber;
#endif  // !_MSC_VER

mdRankInfo::mdRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRankInfo)
}

void mdRankInfo::InitAsDefaultInstance() {
}

mdRankInfo::mdRankInfo(const mdRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRankInfo)
}

void mdRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  node_index_ = 0;
  open_level_ = 0;
  attribute_change_ = 1;
  change_value_ = 0;
  need_rank_promotion_point_ = 0;
  need_activate_gold_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRankInfo::~mdRankInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRankInfo)
  SharedDtor();
}

void mdRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRankInfo_descriptor_;
}

const mdRankInfo& mdRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRankInfo* mdRankInfo::default_instance_ = NULL;

mdRankInfo* mdRankInfo::New() const {
  return new mdRankInfo;
}

void mdRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rank_, open_level_);
    ZR_(change_value_, rate_);
    attribute_change_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_node_index;
        break;
      }

      // required int32 node_index = 2;
      case 2: {
        if (tag == 16) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_open_level;
        break;
      }

      // required int32 open_level = 3;
      case 3: {
        if (tag == 24) {
         parse_open_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_level_)));
          set_has_open_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_attribute_change;
        break;
      }

      // required .b2.protocol.commondata.AttributeChange attribute_change = 4;
      case 4: {
        if (tag == 32) {
         parse_attribute_change:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::AttributeChange_IsValid(value)) {
            set_attribute_change(static_cast< ::b2::protocol::commondata::AttributeChange >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_change_value;
        break;
      }

      // required float change_value = 5;
      case 5: {
        if (tag == 45) {
         parse_change_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &change_value_)));
          set_has_change_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_need_rank_promotion_point;
        break;
      }

      // required int32 need_rank_promotion_point = 6;
      case 6: {
        if (tag == 48) {
         parse_need_rank_promotion_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_rank_promotion_point_)));
          set_has_need_rank_promotion_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_need_activate_gold;
        break;
      }

      // required int32 need_activate_gold = 7;
      case 7: {
        if (tag == 56) {
         parse_need_activate_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_activate_gold_)));
          set_has_need_activate_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rate;
        break;
      }

      // required int32 rate = 8;
      case 8: {
        if (tag == 64) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRankInfo)
  return false;
#undef DO_
}

void mdRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRankInfo)
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // required int32 node_index = 2;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node_index(), output);
  }

  // required int32 open_level = 3;
  if (has_open_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->open_level(), output);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change = 4;
  if (has_attribute_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->attribute_change(), output);
  }

  // required float change_value = 5;
  if (has_change_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->change_value(), output);
  }

  // required int32 need_rank_promotion_point = 6;
  if (has_need_rank_promotion_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_rank_promotion_point(), output);
  }

  // required int32 need_activate_gold = 7;
  if (has_need_activate_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->need_activate_gold(), output);
  }

  // required int32 rate = 8;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRankInfo)
}

::google::protobuf::uint8* mdRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRankInfo)
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // required int32 node_index = 2;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node_index(), target);
  }

  // required int32 open_level = 3;
  if (has_open_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->open_level(), target);
  }

  // required .b2.protocol.commondata.AttributeChange attribute_change = 4;
  if (has_attribute_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->attribute_change(), target);
  }

  // required float change_value = 5;
  if (has_change_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->change_value(), target);
  }

  // required int32 need_rank_promotion_point = 6;
  if (has_need_rank_promotion_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_rank_promotion_point(), target);
  }

  // required int32 need_activate_gold = 7;
  if (has_need_activate_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->need_activate_gold(), target);
  }

  // required int32 rate = 8;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRankInfo)
  return target;
}

int mdRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 node_index = 2;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_index());
    }

    // required int32 open_level = 3;
    if (has_open_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_level());
    }

    // required .b2.protocol.commondata.AttributeChange attribute_change = 4;
    if (has_attribute_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute_change());
    }

    // required float change_value = 5;
    if (has_change_value()) {
      total_size += 1 + 4;
    }

    // required int32 need_rank_promotion_point = 6;
    if (has_need_rank_promotion_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_rank_promotion_point());
    }

    // required int32 need_activate_gold = 7;
    if (has_need_activate_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_activate_gold());
    }

    // required int32 rate = 8;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRankInfo::MergeFrom(const mdRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
    if (from.has_open_level()) {
      set_open_level(from.open_level());
    }
    if (from.has_attribute_change()) {
      set_attribute_change(from.attribute_change());
    }
    if (from.has_change_value()) {
      set_change_value(from.change_value());
    }
    if (from.has_need_rank_promotion_point()) {
      set_need_rank_promotion_point(from.need_rank_promotion_point());
    }
    if (from.has_need_activate_gold()) {
      set_need_activate_gold(from.need_activate_gold());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRankInfo::CopyFrom(const mdRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdRankInfo::Swap(mdRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(node_index_, other->node_index_);
    std::swap(open_level_, other->open_level_);
    std::swap(attribute_change_, other->attribute_change_);
    std::swap(change_value_, other->change_value_);
    std::swap(need_rank_promotion_point_, other->need_rank_promotion_point_);
    std::swap(need_activate_gold_, other->need_activate_gold_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRankInfo_descriptor_;
  metadata.reflection = mdRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMainQuestInfo::kIdFieldNumber;
const int mdMainQuestInfo::kMainQuestTypeFieldNumber;
const int mdMainQuestInfo::kActIdFieldNumber;
const int mdMainQuestInfo::kDifficultyFieldNumber;
const int mdMainQuestInfo::kEventTypeFieldNumber;
const int mdMainQuestInfo::kMainViewConditionFieldNumber;
const int mdMainQuestInfo::kCondition1FieldNumber;
const int mdMainQuestInfo::kCondition2FieldNumber;
const int mdMainQuestInfo::kCondition3FieldNumber;
const int mdMainQuestInfo::kCondition4FieldNumber;
const int mdMainQuestInfo::kGoalCountFieldNumber;
const int mdMainQuestInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdMainQuestInfo::mdMainQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMainQuestInfo)
}

void mdMainQuestInfo::InitAsDefaultInstance() {
}

mdMainQuestInfo::mdMainQuestInfo(const mdMainQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMainQuestInfo)
}

void mdMainQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  main_quest_type_ = 1;
  act_id_ = 0;
  difficulty_ = 1;
  event_type_ = 0;
  main_view_condition_ = 0;
  condition_1_ = 0;
  condition_2_ = 0;
  condition_3_ = 0;
  condition_4_ = 0;
  goal_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMainQuestInfo::~mdMainQuestInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMainQuestInfo)
  SharedDtor();
}

void mdMainQuestInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdMainQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMainQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMainQuestInfo_descriptor_;
}

const mdMainQuestInfo& mdMainQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMainQuestInfo* mdMainQuestInfo::default_instance_ = NULL;

mdMainQuestInfo* mdMainQuestInfo::New() const {
  return new mdMainQuestInfo;
}

void mdMainQuestInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMainQuestInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_type_, condition_2_);
    id_ = 0;
    main_quest_type_ = 1;
    act_id_ = 0;
    difficulty_ = 1;
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(condition_3_, condition_4_);
    goal_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMainQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMainQuestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_main_quest_type;
        break;
      }

      // required .b2.protocol.commondata.MainQuestType main_quest_type = 2;
      case 2: {
        if (tag == 16) {
         parse_main_quest_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MainQuestType_IsValid(value)) {
            set_main_quest_type(static_cast< ::b2::protocol::commondata::MainQuestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_act_id;
        break;
      }

      // required int32 act_id = 3;
      case 3: {
        if (tag == 24) {
         parse_act_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_id_)));
          set_has_act_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_difficulty;
        break;
      }

      // required .b2.protocol.commondata.StageDifficulty difficulty = 4;
      case 4: {
        if (tag == 32) {
         parse_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::StageDifficulty_IsValid(value)) {
            set_difficulty(static_cast< ::b2::protocol::commondata::StageDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 5;
      case 5: {
        if (tag == 40) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_main_view_condition;
        break;
      }

      // required int32 main_view_condition = 6;
      case 6: {
        if (tag == 48) {
         parse_main_view_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_view_condition_)));
          set_has_main_view_condition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_condition_1;
        break;
      }

      // required int32 condition_1 = 7;
      case 7: {
        if (tag == 56) {
         parse_condition_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_1_)));
          set_has_condition_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_condition_2;
        break;
      }

      // required int32 condition_2 = 8;
      case 8: {
        if (tag == 64) {
         parse_condition_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_2_)));
          set_has_condition_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_condition_3;
        break;
      }

      // required int32 condition_3 = 9;
      case 9: {
        if (tag == 72) {
         parse_condition_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_3_)));
          set_has_condition_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_condition_4;
        break;
      }

      // required int32 condition_4 = 10;
      case 10: {
        if (tag == 80) {
         parse_condition_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_4_)));
          set_has_condition_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 11;
      case 11: {
        if (tag == 88) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 12;
      case 12: {
        if (tag == 98) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMainQuestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMainQuestInfo)
  return false;
#undef DO_
}

void mdMainQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMainQuestInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.MainQuestType main_quest_type = 2;
  if (has_main_quest_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->main_quest_type(), output);
  }

  // required int32 act_id = 3;
  if (has_act_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->act_id(), output);
  }

  // required .b2.protocol.commondata.StageDifficulty difficulty = 4;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->difficulty(), output);
  }

  // required int32 event_type = 5;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->event_type(), output);
  }

  // required int32 main_view_condition = 6;
  if (has_main_view_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->main_view_condition(), output);
  }

  // required int32 condition_1 = 7;
  if (has_condition_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->condition_1(), output);
  }

  // required int32 condition_2 = 8;
  if (has_condition_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->condition_2(), output);
  }

  // required int32 condition_3 = 9;
  if (has_condition_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->condition_3(), output);
  }

  // required int32 condition_4 = 10;
  if (has_condition_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->condition_4(), output);
  }

  // required int32 goal_count = 11;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->goal_count(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 12;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMainQuestInfo)
}

::google::protobuf::uint8* mdMainQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMainQuestInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.MainQuestType main_quest_type = 2;
  if (has_main_quest_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->main_quest_type(), target);
  }

  // required int32 act_id = 3;
  if (has_act_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->act_id(), target);
  }

  // required .b2.protocol.commondata.StageDifficulty difficulty = 4;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->difficulty(), target);
  }

  // required int32 event_type = 5;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->event_type(), target);
  }

  // required int32 main_view_condition = 6;
  if (has_main_view_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->main_view_condition(), target);
  }

  // required int32 condition_1 = 7;
  if (has_condition_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->condition_1(), target);
  }

  // required int32 condition_2 = 8;
  if (has_condition_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->condition_2(), target);
  }

  // required int32 condition_3 = 9;
  if (has_condition_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->condition_3(), target);
  }

  // required int32 condition_4 = 10;
  if (has_condition_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->condition_4(), target);
  }

  // required int32 goal_count = 11;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->goal_count(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 12;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMainQuestInfo)
  return target;
}

int mdMainQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.MainQuestType main_quest_type = 2;
    if (has_main_quest_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_quest_type());
    }

    // required int32 act_id = 3;
    if (has_act_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_id());
    }

    // required .b2.protocol.commondata.StageDifficulty difficulty = 4;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

    // required int32 event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 main_view_condition = 6;
    if (has_main_view_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_view_condition());
    }

    // required int32 condition_1 = 7;
    if (has_condition_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_1());
    }

    // required int32 condition_2 = 8;
    if (has_condition_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 condition_3 = 9;
    if (has_condition_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_3());
    }

    // required int32 condition_4 = 10;
    if (has_condition_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_4());
    }

    // required int32 goal_count = 11;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 12;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMainQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMainQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMainQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMainQuestInfo::MergeFrom(const mdMainQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_main_quest_type()) {
      set_main_quest_type(from.main_quest_type());
    }
    if (from.has_act_id()) {
      set_act_id(from.act_id());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_main_view_condition()) {
      set_main_view_condition(from.main_view_condition());
    }
    if (from.has_condition_1()) {
      set_condition_1(from.condition_1());
    }
    if (from.has_condition_2()) {
      set_condition_2(from.condition_2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_condition_3()) {
      set_condition_3(from.condition_3());
    }
    if (from.has_condition_4()) {
      set_condition_4(from.condition_4());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMainQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMainQuestInfo::CopyFrom(const mdMainQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMainQuestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdMainQuestInfo::Swap(mdMainQuestInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(main_quest_type_, other->main_quest_type_);
    std::swap(act_id_, other->act_id_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(event_type_, other->event_type_);
    std::swap(main_view_condition_, other->main_view_condition_);
    std::swap(condition_1_, other->condition_1_);
    std::swap(condition_2_, other->condition_2_);
    std::swap(condition_3_, other->condition_3_);
    std::swap(condition_4_, other->condition_4_);
    std::swap(goal_count_, other->goal_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMainQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMainQuestInfo_descriptor_;
  metadata.reflection = mdMainQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDailyQuestInfo::kIdFieldNumber;
const int mdDailyQuestInfo::kEventTypeFieldNumber;
const int mdDailyQuestInfo::kCondition1FieldNumber;
const int mdDailyQuestInfo::kCondition2FieldNumber;
const int mdDailyQuestInfo::kCondition3FieldNumber;
const int mdDailyQuestInfo::kCondition4FieldNumber;
const int mdDailyQuestInfo::kGoalCountFieldNumber;
const int mdDailyQuestInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdDailyQuestInfo::mdDailyQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDailyQuestInfo)
}

void mdDailyQuestInfo::InitAsDefaultInstance() {
}

mdDailyQuestInfo::mdDailyQuestInfo(const mdDailyQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDailyQuestInfo)
}

void mdDailyQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  event_type_ = 0;
  condition_1_ = 0;
  condition_2_ = 0;
  condition_3_ = 0;
  condition_4_ = 0;
  goal_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDailyQuestInfo::~mdDailyQuestInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDailyQuestInfo)
  SharedDtor();
}

void mdDailyQuestInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDailyQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDailyQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDailyQuestInfo_descriptor_;
}

const mdDailyQuestInfo& mdDailyQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDailyQuestInfo* mdDailyQuestInfo::default_instance_ = NULL;

mdDailyQuestInfo* mdDailyQuestInfo::New() const {
  return new mdDailyQuestInfo;
}

void mdDailyQuestInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDailyQuestInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, condition_4_);
    goal_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDailyQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDailyQuestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 2;
      case 2: {
        if (tag == 16) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_condition_1;
        break;
      }

      // required int32 condition_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_condition_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_1_)));
          set_has_condition_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_condition_2;
        break;
      }

      // required int32 condition_2 = 4;
      case 4: {
        if (tag == 32) {
         parse_condition_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_2_)));
          set_has_condition_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition_3;
        break;
      }

      // required int32 condition_3 = 5;
      case 5: {
        if (tag == 40) {
         parse_condition_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_3_)));
          set_has_condition_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_condition_4;
        break;
      }

      // required int32 condition_4 = 6;
      case 6: {
        if (tag == 48) {
         parse_condition_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_4_)));
          set_has_condition_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 7;
      case 7: {
        if (tag == 56) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 8;
      case 8: {
        if (tag == 66) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDailyQuestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDailyQuestInfo)
  return false;
#undef DO_
}

void mdDailyQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDailyQuestInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // required int32 condition_1 = 3;
  if (has_condition_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition_1(), output);
  }

  // required int32 condition_2 = 4;
  if (has_condition_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->condition_2(), output);
  }

  // required int32 condition_3 = 5;
  if (has_condition_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition_3(), output);
  }

  // required int32 condition_4 = 6;
  if (has_condition_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition_4(), output);
  }

  // required int32 goal_count = 7;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goal_count(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 8;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDailyQuestInfo)
}

::google::protobuf::uint8* mdDailyQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDailyQuestInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_type(), target);
  }

  // required int32 condition_1 = 3;
  if (has_condition_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition_1(), target);
  }

  // required int32 condition_2 = 4;
  if (has_condition_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->condition_2(), target);
  }

  // required int32 condition_3 = 5;
  if (has_condition_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition_3(), target);
  }

  // required int32 condition_4 = 6;
  if (has_condition_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition_4(), target);
  }

  // required int32 goal_count = 7;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->goal_count(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 8;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDailyQuestInfo)
  return target;
}

int mdDailyQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 condition_1 = 3;
    if (has_condition_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_1());
    }

    // required int32 condition_2 = 4;
    if (has_condition_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_2());
    }

    // required int32 condition_3 = 5;
    if (has_condition_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_3());
    }

    // required int32 condition_4 = 6;
    if (has_condition_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition_4());
    }

    // required int32 goal_count = 7;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 8;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDailyQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDailyQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDailyQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDailyQuestInfo::MergeFrom(const mdDailyQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_condition_1()) {
      set_condition_1(from.condition_1());
    }
    if (from.has_condition_2()) {
      set_condition_2(from.condition_2());
    }
    if (from.has_condition_3()) {
      set_condition_3(from.condition_3());
    }
    if (from.has_condition_4()) {
      set_condition_4(from.condition_4());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDailyQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDailyQuestInfo::CopyFrom(const mdDailyQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDailyQuestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdDailyQuestInfo::Swap(mdDailyQuestInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(event_type_, other->event_type_);
    std::swap(condition_1_, other->condition_1_);
    std::swap(condition_2_, other->condition_2_);
    std::swap(condition_3_, other->condition_3_);
    std::swap(condition_4_, other->condition_4_);
    std::swap(goal_count_, other->goal_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDailyQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDailyQuestInfo_descriptor_;
  metadata.reflection = mdDailyQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRewardInfo::kIdFieldNumber;
const int mdRewardInfo::kRewardTypeFieldNumber;
const int mdRewardInfo::kRewardIdFieldNumber;
const int mdRewardInfo::kRewardPushTypeFieldNumber;
#endif  // !_MSC_VER

mdRewardInfo::mdRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRewardInfo)
}

void mdRewardInfo::InitAsDefaultInstance() {
}

mdRewardInfo::mdRewardInfo(const mdRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRewardInfo)
}

void mdRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  reward_type_ = 1;
  reward_id_ = GOOGLE_LONGLONG(0);
  reward_push_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRewardInfo::~mdRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRewardInfo)
  SharedDtor();
}

void mdRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRewardInfo_descriptor_;
}

const mdRewardInfo& mdRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRewardInfo* mdRewardInfo::default_instance_ = NULL;

mdRewardInfo* mdRewardInfo::New() const {
  return new mdRewardInfo;
}

void mdRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    reward_type_ = 1;
    reward_id_ = GOOGLE_LONGLONG(0);
    reward_push_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // required .b2.protocol.commondata.RewardType reward_type = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::RewardType_IsValid(value)) {
            set_reward_type(static_cast< ::b2::protocol::commondata::RewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int64 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_push_type;
        break;
      }

      // required .b2.protocol.commondata.RewardPushType reward_push_type = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_push_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::RewardPushType_IsValid(value)) {
            set_reward_push_type(static_cast< ::b2::protocol::commondata::RewardPushType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRewardInfo)
  return false;
#undef DO_
}

void mdRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRewardInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.RewardType reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reward_type(), output);
  }

  // required int64 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->reward_id(), output);
  }

  // required .b2.protocol.commondata.RewardPushType reward_push_type = 4;
  if (has_reward_push_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reward_push_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRewardInfo)
}

::google::protobuf::uint8* mdRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRewardInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.RewardType reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reward_type(), target);
  }

  // required int64 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->reward_id(), target);
  }

  // required .b2.protocol.commondata.RewardPushType reward_push_type = 4;
  if (has_reward_push_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reward_push_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRewardInfo)
  return target;
}

int mdRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.RewardType reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // required int64 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reward_id());
    }

    // required .b2.protocol.commondata.RewardPushType reward_push_type = 4;
    if (has_reward_push_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_push_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRewardInfo::MergeFrom(const mdRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_push_type()) {
      set_reward_push_type(from.reward_push_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRewardInfo::CopyFrom(const mdRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdRewardInfo::Swap(mdRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_push_type_, other->reward_push_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRewardInfo_descriptor_;
  metadata.reflection = mdRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDailyMatchReward::kMatchTypeFieldNumber;
const int mdDailyMatchReward::kRequireCountFieldNumber;
const int mdDailyMatchReward::kRewardGoldFieldNumber;
const int mdDailyMatchReward::kRewardBladepointFieldNumber;
const int mdDailyMatchReward::kRewardGemFieldNumber;
const int mdDailyMatchReward::kRewardItemTemplateIdFieldNumber;
#endif  // !_MSC_VER

mdDailyMatchReward::mdDailyMatchReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDailyMatchReward)
}

void mdDailyMatchReward::InitAsDefaultInstance() {
}

mdDailyMatchReward::mdDailyMatchReward(const mdDailyMatchReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDailyMatchReward)
}

void mdDailyMatchReward::SharedCtor() {
  _cached_size_ = 0;
  match_type_ = 1;
  require_count_ = 0;
  reward_gold_ = 0;
  reward_bladepoint_ = 0;
  reward_gem_ = 0;
  reward_item_template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDailyMatchReward::~mdDailyMatchReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDailyMatchReward)
  SharedDtor();
}

void mdDailyMatchReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDailyMatchReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDailyMatchReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDailyMatchReward_descriptor_;
}

const mdDailyMatchReward& mdDailyMatchReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDailyMatchReward* mdDailyMatchReward::default_instance_ = NULL;

mdDailyMatchReward* mdDailyMatchReward::New() const {
  return new mdDailyMatchReward;
}

void mdDailyMatchReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDailyMatchReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(require_count_, reward_item_template_id_);
    match_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDailyMatchReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDailyMatchReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchInfo_TYPE_IsValid(value)) {
            set_match_type(static_cast< ::b2::protocol::commondata::MatchInfo_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_require_count;
        break;
      }

      // required int32 require_count = 2;
      case 2: {
        if (tag == 16) {
         parse_require_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_count_)));
          set_has_require_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_gold;
        break;
      }

      // required int32 reward_gold = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gold_)));
          set_has_reward_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_bladepoint;
        break;
      }

      // required int32 reward_bladepoint = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_bladepoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_bladepoint_)));
          set_has_reward_bladepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_gem;
        break;
      }

      // required int32 reward_gem = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_gem_)));
          set_has_reward_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_item_template_id;
        break;
      }

      // required int32 reward_item_template_id = 6;
      case 6: {
        if (tag == 48) {
         parse_reward_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_item_template_id_)));
          set_has_reward_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDailyMatchReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDailyMatchReward)
  return false;
#undef DO_
}

void mdDailyMatchReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDailyMatchReward)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_type(), output);
  }

  // required int32 require_count = 2;
  if (has_require_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->require_count(), output);
  }

  // required int32 reward_gold = 3;
  if (has_reward_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_gold(), output);
  }

  // required int32 reward_bladepoint = 4;
  if (has_reward_bladepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_bladepoint(), output);
  }

  // required int32 reward_gem = 5;
  if (has_reward_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_gem(), output);
  }

  // required int32 reward_item_template_id = 6;
  if (has_reward_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_item_template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDailyMatchReward)
}

::google::protobuf::uint8* mdDailyMatchReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDailyMatchReward)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_type(), target);
  }

  // required int32 require_count = 2;
  if (has_require_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->require_count(), target);
  }

  // required int32 reward_gold = 3;
  if (has_reward_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_gold(), target);
  }

  // required int32 reward_bladepoint = 4;
  if (has_reward_bladepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_bladepoint(), target);
  }

  // required int32 reward_gem = 5;
  if (has_reward_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_gem(), target);
  }

  // required int32 reward_item_template_id = 6;
  if (has_reward_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_item_template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDailyMatchReward)
  return target;
}

int mdDailyMatchReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // required int32 require_count = 2;
    if (has_require_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_count());
    }

    // required int32 reward_gold = 3;
    if (has_reward_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gold());
    }

    // required int32 reward_bladepoint = 4;
    if (has_reward_bladepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_bladepoint());
    }

    // required int32 reward_gem = 5;
    if (has_reward_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_gem());
    }

    // required int32 reward_item_template_id = 6;
    if (has_reward_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_item_template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDailyMatchReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDailyMatchReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDailyMatchReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDailyMatchReward::MergeFrom(const mdDailyMatchReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_require_count()) {
      set_require_count(from.require_count());
    }
    if (from.has_reward_gold()) {
      set_reward_gold(from.reward_gold());
    }
    if (from.has_reward_bladepoint()) {
      set_reward_bladepoint(from.reward_bladepoint());
    }
    if (from.has_reward_gem()) {
      set_reward_gem(from.reward_gem());
    }
    if (from.has_reward_item_template_id()) {
      set_reward_item_template_id(from.reward_item_template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDailyMatchReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDailyMatchReward::CopyFrom(const mdDailyMatchReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDailyMatchReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdDailyMatchReward::Swap(mdDailyMatchReward* other) {
  if (other != this) {
    std::swap(match_type_, other->match_type_);
    std::swap(require_count_, other->require_count_);
    std::swap(reward_gold_, other->reward_gold_);
    std::swap(reward_bladepoint_, other->reward_bladepoint_);
    std::swap(reward_gem_, other->reward_gem_);
    std::swap(reward_item_template_id_, other->reward_item_template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDailyMatchReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDailyMatchReward_descriptor_;
  metadata.reflection = mdDailyMatchReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMatchRankingReward::kGradeFieldNumber;
const int mdMatchRankingReward::kRankingMinFieldNumber;
const int mdMatchRankingReward::kRankingMaxFieldNumber;
const int mdMatchRankingReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdMatchRankingReward::mdMatchRankingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMatchRankingReward)
}

void mdMatchRankingReward::InitAsDefaultInstance() {
}

mdMatchRankingReward::mdMatchRankingReward(const mdMatchRankingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMatchRankingReward)
}

void mdMatchRankingReward::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  ranking_min_ = 0;
  ranking_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMatchRankingReward::~mdMatchRankingReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMatchRankingReward)
  SharedDtor();
}

void mdMatchRankingReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdMatchRankingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMatchRankingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMatchRankingReward_descriptor_;
}

const mdMatchRankingReward& mdMatchRankingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMatchRankingReward* mdMatchRankingReward::default_instance_ = NULL;

mdMatchRankingReward* mdMatchRankingReward::New() const {
  return new mdMatchRankingReward;
}

void mdMatchRankingReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMatchRankingReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(grade_, ranking_min_);
    ranking_max_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMatchRankingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMatchRankingReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking_min;
        break;
      }

      // required int32 ranking_min = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_min_)));
          set_has_ranking_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ranking_max;
        break;
      }

      // required int32 ranking_max = 3;
      case 3: {
        if (tag == 24) {
         parse_ranking_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_max_)));
          set_has_ranking_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMatchRankingReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMatchRankingReward)
  return false;
#undef DO_
}

void mdMatchRankingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMatchRankingReward)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 ranking_min = 2;
  if (has_ranking_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking_min(), output);
  }

  // required int32 ranking_max = 3;
  if (has_ranking_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking_max(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMatchRankingReward)
}

::google::protobuf::uint8* mdMatchRankingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMatchRankingReward)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 ranking_min = 2;
  if (has_ranking_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking_min(), target);
  }

  // required int32 ranking_max = 3;
  if (has_ranking_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking_max(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMatchRankingReward)
  return target;
}

int mdMatchRankingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 ranking_min = 2;
    if (has_ranking_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_min());
    }

    // required int32 ranking_max = 3;
    if (has_ranking_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_max());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMatchRankingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMatchRankingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMatchRankingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMatchRankingReward::MergeFrom(const mdMatchRankingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_ranking_min()) {
      set_ranking_min(from.ranking_min());
    }
    if (from.has_ranking_max()) {
      set_ranking_max(from.ranking_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMatchRankingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMatchRankingReward::CopyFrom(const mdMatchRankingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMatchRankingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdMatchRankingReward::Swap(mdMatchRankingReward* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(ranking_min_, other->ranking_min_);
    std::swap(ranking_max_, other->ranking_max_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMatchRankingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMatchRankingReward_descriptor_;
  metadata.reflection = mdMatchRankingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdStageInfo::kStageIdFieldNumber;
const int mdStageInfo::kDifficultyFieldNumber;
const int mdStageInfo::kDifficultyScaleFieldNumber;
const int mdStageInfo::kMapIdFieldNumber;
const int mdStageInfo::kClearTimeGradeHighFieldNumber;
const int mdStageInfo::kClearTimeGradeMediumFieldNumber;
const int mdStageInfo::kRecommendPowerFieldNumber;
const int mdStageInfo::kRecommendAttackFieldNumber;
const int mdStageInfo::kRecommendDefenseFieldNumber;
const int mdStageInfo::kGoldCostExpBuffFieldNumber;
const int mdStageInfo::kGoldCostGoldBuffFieldNumber;
const int mdStageInfo::kGoldCostAutoSkillBuffFieldNumber;
const int mdStageInfo::kGoldCostBoostBuffFieldNumber;
const int mdStageInfo::kAetherTypeFieldNumber;
#endif  // !_MSC_VER

mdStageInfo::mdStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdStageInfo)
}

void mdStageInfo::InitAsDefaultInstance() {
}

mdStageInfo::mdStageInfo(const mdStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdStageInfo)
}

void mdStageInfo::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  difficulty_ = 1;
  difficulty_scale_ = 0;
  map_id_ = 0;
  clear_time_grade_high_ = 0;
  clear_time_grade_medium_ = 0;
  recommend_power_ = 0;
  recommend_attack_ = 0;
  recommend_defense_ = 0;
  gold_cost_exp_buff_ = 0;
  gold_cost_gold_buff_ = 0;
  gold_cost_auto_skill_buff_ = 0;
  gold_cost_boost_buff_ = 0;
  aether_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdStageInfo::~mdStageInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdStageInfo)
  SharedDtor();
}

void mdStageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdStageInfo_descriptor_;
}

const mdStageInfo& mdStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdStageInfo* mdStageInfo::default_instance_ = NULL;

mdStageInfo* mdStageInfo::New() const {
  return new mdStageInfo;
}

void mdStageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdStageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(difficulty_scale_, recommend_attack_);
    stage_id_ = 0;
    difficulty_ = 1;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(recommend_defense_, aether_type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_difficulty;
        break;
      }

      // required .b2.protocol.commondata.StageDifficulty difficulty = 2;
      case 2: {
        if (tag == 16) {
         parse_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::StageDifficulty_IsValid(value)) {
            set_difficulty(static_cast< ::b2::protocol::commondata::StageDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty_scale;
        break;
      }

      // required int32 difficulty_scale = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_scale_)));
          set_has_difficulty_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // required int32 map_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_clear_time_grade_high;
        break;
      }

      // required int32 clear_time_grade_high = 5;
      case 5: {
        if (tag == 40) {
         parse_clear_time_grade_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_time_grade_high_)));
          set_has_clear_time_grade_high();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_clear_time_grade_medium;
        break;
      }

      // required int32 clear_time_grade_medium = 6;
      case 6: {
        if (tag == 48) {
         parse_clear_time_grade_medium:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_time_grade_medium_)));
          set_has_clear_time_grade_medium();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recommend_power;
        break;
      }

      // required int32 recommend_power = 7;
      case 7: {
        if (tag == 56) {
         parse_recommend_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_power_)));
          set_has_recommend_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recommend_attack;
        break;
      }

      // required int32 recommend_attack = 8;
      case 8: {
        if (tag == 64) {
         parse_recommend_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_attack_)));
          set_has_recommend_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_recommend_defense;
        break;
      }

      // required int32 recommend_defense = 9;
      case 9: {
        if (tag == 72) {
         parse_recommend_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_defense_)));
          set_has_recommend_defense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gold_cost_exp_buff;
        break;
      }

      // required int32 gold_cost_exp_buff = 10;
      case 10: {
        if (tag == 80) {
         parse_gold_cost_exp_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_exp_buff_)));
          set_has_gold_cost_exp_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gold_cost_gold_buff;
        break;
      }

      // required int32 gold_cost_gold_buff = 11;
      case 11: {
        if (tag == 88) {
         parse_gold_cost_gold_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_gold_buff_)));
          set_has_gold_cost_gold_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_gold_cost_auto_skill_buff;
        break;
      }

      // required int32 gold_cost_auto_skill_buff = 12;
      case 12: {
        if (tag == 96) {
         parse_gold_cost_auto_skill_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_auto_skill_buff_)));
          set_has_gold_cost_auto_skill_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gold_cost_boost_buff;
        break;
      }

      // required int32 gold_cost_boost_buff = 13;
      case 13: {
        if (tag == 104) {
         parse_gold_cost_boost_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_boost_buff_)));
          set_has_gold_cost_boost_buff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_aether_type;
        break;
      }

      // required .b2.protocol.commondata.Aether.TYPE aether_type = 14;
      case 14: {
        if (tag == 112) {
         parse_aether_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TYPE_IsValid(value)) {
            set_aether_type(static_cast< ::b2::protocol::commondata::Aether_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdStageInfo)
  return false;
#undef DO_
}

void mdStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdStageInfo)
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required .b2.protocol.commondata.StageDifficulty difficulty = 2;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->difficulty(), output);
  }

  // required int32 difficulty_scale = 3;
  if (has_difficulty_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->difficulty_scale(), output);
  }

  // required int32 map_id = 4;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_id(), output);
  }

  // required int32 clear_time_grade_high = 5;
  if (has_clear_time_grade_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clear_time_grade_high(), output);
  }

  // required int32 clear_time_grade_medium = 6;
  if (has_clear_time_grade_medium()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clear_time_grade_medium(), output);
  }

  // required int32 recommend_power = 7;
  if (has_recommend_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recommend_power(), output);
  }

  // required int32 recommend_attack = 8;
  if (has_recommend_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->recommend_attack(), output);
  }

  // required int32 recommend_defense = 9;
  if (has_recommend_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->recommend_defense(), output);
  }

  // required int32 gold_cost_exp_buff = 10;
  if (has_gold_cost_exp_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gold_cost_exp_buff(), output);
  }

  // required int32 gold_cost_gold_buff = 11;
  if (has_gold_cost_gold_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gold_cost_gold_buff(), output);
  }

  // required int32 gold_cost_auto_skill_buff = 12;
  if (has_gold_cost_auto_skill_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gold_cost_auto_skill_buff(), output);
  }

  // required int32 gold_cost_boost_buff = 13;
  if (has_gold_cost_boost_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gold_cost_boost_buff(), output);
  }

  // required .b2.protocol.commondata.Aether.TYPE aether_type = 14;
  if (has_aether_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->aether_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdStageInfo)
}

::google::protobuf::uint8* mdStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdStageInfo)
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required .b2.protocol.commondata.StageDifficulty difficulty = 2;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->difficulty(), target);
  }

  // required int32 difficulty_scale = 3;
  if (has_difficulty_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->difficulty_scale(), target);
  }

  // required int32 map_id = 4;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_id(), target);
  }

  // required int32 clear_time_grade_high = 5;
  if (has_clear_time_grade_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clear_time_grade_high(), target);
  }

  // required int32 clear_time_grade_medium = 6;
  if (has_clear_time_grade_medium()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clear_time_grade_medium(), target);
  }

  // required int32 recommend_power = 7;
  if (has_recommend_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recommend_power(), target);
  }

  // required int32 recommend_attack = 8;
  if (has_recommend_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->recommend_attack(), target);
  }

  // required int32 recommend_defense = 9;
  if (has_recommend_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->recommend_defense(), target);
  }

  // required int32 gold_cost_exp_buff = 10;
  if (has_gold_cost_exp_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gold_cost_exp_buff(), target);
  }

  // required int32 gold_cost_gold_buff = 11;
  if (has_gold_cost_gold_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gold_cost_gold_buff(), target);
  }

  // required int32 gold_cost_auto_skill_buff = 12;
  if (has_gold_cost_auto_skill_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gold_cost_auto_skill_buff(), target);
  }

  // required int32 gold_cost_boost_buff = 13;
  if (has_gold_cost_boost_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gold_cost_boost_buff(), target);
  }

  // required .b2.protocol.commondata.Aether.TYPE aether_type = 14;
  if (has_aether_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->aether_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdStageInfo)
  return target;
}

int mdStageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required .b2.protocol.commondata.StageDifficulty difficulty = 2;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

    // required int32 difficulty_scale = 3;
    if (has_difficulty_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_scale());
    }

    // required int32 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // required int32 clear_time_grade_high = 5;
    if (has_clear_time_grade_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_time_grade_high());
    }

    // required int32 clear_time_grade_medium = 6;
    if (has_clear_time_grade_medium()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_time_grade_medium());
    }

    // required int32 recommend_power = 7;
    if (has_recommend_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_power());
    }

    // required int32 recommend_attack = 8;
    if (has_recommend_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_attack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 recommend_defense = 9;
    if (has_recommend_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_defense());
    }

    // required int32 gold_cost_exp_buff = 10;
    if (has_gold_cost_exp_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost_exp_buff());
    }

    // required int32 gold_cost_gold_buff = 11;
    if (has_gold_cost_gold_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost_gold_buff());
    }

    // required int32 gold_cost_auto_skill_buff = 12;
    if (has_gold_cost_auto_skill_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost_auto_skill_buff());
    }

    // required int32 gold_cost_boost_buff = 13;
    if (has_gold_cost_boost_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost_boost_buff());
    }

    // required .b2.protocol.commondata.Aether.TYPE aether_type = 14;
    if (has_aether_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aether_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdStageInfo::MergeFrom(const mdStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_difficulty_scale()) {
      set_difficulty_scale(from.difficulty_scale());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_clear_time_grade_high()) {
      set_clear_time_grade_high(from.clear_time_grade_high());
    }
    if (from.has_clear_time_grade_medium()) {
      set_clear_time_grade_medium(from.clear_time_grade_medium());
    }
    if (from.has_recommend_power()) {
      set_recommend_power(from.recommend_power());
    }
    if (from.has_recommend_attack()) {
      set_recommend_attack(from.recommend_attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recommend_defense()) {
      set_recommend_defense(from.recommend_defense());
    }
    if (from.has_gold_cost_exp_buff()) {
      set_gold_cost_exp_buff(from.gold_cost_exp_buff());
    }
    if (from.has_gold_cost_gold_buff()) {
      set_gold_cost_gold_buff(from.gold_cost_gold_buff());
    }
    if (from.has_gold_cost_auto_skill_buff()) {
      set_gold_cost_auto_skill_buff(from.gold_cost_auto_skill_buff());
    }
    if (from.has_gold_cost_boost_buff()) {
      set_gold_cost_boost_buff(from.gold_cost_boost_buff());
    }
    if (from.has_aether_type()) {
      set_aether_type(from.aether_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdStageInfo::CopyFrom(const mdStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdStageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void mdStageInfo::Swap(mdStageInfo* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(difficulty_scale_, other->difficulty_scale_);
    std::swap(map_id_, other->map_id_);
    std::swap(clear_time_grade_high_, other->clear_time_grade_high_);
    std::swap(clear_time_grade_medium_, other->clear_time_grade_medium_);
    std::swap(recommend_power_, other->recommend_power_);
    std::swap(recommend_attack_, other->recommend_attack_);
    std::swap(recommend_defense_, other->recommend_defense_);
    std::swap(gold_cost_exp_buff_, other->gold_cost_exp_buff_);
    std::swap(gold_cost_gold_buff_, other->gold_cost_gold_buff_);
    std::swap(gold_cost_auto_skill_buff_, other->gold_cost_auto_skill_buff_);
    std::swap(gold_cost_boost_buff_, other->gold_cost_boost_buff_);
    std::swap(aether_type_, other->aether_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdStageInfo_descriptor_;
  metadata.reflection = mdStageInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* mdCounterDungeon_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCounterDungeon_TYPE_descriptor_;
}
bool mdCounterDungeon_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mdCounterDungeon_TYPE mdCounterDungeon::ARMOR;
const mdCounterDungeon_TYPE mdCounterDungeon::WEAPON;
const mdCounterDungeon_TYPE mdCounterDungeon::ACCESSORY;
const mdCounterDungeon_TYPE mdCounterDungeon::GOLD;
const mdCounterDungeon_TYPE mdCounterDungeon::TYPE_MIN;
const mdCounterDungeon_TYPE mdCounterDungeon::TYPE_MAX;
const int mdCounterDungeon::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* mdCounterDungeon_DIFFICULTY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCounterDungeon_DIFFICULTY_descriptor_;
}
bool mdCounterDungeon_DIFFICULTY_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mdCounterDungeon_DIFFICULTY mdCounterDungeon::EASY;
const mdCounterDungeon_DIFFICULTY mdCounterDungeon::NORMAL;
const mdCounterDungeon_DIFFICULTY mdCounterDungeon::HARD;
const mdCounterDungeon_DIFFICULTY mdCounterDungeon::DIFFICULTY_MIN;
const mdCounterDungeon_DIFFICULTY mdCounterDungeon::DIFFICULTY_MAX;
const int mdCounterDungeon::DIFFICULTY_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int mdCounterDungeon::kDungeonIdFieldNumber;
const int mdCounterDungeon::kDungeonTypeFieldNumber;
const int mdCounterDungeon::kDifficultyFieldNumber;
const int mdCounterDungeon::kDifficultyLevelFieldNumber;
const int mdCounterDungeon::kDifficultyScaleFieldNumber;
const int mdCounterDungeon::kRecommendPowerFieldNumber;
const int mdCounterDungeon::kRecommendAttackFieldNumber;
const int mdCounterDungeon::kRecommendDefenseFieldNumber;
const int mdCounterDungeon::kRewardsFieldNumber;
const int mdCounterDungeon::kDropGoldMinFieldNumber;
const int mdCounterDungeon::kDropGoldMaxFieldNumber;
#endif  // !_MSC_VER

mdCounterDungeon::mdCounterDungeon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdCounterDungeon)
}

void mdCounterDungeon::InitAsDefaultInstance() {
}

mdCounterDungeon::mdCounterDungeon(const mdCounterDungeon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdCounterDungeon)
}

void mdCounterDungeon::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0;
  dungeon_type_ = 1;
  difficulty_ = 1;
  difficulty_level_ = 0;
  difficulty_scale_ = 0;
  recommend_power_ = 0;
  recommend_attack_ = 0;
  recommend_defense_ = 0;
  drop_gold_min_ = 0;
  drop_gold_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdCounterDungeon::~mdCounterDungeon() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdCounterDungeon)
  SharedDtor();
}

void mdCounterDungeon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdCounterDungeon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdCounterDungeon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCounterDungeon_descriptor_;
}

const mdCounterDungeon& mdCounterDungeon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdCounterDungeon* mdCounterDungeon::default_instance_ = NULL;

mdCounterDungeon* mdCounterDungeon::New() const {
  return new mdCounterDungeon;
}

void mdCounterDungeon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdCounterDungeon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(difficulty_level_, recommend_defense_);
    dungeon_id_ = 0;
    dungeon_type_ = 1;
    difficulty_ = 1;
  }
  ZR_(drop_gold_min_, drop_gold_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdCounterDungeon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdCounterDungeon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dungeon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dungeon_type;
        break;
      }

      // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 2;
      case 2: {
        if (tag == 16) {
         parse_dungeon_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::masterdata::mdCounterDungeon_TYPE_IsValid(value)) {
            set_dungeon_type(static_cast< ::b2::protocol::masterdata::mdCounterDungeon_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // required .b2.protocol.masterdata.mdCounterDungeon.DIFFICULTY difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::masterdata::mdCounterDungeon_DIFFICULTY_IsValid(value)) {
            set_difficulty(static_cast< ::b2::protocol::masterdata::mdCounterDungeon_DIFFICULTY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_difficulty_level;
        break;
      }

      // required int32 difficulty_level = 4;
      case 4: {
        if (tag == 32) {
         parse_difficulty_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_level_)));
          set_has_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_difficulty_scale;
        break;
      }

      // required int32 difficulty_scale = 5;
      case 5: {
        if (tag == 40) {
         parse_difficulty_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_scale_)));
          set_has_difficulty_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_recommend_power;
        break;
      }

      // required int32 recommend_power = 6;
      case 6: {
        if (tag == 48) {
         parse_recommend_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_power_)));
          set_has_recommend_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recommend_attack;
        break;
      }

      // required int32 recommend_attack = 7;
      case 7: {
        if (tag == 56) {
         parse_recommend_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_attack_)));
          set_has_recommend_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recommend_defense;
        break;
      }

      // required int32 recommend_defense = 8;
      case 8: {
        if (tag == 64) {
         parse_recommend_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_defense_)));
          set_has_recommend_defense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.RewardRandomCount rewards = 10;
      case 10: {
        if (tag == 82) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        if (input->ExpectTag(88)) goto parse_drop_gold_min;
        break;
      }

      // required int32 drop_gold_min = 11;
      case 11: {
        if (tag == 88) {
         parse_drop_gold_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_gold_min_)));
          set_has_drop_gold_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_drop_gold_max;
        break;
      }

      // required int32 drop_gold_max = 12;
      case 12: {
        if (tag == 96) {
         parse_drop_gold_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_gold_max_)));
          set_has_drop_gold_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdCounterDungeon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdCounterDungeon)
  return false;
#undef DO_
}

void mdCounterDungeon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdCounterDungeon)
  // required int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeon_id(), output);
  }

  // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 2;
  if (has_dungeon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dungeon_type(), output);
  }

  // required .b2.protocol.masterdata.mdCounterDungeon.DIFFICULTY difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->difficulty(), output);
  }

  // required int32 difficulty_level = 4;
  if (has_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->difficulty_level(), output);
  }

  // required int32 difficulty_scale = 5;
  if (has_difficulty_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->difficulty_scale(), output);
  }

  // required int32 recommend_power = 6;
  if (has_recommend_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recommend_power(), output);
  }

  // required int32 recommend_attack = 7;
  if (has_recommend_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recommend_attack(), output);
  }

  // required int32 recommend_defense = 8;
  if (has_recommend_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->recommend_defense(), output);
  }

  // repeated .b2.protocol.commondata.RewardRandomCount rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rewards(i), output);
  }

  // required int32 drop_gold_min = 11;
  if (has_drop_gold_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->drop_gold_min(), output);
  }

  // required int32 drop_gold_max = 12;
  if (has_drop_gold_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->drop_gold_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdCounterDungeon)
}

::google::protobuf::uint8* mdCounterDungeon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdCounterDungeon)
  // required int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeon_id(), target);
  }

  // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 2;
  if (has_dungeon_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dungeon_type(), target);
  }

  // required .b2.protocol.masterdata.mdCounterDungeon.DIFFICULTY difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty(), target);
  }

  // required int32 difficulty_level = 4;
  if (has_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->difficulty_level(), target);
  }

  // required int32 difficulty_scale = 5;
  if (has_difficulty_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->difficulty_scale(), target);
  }

  // required int32 recommend_power = 6;
  if (has_recommend_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->recommend_power(), target);
  }

  // required int32 recommend_attack = 7;
  if (has_recommend_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recommend_attack(), target);
  }

  // required int32 recommend_defense = 8;
  if (has_recommend_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->recommend_defense(), target);
  }

  // repeated .b2.protocol.commondata.RewardRandomCount rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rewards(i), target);
  }

  // required int32 drop_gold_min = 11;
  if (has_drop_gold_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->drop_gold_min(), target);
  }

  // required int32 drop_gold_max = 12;
  if (has_drop_gold_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->drop_gold_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdCounterDungeon)
  return target;
}

int mdCounterDungeon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

    // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 2;
    if (has_dungeon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dungeon_type());
    }

    // required .b2.protocol.masterdata.mdCounterDungeon.DIFFICULTY difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

    // required int32 difficulty_level = 4;
    if (has_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_level());
    }

    // required int32 difficulty_scale = 5;
    if (has_difficulty_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_scale());
    }

    // required int32 recommend_power = 6;
    if (has_recommend_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_power());
    }

    // required int32 recommend_attack = 7;
    if (has_recommend_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_attack());
    }

    // required int32 recommend_defense = 8;
    if (has_recommend_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_defense());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 drop_gold_min = 11;
    if (has_drop_gold_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_gold_min());
    }

    // required int32 drop_gold_max = 12;
    if (has_drop_gold_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_gold_max());
    }

  }
  // repeated .b2.protocol.commondata.RewardRandomCount rewards = 10;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdCounterDungeon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdCounterDungeon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdCounterDungeon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdCounterDungeon::MergeFrom(const mdCounterDungeon& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
    if (from.has_dungeon_type()) {
      set_dungeon_type(from.dungeon_type());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
    if (from.has_difficulty_level()) {
      set_difficulty_level(from.difficulty_level());
    }
    if (from.has_difficulty_scale()) {
      set_difficulty_scale(from.difficulty_scale());
    }
    if (from.has_recommend_power()) {
      set_recommend_power(from.recommend_power());
    }
    if (from.has_recommend_attack()) {
      set_recommend_attack(from.recommend_attack());
    }
    if (from.has_recommend_defense()) {
      set_recommend_defense(from.recommend_defense());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_drop_gold_min()) {
      set_drop_gold_min(from.drop_gold_min());
    }
    if (from.has_drop_gold_max()) {
      set_drop_gold_max(from.drop_gold_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdCounterDungeon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdCounterDungeon::CopyFrom(const mdCounterDungeon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdCounterDungeon::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006ff) != 0x000006ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdCounterDungeon::Swap(mdCounterDungeon* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(dungeon_type_, other->dungeon_type_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(difficulty_level_, other->difficulty_level_);
    std::swap(difficulty_scale_, other->difficulty_scale_);
    std::swap(recommend_power_, other->recommend_power_);
    std::swap(recommend_attack_, other->recommend_attack_);
    std::swap(recommend_defense_, other->recommend_defense_);
    rewards_.Swap(&other->rewards_);
    std::swap(drop_gold_min_, other->drop_gold_min_);
    std::swap(drop_gold_max_, other->drop_gold_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdCounterDungeon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdCounterDungeon_descriptor_;
  metadata.reflection = mdCounterDungeon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdCounterDungeonPeriod::kDungeonTypeFieldNumber;
const int mdCounterDungeonPeriod::kDayOfWeekFieldNumber;
const int mdCounterDungeonPeriod::kBeginHourFieldNumber;
const int mdCounterDungeonPeriod::kBeginMinFieldNumber;
const int mdCounterDungeonPeriod::kEndHourFieldNumber;
const int mdCounterDungeonPeriod::kEndMinFieldNumber;
#endif  // !_MSC_VER

mdCounterDungeonPeriod::mdCounterDungeonPeriod()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdCounterDungeonPeriod)
}

void mdCounterDungeonPeriod::InitAsDefaultInstance() {
}

mdCounterDungeonPeriod::mdCounterDungeonPeriod(const mdCounterDungeonPeriod& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdCounterDungeonPeriod)
}

void mdCounterDungeonPeriod::SharedCtor() {
  _cached_size_ = 0;
  dungeon_type_ = 1;
  day_of_week_ = 1;
  begin_hour_ = 0;
  begin_min_ = 0;
  end_hour_ = 0;
  end_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdCounterDungeonPeriod::~mdCounterDungeonPeriod() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdCounterDungeonPeriod)
  SharedDtor();
}

void mdCounterDungeonPeriod::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdCounterDungeonPeriod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdCounterDungeonPeriod::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCounterDungeonPeriod_descriptor_;
}

const mdCounterDungeonPeriod& mdCounterDungeonPeriod::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdCounterDungeonPeriod* mdCounterDungeonPeriod::default_instance_ = NULL;

mdCounterDungeonPeriod* mdCounterDungeonPeriod::New() const {
  return new mdCounterDungeonPeriod;
}

void mdCounterDungeonPeriod::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdCounterDungeonPeriod*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(begin_hour_, end_min_);
    dungeon_type_ = 1;
    day_of_week_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdCounterDungeonPeriod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdCounterDungeonPeriod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::masterdata::mdCounterDungeon_TYPE_IsValid(value)) {
            set_dungeon_type(static_cast< ::b2::protocol::masterdata::mdCounterDungeon_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_of_week;
        break;
      }

      // required .b2.protocol.commondata.DayOfWeek day_of_week = 2;
      case 2: {
        if (tag == 16) {
         parse_day_of_week:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DayOfWeek_IsValid(value)) {
            set_day_of_week(static_cast< ::b2::protocol::commondata::DayOfWeek >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_begin_hour;
        break;
      }

      // required int32 begin_hour = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_hour_)));
          set_has_begin_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_begin_min;
        break;
      }

      // required int32 begin_min = 4;
      case 4: {
        if (tag == 32) {
         parse_begin_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_min_)));
          set_has_begin_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_hour;
        break;
      }

      // required int32 end_hour = 5;
      case 5: {
        if (tag == 40) {
         parse_end_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_hour_)));
          set_has_end_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_min;
        break;
      }

      // required int32 end_min = 6;
      case 6: {
        if (tag == 48) {
         parse_end_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_min_)));
          set_has_end_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdCounterDungeonPeriod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdCounterDungeonPeriod)
  return false;
#undef DO_
}

void mdCounterDungeonPeriod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdCounterDungeonPeriod)
  // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 1;
  if (has_dungeon_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dungeon_type(), output);
  }

  // required .b2.protocol.commondata.DayOfWeek day_of_week = 2;
  if (has_day_of_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->day_of_week(), output);
  }

  // required int32 begin_hour = 3;
  if (has_begin_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->begin_hour(), output);
  }

  // required int32 begin_min = 4;
  if (has_begin_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->begin_min(), output);
  }

  // required int32 end_hour = 5;
  if (has_end_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_hour(), output);
  }

  // required int32 end_min = 6;
  if (has_end_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdCounterDungeonPeriod)
}

::google::protobuf::uint8* mdCounterDungeonPeriod::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdCounterDungeonPeriod)
  // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 1;
  if (has_dungeon_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dungeon_type(), target);
  }

  // required .b2.protocol.commondata.DayOfWeek day_of_week = 2;
  if (has_day_of_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->day_of_week(), target);
  }

  // required int32 begin_hour = 3;
  if (has_begin_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->begin_hour(), target);
  }

  // required int32 begin_min = 4;
  if (has_begin_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->begin_min(), target);
  }

  // required int32 end_hour = 5;
  if (has_end_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_hour(), target);
  }

  // required int32 end_min = 6;
  if (has_end_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdCounterDungeonPeriod)
  return target;
}

int mdCounterDungeonPeriod::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.masterdata.mdCounterDungeon.TYPE dungeon_type = 1;
    if (has_dungeon_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dungeon_type());
    }

    // required .b2.protocol.commondata.DayOfWeek day_of_week = 2;
    if (has_day_of_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->day_of_week());
    }

    // required int32 begin_hour = 3;
    if (has_begin_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_hour());
    }

    // required int32 begin_min = 4;
    if (has_begin_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_min());
    }

    // required int32 end_hour = 5;
    if (has_end_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_hour());
    }

    // required int32 end_min = 6;
    if (has_end_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdCounterDungeonPeriod::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdCounterDungeonPeriod* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdCounterDungeonPeriod*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdCounterDungeonPeriod::MergeFrom(const mdCounterDungeonPeriod& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_type()) {
      set_dungeon_type(from.dungeon_type());
    }
    if (from.has_day_of_week()) {
      set_day_of_week(from.day_of_week());
    }
    if (from.has_begin_hour()) {
      set_begin_hour(from.begin_hour());
    }
    if (from.has_begin_min()) {
      set_begin_min(from.begin_min());
    }
    if (from.has_end_hour()) {
      set_end_hour(from.end_hour());
    }
    if (from.has_end_min()) {
      set_end_min(from.end_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdCounterDungeonPeriod::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdCounterDungeonPeriod::CopyFrom(const mdCounterDungeonPeriod& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdCounterDungeonPeriod::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdCounterDungeonPeriod::Swap(mdCounterDungeonPeriod* other) {
  if (other != this) {
    std::swap(dungeon_type_, other->dungeon_type_);
    std::swap(day_of_week_, other->day_of_week_);
    std::swap(begin_hour_, other->begin_hour_);
    std::swap(begin_min_, other->begin_min_);
    std::swap(end_hour_, other->end_hour_);
    std::swap(end_min_, other->end_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdCounterDungeonPeriod::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdCounterDungeonPeriod_descriptor_;
  metadata.reflection = mdCounterDungeonPeriod_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdCounterDungeonWeekReward::kIndexFieldNumber;
const int mdCounterDungeonWeekReward::kRequireCountFieldNumber;
const int mdCounterDungeonWeekReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdCounterDungeonWeekReward::mdCounterDungeonWeekReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdCounterDungeonWeekReward)
}

void mdCounterDungeonWeekReward::InitAsDefaultInstance() {
}

mdCounterDungeonWeekReward::mdCounterDungeonWeekReward(const mdCounterDungeonWeekReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdCounterDungeonWeekReward)
}

void mdCounterDungeonWeekReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  require_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdCounterDungeonWeekReward::~mdCounterDungeonWeekReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  SharedDtor();
}

void mdCounterDungeonWeekReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdCounterDungeonWeekReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdCounterDungeonWeekReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCounterDungeonWeekReward_descriptor_;
}

const mdCounterDungeonWeekReward& mdCounterDungeonWeekReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdCounterDungeonWeekReward* mdCounterDungeonWeekReward::default_instance_ = NULL;

mdCounterDungeonWeekReward* mdCounterDungeonWeekReward::New() const {
  return new mdCounterDungeonWeekReward;
}

void mdCounterDungeonWeekReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdCounterDungeonWeekReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, require_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdCounterDungeonWeekReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_require_count;
        break;
      }

      // required int32 require_count = 2;
      case 2: {
        if (tag == 16) {
         parse_require_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_count_)));
          set_has_require_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 3;
      case 3: {
        if (tag == 26) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  return false;
#undef DO_
}

void mdCounterDungeonWeekReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 require_count = 2;
  if (has_require_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->require_count(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdCounterDungeonWeekReward)
}

::google::protobuf::uint8* mdCounterDungeonWeekReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 require_count = 2;
  if (has_require_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->require_count(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdCounterDungeonWeekReward)
  return target;
}

int mdCounterDungeonWeekReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 require_count = 2;
    if (has_require_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_count());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 3;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdCounterDungeonWeekReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdCounterDungeonWeekReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdCounterDungeonWeekReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdCounterDungeonWeekReward::MergeFrom(const mdCounterDungeonWeekReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_require_count()) {
      set_require_count(from.require_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdCounterDungeonWeekReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdCounterDungeonWeekReward::CopyFrom(const mdCounterDungeonWeekReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdCounterDungeonWeekReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdCounterDungeonWeekReward::Swap(mdCounterDungeonWeekReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(require_count_, other->require_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdCounterDungeonWeekReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdCounterDungeonWeekReward_descriptor_;
  metadata.reflection = mdCounterDungeonWeekReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMissionInfo::kMissionIdFieldNumber;
const int mdMissionInfo::kMissionTypeFieldNumber;
const int mdMissionInfo::kEventTypeFieldNumber;
const int mdMissionInfo::kCondition1FieldNumber;
const int mdMissionInfo::kCondition2FieldNumber;
const int mdMissionInfo::kCondition3FieldNumber;
const int mdMissionInfo::kCondition4FieldNumber;
const int mdMissionInfo::kGoalCountFieldNumber;
const int mdMissionInfo::kCompletePointFieldNumber;
const int mdMissionInfo::kRewardIdFieldNumber;
const int mdMissionInfo::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdMissionInfo::mdMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMissionInfo)
}

void mdMissionInfo::InitAsDefaultInstance() {
}

mdMissionInfo::mdMissionInfo(const mdMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMissionInfo)
}

void mdMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0;
  mission_type_ = 1;
  event_type_ = 0;
  condition1_ = 0;
  condition2_ = 0;
  condition3_ = 0;
  condition4_ = 0;
  goal_count_ = 0;
  complete_point_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMissionInfo::~mdMissionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMissionInfo)
  SharedDtor();
}

void mdMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMissionInfo_descriptor_;
}

const mdMissionInfo& mdMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMissionInfo* mdMissionInfo::default_instance_ = NULL;

mdMissionInfo* mdMissionInfo::New() const {
  return new mdMissionInfo;
}

void mdMissionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMissionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_type_, goal_count_);
    mission_id_ = 0;
    mission_type_ = 1;
  }
  ZR_(complete_point_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMissionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mission_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mission_type;
        break;
      }

      // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 2;
      case 2: {
        if (tag == 16) {
         parse_mission_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionType_IsValid(value)) {
            set_mission_type(static_cast< ::b2::protocol::commondata::MissionInfo_MissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 3;
      case 3: {
        if (tag == 24) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_condition1;
        break;
      }

      // required int32 condition1 = 4;
      case 4: {
        if (tag == 32) {
         parse_condition1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition1_)));
          set_has_condition1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition2;
        break;
      }

      // required int32 condition2 = 5;
      case 5: {
        if (tag == 40) {
         parse_condition2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition2_)));
          set_has_condition2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_condition3;
        break;
      }

      // required int32 condition3 = 6;
      case 6: {
        if (tag == 48) {
         parse_condition3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition3_)));
          set_has_condition3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_condition4;
        break;
      }

      // required int32 condition4 = 7;
      case 7: {
        if (tag == 56) {
         parse_condition4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition4_)));
          set_has_condition4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 8;
      case 8: {
        if (tag == 64) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_complete_point;
        break;
      }

      // required int32 complete_point = 9;
      case 9: {
        if (tag == 72) {
         parse_complete_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &complete_point_)));
          set_has_complete_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 11;
      case 11: {
        if (tag == 88) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMissionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMissionInfo)
  return false;
#undef DO_
}

void mdMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMissionInfo)
  // required int32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 2;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mission_type(), output);
  }

  // required int32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_type(), output);
  }

  // required int32 condition1 = 4;
  if (has_condition1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->condition1(), output);
  }

  // required int32 condition2 = 5;
  if (has_condition2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition2(), output);
  }

  // required int32 condition3 = 6;
  if (has_condition3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition3(), output);
  }

  // required int32 condition4 = 7;
  if (has_condition4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->condition4(), output);
  }

  // required int32 goal_count = 8;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goal_count(), output);
  }

  // required int32 complete_point = 9;
  if (has_complete_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->complete_point(), output);
  }

  // required int32 reward_id = 10;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reward_id(), output);
  }

  // required int32 reward_count = 11;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMissionInfo)
}

::google::protobuf::uint8* mdMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMissionInfo)
  // required int32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 2;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mission_type(), target);
  }

  // required int32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_type(), target);
  }

  // required int32 condition1 = 4;
  if (has_condition1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->condition1(), target);
  }

  // required int32 condition2 = 5;
  if (has_condition2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition2(), target);
  }

  // required int32 condition3 = 6;
  if (has_condition3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition3(), target);
  }

  // required int32 condition4 = 7;
  if (has_condition4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->condition4(), target);
  }

  // required int32 goal_count = 8;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goal_count(), target);
  }

  // required int32 complete_point = 9;
  if (has_complete_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->complete_point(), target);
  }

  // required int32 reward_id = 10;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reward_id(), target);
  }

  // required int32 reward_count = 11;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMissionInfo)
  return target;
}

int mdMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 2;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_type());
    }

    // required int32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 condition1 = 4;
    if (has_condition1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition1());
    }

    // required int32 condition2 = 5;
    if (has_condition2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition2());
    }

    // required int32 condition3 = 6;
    if (has_condition3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition3());
    }

    // required int32 condition4 = 7;
    if (has_condition4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition4());
    }

    // required int32 goal_count = 8;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 complete_point = 9;
    if (has_complete_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->complete_point());
    }

    // required int32 reward_id = 10;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 11;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMissionInfo::MergeFrom(const mdMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_condition1()) {
      set_condition1(from.condition1());
    }
    if (from.has_condition2()) {
      set_condition2(from.condition2());
    }
    if (from.has_condition3()) {
      set_condition3(from.condition3());
    }
    if (from.has_condition4()) {
      set_condition4(from.condition4());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_complete_point()) {
      set_complete_point(from.complete_point());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMissionInfo::CopyFrom(const mdMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void mdMissionInfo::Swap(mdMissionInfo* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(mission_type_, other->mission_type_);
    std::swap(event_type_, other->event_type_);
    std::swap(condition1_, other->condition1_);
    std::swap(condition2_, other->condition2_);
    std::swap(condition3_, other->condition3_);
    std::swap(condition4_, other->condition4_);
    std::swap(goal_count_, other->goal_count_);
    std::swap(complete_point_, other->complete_point_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMissionInfo_descriptor_;
  metadata.reflection = mdMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSerialMissionInfo::kMissionIdFieldNumber;
const int mdSerialMissionInfo::kMissionStepFieldNumber;
const int mdSerialMissionInfo::kEventTypeFieldNumber;
const int mdSerialMissionInfo::kCondition1FieldNumber;
const int mdSerialMissionInfo::kCondition2FieldNumber;
const int mdSerialMissionInfo::kCondition3FieldNumber;
const int mdSerialMissionInfo::kCondition4FieldNumber;
const int mdSerialMissionInfo::kGoalCountFieldNumber;
const int mdSerialMissionInfo::kRewardIdFieldNumber;
const int mdSerialMissionInfo::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdSerialMissionInfo::mdSerialMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSerialMissionInfo)
}

void mdSerialMissionInfo::InitAsDefaultInstance() {
}

mdSerialMissionInfo::mdSerialMissionInfo(const mdSerialMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSerialMissionInfo)
}

void mdSerialMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_id_ = 0;
  mission_step_ = 0;
  event_type_ = 0;
  condition1_ = 0;
  condition2_ = 0;
  condition3_ = 0;
  condition4_ = 0;
  goal_count_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSerialMissionInfo::~mdSerialMissionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSerialMissionInfo)
  SharedDtor();
}

void mdSerialMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSerialMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSerialMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSerialMissionInfo_descriptor_;
}

const mdSerialMissionInfo& mdSerialMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSerialMissionInfo* mdSerialMissionInfo::default_instance_ = NULL;

mdSerialMissionInfo* mdSerialMissionInfo::New() const {
  return new mdSerialMissionInfo;
}

void mdSerialMissionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSerialMissionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mission_id_, goal_count_);
  }
  ZR_(reward_id_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSerialMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSerialMissionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mission_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mission_step;
        break;
      }

      // required int32 mission_step = 2;
      case 2: {
        if (tag == 16) {
         parse_mission_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_step_)));
          set_has_mission_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 3;
      case 3: {
        if (tag == 24) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_condition1;
        break;
      }

      // required int32 condition1 = 4;
      case 4: {
        if (tag == 32) {
         parse_condition1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition1_)));
          set_has_condition1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition2;
        break;
      }

      // required int32 condition2 = 5;
      case 5: {
        if (tag == 40) {
         parse_condition2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition2_)));
          set_has_condition2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_condition3;
        break;
      }

      // required int32 condition3 = 6;
      case 6: {
        if (tag == 48) {
         parse_condition3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition3_)));
          set_has_condition3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_condition4;
        break;
      }

      // required int32 condition4 = 7;
      case 7: {
        if (tag == 56) {
         parse_condition4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition4_)));
          set_has_condition4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 8;
      case 8: {
        if (tag == 64) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSerialMissionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSerialMissionInfo)
  return false;
#undef DO_
}

void mdSerialMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSerialMissionInfo)
  // required int32 mission_id = 1;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_id(), output);
  }

  // required int32 mission_step = 2;
  if (has_mission_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_step(), output);
  }

  // required int32 event_type = 3;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->event_type(), output);
  }

  // required int32 condition1 = 4;
  if (has_condition1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->condition1(), output);
  }

  // required int32 condition2 = 5;
  if (has_condition2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition2(), output);
  }

  // required int32 condition3 = 6;
  if (has_condition3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition3(), output);
  }

  // required int32 condition4 = 7;
  if (has_condition4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->condition4(), output);
  }

  // required int32 goal_count = 8;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goal_count(), output);
  }

  // required int32 reward_id = 9;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_id(), output);
  }

  // required int32 reward_count = 10;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSerialMissionInfo)
}

::google::protobuf::uint8* mdSerialMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSerialMissionInfo)
  // required int32 mission_id = 1;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_id(), target);
  }

  // required int32 mission_step = 2;
  if (has_mission_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_step(), target);
  }

  // required int32 event_type = 3;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->event_type(), target);
  }

  // required int32 condition1 = 4;
  if (has_condition1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->condition1(), target);
  }

  // required int32 condition2 = 5;
  if (has_condition2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition2(), target);
  }

  // required int32 condition3 = 6;
  if (has_condition3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition3(), target);
  }

  // required int32 condition4 = 7;
  if (has_condition4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->condition4(), target);
  }

  // required int32 goal_count = 8;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goal_count(), target);
  }

  // required int32 reward_id = 9;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_id(), target);
  }

  // required int32 reward_count = 10;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSerialMissionInfo)
  return target;
}

int mdSerialMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mission_id = 1;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // required int32 mission_step = 2;
    if (has_mission_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_step());
    }

    // required int32 event_type = 3;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 condition1 = 4;
    if (has_condition1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition1());
    }

    // required int32 condition2 = 5;
    if (has_condition2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition2());
    }

    // required int32 condition3 = 6;
    if (has_condition3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition3());
    }

    // required int32 condition4 = 7;
    if (has_condition4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition4());
    }

    // required int32 goal_count = 8;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_id = 9;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 10;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSerialMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSerialMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSerialMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSerialMissionInfo::MergeFrom(const mdSerialMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_mission_step()) {
      set_mission_step(from.mission_step());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_condition1()) {
      set_condition1(from.condition1());
    }
    if (from.has_condition2()) {
      set_condition2(from.condition2());
    }
    if (from.has_condition3()) {
      set_condition3(from.condition3());
    }
    if (from.has_condition4()) {
      set_condition4(from.condition4());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSerialMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSerialMissionInfo::CopyFrom(const mdSerialMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSerialMissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void mdSerialMissionInfo::Swap(mdSerialMissionInfo* other) {
  if (other != this) {
    std::swap(mission_id_, other->mission_id_);
    std::swap(mission_step_, other->mission_step_);
    std::swap(event_type_, other->event_type_);
    std::swap(condition1_, other->condition1_);
    std::swap(condition2_, other->condition2_);
    std::swap(condition3_, other->condition3_);
    std::swap(condition4_, other->condition4_);
    std::swap(goal_count_, other->goal_count_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSerialMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSerialMissionInfo_descriptor_;
  metadata.reflection = mdSerialMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMissionCompletePointInfo::kMissionTypeFieldNumber;
const int mdMissionCompletePointInfo::kIndexFieldNumber;
const int mdMissionCompletePointInfo::kRequirePointFieldNumber;
const int mdMissionCompletePointInfo::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdMissionCompletePointInfo::mdMissionCompletePointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMissionCompletePointInfo)
}

void mdMissionCompletePointInfo::InitAsDefaultInstance() {
}

mdMissionCompletePointInfo::mdMissionCompletePointInfo(const mdMissionCompletePointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMissionCompletePointInfo)
}

void mdMissionCompletePointInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 1;
  index_ = 0;
  require_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMissionCompletePointInfo::~mdMissionCompletePointInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMissionCompletePointInfo)
  SharedDtor();
}

void mdMissionCompletePointInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdMissionCompletePointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMissionCompletePointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMissionCompletePointInfo_descriptor_;
}

const mdMissionCompletePointInfo& mdMissionCompletePointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMissionCompletePointInfo* mdMissionCompletePointInfo::default_instance_ = NULL;

mdMissionCompletePointInfo* mdMissionCompletePointInfo::New() const {
  return new mdMissionCompletePointInfo;
}

void mdMissionCompletePointInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mission_type_ = 1;
    index_ = 0;
    require_point_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMissionCompletePointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMissionCompletePointInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionType_IsValid(value)) {
            set_mission_type(static_cast< ::b2::protocol::commondata::MissionInfo_MissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_require_point;
        break;
      }

      // required int32 require_point = 3;
      case 3: {
        if (tag == 24) {
         parse_require_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_point_)));
          set_has_require_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMissionCompletePointInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMissionCompletePointInfo)
  return false;
#undef DO_
}

void mdMissionCompletePointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMissionCompletePointInfo)
  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mission_type(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 require_point = 3;
  if (has_require_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->require_point(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMissionCompletePointInfo)
}

::google::protobuf::uint8* mdMissionCompletePointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMissionCompletePointInfo)
  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mission_type(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 require_point = 3;
  if (has_require_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->require_point(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMissionCompletePointInfo)
  return target;
}

int mdMissionCompletePointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_type());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 require_point = 3;
    if (has_require_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_point());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMissionCompletePointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMissionCompletePointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMissionCompletePointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMissionCompletePointInfo::MergeFrom(const mdMissionCompletePointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_require_point()) {
      set_require_point(from.require_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMissionCompletePointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMissionCompletePointInfo::CopyFrom(const mdMissionCompletePointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMissionCompletePointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdMissionCompletePointInfo::Swap(mdMissionCompletePointInfo* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(index_, other->index_);
    std::swap(require_point_, other->require_point_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMissionCompletePointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMissionCompletePointInfo_descriptor_;
  metadata.reflection = mdMissionCompletePointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdWingEnhance::kGradeFieldNumber;
const int mdWingEnhance::kLevelFieldNumber;
const int mdWingEnhance::kNeedItemTemplateIdFieldNumber;
const int mdWingEnhance::kNeedItemCountFieldNumber;
const int mdWingEnhance::kEnhancePointFieldNumber;
const int mdWingEnhance::kNeedEnhancePointFieldNumber;
const int mdWingEnhance::kGoldCostFieldNumber;
const int mdWingEnhance::kOptionType1FieldNumber;
const int mdWingEnhance::kOptionValue1FieldNumber;
const int mdWingEnhance::kOptionType2FieldNumber;
const int mdWingEnhance::kOptionValue2FieldNumber;
const int mdWingEnhance::kOptionType3FieldNumber;
const int mdWingEnhance::kOptionValue3FieldNumber;
#endif  // !_MSC_VER

mdWingEnhance::mdWingEnhance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdWingEnhance)
}

void mdWingEnhance::InitAsDefaultInstance() {
}

mdWingEnhance::mdWingEnhance(const mdWingEnhance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdWingEnhance)
}

void mdWingEnhance::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  level_ = 0;
  need_item_template_id_ = 0;
  need_item_count_ = 0;
  enhance_point_ = 0;
  need_enhance_point_ = 0;
  gold_cost_ = 0;
  option_type1_ = 0;
  option_value1_ = 0;
  option_type2_ = 0;
  option_value2_ = 0;
  option_type3_ = 0;
  option_value3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdWingEnhance::~mdWingEnhance() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdWingEnhance)
  SharedDtor();
}

void mdWingEnhance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdWingEnhance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdWingEnhance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdWingEnhance_descriptor_;
}

const mdWingEnhance& mdWingEnhance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdWingEnhance* mdWingEnhance::default_instance_ = NULL;

mdWingEnhance* mdWingEnhance::New() const {
  return new mdWingEnhance;
}

void mdWingEnhance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdWingEnhance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(grade_, option_type1_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(option_value1_, option_value3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdWingEnhance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdWingEnhance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_item_template_id;
        break;
      }

      // required int32 need_item_template_id = 3;
      case 3: {
        if (tag == 24) {
         parse_need_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_item_template_id_)));
          set_has_need_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_need_item_count;
        break;
      }

      // required int32 need_item_count = 4;
      case 4: {
        if (tag == 32) {
         parse_need_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_item_count_)));
          set_has_need_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enhance_point;
        break;
      }

      // required int32 enhance_point = 5;
      case 5: {
        if (tag == 40) {
         parse_enhance_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_point_)));
          set_has_enhance_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_need_enhance_point;
        break;
      }

      // required int32 need_enhance_point = 6;
      case 6: {
        if (tag == 48) {
         parse_need_enhance_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_enhance_point_)));
          set_has_need_enhance_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gold_cost;
        break;
      }

      // required int32 gold_cost = 7;
      case 7: {
        if (tag == 56) {
         parse_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_option_type1;
        break;
      }

      // required int32 option_type1 = 8;
      case 8: {
        if (tag == 64) {
         parse_option_type1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type1_)));
          set_has_option_type1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_option_value1;
        break;
      }

      // required float option_value1 = 9;
      case 9: {
        if (tag == 77) {
         parse_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value1_)));
          set_has_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_option_type2;
        break;
      }

      // required int32 option_type2 = 10;
      case 10: {
        if (tag == 80) {
         parse_option_type2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type2_)));
          set_has_option_type2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_option_value2;
        break;
      }

      // required float option_value2 = 11;
      case 11: {
        if (tag == 93) {
         parse_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value2_)));
          set_has_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_option_type3;
        break;
      }

      // required int32 option_type3 = 12;
      case 12: {
        if (tag == 96) {
         parse_option_type3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type3_)));
          set_has_option_type3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_option_value3;
        break;
      }

      // required float option_value3 = 13;
      case 13: {
        if (tag == 109) {
         parse_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value3_)));
          set_has_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdWingEnhance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdWingEnhance)
  return false;
#undef DO_
}

void mdWingEnhance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdWingEnhance)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 need_item_template_id = 3;
  if (has_need_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->need_item_template_id(), output);
  }

  // required int32 need_item_count = 4;
  if (has_need_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->need_item_count(), output);
  }

  // required int32 enhance_point = 5;
  if (has_enhance_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->enhance_point(), output);
  }

  // required int32 need_enhance_point = 6;
  if (has_need_enhance_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_enhance_point(), output);
  }

  // required int32 gold_cost = 7;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gold_cost(), output);
  }

  // required int32 option_type1 = 8;
  if (has_option_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->option_type1(), output);
  }

  // required float option_value1 = 9;
  if (has_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->option_value1(), output);
  }

  // required int32 option_type2 = 10;
  if (has_option_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->option_type2(), output);
  }

  // required float option_value2 = 11;
  if (has_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->option_value2(), output);
  }

  // required int32 option_type3 = 12;
  if (has_option_type3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->option_type3(), output);
  }

  // required float option_value3 = 13;
  if (has_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->option_value3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdWingEnhance)
}

::google::protobuf::uint8* mdWingEnhance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdWingEnhance)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 need_item_template_id = 3;
  if (has_need_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->need_item_template_id(), target);
  }

  // required int32 need_item_count = 4;
  if (has_need_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->need_item_count(), target);
  }

  // required int32 enhance_point = 5;
  if (has_enhance_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->enhance_point(), target);
  }

  // required int32 need_enhance_point = 6;
  if (has_need_enhance_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_enhance_point(), target);
  }

  // required int32 gold_cost = 7;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gold_cost(), target);
  }

  // required int32 option_type1 = 8;
  if (has_option_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->option_type1(), target);
  }

  // required float option_value1 = 9;
  if (has_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->option_value1(), target);
  }

  // required int32 option_type2 = 10;
  if (has_option_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->option_type2(), target);
  }

  // required float option_value2 = 11;
  if (has_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->option_value2(), target);
  }

  // required int32 option_type3 = 12;
  if (has_option_type3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->option_type3(), target);
  }

  // required float option_value3 = 13;
  if (has_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->option_value3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdWingEnhance)
  return target;
}

int mdWingEnhance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 need_item_template_id = 3;
    if (has_need_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_item_template_id());
    }

    // required int32 need_item_count = 4;
    if (has_need_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_item_count());
    }

    // required int32 enhance_point = 5;
    if (has_enhance_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_point());
    }

    // required int32 need_enhance_point = 6;
    if (has_need_enhance_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_enhance_point());
    }

    // required int32 gold_cost = 7;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }

    // required int32 option_type1 = 8;
    if (has_option_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float option_value1 = 9;
    if (has_option_value1()) {
      total_size += 1 + 4;
    }

    // required int32 option_type2 = 10;
    if (has_option_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type2());
    }

    // required float option_value2 = 11;
    if (has_option_value2()) {
      total_size += 1 + 4;
    }

    // required int32 option_type3 = 12;
    if (has_option_type3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type3());
    }

    // required float option_value3 = 13;
    if (has_option_value3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdWingEnhance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdWingEnhance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdWingEnhance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdWingEnhance::MergeFrom(const mdWingEnhance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_need_item_template_id()) {
      set_need_item_template_id(from.need_item_template_id());
    }
    if (from.has_need_item_count()) {
      set_need_item_count(from.need_item_count());
    }
    if (from.has_enhance_point()) {
      set_enhance_point(from.enhance_point());
    }
    if (from.has_need_enhance_point()) {
      set_need_enhance_point(from.need_enhance_point());
    }
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_option_type1()) {
      set_option_type1(from.option_type1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_option_value1()) {
      set_option_value1(from.option_value1());
    }
    if (from.has_option_type2()) {
      set_option_type2(from.option_type2());
    }
    if (from.has_option_value2()) {
      set_option_value2(from.option_value2());
    }
    if (from.has_option_type3()) {
      set_option_type3(from.option_type3());
    }
    if (from.has_option_value3()) {
      set_option_value3(from.option_value3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdWingEnhance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdWingEnhance::CopyFrom(const mdWingEnhance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdWingEnhance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void mdWingEnhance::Swap(mdWingEnhance* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(level_, other->level_);
    std::swap(need_item_template_id_, other->need_item_template_id_);
    std::swap(need_item_count_, other->need_item_count_);
    std::swap(enhance_point_, other->enhance_point_);
    std::swap(need_enhance_point_, other->need_enhance_point_);
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(option_type1_, other->option_type1_);
    std::swap(option_value1_, other->option_value1_);
    std::swap(option_type2_, other->option_type2_);
    std::swap(option_value2_, other->option_value2_);
    std::swap(option_type3_, other->option_type3_);
    std::swap(option_value3_, other->option_value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdWingEnhance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdWingEnhance_descriptor_;
  metadata.reflection = mdWingEnhance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdWingUpgrade::kGradeFieldNumber;
const int mdWingUpgrade::kNeedItemTemplateIdFieldNumber;
const int mdWingUpgrade::kNeedItemCountFieldNumber;
const int mdWingUpgrade::kRateFieldNumber;
const int mdWingUpgrade::kGoldCostFieldNumber;
const int mdWingUpgrade::kFailPointMaxFieldNumber;
const int mdWingUpgrade::kOptionType1FieldNumber;
const int mdWingUpgrade::kOptionValue1FieldNumber;
const int mdWingUpgrade::kOptionType2FieldNumber;
const int mdWingUpgrade::kOptionValue2FieldNumber;
const int mdWingUpgrade::kOptionType3FieldNumber;
const int mdWingUpgrade::kOptionValue3FieldNumber;
#endif  // !_MSC_VER

mdWingUpgrade::mdWingUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdWingUpgrade)
}

void mdWingUpgrade::InitAsDefaultInstance() {
}

mdWingUpgrade::mdWingUpgrade(const mdWingUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdWingUpgrade)
}

void mdWingUpgrade::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  need_item_template_id_ = 0;
  need_item_count_ = 0;
  rate_ = 0;
  gold_cost_ = 0;
  fail_point_max_ = 0;
  option_type1_ = 0;
  option_value1_ = 0;
  option_type2_ = 0;
  option_value2_ = 0;
  option_type3_ = 0;
  option_value3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdWingUpgrade::~mdWingUpgrade() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdWingUpgrade)
  SharedDtor();
}

void mdWingUpgrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdWingUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdWingUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdWingUpgrade_descriptor_;
}

const mdWingUpgrade& mdWingUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdWingUpgrade* mdWingUpgrade::default_instance_ = NULL;

mdWingUpgrade* mdWingUpgrade::New() const {
  return new mdWingUpgrade;
}

void mdWingUpgrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdWingUpgrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(grade_, option_value1_);
  }
  ZR_(option_type2_, option_value3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdWingUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdWingUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_need_item_template_id;
        break;
      }

      // required int32 need_item_template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_need_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_item_template_id_)));
          set_has_need_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_item_count;
        break;
      }

      // required int32 need_item_count = 3;
      case 3: {
        if (tag == 24) {
         parse_need_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_item_count_)));
          set_has_need_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rate;
        break;
      }

      // required int32 rate = 4;
      case 4: {
        if (tag == 32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gold_cost;
        break;
      }

      // required int32 gold_cost = 5;
      case 5: {
        if (tag == 40) {
         parse_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fail_point_max;
        break;
      }

      // required int32 fail_point_max = 6;
      case 6: {
        if (tag == 48) {
         parse_fail_point_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_point_max_)));
          set_has_fail_point_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_option_type1;
        break;
      }

      // required int32 option_type1 = 7;
      case 7: {
        if (tag == 56) {
         parse_option_type1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type1_)));
          set_has_option_type1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_option_value1;
        break;
      }

      // required float option_value1 = 8;
      case 8: {
        if (tag == 69) {
         parse_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value1_)));
          set_has_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_option_type2;
        break;
      }

      // required int32 option_type2 = 9;
      case 9: {
        if (tag == 72) {
         parse_option_type2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type2_)));
          set_has_option_type2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_option_value2;
        break;
      }

      // required float option_value2 = 10;
      case 10: {
        if (tag == 85) {
         parse_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value2_)));
          set_has_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_option_type3;
        break;
      }

      // required int32 option_type3 = 11;
      case 11: {
        if (tag == 88) {
         parse_option_type3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type3_)));
          set_has_option_type3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_option_value3;
        break;
      }

      // required float option_value3 = 12;
      case 12: {
        if (tag == 101) {
         parse_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value3_)));
          set_has_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdWingUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdWingUpgrade)
  return false;
#undef DO_
}

void mdWingUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdWingUpgrade)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 need_item_template_id = 2;
  if (has_need_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_item_template_id(), output);
  }

  // required int32 need_item_count = 3;
  if (has_need_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->need_item_count(), output);
  }

  // required int32 rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rate(), output);
  }

  // required int32 gold_cost = 5;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold_cost(), output);
  }

  // required int32 fail_point_max = 6;
  if (has_fail_point_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fail_point_max(), output);
  }

  // required int32 option_type1 = 7;
  if (has_option_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->option_type1(), output);
  }

  // required float option_value1 = 8;
  if (has_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->option_value1(), output);
  }

  // required int32 option_type2 = 9;
  if (has_option_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->option_type2(), output);
  }

  // required float option_value2 = 10;
  if (has_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->option_value2(), output);
  }

  // required int32 option_type3 = 11;
  if (has_option_type3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->option_type3(), output);
  }

  // required float option_value3 = 12;
  if (has_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->option_value3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdWingUpgrade)
}

::google::protobuf::uint8* mdWingUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdWingUpgrade)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 need_item_template_id = 2;
  if (has_need_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_item_template_id(), target);
  }

  // required int32 need_item_count = 3;
  if (has_need_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->need_item_count(), target);
  }

  // required int32 rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rate(), target);
  }

  // required int32 gold_cost = 5;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold_cost(), target);
  }

  // required int32 fail_point_max = 6;
  if (has_fail_point_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fail_point_max(), target);
  }

  // required int32 option_type1 = 7;
  if (has_option_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->option_type1(), target);
  }

  // required float option_value1 = 8;
  if (has_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->option_value1(), target);
  }

  // required int32 option_type2 = 9;
  if (has_option_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->option_type2(), target);
  }

  // required float option_value2 = 10;
  if (has_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->option_value2(), target);
  }

  // required int32 option_type3 = 11;
  if (has_option_type3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->option_type3(), target);
  }

  // required float option_value3 = 12;
  if (has_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->option_value3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdWingUpgrade)
  return target;
}

int mdWingUpgrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 need_item_template_id = 2;
    if (has_need_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_item_template_id());
    }

    // required int32 need_item_count = 3;
    if (has_need_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_item_count());
    }

    // required int32 rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // required int32 gold_cost = 5;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }

    // required int32 fail_point_max = 6;
    if (has_fail_point_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_point_max());
    }

    // required int32 option_type1 = 7;
    if (has_option_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type1());
    }

    // required float option_value1 = 8;
    if (has_option_value1()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 option_type2 = 9;
    if (has_option_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type2());
    }

    // required float option_value2 = 10;
    if (has_option_value2()) {
      total_size += 1 + 4;
    }

    // required int32 option_type3 = 11;
    if (has_option_type3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type3());
    }

    // required float option_value3 = 12;
    if (has_option_value3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdWingUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdWingUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdWingUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdWingUpgrade::MergeFrom(const mdWingUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_need_item_template_id()) {
      set_need_item_template_id(from.need_item_template_id());
    }
    if (from.has_need_item_count()) {
      set_need_item_count(from.need_item_count());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_fail_point_max()) {
      set_fail_point_max(from.fail_point_max());
    }
    if (from.has_option_type1()) {
      set_option_type1(from.option_type1());
    }
    if (from.has_option_value1()) {
      set_option_value1(from.option_value1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_option_type2()) {
      set_option_type2(from.option_type2());
    }
    if (from.has_option_value2()) {
      set_option_value2(from.option_value2());
    }
    if (from.has_option_type3()) {
      set_option_type3(from.option_type3());
    }
    if (from.has_option_value3()) {
      set_option_value3(from.option_value3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdWingUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdWingUpgrade::CopyFrom(const mdWingUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdWingUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdWingUpgrade::Swap(mdWingUpgrade* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(need_item_template_id_, other->need_item_template_id_);
    std::swap(need_item_count_, other->need_item_count_);
    std::swap(rate_, other->rate_);
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(fail_point_max_, other->fail_point_max_);
    std::swap(option_type1_, other->option_type1_);
    std::swap(option_value1_, other->option_value1_);
    std::swap(option_type2_, other->option_type2_);
    std::swap(option_value2_, other->option_value2_);
    std::swap(option_type3_, other->option_type3_);
    std::swap(option_value3_, other->option_value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdWingUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdWingUpgrade_descriptor_;
  metadata.reflection = mdWingUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdWingOptionValue::kCharacterTypeFieldNumber;
const int mdWingOptionValue::kOptionIndexFieldNumber;
const int mdWingOptionValue::kLevelFieldNumber;
const int mdWingOptionValue::kOptionTypeFieldNumber;
const int mdWingOptionValue::kOptionValueFieldNumber;
const int mdWingOptionValue::kNeedItemTemplateIdFieldNumber;
const int mdWingOptionValue::kNeedItemCountFieldNumber;
#endif  // !_MSC_VER

mdWingOptionValue::mdWingOptionValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdWingOptionValue)
}

void mdWingOptionValue::InitAsDefaultInstance() {
}

mdWingOptionValue::mdWingOptionValue(const mdWingOptionValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdWingOptionValue)
}

void mdWingOptionValue::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 0;
  option_index_ = 0;
  level_ = 0;
  option_type_ = 0;
  option_value_ = 0;
  need_item_template_id_ = 0;
  need_item_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdWingOptionValue::~mdWingOptionValue() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdWingOptionValue)
  SharedDtor();
}

void mdWingOptionValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdWingOptionValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdWingOptionValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdWingOptionValue_descriptor_;
}

const mdWingOptionValue& mdWingOptionValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdWingOptionValue* mdWingOptionValue::default_instance_ = NULL;

mdWingOptionValue* mdWingOptionValue::New() const {
  return new mdWingOptionValue;
}

void mdWingOptionValue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdWingOptionValue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(character_type_, need_item_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdWingOptionValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdWingOptionValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 character_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_type_)));
          set_has_character_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_index;
        break;
      }

      // required int32 option_index = 2;
      case 2: {
        if (tag == 16) {
         parse_option_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_index_)));
          set_has_option_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_option_type;
        break;
      }

      // required int32 option_type = 4;
      case 4: {
        if (tag == 32) {
         parse_option_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_type_)));
          set_has_option_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_option_value;
        break;
      }

      // required float option_value = 5;
      case 5: {
        if (tag == 45) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_need_item_template_id;
        break;
      }

      // required int32 need_item_template_id = 6;
      case 6: {
        if (tag == 48) {
         parse_need_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_item_template_id_)));
          set_has_need_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_need_item_count;
        break;
      }

      // required int32 need_item_count = 7;
      case 7: {
        if (tag == 56) {
         parse_need_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_item_count_)));
          set_has_need_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdWingOptionValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdWingOptionValue)
  return false;
#undef DO_
}

void mdWingOptionValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdWingOptionValue)
  // required int32 character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_type(), output);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_index(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 option_type = 4;
  if (has_option_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->option_type(), output);
  }

  // required float option_value = 5;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->option_value(), output);
  }

  // required int32 need_item_template_id = 6;
  if (has_need_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->need_item_template_id(), output);
  }

  // required int32 need_item_count = 7;
  if (has_need_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->need_item_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdWingOptionValue)
}

::google::protobuf::uint8* mdWingOptionValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdWingOptionValue)
  // required int32 character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->character_type(), target);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_index(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 option_type = 4;
  if (has_option_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->option_type(), target);
  }

  // required float option_value = 5;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->option_value(), target);
  }

  // required int32 need_item_template_id = 6;
  if (has_need_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->need_item_template_id(), target);
  }

  // required int32 need_item_count = 7;
  if (has_need_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->need_item_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdWingOptionValue)
  return target;
}

int mdWingOptionValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_type());
    }

    // required int32 option_index = 2;
    if (has_option_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_index());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 option_type = 4;
    if (has_option_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_type());
    }

    // required float option_value = 5;
    if (has_option_value()) {
      total_size += 1 + 4;
    }

    // required int32 need_item_template_id = 6;
    if (has_need_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_item_template_id());
    }

    // required int32 need_item_count = 7;
    if (has_need_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_item_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdWingOptionValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdWingOptionValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdWingOptionValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdWingOptionValue::MergeFrom(const mdWingOptionValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_option_index()) {
      set_option_index(from.option_index());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_option_type()) {
      set_option_type(from.option_type());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
    if (from.has_need_item_template_id()) {
      set_need_item_template_id(from.need_item_template_id());
    }
    if (from.has_need_item_count()) {
      set_need_item_count(from.need_item_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdWingOptionValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdWingOptionValue::CopyFrom(const mdWingOptionValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdWingOptionValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdWingOptionValue::Swap(mdWingOptionValue* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(option_index_, other->option_index_);
    std::swap(level_, other->level_);
    std::swap(option_type_, other->option_type_);
    std::swap(option_value_, other->option_value_);
    std::swap(need_item_template_id_, other->need_item_template_id_);
    std::swap(need_item_count_, other->need_item_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdWingOptionValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdWingOptionValue_descriptor_;
  metadata.reflection = mdWingOptionValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdWingOptionOpen::kCharacterTypeFieldNumber;
const int mdWingOptionOpen::kOptionIndexFieldNumber;
const int mdWingOptionOpen::kNeedGradeFieldNumber;
#endif  // !_MSC_VER

mdWingOptionOpen::mdWingOptionOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdWingOptionOpen)
}

void mdWingOptionOpen::InitAsDefaultInstance() {
}

mdWingOptionOpen::mdWingOptionOpen(const mdWingOptionOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdWingOptionOpen)
}

void mdWingOptionOpen::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 0;
  option_index_ = 0;
  need_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdWingOptionOpen::~mdWingOptionOpen() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdWingOptionOpen)
  SharedDtor();
}

void mdWingOptionOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdWingOptionOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdWingOptionOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdWingOptionOpen_descriptor_;
}

const mdWingOptionOpen& mdWingOptionOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdWingOptionOpen* mdWingOptionOpen::default_instance_ = NULL;

mdWingOptionOpen* mdWingOptionOpen::New() const {
  return new mdWingOptionOpen;
}

void mdWingOptionOpen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdWingOptionOpen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(character_type_, need_grade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdWingOptionOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdWingOptionOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 character_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_type_)));
          set_has_character_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_index;
        break;
      }

      // required int32 option_index = 2;
      case 2: {
        if (tag == 16) {
         parse_option_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_index_)));
          set_has_option_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_grade;
        break;
      }

      // required int32 need_grade = 3;
      case 3: {
        if (tag == 24) {
         parse_need_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_grade_)));
          set_has_need_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdWingOptionOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdWingOptionOpen)
  return false;
#undef DO_
}

void mdWingOptionOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdWingOptionOpen)
  // required int32 character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_type(), output);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_index(), output);
  }

  // required int32 need_grade = 3;
  if (has_need_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->need_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdWingOptionOpen)
}

::google::protobuf::uint8* mdWingOptionOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdWingOptionOpen)
  // required int32 character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->character_type(), target);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_index(), target);
  }

  // required int32 need_grade = 3;
  if (has_need_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->need_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdWingOptionOpen)
  return target;
}

int mdWingOptionOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_type());
    }

    // required int32 option_index = 2;
    if (has_option_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_index());
    }

    // required int32 need_grade = 3;
    if (has_need_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdWingOptionOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdWingOptionOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdWingOptionOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdWingOptionOpen::MergeFrom(const mdWingOptionOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_option_index()) {
      set_option_index(from.option_index());
    }
    if (from.has_need_grade()) {
      set_need_grade(from.need_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdWingOptionOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdWingOptionOpen::CopyFrom(const mdWingOptionOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdWingOptionOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdWingOptionOpen::Swap(mdWingOptionOpen* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(option_index_, other->option_index_);
    std::swap(need_grade_, other->need_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdWingOptionOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdWingOptionOpen_descriptor_;
  metadata.reflection = mdWingOptionOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdWingOptionMaxLevel::kCharacterTypeFieldNumber;
const int mdWingOptionMaxLevel::kOptionIndexFieldNumber;
const int mdWingOptionMaxLevel::kWingGradeFieldNumber;
const int mdWingOptionMaxLevel::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

mdWingOptionMaxLevel::mdWingOptionMaxLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdWingOptionMaxLevel)
}

void mdWingOptionMaxLevel::InitAsDefaultInstance() {
}

mdWingOptionMaxLevel::mdWingOptionMaxLevel(const mdWingOptionMaxLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdWingOptionMaxLevel)
}

void mdWingOptionMaxLevel::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 0;
  option_index_ = 0;
  wing_grade_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdWingOptionMaxLevel::~mdWingOptionMaxLevel() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdWingOptionMaxLevel)
  SharedDtor();
}

void mdWingOptionMaxLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdWingOptionMaxLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdWingOptionMaxLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdWingOptionMaxLevel_descriptor_;
}

const mdWingOptionMaxLevel& mdWingOptionMaxLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdWingOptionMaxLevel* mdWingOptionMaxLevel::default_instance_ = NULL;

mdWingOptionMaxLevel* mdWingOptionMaxLevel::New() const {
  return new mdWingOptionMaxLevel;
}

void mdWingOptionMaxLevel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdWingOptionMaxLevel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(character_type_, max_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdWingOptionMaxLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdWingOptionMaxLevel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 character_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_type_)));
          set_has_character_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_index;
        break;
      }

      // required int32 option_index = 2;
      case 2: {
        if (tag == 16) {
         parse_option_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_index_)));
          set_has_option_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wing_grade;
        break;
      }

      // required int32 wing_grade = 3;
      case 3: {
        if (tag == 24) {
         parse_wing_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_grade_)));
          set_has_wing_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_level;
        break;
      }

      // required int32 max_level = 4;
      case 4: {
        if (tag == 32) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdWingOptionMaxLevel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdWingOptionMaxLevel)
  return false;
#undef DO_
}

void mdWingOptionMaxLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdWingOptionMaxLevel)
  // required int32 character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->character_type(), output);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_index(), output);
  }

  // required int32 wing_grade = 3;
  if (has_wing_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wing_grade(), output);
  }

  // required int32 max_level = 4;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdWingOptionMaxLevel)
}

::google::protobuf::uint8* mdWingOptionMaxLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdWingOptionMaxLevel)
  // required int32 character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->character_type(), target);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_index(), target);
  }

  // required int32 wing_grade = 3;
  if (has_wing_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wing_grade(), target);
  }

  // required int32 max_level = 4;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdWingOptionMaxLevel)
  return target;
}

int mdWingOptionMaxLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_type());
    }

    // required int32 option_index = 2;
    if (has_option_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_index());
    }

    // required int32 wing_grade = 3;
    if (has_wing_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_grade());
    }

    // required int32 max_level = 4;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdWingOptionMaxLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdWingOptionMaxLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdWingOptionMaxLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdWingOptionMaxLevel::MergeFrom(const mdWingOptionMaxLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_option_index()) {
      set_option_index(from.option_index());
    }
    if (from.has_wing_grade()) {
      set_wing_grade(from.wing_grade());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdWingOptionMaxLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdWingOptionMaxLevel::CopyFrom(const mdWingOptionMaxLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdWingOptionMaxLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdWingOptionMaxLevel::Swap(mdWingOptionMaxLevel* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(option_index_, other->option_index_);
    std::swap(wing_grade_, other->wing_grade_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdWingOptionMaxLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdWingOptionMaxLevel_descriptor_;
  metadata.reflection = mdWingOptionMaxLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdHeroTowerFloor::kFloorFieldNumber;
const int mdHeroTowerFloor::kRecommendPowerFieldNumber;
const int mdHeroTowerFloor::kRecommendAttackFieldNumber;
const int mdHeroTowerFloor::kRecommendDefenseFieldNumber;
const int mdHeroTowerFloor::kClearLimitTimeFieldNumber;
const int mdHeroTowerFloor::kMapIdFieldNumber;
const int mdHeroTowerFloor::kDifficultyScaleFieldNumber;
const int mdHeroTowerFloor::kMonsterLevelFieldNumber;
const int mdHeroTowerFloor::kFirstRewardsFieldNumber;
const int mdHeroTowerFloor::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdHeroTowerFloor::mdHeroTowerFloor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdHeroTowerFloor)
}

void mdHeroTowerFloor::InitAsDefaultInstance() {
}

mdHeroTowerFloor::mdHeroTowerFloor(const mdHeroTowerFloor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdHeroTowerFloor)
}

void mdHeroTowerFloor::SharedCtor() {
  _cached_size_ = 0;
  floor_ = 0;
  recommend_power_ = 0;
  recommend_attack_ = 0;
  recommend_defense_ = 0;
  clear_limit_time_ = 0;
  map_id_ = 0;
  difficulty_scale_ = 0;
  monster_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdHeroTowerFloor::~mdHeroTowerFloor() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdHeroTowerFloor)
  SharedDtor();
}

void mdHeroTowerFloor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdHeroTowerFloor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdHeroTowerFloor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdHeroTowerFloor_descriptor_;
}

const mdHeroTowerFloor& mdHeroTowerFloor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdHeroTowerFloor* mdHeroTowerFloor::default_instance_ = NULL;

mdHeroTowerFloor* mdHeroTowerFloor::New() const {
  return new mdHeroTowerFloor;
}

void mdHeroTowerFloor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdHeroTowerFloor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(floor_, monster_level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  first_rewards_.Clear();
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdHeroTowerFloor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdHeroTowerFloor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 floor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_recommend_power;
        break;
      }

      // required int32 recommend_power = 2;
      case 2: {
        if (tag == 16) {
         parse_recommend_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_power_)));
          set_has_recommend_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recommend_attack;
        break;
      }

      // required int32 recommend_attack = 3;
      case 3: {
        if (tag == 24) {
         parse_recommend_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_attack_)));
          set_has_recommend_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recommend_defense;
        break;
      }

      // required int32 recommend_defense = 4;
      case 4: {
        if (tag == 32) {
         parse_recommend_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_defense_)));
          set_has_recommend_defense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_clear_limit_time;
        break;
      }

      // required int32 clear_limit_time = 5;
      case 5: {
        if (tag == 40) {
         parse_clear_limit_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_limit_time_)));
          set_has_clear_limit_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_map_id;
        break;
      }

      // required int32 map_id = 6;
      case 6: {
        if (tag == 48) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_difficulty_scale;
        break;
      }

      // required int32 difficulty_scale = 7;
      case 7: {
        if (tag == 56) {
         parse_difficulty_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_scale_)));
          set_has_difficulty_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_monster_level;
        break;
      }

      // required int32 monster_level = 8;
      case 8: {
        if (tag == 64) {
         parse_monster_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_level_)));
          set_has_monster_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_first_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward first_rewards = 9;
      case 9: {
        if (tag == 74) {
         parse_first_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_first_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_first_rewards;
        if (input->ExpectTag(82)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 10;
      case 10: {
        if (tag == 82) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdHeroTowerFloor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdHeroTowerFloor)
  return false;
#undef DO_
}

void mdHeroTowerFloor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdHeroTowerFloor)
  // required int32 floor = 1;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->floor(), output);
  }

  // required int32 recommend_power = 2;
  if (has_recommend_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recommend_power(), output);
  }

  // required int32 recommend_attack = 3;
  if (has_recommend_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recommend_attack(), output);
  }

  // required int32 recommend_defense = 4;
  if (has_recommend_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recommend_defense(), output);
  }

  // required int32 clear_limit_time = 5;
  if (has_clear_limit_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clear_limit_time(), output);
  }

  // required int32 map_id = 6;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->map_id(), output);
  }

  // required int32 difficulty_scale = 7;
  if (has_difficulty_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->difficulty_scale(), output);
  }

  // required int32 monster_level = 8;
  if (has_monster_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->monster_level(), output);
  }

  // repeated .b2.protocol.commondata.Reward first_rewards = 9;
  for (int i = 0; i < this->first_rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->first_rewards(i), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdHeroTowerFloor)
}

::google::protobuf::uint8* mdHeroTowerFloor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdHeroTowerFloor)
  // required int32 floor = 1;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->floor(), target);
  }

  // required int32 recommend_power = 2;
  if (has_recommend_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recommend_power(), target);
  }

  // required int32 recommend_attack = 3;
  if (has_recommend_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recommend_attack(), target);
  }

  // required int32 recommend_defense = 4;
  if (has_recommend_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recommend_defense(), target);
  }

  // required int32 clear_limit_time = 5;
  if (has_clear_limit_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clear_limit_time(), target);
  }

  // required int32 map_id = 6;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->map_id(), target);
  }

  // required int32 difficulty_scale = 7;
  if (has_difficulty_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->difficulty_scale(), target);
  }

  // required int32 monster_level = 8;
  if (has_monster_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->monster_level(), target);
  }

  // repeated .b2.protocol.commondata.Reward first_rewards = 9;
  for (int i = 0; i < this->first_rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->first_rewards(i), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdHeroTowerFloor)
  return target;
}

int mdHeroTowerFloor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 floor = 1;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

    // required int32 recommend_power = 2;
    if (has_recommend_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_power());
    }

    // required int32 recommend_attack = 3;
    if (has_recommend_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_attack());
    }

    // required int32 recommend_defense = 4;
    if (has_recommend_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_defense());
    }

    // required int32 clear_limit_time = 5;
    if (has_clear_limit_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_limit_time());
    }

    // required int32 map_id = 6;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // required int32 difficulty_scale = 7;
    if (has_difficulty_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_scale());
    }

    // required int32 monster_level = 8;
    if (has_monster_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_level());
    }

  }
  // repeated .b2.protocol.commondata.Reward first_rewards = 9;
  total_size += 1 * this->first_rewards_size();
  for (int i = 0; i < this->first_rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->first_rewards(i));
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdHeroTowerFloor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdHeroTowerFloor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdHeroTowerFloor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdHeroTowerFloor::MergeFrom(const mdHeroTowerFloor& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_rewards_.MergeFrom(from.first_rewards_);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_recommend_power()) {
      set_recommend_power(from.recommend_power());
    }
    if (from.has_recommend_attack()) {
      set_recommend_attack(from.recommend_attack());
    }
    if (from.has_recommend_defense()) {
      set_recommend_defense(from.recommend_defense());
    }
    if (from.has_clear_limit_time()) {
      set_clear_limit_time(from.clear_limit_time());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_difficulty_scale()) {
      set_difficulty_scale(from.difficulty_scale());
    }
    if (from.has_monster_level()) {
      set_monster_level(from.monster_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdHeroTowerFloor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdHeroTowerFloor::CopyFrom(const mdHeroTowerFloor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdHeroTowerFloor::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->first_rewards())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdHeroTowerFloor::Swap(mdHeroTowerFloor* other) {
  if (other != this) {
    std::swap(floor_, other->floor_);
    std::swap(recommend_power_, other->recommend_power_);
    std::swap(recommend_attack_, other->recommend_attack_);
    std::swap(recommend_defense_, other->recommend_defense_);
    std::swap(clear_limit_time_, other->clear_limit_time_);
    std::swap(map_id_, other->map_id_);
    std::swap(difficulty_scale_, other->difficulty_scale_);
    std::swap(monster_level_, other->monster_level_);
    first_rewards_.Swap(&other->first_rewards_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdHeroTowerFloor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdHeroTowerFloor_descriptor_;
  metadata.reflection = mdHeroTowerFloor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRelicInfo::kRelicIdFieldNumber;
const int mdRelicInfo::kOpenStageIdFieldNumber;
#endif  // !_MSC_VER

mdRelicInfo::mdRelicInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRelicInfo)
}

void mdRelicInfo::InitAsDefaultInstance() {
}

mdRelicInfo::mdRelicInfo(const mdRelicInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRelicInfo)
}

void mdRelicInfo::SharedCtor() {
  _cached_size_ = 0;
  relic_id_ = 0;
  open_stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRelicInfo::~mdRelicInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRelicInfo)
  SharedDtor();
}

void mdRelicInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRelicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRelicInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRelicInfo_descriptor_;
}

const mdRelicInfo& mdRelicInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRelicInfo* mdRelicInfo::default_instance_ = NULL;

mdRelicInfo* mdRelicInfo::New() const {
  return new mdRelicInfo;
}

void mdRelicInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRelicInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(relic_id_, open_stage_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRelicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRelicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 relic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relic_id_)));
          set_has_relic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_open_stage_id;
        break;
      }

      // required int32 open_stage_id = 2;
      case 2: {
        if (tag == 16) {
         parse_open_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_stage_id_)));
          set_has_open_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRelicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRelicInfo)
  return false;
#undef DO_
}

void mdRelicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRelicInfo)
  // required int32 relic_id = 1;
  if (has_relic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->relic_id(), output);
  }

  // required int32 open_stage_id = 2;
  if (has_open_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->open_stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRelicInfo)
}

::google::protobuf::uint8* mdRelicInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRelicInfo)
  // required int32 relic_id = 1;
  if (has_relic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->relic_id(), target);
  }

  // required int32 open_stage_id = 2;
  if (has_open_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->open_stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRelicInfo)
  return target;
}

int mdRelicInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 relic_id = 1;
    if (has_relic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relic_id());
    }

    // required int32 open_stage_id = 2;
    if (has_open_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRelicInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRelicInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRelicInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRelicInfo::MergeFrom(const mdRelicInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relic_id()) {
      set_relic_id(from.relic_id());
    }
    if (from.has_open_stage_id()) {
      set_open_stage_id(from.open_stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRelicInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRelicInfo::CopyFrom(const mdRelicInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRelicInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdRelicInfo::Swap(mdRelicInfo* other) {
  if (other != this) {
    std::swap(relic_id_, other->relic_id_);
    std::swap(open_stage_id_, other->open_stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRelicInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRelicInfo_descriptor_;
  metadata.reflection = mdRelicInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRelicGradeInfo::kRelicIdFieldNumber;
const int mdRelicGradeInfo::kGradeFieldNumber;
const int mdRelicGradeInfo::kOptionId1FieldNumber;
const int mdRelicGradeInfo::kOptionValue1FieldNumber;
const int mdRelicGradeInfo::kOptionId2FieldNumber;
const int mdRelicGradeInfo::kOptionValue2FieldNumber;
const int mdRelicGradeInfo::kOptionId3FieldNumber;
const int mdRelicGradeInfo::kOptionValue3FieldNumber;
const int mdRelicGradeInfo::kPromotionRateFieldNumber;
const int mdRelicGradeInfo::kPromotionGoldFieldNumber;
const int mdRelicGradeInfo::kPromotionBossPieceFieldNumber;
const int mdRelicGradeInfo::kBossPieceIdFieldNumber;
#endif  // !_MSC_VER

mdRelicGradeInfo::mdRelicGradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRelicGradeInfo)
}

void mdRelicGradeInfo::InitAsDefaultInstance() {
}

mdRelicGradeInfo::mdRelicGradeInfo(const mdRelicGradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRelicGradeInfo)
}

void mdRelicGradeInfo::SharedCtor() {
  _cached_size_ = 0;
  relic_id_ = 0;
  grade_ = 0;
  option_id_1_ = 0;
  option_value_1_ = 0;
  option_id_2_ = 0;
  option_value_2_ = 0;
  option_id_3_ = 0;
  option_value_3_ = 0;
  promotion_rate_ = 0;
  promotion_gold_ = 0;
  promotion_boss_piece_ = 0;
  boss_piece_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRelicGradeInfo::~mdRelicGradeInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRelicGradeInfo)
  SharedDtor();
}

void mdRelicGradeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRelicGradeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRelicGradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRelicGradeInfo_descriptor_;
}

const mdRelicGradeInfo& mdRelicGradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRelicGradeInfo* mdRelicGradeInfo::default_instance_ = NULL;

mdRelicGradeInfo* mdRelicGradeInfo::New() const {
  return new mdRelicGradeInfo;
}

void mdRelicGradeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRelicGradeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(relic_id_, option_value_3_);
  }
  ZR_(promotion_rate_, boss_piece_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRelicGradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRelicGradeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 relic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relic_id_)));
          set_has_relic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_option_id_1;
        break;
      }

      // required int32 option_id_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_option_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_1_)));
          set_has_option_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_option_value_1;
        break;
      }

      // required int32 option_value_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_option_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_value_1_)));
          set_has_option_value_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_option_id_2;
        break;
      }

      // required int32 option_id_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_option_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_2_)));
          set_has_option_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_option_value_2;
        break;
      }

      // required int32 option_value_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_option_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_value_2_)));
          set_has_option_value_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_option_id_3;
        break;
      }

      // required int32 option_id_3 = 7;
      case 7: {
        if (tag == 56) {
         parse_option_id_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_3_)));
          set_has_option_id_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_option_value_3;
        break;
      }

      // required int32 option_value_3 = 8;
      case 8: {
        if (tag == 64) {
         parse_option_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_value_3_)));
          set_has_option_value_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_promotion_rate;
        break;
      }

      // required int32 promotion_rate = 9;
      case 9: {
        if (tag == 72) {
         parse_promotion_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promotion_rate_)));
          set_has_promotion_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_promotion_gold;
        break;
      }

      // required int32 promotion_gold = 10;
      case 10: {
        if (tag == 80) {
         parse_promotion_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promotion_gold_)));
          set_has_promotion_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_promotion_boss_piece;
        break;
      }

      // required int32 promotion_boss_piece = 11;
      case 11: {
        if (tag == 88) {
         parse_promotion_boss_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &promotion_boss_piece_)));
          set_has_promotion_boss_piece();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_boss_piece_id;
        break;
      }

      // required int32 boss_piece_id = 12;
      case 12: {
        if (tag == 96) {
         parse_boss_piece_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_piece_id_)));
          set_has_boss_piece_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRelicGradeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRelicGradeInfo)
  return false;
#undef DO_
}

void mdRelicGradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRelicGradeInfo)
  // required int32 relic_id = 1;
  if (has_relic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->relic_id(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required int32 option_id_1 = 3;
  if (has_option_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->option_id_1(), output);
  }

  // required int32 option_value_1 = 4;
  if (has_option_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->option_value_1(), output);
  }

  // required int32 option_id_2 = 5;
  if (has_option_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->option_id_2(), output);
  }

  // required int32 option_value_2 = 6;
  if (has_option_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->option_value_2(), output);
  }

  // required int32 option_id_3 = 7;
  if (has_option_id_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->option_id_3(), output);
  }

  // required int32 option_value_3 = 8;
  if (has_option_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->option_value_3(), output);
  }

  // required int32 promotion_rate = 9;
  if (has_promotion_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->promotion_rate(), output);
  }

  // required int32 promotion_gold = 10;
  if (has_promotion_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->promotion_gold(), output);
  }

  // required int32 promotion_boss_piece = 11;
  if (has_promotion_boss_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->promotion_boss_piece(), output);
  }

  // required int32 boss_piece_id = 12;
  if (has_boss_piece_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->boss_piece_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRelicGradeInfo)
}

::google::protobuf::uint8* mdRelicGradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRelicGradeInfo)
  // required int32 relic_id = 1;
  if (has_relic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->relic_id(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required int32 option_id_1 = 3;
  if (has_option_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->option_id_1(), target);
  }

  // required int32 option_value_1 = 4;
  if (has_option_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->option_value_1(), target);
  }

  // required int32 option_id_2 = 5;
  if (has_option_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->option_id_2(), target);
  }

  // required int32 option_value_2 = 6;
  if (has_option_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->option_value_2(), target);
  }

  // required int32 option_id_3 = 7;
  if (has_option_id_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->option_id_3(), target);
  }

  // required int32 option_value_3 = 8;
  if (has_option_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->option_value_3(), target);
  }

  // required int32 promotion_rate = 9;
  if (has_promotion_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->promotion_rate(), target);
  }

  // required int32 promotion_gold = 10;
  if (has_promotion_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->promotion_gold(), target);
  }

  // required int32 promotion_boss_piece = 11;
  if (has_promotion_boss_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->promotion_boss_piece(), target);
  }

  // required int32 boss_piece_id = 12;
  if (has_boss_piece_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->boss_piece_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRelicGradeInfo)
  return target;
}

int mdRelicGradeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 relic_id = 1;
    if (has_relic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relic_id());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 option_id_1 = 3;
    if (has_option_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id_1());
    }

    // required int32 option_value_1 = 4;
    if (has_option_value_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_value_1());
    }

    // required int32 option_id_2 = 5;
    if (has_option_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id_2());
    }

    // required int32 option_value_2 = 6;
    if (has_option_value_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_value_2());
    }

    // required int32 option_id_3 = 7;
    if (has_option_id_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id_3());
    }

    // required int32 option_value_3 = 8;
    if (has_option_value_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_value_3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 promotion_rate = 9;
    if (has_promotion_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promotion_rate());
    }

    // required int32 promotion_gold = 10;
    if (has_promotion_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promotion_gold());
    }

    // required int32 promotion_boss_piece = 11;
    if (has_promotion_boss_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->promotion_boss_piece());
    }

    // required int32 boss_piece_id = 12;
    if (has_boss_piece_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_piece_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRelicGradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRelicGradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRelicGradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRelicGradeInfo::MergeFrom(const mdRelicGradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relic_id()) {
      set_relic_id(from.relic_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_option_id_1()) {
      set_option_id_1(from.option_id_1());
    }
    if (from.has_option_value_1()) {
      set_option_value_1(from.option_value_1());
    }
    if (from.has_option_id_2()) {
      set_option_id_2(from.option_id_2());
    }
    if (from.has_option_value_2()) {
      set_option_value_2(from.option_value_2());
    }
    if (from.has_option_id_3()) {
      set_option_id_3(from.option_id_3());
    }
    if (from.has_option_value_3()) {
      set_option_value_3(from.option_value_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_promotion_rate()) {
      set_promotion_rate(from.promotion_rate());
    }
    if (from.has_promotion_gold()) {
      set_promotion_gold(from.promotion_gold());
    }
    if (from.has_promotion_boss_piece()) {
      set_promotion_boss_piece(from.promotion_boss_piece());
    }
    if (from.has_boss_piece_id()) {
      set_boss_piece_id(from.boss_piece_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRelicGradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRelicGradeInfo::CopyFrom(const mdRelicGradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRelicGradeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdRelicGradeInfo::Swap(mdRelicGradeInfo* other) {
  if (other != this) {
    std::swap(relic_id_, other->relic_id_);
    std::swap(grade_, other->grade_);
    std::swap(option_id_1_, other->option_id_1_);
    std::swap(option_value_1_, other->option_value_1_);
    std::swap(option_id_2_, other->option_id_2_);
    std::swap(option_value_2_, other->option_value_2_);
    std::swap(option_id_3_, other->option_id_3_);
    std::swap(option_value_3_, other->option_value_3_);
    std::swap(promotion_rate_, other->promotion_rate_);
    std::swap(promotion_gold_, other->promotion_gold_);
    std::swap(promotion_boss_piece_, other->promotion_boss_piece_);
    std::swap(boss_piece_id_, other->boss_piece_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRelicGradeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRelicGradeInfo_descriptor_;
  metadata.reflection = mdRelicGradeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRelicLevelInfo::kRelicIdFieldNumber;
const int mdRelicLevelInfo::kEnhanceLevelFieldNumber;
const int mdRelicLevelInfo::kModeOptionId1FieldNumber;
const int mdRelicLevelInfo::kModeOptionValue1FieldNumber;
const int mdRelicLevelInfo::kModeOptionId2FieldNumber;
const int mdRelicLevelInfo::kModeOptionValue2FieldNumber;
const int mdRelicLevelInfo::kModeOptionId3FieldNumber;
const int mdRelicLevelInfo::kModeOptionValue3FieldNumber;
const int mdRelicLevelInfo::kEnhanceRateFieldNumber;
const int mdRelicLevelInfo::kNeedGoldFieldNumber;
const int mdRelicLevelInfo::kNeedHeroPieceFieldNumber;
#endif  // !_MSC_VER

mdRelicLevelInfo::mdRelicLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRelicLevelInfo)
}

void mdRelicLevelInfo::InitAsDefaultInstance() {
}

mdRelicLevelInfo::mdRelicLevelInfo(const mdRelicLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRelicLevelInfo)
}

void mdRelicLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  relic_id_ = 0;
  enhance_level_ = 0;
  mode_option_id_1_ = 0;
  mode_option_value_1_ = 0;
  mode_option_id_2_ = 0;
  mode_option_value_2_ = 0;
  mode_option_id_3_ = 0;
  mode_option_value_3_ = 0;
  enhance_rate_ = 0;
  need_gold_ = 0;
  need_hero_piece_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRelicLevelInfo::~mdRelicLevelInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRelicLevelInfo)
  SharedDtor();
}

void mdRelicLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRelicLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRelicLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRelicLevelInfo_descriptor_;
}

const mdRelicLevelInfo& mdRelicLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRelicLevelInfo* mdRelicLevelInfo::default_instance_ = NULL;

mdRelicLevelInfo* mdRelicLevelInfo::New() const {
  return new mdRelicLevelInfo;
}

void mdRelicLevelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRelicLevelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(relic_id_, mode_option_value_3_);
  }
  ZR_(enhance_rate_, need_hero_piece_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRelicLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRelicLevelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 relic_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relic_id_)));
          set_has_relic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 2;
      case 2: {
        if (tag == 16) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mode_option_id_1;
        break;
      }

      // required int32 mode_option_id_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_mode_option_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_option_id_1_)));
          set_has_mode_option_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode_option_value_1;
        break;
      }

      // required int32 mode_option_value_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_mode_option_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_option_value_1_)));
          set_has_mode_option_value_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mode_option_id_2;
        break;
      }

      // required int32 mode_option_id_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_mode_option_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_option_id_2_)));
          set_has_mode_option_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mode_option_value_2;
        break;
      }

      // required int32 mode_option_value_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_mode_option_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_option_value_2_)));
          set_has_mode_option_value_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mode_option_id_3;
        break;
      }

      // required int32 mode_option_id_3 = 7;
      case 7: {
        if (tag == 56) {
         parse_mode_option_id_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_option_id_3_)));
          set_has_mode_option_id_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mode_option_value_3;
        break;
      }

      // required int32 mode_option_value_3 = 8;
      case 8: {
        if (tag == 64) {
         parse_mode_option_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_option_value_3_)));
          set_has_mode_option_value_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enhance_rate;
        break;
      }

      // required int32 enhance_rate = 9;
      case 9: {
        if (tag == 72) {
         parse_enhance_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_rate_)));
          set_has_enhance_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_need_gold;
        break;
      }

      // required int32 need_gold = 10;
      case 10: {
        if (tag == 80) {
         parse_need_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_gold_)));
          set_has_need_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_need_hero_piece;
        break;
      }

      // required int32 need_hero_piece = 11;
      case 11: {
        if (tag == 88) {
         parse_need_hero_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_hero_piece_)));
          set_has_need_hero_piece();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRelicLevelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRelicLevelInfo)
  return false;
#undef DO_
}

void mdRelicLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRelicLevelInfo)
  // required int32 relic_id = 1;
  if (has_relic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->relic_id(), output);
  }

  // required int32 enhance_level = 2;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enhance_level(), output);
  }

  // required int32 mode_option_id_1 = 3;
  if (has_mode_option_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mode_option_id_1(), output);
  }

  // required int32 mode_option_value_1 = 4;
  if (has_mode_option_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mode_option_value_1(), output);
  }

  // required int32 mode_option_id_2 = 5;
  if (has_mode_option_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mode_option_id_2(), output);
  }

  // required int32 mode_option_value_2 = 6;
  if (has_mode_option_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mode_option_value_2(), output);
  }

  // required int32 mode_option_id_3 = 7;
  if (has_mode_option_id_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mode_option_id_3(), output);
  }

  // required int32 mode_option_value_3 = 8;
  if (has_mode_option_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mode_option_value_3(), output);
  }

  // required int32 enhance_rate = 9;
  if (has_enhance_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->enhance_rate(), output);
  }

  // required int32 need_gold = 10;
  if (has_need_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->need_gold(), output);
  }

  // required int32 need_hero_piece = 11;
  if (has_need_hero_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->need_hero_piece(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRelicLevelInfo)
}

::google::protobuf::uint8* mdRelicLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRelicLevelInfo)
  // required int32 relic_id = 1;
  if (has_relic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->relic_id(), target);
  }

  // required int32 enhance_level = 2;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enhance_level(), target);
  }

  // required int32 mode_option_id_1 = 3;
  if (has_mode_option_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mode_option_id_1(), target);
  }

  // required int32 mode_option_value_1 = 4;
  if (has_mode_option_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mode_option_value_1(), target);
  }

  // required int32 mode_option_id_2 = 5;
  if (has_mode_option_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mode_option_id_2(), target);
  }

  // required int32 mode_option_value_2 = 6;
  if (has_mode_option_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mode_option_value_2(), target);
  }

  // required int32 mode_option_id_3 = 7;
  if (has_mode_option_id_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mode_option_id_3(), target);
  }

  // required int32 mode_option_value_3 = 8;
  if (has_mode_option_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mode_option_value_3(), target);
  }

  // required int32 enhance_rate = 9;
  if (has_enhance_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->enhance_rate(), target);
  }

  // required int32 need_gold = 10;
  if (has_need_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->need_gold(), target);
  }

  // required int32 need_hero_piece = 11;
  if (has_need_hero_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->need_hero_piece(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRelicLevelInfo)
  return target;
}

int mdRelicLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 relic_id = 1;
    if (has_relic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relic_id());
    }

    // required int32 enhance_level = 2;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 mode_option_id_1 = 3;
    if (has_mode_option_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_option_id_1());
    }

    // required int32 mode_option_value_1 = 4;
    if (has_mode_option_value_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_option_value_1());
    }

    // required int32 mode_option_id_2 = 5;
    if (has_mode_option_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_option_id_2());
    }

    // required int32 mode_option_value_2 = 6;
    if (has_mode_option_value_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_option_value_2());
    }

    // required int32 mode_option_id_3 = 7;
    if (has_mode_option_id_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_option_id_3());
    }

    // required int32 mode_option_value_3 = 8;
    if (has_mode_option_value_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_option_value_3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 enhance_rate = 9;
    if (has_enhance_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_rate());
    }

    // required int32 need_gold = 10;
    if (has_need_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_gold());
    }

    // required int32 need_hero_piece = 11;
    if (has_need_hero_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_hero_piece());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRelicLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRelicLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRelicLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRelicLevelInfo::MergeFrom(const mdRelicLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_relic_id()) {
      set_relic_id(from.relic_id());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_mode_option_id_1()) {
      set_mode_option_id_1(from.mode_option_id_1());
    }
    if (from.has_mode_option_value_1()) {
      set_mode_option_value_1(from.mode_option_value_1());
    }
    if (from.has_mode_option_id_2()) {
      set_mode_option_id_2(from.mode_option_id_2());
    }
    if (from.has_mode_option_value_2()) {
      set_mode_option_value_2(from.mode_option_value_2());
    }
    if (from.has_mode_option_id_3()) {
      set_mode_option_id_3(from.mode_option_id_3());
    }
    if (from.has_mode_option_value_3()) {
      set_mode_option_value_3(from.mode_option_value_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enhance_rate()) {
      set_enhance_rate(from.enhance_rate());
    }
    if (from.has_need_gold()) {
      set_need_gold(from.need_gold());
    }
    if (from.has_need_hero_piece()) {
      set_need_hero_piece(from.need_hero_piece());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRelicLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRelicLevelInfo::CopyFrom(const mdRelicLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRelicLevelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void mdRelicLevelInfo::Swap(mdRelicLevelInfo* other) {
  if (other != this) {
    std::swap(relic_id_, other->relic_id_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(mode_option_id_1_, other->mode_option_id_1_);
    std::swap(mode_option_value_1_, other->mode_option_value_1_);
    std::swap(mode_option_id_2_, other->mode_option_id_2_);
    std::swap(mode_option_value_2_, other->mode_option_value_2_);
    std::swap(mode_option_id_3_, other->mode_option_id_3_);
    std::swap(mode_option_value_3_, other->mode_option_value_3_);
    std::swap(enhance_rate_, other->enhance_rate_);
    std::swap(need_gold_, other->need_gold_);
    std::swap(need_hero_piece_, other->need_hero_piece_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRelicLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRelicLevelInfo_descriptor_;
  metadata.reflection = mdRelicLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildBattleResultReward::kRewardGradeFieldNumber;
const int mdGuildBattleResultReward::kReqCountMinFieldNumber;
const int mdGuildBattleResultReward::kReqCountMaxFieldNumber;
const int mdGuildBattleResultReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdGuildBattleResultReward::mdGuildBattleResultReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildBattleResultReward)
}

void mdGuildBattleResultReward::InitAsDefaultInstance() {
}

mdGuildBattleResultReward::mdGuildBattleResultReward(const mdGuildBattleResultReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildBattleResultReward)
}

void mdGuildBattleResultReward::SharedCtor() {
  _cached_size_ = 0;
  reward_grade_ = 0;
  req_count_min_ = 0;
  req_count_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildBattleResultReward::~mdGuildBattleResultReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildBattleResultReward)
  SharedDtor();
}

void mdGuildBattleResultReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildBattleResultReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildBattleResultReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildBattleResultReward_descriptor_;
}

const mdGuildBattleResultReward& mdGuildBattleResultReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildBattleResultReward* mdGuildBattleResultReward::default_instance_ = NULL;

mdGuildBattleResultReward* mdGuildBattleResultReward::New() const {
  return new mdGuildBattleResultReward;
}

void mdGuildBattleResultReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildBattleResultReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(reward_grade_, req_count_min_);
    req_count_max_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildBattleResultReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildBattleResultReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reward_grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_grade_)));
          set_has_reward_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_req_count_min;
        break;
      }

      // required int32 req_count_min = 2;
      case 2: {
        if (tag == 16) {
         parse_req_count_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_count_min_)));
          set_has_req_count_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_count_max;
        break;
      }

      // required int32 req_count_max = 3;
      case 3: {
        if (tag == 24) {
         parse_req_count_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_count_max_)));
          set_has_req_count_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildBattleResultReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildBattleResultReward)
  return false;
#undef DO_
}

void mdGuildBattleResultReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildBattleResultReward)
  // required int32 reward_grade = 1;
  if (has_reward_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_grade(), output);
  }

  // required int32 req_count_min = 2;
  if (has_req_count_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->req_count_min(), output);
  }

  // required int32 req_count_max = 3;
  if (has_req_count_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->req_count_max(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildBattleResultReward)
}

::google::protobuf::uint8* mdGuildBattleResultReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildBattleResultReward)
  // required int32 reward_grade = 1;
  if (has_reward_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_grade(), target);
  }

  // required int32 req_count_min = 2;
  if (has_req_count_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->req_count_min(), target);
  }

  // required int32 req_count_max = 3;
  if (has_req_count_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->req_count_max(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildBattleResultReward)
  return target;
}

int mdGuildBattleResultReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reward_grade = 1;
    if (has_reward_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_grade());
    }

    // required int32 req_count_min = 2;
    if (has_req_count_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_count_min());
    }

    // required int32 req_count_max = 3;
    if (has_req_count_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_count_max());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildBattleResultReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildBattleResultReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildBattleResultReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildBattleResultReward::MergeFrom(const mdGuildBattleResultReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_grade()) {
      set_reward_grade(from.reward_grade());
    }
    if (from.has_req_count_min()) {
      set_req_count_min(from.req_count_min());
    }
    if (from.has_req_count_max()) {
      set_req_count_max(from.req_count_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildBattleResultReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildBattleResultReward::CopyFrom(const mdGuildBattleResultReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildBattleResultReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdGuildBattleResultReward::Swap(mdGuildBattleResultReward* other) {
  if (other != this) {
    std::swap(reward_grade_, other->reward_grade_);
    std::swap(req_count_min_, other->req_count_min_);
    std::swap(req_count_max_, other->req_count_max_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildBattleResultReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildBattleResultReward_descriptor_;
  metadata.reflection = mdGuildBattleResultReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildBattleSeasonReward::kOrderFieldNumber;
const int mdGuildBattleSeasonReward::kRankingMinFieldNumber;
const int mdGuildBattleSeasonReward::kRankingMaxFieldNumber;
const int mdGuildBattleSeasonReward::kRankingRateMinFieldNumber;
const int mdGuildBattleSeasonReward::kRankingRateMaxFieldNumber;
const int mdGuildBattleSeasonReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdGuildBattleSeasonReward::mdGuildBattleSeasonReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildBattleSeasonReward)
}

void mdGuildBattleSeasonReward::InitAsDefaultInstance() {
}

mdGuildBattleSeasonReward::mdGuildBattleSeasonReward(const mdGuildBattleSeasonReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildBattleSeasonReward)
}

void mdGuildBattleSeasonReward::SharedCtor() {
  _cached_size_ = 0;
  order_ = 0;
  ranking_min_ = 0;
  ranking_max_ = 0;
  ranking_rate_min_ = 0;
  ranking_rate_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildBattleSeasonReward::~mdGuildBattleSeasonReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  SharedDtor();
}

void mdGuildBattleSeasonReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildBattleSeasonReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildBattleSeasonReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildBattleSeasonReward_descriptor_;
}

const mdGuildBattleSeasonReward& mdGuildBattleSeasonReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildBattleSeasonReward* mdGuildBattleSeasonReward::default_instance_ = NULL;

mdGuildBattleSeasonReward* mdGuildBattleSeasonReward::New() const {
  return new mdGuildBattleSeasonReward;
}

void mdGuildBattleSeasonReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildBattleSeasonReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(order_, ranking_rate_min_);
    ranking_rate_max_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildBattleSeasonReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 order = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking_min;
        break;
      }

      // required int32 ranking_min = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_min_)));
          set_has_ranking_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ranking_max;
        break;
      }

      // required int32 ranking_max = 3;
      case 3: {
        if (tag == 24) {
         parse_ranking_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_max_)));
          set_has_ranking_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_ranking_rate_min;
        break;
      }

      // required float ranking_rate_min = 4;
      case 4: {
        if (tag == 37) {
         parse_ranking_rate_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ranking_rate_min_)));
          set_has_ranking_rate_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_ranking_rate_max;
        break;
      }

      // required float ranking_rate_max = 5;
      case 5: {
        if (tag == 45) {
         parse_ranking_rate_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ranking_rate_max_)));
          set_has_ranking_rate_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 6;
      case 6: {
        if (tag == 50) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  return false;
#undef DO_
}

void mdGuildBattleSeasonReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  // required int32 order = 1;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order(), output);
  }

  // required int32 ranking_min = 2;
  if (has_ranking_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking_min(), output);
  }

  // required int32 ranking_max = 3;
  if (has_ranking_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking_max(), output);
  }

  // required float ranking_rate_min = 4;
  if (has_ranking_rate_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ranking_rate_min(), output);
  }

  // required float ranking_rate_max = 5;
  if (has_ranking_rate_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ranking_rate_max(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildBattleSeasonReward)
}

::google::protobuf::uint8* mdGuildBattleSeasonReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  // required int32 order = 1;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order(), target);
  }

  // required int32 ranking_min = 2;
  if (has_ranking_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking_min(), target);
  }

  // required int32 ranking_max = 3;
  if (has_ranking_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking_max(), target);
  }

  // required float ranking_rate_min = 4;
  if (has_ranking_rate_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ranking_rate_min(), target);
  }

  // required float ranking_rate_max = 5;
  if (has_ranking_rate_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ranking_rate_max(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 6;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildBattleSeasonReward)
  return target;
}

int mdGuildBattleSeasonReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 order = 1;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // required int32 ranking_min = 2;
    if (has_ranking_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_min());
    }

    // required int32 ranking_max = 3;
    if (has_ranking_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_max());
    }

    // required float ranking_rate_min = 4;
    if (has_ranking_rate_min()) {
      total_size += 1 + 4;
    }

    // required float ranking_rate_max = 5;
    if (has_ranking_rate_max()) {
      total_size += 1 + 4;
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 6;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildBattleSeasonReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildBattleSeasonReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildBattleSeasonReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildBattleSeasonReward::MergeFrom(const mdGuildBattleSeasonReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_ranking_min()) {
      set_ranking_min(from.ranking_min());
    }
    if (from.has_ranking_max()) {
      set_ranking_max(from.ranking_max());
    }
    if (from.has_ranking_rate_min()) {
      set_ranking_rate_min(from.ranking_rate_min());
    }
    if (from.has_ranking_rate_max()) {
      set_ranking_rate_max(from.ranking_rate_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildBattleSeasonReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildBattleSeasonReward::CopyFrom(const mdGuildBattleSeasonReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildBattleSeasonReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdGuildBattleSeasonReward::Swap(mdGuildBattleSeasonReward* other) {
  if (other != this) {
    std::swap(order_, other->order_);
    std::swap(ranking_min_, other->ranking_min_);
    std::swap(ranking_max_, other->ranking_max_);
    std::swap(ranking_rate_min_, other->ranking_rate_min_);
    std::swap(ranking_rate_max_, other->ranking_rate_max_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildBattleSeasonReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildBattleSeasonReward_descriptor_;
  metadata.reflection = mdGuildBattleSeasonReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildBattleScheduleInfo::kTurnFieldNumber;
const int mdGuildBattleScheduleInfo::kStateFieldNumber;
const int mdGuildBattleScheduleInfo::kStartDayFieldNumber;
const int mdGuildBattleScheduleInfo::kStartHourFieldNumber;
const int mdGuildBattleScheduleInfo::kStartMinFieldNumber;
const int mdGuildBattleScheduleInfo::kEndDayFieldNumber;
const int mdGuildBattleScheduleInfo::kEndHourFieldNumber;
const int mdGuildBattleScheduleInfo::kEndMinFieldNumber;
#endif  // !_MSC_VER

mdGuildBattleScheduleInfo::mdGuildBattleScheduleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
}

void mdGuildBattleScheduleInfo::InitAsDefaultInstance() {
}

mdGuildBattleScheduleInfo::mdGuildBattleScheduleInfo(const mdGuildBattleScheduleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
}

void mdGuildBattleScheduleInfo::SharedCtor() {
  _cached_size_ = 0;
  turn_ = 0;
  state_ = 0;
  start_day_ = 0;
  start_hour_ = 0;
  start_min_ = 0;
  end_day_ = 0;
  end_hour_ = 0;
  end_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildBattleScheduleInfo::~mdGuildBattleScheduleInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  SharedDtor();
}

void mdGuildBattleScheduleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildBattleScheduleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildBattleScheduleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildBattleScheduleInfo_descriptor_;
}

const mdGuildBattleScheduleInfo& mdGuildBattleScheduleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildBattleScheduleInfo* mdGuildBattleScheduleInfo::default_instance_ = NULL;

mdGuildBattleScheduleInfo* mdGuildBattleScheduleInfo::New() const {
  return new mdGuildBattleScheduleInfo;
}

void mdGuildBattleScheduleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildBattleScheduleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(turn_, end_min_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildBattleScheduleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 turn = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_day;
        break;
      }

      // required int32 start_day = 3;
      case 3: {
        if (tag == 24) {
         parse_start_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_day_)));
          set_has_start_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_hour;
        break;
      }

      // required int32 start_hour = 4;
      case 4: {
        if (tag == 32) {
         parse_start_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_hour_)));
          set_has_start_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_min;
        break;
      }

      // required int32 start_min = 5;
      case 5: {
        if (tag == 40) {
         parse_start_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_min_)));
          set_has_start_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_day;
        break;
      }

      // required int32 end_day = 6;
      case 6: {
        if (tag == 48) {
         parse_end_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_day_)));
          set_has_end_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_end_hour;
        break;
      }

      // required int32 end_hour = 7;
      case 7: {
        if (tag == 56) {
         parse_end_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_hour_)));
          set_has_end_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_min;
        break;
      }

      // required int32 end_min = 8;
      case 8: {
        if (tag == 64) {
         parse_end_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_min_)));
          set_has_end_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  return false;
#undef DO_
}

void mdGuildBattleScheduleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  // required int32 turn = 1;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->turn(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int32 start_day = 3;
  if (has_start_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->start_day(), output);
  }

  // required int32 start_hour = 4;
  if (has_start_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start_hour(), output);
  }

  // required int32 start_min = 5;
  if (has_start_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->start_min(), output);
  }

  // required int32 end_day = 6;
  if (has_end_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end_day(), output);
  }

  // required int32 end_hour = 7;
  if (has_end_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->end_hour(), output);
  }

  // required int32 end_min = 8;
  if (has_end_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->end_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
}

::google::protobuf::uint8* mdGuildBattleScheduleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  // required int32 turn = 1;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->turn(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int32 start_day = 3;
  if (has_start_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->start_day(), target);
  }

  // required int32 start_hour = 4;
  if (has_start_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start_hour(), target);
  }

  // required int32 start_min = 5;
  if (has_start_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->start_min(), target);
  }

  // required int32 end_day = 6;
  if (has_end_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end_day(), target);
  }

  // required int32 end_hour = 7;
  if (has_end_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->end_hour(), target);
  }

  // required int32 end_min = 8;
  if (has_end_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->end_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildBattleScheduleInfo)
  return target;
}

int mdGuildBattleScheduleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 turn = 1;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 start_day = 3;
    if (has_start_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_day());
    }

    // required int32 start_hour = 4;
    if (has_start_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_hour());
    }

    // required int32 start_min = 5;
    if (has_start_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_min());
    }

    // required int32 end_day = 6;
    if (has_end_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_day());
    }

    // required int32 end_hour = 7;
    if (has_end_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_hour());
    }

    // required int32 end_min = 8;
    if (has_end_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildBattleScheduleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildBattleScheduleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildBattleScheduleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildBattleScheduleInfo::MergeFrom(const mdGuildBattleScheduleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_turn()) {
      set_turn(from.turn());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_start_day()) {
      set_start_day(from.start_day());
    }
    if (from.has_start_hour()) {
      set_start_hour(from.start_hour());
    }
    if (from.has_start_min()) {
      set_start_min(from.start_min());
    }
    if (from.has_end_day()) {
      set_end_day(from.end_day());
    }
    if (from.has_end_hour()) {
      set_end_hour(from.end_hour());
    }
    if (from.has_end_min()) {
      set_end_min(from.end_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildBattleScheduleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildBattleScheduleInfo::CopyFrom(const mdGuildBattleScheduleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildBattleScheduleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdGuildBattleScheduleInfo::Swap(mdGuildBattleScheduleInfo* other) {
  if (other != this) {
    std::swap(turn_, other->turn_);
    std::swap(state_, other->state_);
    std::swap(start_day_, other->start_day_);
    std::swap(start_hour_, other->start_hour_);
    std::swap(start_min_, other->start_min_);
    std::swap(end_day_, other->end_day_);
    std::swap(end_hour_, other->end_hour_);
    std::swap(end_min_, other->end_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildBattleScheduleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildBattleScheduleInfo_descriptor_;
  metadata.reflection = mdGuildBattleScheduleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildSkill::kIdFieldNumber;
const int mdGuildSkill::kLevelFieldNumber;
const int mdGuildSkill::kUpgradeCostGoldFieldNumber;
const int mdGuildSkill::kUpgradeReqGuildLevelFieldNumber;
const int mdGuildSkill::kBuyCostGoldFieldNumber;
const int mdGuildSkill::kBuffOptionTypeFieldNumber;
const int mdGuildSkill::kBuffOptionValueFieldNumber;
const int mdGuildSkill::kBuffTimeSecFieldNumber;
#endif  // !_MSC_VER

mdGuildSkill::mdGuildSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildSkill)
}

void mdGuildSkill::InitAsDefaultInstance() {
}

mdGuildSkill::mdGuildSkill(const mdGuildSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildSkill)
}

void mdGuildSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  upgrade_cost_gold_ = 0;
  upgrade_req_guild_level_ = 0;
  buy_cost_gold_ = 0;
  buff_option_type_ = 0;
  buff_option_value_ = 0;
  buff_time_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildSkill::~mdGuildSkill() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildSkill)
  SharedDtor();
}

void mdGuildSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildSkill_descriptor_;
}

const mdGuildSkill& mdGuildSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildSkill* mdGuildSkill::default_instance_ = NULL;

mdGuildSkill* mdGuildSkill::New() const {
  return new mdGuildSkill;
}

void mdGuildSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, buff_time_sec_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_cost_gold;
        break;
      }

      // required int32 upgrade_cost_gold = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade_cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_cost_gold_)));
          set_has_upgrade_cost_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upgrade_req_guild_level;
        break;
      }

      // required int32 upgrade_req_guild_level = 4;
      case 4: {
        if (tag == 32) {
         parse_upgrade_req_guild_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_req_guild_level_)));
          set_has_upgrade_req_guild_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buy_cost_gold;
        break;
      }

      // required int32 buy_cost_gold = 5;
      case 5: {
        if (tag == 40) {
         parse_buy_cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_cost_gold_)));
          set_has_buy_cost_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buff_option_type;
        break;
      }

      // required int32 buff_option_type = 6;
      case 6: {
        if (tag == 48) {
         parse_buff_option_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_option_type_)));
          set_has_buff_option_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_buff_option_value;
        break;
      }

      // required float buff_option_value = 7;
      case 7: {
        if (tag == 61) {
         parse_buff_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buff_option_value_)));
          set_has_buff_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_buff_time_sec;
        break;
      }

      // required int32 buff_time_sec = 8;
      case 8: {
        if (tag == 64) {
         parse_buff_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_time_sec_)));
          set_has_buff_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildSkill)
  return false;
#undef DO_
}

void mdGuildSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildSkill)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 upgrade_cost_gold = 3;
  if (has_upgrade_cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->upgrade_cost_gold(), output);
  }

  // required int32 upgrade_req_guild_level = 4;
  if (has_upgrade_req_guild_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgrade_req_guild_level(), output);
  }

  // required int32 buy_cost_gold = 5;
  if (has_buy_cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_cost_gold(), output);
  }

  // required int32 buff_option_type = 6;
  if (has_buff_option_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buff_option_type(), output);
  }

  // required float buff_option_value = 7;
  if (has_buff_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->buff_option_value(), output);
  }

  // required int32 buff_time_sec = 8;
  if (has_buff_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->buff_time_sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildSkill)
}

::google::protobuf::uint8* mdGuildSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildSkill)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 upgrade_cost_gold = 3;
  if (has_upgrade_cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->upgrade_cost_gold(), target);
  }

  // required int32 upgrade_req_guild_level = 4;
  if (has_upgrade_req_guild_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgrade_req_guild_level(), target);
  }

  // required int32 buy_cost_gold = 5;
  if (has_buy_cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_cost_gold(), target);
  }

  // required int32 buff_option_type = 6;
  if (has_buff_option_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buff_option_type(), target);
  }

  // required float buff_option_value = 7;
  if (has_buff_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->buff_option_value(), target);
  }

  // required int32 buff_time_sec = 8;
  if (has_buff_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->buff_time_sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildSkill)
  return target;
}

int mdGuildSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 upgrade_cost_gold = 3;
    if (has_upgrade_cost_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_cost_gold());
    }

    // required int32 upgrade_req_guild_level = 4;
    if (has_upgrade_req_guild_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_req_guild_level());
    }

    // required int32 buy_cost_gold = 5;
    if (has_buy_cost_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_cost_gold());
    }

    // required int32 buff_option_type = 6;
    if (has_buff_option_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_option_type());
    }

    // required float buff_option_value = 7;
    if (has_buff_option_value()) {
      total_size += 1 + 4;
    }

    // required int32 buff_time_sec = 8;
    if (has_buff_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_time_sec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildSkill::MergeFrom(const mdGuildSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_upgrade_cost_gold()) {
      set_upgrade_cost_gold(from.upgrade_cost_gold());
    }
    if (from.has_upgrade_req_guild_level()) {
      set_upgrade_req_guild_level(from.upgrade_req_guild_level());
    }
    if (from.has_buy_cost_gold()) {
      set_buy_cost_gold(from.buy_cost_gold());
    }
    if (from.has_buff_option_type()) {
      set_buff_option_type(from.buff_option_type());
    }
    if (from.has_buff_option_value()) {
      set_buff_option_value(from.buff_option_value());
    }
    if (from.has_buff_time_sec()) {
      set_buff_time_sec(from.buff_time_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildSkill::CopyFrom(const mdGuildSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdGuildSkill::Swap(mdGuildSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(upgrade_cost_gold_, other->upgrade_cost_gold_);
    std::swap(upgrade_req_guild_level_, other->upgrade_req_guild_level_);
    std::swap(buy_cost_gold_, other->buy_cost_gold_);
    std::swap(buff_option_type_, other->buff_option_type_);
    std::swap(buff_option_value_, other->buff_option_value_);
    std::swap(buff_time_sec_, other->buff_time_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildSkill_descriptor_;
  metadata.reflection = mdGuildSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildExp::kLevelFieldNumber;
const int mdGuildExp::kExpMaxFieldNumber;
#endif  // !_MSC_VER

mdGuildExp::mdGuildExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildExp)
}

void mdGuildExp::InitAsDefaultInstance() {
}

mdGuildExp::mdGuildExp(const mdGuildExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildExp)
}

void mdGuildExp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildExp::~mdGuildExp() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildExp)
  SharedDtor();
}

void mdGuildExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildExp_descriptor_;
}

const mdGuildExp& mdGuildExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildExp* mdGuildExp::default_instance_ = NULL;

mdGuildExp* mdGuildExp::New() const {
  return new mdGuildExp;
}

void mdGuildExp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildExp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, exp_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp_max;
        break;
      }

      // required int32 exp_max = 2;
      case 2: {
        if (tag == 16) {
         parse_exp_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_max_)));
          set_has_exp_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildExp)
  return false;
#undef DO_
}

void mdGuildExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildExp)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 exp_max = 2;
  if (has_exp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildExp)
}

::google::protobuf::uint8* mdGuildExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildExp)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 exp_max = 2;
  if (has_exp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildExp)
  return target;
}

int mdGuildExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp_max = 2;
    if (has_exp_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildExp::MergeFrom(const mdGuildExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp_max()) {
      set_exp_max(from.exp_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildExp::CopyFrom(const mdGuildExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdGuildExp::Swap(mdGuildExp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_max_, other->exp_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildExp_descriptor_;
  metadata.reflection = mdGuildExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildSupportItem::kItemTemplateIdFieldNumber;
const int mdGuildSupportItem::kSupportMaxCountFieldNumber;
#endif  // !_MSC_VER

mdGuildSupportItem::mdGuildSupportItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildSupportItem)
}

void mdGuildSupportItem::InitAsDefaultInstance() {
}

mdGuildSupportItem::mdGuildSupportItem(const mdGuildSupportItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildSupportItem)
}

void mdGuildSupportItem::SharedCtor() {
  _cached_size_ = 0;
  item_template_id_ = 0;
  support_max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildSupportItem::~mdGuildSupportItem() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildSupportItem)
  SharedDtor();
}

void mdGuildSupportItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildSupportItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildSupportItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildSupportItem_descriptor_;
}

const mdGuildSupportItem& mdGuildSupportItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildSupportItem* mdGuildSupportItem::default_instance_ = NULL;

mdGuildSupportItem* mdGuildSupportItem::New() const {
  return new mdGuildSupportItem;
}

void mdGuildSupportItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildSupportItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_template_id_, support_max_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildSupportItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildSupportItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_support_max_count;
        break;
      }

      // required int32 support_max_count = 2;
      case 2: {
        if (tag == 16) {
         parse_support_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &support_max_count_)));
          set_has_support_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildSupportItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildSupportItem)
  return false;
#undef DO_
}

void mdGuildSupportItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildSupportItem)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_template_id(), output);
  }

  // required int32 support_max_count = 2;
  if (has_support_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->support_max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildSupportItem)
}

::google::protobuf::uint8* mdGuildSupportItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildSupportItem)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_template_id(), target);
  }

  // required int32 support_max_count = 2;
  if (has_support_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->support_max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildSupportItem)
  return target;
}

int mdGuildSupportItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_template_id = 1;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required int32 support_max_count = 2;
    if (has_support_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->support_max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildSupportItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildSupportItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildSupportItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildSupportItem::MergeFrom(const mdGuildSupportItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_support_max_count()) {
      set_support_max_count(from.support_max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildSupportItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildSupportItem::CopyFrom(const mdGuildSupportItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildSupportItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdGuildSupportItem::Swap(mdGuildSupportItem* other) {
  if (other != this) {
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(support_max_count_, other->support_max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildSupportItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildSupportItem_descriptor_;
  metadata.reflection = mdGuildSupportItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildMercenary::kIdFieldNumber;
const int mdGuildMercenary::kMasteryTypeFieldNumber;
const int mdGuildMercenary::kMaxArmorOverrideFieldNumber;
const int mdGuildMercenary::kSkillId1FieldNumber;
const int mdGuildMercenary::kSkillId2FieldNumber;
const int mdGuildMercenary::kSkillId3FieldNumber;
const int mdGuildMercenary::kMaxUseCountFieldNumber;
const int mdGuildMercenary::kIsUsableFieldNumber;
#endif  // !_MSC_VER

mdGuildMercenary::mdGuildMercenary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildMercenary)
}

void mdGuildMercenary::InitAsDefaultInstance() {
}

mdGuildMercenary::mdGuildMercenary(const mdGuildMercenary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildMercenary)
}

void mdGuildMercenary::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mastery_type_ = 0;
  max_armor_override_ = 0;
  skill_id_1_ = 0;
  skill_id_2_ = 0;
  skill_id_3_ = 0;
  max_use_count_ = 0;
  is_usable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildMercenary::~mdGuildMercenary() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildMercenary)
  SharedDtor();
}

void mdGuildMercenary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildMercenary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildMercenary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildMercenary_descriptor_;
}

const mdGuildMercenary& mdGuildMercenary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildMercenary* mdGuildMercenary::default_instance_ = NULL;

mdGuildMercenary* mdGuildMercenary::New() const {
  return new mdGuildMercenary;
}

void mdGuildMercenary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildMercenary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, is_usable_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildMercenary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildMercenary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mastery_type;
        break;
      }

      // required int32 mastery_type = 2;
      case 2: {
        if (tag == 16) {
         parse_mastery_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mastery_type_)));
          set_has_mastery_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_armor_override;
        break;
      }

      // required int32 max_armor_override = 3;
      case 3: {
        if (tag == 24) {
         parse_max_armor_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_armor_override_)));
          set_has_max_armor_override();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_skill_id_1;
        break;
      }

      // required int32 skill_id_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_skill_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_1_)));
          set_has_skill_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_skill_id_2;
        break;
      }

      // required int32 skill_id_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_skill_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_2_)));
          set_has_skill_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_skill_id_3;
        break;
      }

      // required int32 skill_id_3 = 6;
      case 6: {
        if (tag == 48) {
         parse_skill_id_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_3_)));
          set_has_skill_id_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_use_count;
        break;
      }

      // required int32 max_use_count = 7;
      case 7: {
        if (tag == 56) {
         parse_max_use_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_use_count_)));
          set_has_max_use_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_usable;
        break;
      }

      // required bool is_usable = 8;
      case 8: {
        if (tag == 64) {
         parse_is_usable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_usable_)));
          set_has_is_usable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildMercenary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildMercenary)
  return false;
#undef DO_
}

void mdGuildMercenary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildMercenary)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 mastery_type = 2;
  if (has_mastery_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mastery_type(), output);
  }

  // required int32 max_armor_override = 3;
  if (has_max_armor_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_armor_override(), output);
  }

  // required int32 skill_id_1 = 4;
  if (has_skill_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skill_id_1(), output);
  }

  // required int32 skill_id_2 = 5;
  if (has_skill_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skill_id_2(), output);
  }

  // required int32 skill_id_3 = 6;
  if (has_skill_id_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skill_id_3(), output);
  }

  // required int32 max_use_count = 7;
  if (has_max_use_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_use_count(), output);
  }

  // required bool is_usable = 8;
  if (has_is_usable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_usable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildMercenary)
}

::google::protobuf::uint8* mdGuildMercenary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildMercenary)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 mastery_type = 2;
  if (has_mastery_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mastery_type(), target);
  }

  // required int32 max_armor_override = 3;
  if (has_max_armor_override()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_armor_override(), target);
  }

  // required int32 skill_id_1 = 4;
  if (has_skill_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skill_id_1(), target);
  }

  // required int32 skill_id_2 = 5;
  if (has_skill_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skill_id_2(), target);
  }

  // required int32 skill_id_3 = 6;
  if (has_skill_id_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skill_id_3(), target);
  }

  // required int32 max_use_count = 7;
  if (has_max_use_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_use_count(), target);
  }

  // required bool is_usable = 8;
  if (has_is_usable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_usable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildMercenary)
  return target;
}

int mdGuildMercenary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 mastery_type = 2;
    if (has_mastery_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mastery_type());
    }

    // required int32 max_armor_override = 3;
    if (has_max_armor_override()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_armor_override());
    }

    // required int32 skill_id_1 = 4;
    if (has_skill_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id_1());
    }

    // required int32 skill_id_2 = 5;
    if (has_skill_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id_2());
    }

    // required int32 skill_id_3 = 6;
    if (has_skill_id_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id_3());
    }

    // required int32 max_use_count = 7;
    if (has_max_use_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_use_count());
    }

    // required bool is_usable = 8;
    if (has_is_usable()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildMercenary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildMercenary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildMercenary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildMercenary::MergeFrom(const mdGuildMercenary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mastery_type()) {
      set_mastery_type(from.mastery_type());
    }
    if (from.has_max_armor_override()) {
      set_max_armor_override(from.max_armor_override());
    }
    if (from.has_skill_id_1()) {
      set_skill_id_1(from.skill_id_1());
    }
    if (from.has_skill_id_2()) {
      set_skill_id_2(from.skill_id_2());
    }
    if (from.has_skill_id_3()) {
      set_skill_id_3(from.skill_id_3());
    }
    if (from.has_max_use_count()) {
      set_max_use_count(from.max_use_count());
    }
    if (from.has_is_usable()) {
      set_is_usable(from.is_usable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildMercenary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildMercenary::CopyFrom(const mdGuildMercenary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildMercenary::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdGuildMercenary::Swap(mdGuildMercenary* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mastery_type_, other->mastery_type_);
    std::swap(max_armor_override_, other->max_armor_override_);
    std::swap(skill_id_1_, other->skill_id_1_);
    std::swap(skill_id_2_, other->skill_id_2_);
    std::swap(skill_id_3_, other->skill_id_3_);
    std::swap(max_use_count_, other->max_use_count_);
    std::swap(is_usable_, other->is_usable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildMercenary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildMercenary_descriptor_;
  metadata.reflection = mdGuildMercenary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildMercenarySkill::kSkillIdFieldNumber;
const int mdGuildMercenarySkill::kRequireMercenaryLevelFieldNumber;
const int mdGuildMercenarySkill::kCoolTimeSecFieldNumber;
#endif  // !_MSC_VER

mdGuildMercenarySkill::mdGuildMercenarySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildMercenarySkill)
}

void mdGuildMercenarySkill::InitAsDefaultInstance() {
}

mdGuildMercenarySkill::mdGuildMercenarySkill(const mdGuildMercenarySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildMercenarySkill)
}

void mdGuildMercenarySkill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  require_mercenary_level_ = 0;
  cool_time_sec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildMercenarySkill::~mdGuildMercenarySkill() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildMercenarySkill)
  SharedDtor();
}

void mdGuildMercenarySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildMercenarySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildMercenarySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildMercenarySkill_descriptor_;
}

const mdGuildMercenarySkill& mdGuildMercenarySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildMercenarySkill* mdGuildMercenarySkill::default_instance_ = NULL;

mdGuildMercenarySkill* mdGuildMercenarySkill::New() const {
  return new mdGuildMercenarySkill;
}

void mdGuildMercenarySkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildMercenarySkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, cool_time_sec_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildMercenarySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildMercenarySkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_require_mercenary_level;
        break;
      }

      // required int32 require_mercenary_level = 2;
      case 2: {
        if (tag == 16) {
         parse_require_mercenary_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &require_mercenary_level_)));
          set_has_require_mercenary_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cool_time_sec;
        break;
      }

      // required int32 cool_time_sec = 3;
      case 3: {
        if (tag == 24) {
         parse_cool_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cool_time_sec_)));
          set_has_cool_time_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildMercenarySkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildMercenarySkill)
  return false;
#undef DO_
}

void mdGuildMercenarySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildMercenarySkill)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // required int32 require_mercenary_level = 2;
  if (has_require_mercenary_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->require_mercenary_level(), output);
  }

  // required int32 cool_time_sec = 3;
  if (has_cool_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cool_time_sec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildMercenarySkill)
}

::google::protobuf::uint8* mdGuildMercenarySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildMercenarySkill)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // required int32 require_mercenary_level = 2;
  if (has_require_mercenary_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->require_mercenary_level(), target);
  }

  // required int32 cool_time_sec = 3;
  if (has_cool_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cool_time_sec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildMercenarySkill)
  return target;
}

int mdGuildMercenarySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required int32 require_mercenary_level = 2;
    if (has_require_mercenary_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->require_mercenary_level());
    }

    // required int32 cool_time_sec = 3;
    if (has_cool_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cool_time_sec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildMercenarySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildMercenarySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildMercenarySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildMercenarySkill::MergeFrom(const mdGuildMercenarySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_require_mercenary_level()) {
      set_require_mercenary_level(from.require_mercenary_level());
    }
    if (from.has_cool_time_sec()) {
      set_cool_time_sec(from.cool_time_sec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildMercenarySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildMercenarySkill::CopyFrom(const mdGuildMercenarySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildMercenarySkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdGuildMercenarySkill::Swap(mdGuildMercenarySkill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(require_mercenary_level_, other->require_mercenary_level_);
    std::swap(cool_time_sec_, other->cool_time_sec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildMercenarySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildMercenarySkill_descriptor_;
  metadata.reflection = mdGuildMercenarySkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGuildMercenaryMastery::kIdFieldNumber;
const int mdGuildMercenaryMastery::kLevelFieldNumber;
const int mdGuildMercenaryMastery::kMaxExpFieldNumber;
const int mdGuildMercenaryMastery::kOptionId1FieldNumber;
const int mdGuildMercenaryMastery::kOptionValue1FieldNumber;
const int mdGuildMercenaryMastery::kOptionId2FieldNumber;
const int mdGuildMercenaryMastery::kOptionValue2FieldNumber;
const int mdGuildMercenaryMastery::kOptionId3FieldNumber;
const int mdGuildMercenaryMastery::kOptionValue3FieldNumber;
#endif  // !_MSC_VER

mdGuildMercenaryMastery::mdGuildMercenaryMastery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildMercenaryMastery)
}

void mdGuildMercenaryMastery::InitAsDefaultInstance() {
}

mdGuildMercenaryMastery::mdGuildMercenaryMastery(const mdGuildMercenaryMastery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildMercenaryMastery)
}

void mdGuildMercenaryMastery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  max_exp_ = 0;
  option_id_1_ = 0;
  option_value_1_ = 0;
  option_id_2_ = 0;
  option_value_2_ = 0;
  option_id_3_ = 0;
  option_value_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildMercenaryMastery::~mdGuildMercenaryMastery() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildMercenaryMastery)
  SharedDtor();
}

void mdGuildMercenaryMastery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildMercenaryMastery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildMercenaryMastery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildMercenaryMastery_descriptor_;
}

const mdGuildMercenaryMastery& mdGuildMercenaryMastery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildMercenaryMastery* mdGuildMercenaryMastery::default_instance_ = NULL;

mdGuildMercenaryMastery* mdGuildMercenaryMastery::New() const {
  return new mdGuildMercenaryMastery;
}

void mdGuildMercenaryMastery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildMercenaryMastery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, option_id_3_);
  }
  option_value_3_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildMercenaryMastery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildMercenaryMastery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_exp;
        break;
      }

      // required int32 max_exp = 3;
      case 3: {
        if (tag == 24) {
         parse_max_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_exp_)));
          set_has_max_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_option_id_1;
        break;
      }

      // required int32 option_id_1 = 10;
      case 10: {
        if (tag == 80) {
         parse_option_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_1_)));
          set_has_option_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_option_value_1;
        break;
      }

      // required float option_value_1 = 11;
      case 11: {
        if (tag == 93) {
         parse_option_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_1_)));
          set_has_option_value_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_option_id_2;
        break;
      }

      // required int32 option_id_2 = 12;
      case 12: {
        if (tag == 96) {
         parse_option_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_2_)));
          set_has_option_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_option_value_2;
        break;
      }

      // required float option_value_2 = 13;
      case 13: {
        if (tag == 109) {
         parse_option_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_2_)));
          set_has_option_value_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_option_id_3;
        break;
      }

      // required int32 option_id_3 = 14;
      case 14: {
        if (tag == 112) {
         parse_option_id_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_3_)));
          set_has_option_id_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_option_value_3;
        break;
      }

      // required float option_value_3 = 15;
      case 15: {
        if (tag == 125) {
         parse_option_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_3_)));
          set_has_option_value_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildMercenaryMastery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildMercenaryMastery)
  return false;
#undef DO_
}

void mdGuildMercenaryMastery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildMercenaryMastery)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 max_exp = 3;
  if (has_max_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_exp(), output);
  }

  // required int32 option_id_1 = 10;
  if (has_option_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->option_id_1(), output);
  }

  // required float option_value_1 = 11;
  if (has_option_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->option_value_1(), output);
  }

  // required int32 option_id_2 = 12;
  if (has_option_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->option_id_2(), output);
  }

  // required float option_value_2 = 13;
  if (has_option_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->option_value_2(), output);
  }

  // required int32 option_id_3 = 14;
  if (has_option_id_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->option_id_3(), output);
  }

  // required float option_value_3 = 15;
  if (has_option_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->option_value_3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildMercenaryMastery)
}

::google::protobuf::uint8* mdGuildMercenaryMastery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildMercenaryMastery)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 max_exp = 3;
  if (has_max_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_exp(), target);
  }

  // required int32 option_id_1 = 10;
  if (has_option_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->option_id_1(), target);
  }

  // required float option_value_1 = 11;
  if (has_option_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->option_value_1(), target);
  }

  // required int32 option_id_2 = 12;
  if (has_option_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->option_id_2(), target);
  }

  // required float option_value_2 = 13;
  if (has_option_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->option_value_2(), target);
  }

  // required int32 option_id_3 = 14;
  if (has_option_id_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->option_id_3(), target);
  }

  // required float option_value_3 = 15;
  if (has_option_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->option_value_3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildMercenaryMastery)
  return target;
}

int mdGuildMercenaryMastery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 max_exp = 3;
    if (has_max_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_exp());
    }

    // required int32 option_id_1 = 10;
    if (has_option_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id_1());
    }

    // required float option_value_1 = 11;
    if (has_option_value_1()) {
      total_size += 1 + 4;
    }

    // required int32 option_id_2 = 12;
    if (has_option_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id_2());
    }

    // required float option_value_2 = 13;
    if (has_option_value_2()) {
      total_size += 1 + 4;
    }

    // required int32 option_id_3 = 14;
    if (has_option_id_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id_3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float option_value_3 = 15;
    if (has_option_value_3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildMercenaryMastery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildMercenaryMastery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildMercenaryMastery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildMercenaryMastery::MergeFrom(const mdGuildMercenaryMastery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_max_exp()) {
      set_max_exp(from.max_exp());
    }
    if (from.has_option_id_1()) {
      set_option_id_1(from.option_id_1());
    }
    if (from.has_option_value_1()) {
      set_option_value_1(from.option_value_1());
    }
    if (from.has_option_id_2()) {
      set_option_id_2(from.option_id_2());
    }
    if (from.has_option_value_2()) {
      set_option_value_2(from.option_value_2());
    }
    if (from.has_option_id_3()) {
      set_option_id_3(from.option_id_3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_option_value_3()) {
      set_option_value_3(from.option_value_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildMercenaryMastery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildMercenaryMastery::CopyFrom(const mdGuildMercenaryMastery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildMercenaryMastery::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdGuildMercenaryMastery::Swap(mdGuildMercenaryMastery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(max_exp_, other->max_exp_);
    std::swap(option_id_1_, other->option_id_1_);
    std::swap(option_value_1_, other->option_value_1_);
    std::swap(option_id_2_, other->option_id_2_);
    std::swap(option_value_2_, other->option_value_2_);
    std::swap(option_id_3_, other->option_id_3_);
    std::swap(option_value_3_, other->option_value_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildMercenaryMastery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildMercenaryMastery_descriptor_;
  metadata.reflection = mdGuildMercenaryMastery_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* mdGuildMercenaryDonation_DonationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildMercenaryDonation_DonationType_descriptor_;
}
bool mdGuildMercenaryDonation_DonationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mdGuildMercenaryDonation_DonationType mdGuildMercenaryDonation::GOLD;
const mdGuildMercenaryDonation_DonationType mdGuildMercenaryDonation::GEM;
const mdGuildMercenaryDonation_DonationType mdGuildMercenaryDonation::DonationType_MIN;
const mdGuildMercenaryDonation_DonationType mdGuildMercenaryDonation::DonationType_MAX;
const int mdGuildMercenaryDonation::DonationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int mdGuildMercenaryDonation::kDonationTypeFieldNumber;
const int mdGuildMercenaryDonation::kItemTemplateIdFieldNumber;
const int mdGuildMercenaryDonation::kDonationAmountFieldNumber;
const int mdGuildMercenaryDonation::kExpIncrementFieldNumber;
#endif  // !_MSC_VER

mdGuildMercenaryDonation::mdGuildMercenaryDonation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGuildMercenaryDonation)
}

void mdGuildMercenaryDonation::InitAsDefaultInstance() {
}

mdGuildMercenaryDonation::mdGuildMercenaryDonation(const mdGuildMercenaryDonation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGuildMercenaryDonation)
}

void mdGuildMercenaryDonation::SharedCtor() {
  _cached_size_ = 0;
  donation_type_ = 1;
  item_template_id_ = 0;
  donation_amount_ = 0;
  exp_increment_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGuildMercenaryDonation::~mdGuildMercenaryDonation() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGuildMercenaryDonation)
  SharedDtor();
}

void mdGuildMercenaryDonation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGuildMercenaryDonation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGuildMercenaryDonation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGuildMercenaryDonation_descriptor_;
}

const mdGuildMercenaryDonation& mdGuildMercenaryDonation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGuildMercenaryDonation* mdGuildMercenaryDonation::default_instance_ = NULL;

mdGuildMercenaryDonation* mdGuildMercenaryDonation::New() const {
  return new mdGuildMercenaryDonation;
}

void mdGuildMercenaryDonation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGuildMercenaryDonation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(item_template_id_, exp_increment_);
    donation_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGuildMercenaryDonation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGuildMercenaryDonation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.masterdata.mdGuildMercenaryDonation.DonationType donation_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::masterdata::mdGuildMercenaryDonation_DonationType_IsValid(value)) {
            set_donation_type(static_cast< ::b2::protocol::masterdata::mdGuildMercenaryDonation_DonationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_template_id;
        break;
      }

      // required int32 item_template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_donation_amount;
        break;
      }

      // required int32 donation_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_donation_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_amount_)));
          set_has_donation_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp_increment;
        break;
      }

      // required int32 exp_increment = 4;
      case 4: {
        if (tag == 32) {
         parse_exp_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_increment_)));
          set_has_exp_increment();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGuildMercenaryDonation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGuildMercenaryDonation)
  return false;
#undef DO_
}

void mdGuildMercenaryDonation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGuildMercenaryDonation)
  // required .b2.protocol.masterdata.mdGuildMercenaryDonation.DonationType donation_type = 1;
  if (has_donation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->donation_type(), output);
  }

  // required int32 item_template_id = 2;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_template_id(), output);
  }

  // required int32 donation_amount = 3;
  if (has_donation_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->donation_amount(), output);
  }

  // required int32 exp_increment = 4;
  if (has_exp_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp_increment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGuildMercenaryDonation)
}

::google::protobuf::uint8* mdGuildMercenaryDonation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGuildMercenaryDonation)
  // required .b2.protocol.masterdata.mdGuildMercenaryDonation.DonationType donation_type = 1;
  if (has_donation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->donation_type(), target);
  }

  // required int32 item_template_id = 2;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_template_id(), target);
  }

  // required int32 donation_amount = 3;
  if (has_donation_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->donation_amount(), target);
  }

  // required int32 exp_increment = 4;
  if (has_exp_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp_increment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGuildMercenaryDonation)
  return target;
}

int mdGuildMercenaryDonation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.masterdata.mdGuildMercenaryDonation.DonationType donation_type = 1;
    if (has_donation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->donation_type());
    }

    // required int32 item_template_id = 2;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required int32 donation_amount = 3;
    if (has_donation_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_amount());
    }

    // required int32 exp_increment = 4;
    if (has_exp_increment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp_increment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGuildMercenaryDonation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGuildMercenaryDonation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGuildMercenaryDonation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGuildMercenaryDonation::MergeFrom(const mdGuildMercenaryDonation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_type()) {
      set_donation_type(from.donation_type());
    }
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_donation_amount()) {
      set_donation_amount(from.donation_amount());
    }
    if (from.has_exp_increment()) {
      set_exp_increment(from.exp_increment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGuildMercenaryDonation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGuildMercenaryDonation::CopyFrom(const mdGuildMercenaryDonation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGuildMercenaryDonation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdGuildMercenaryDonation::Swap(mdGuildMercenaryDonation* other) {
  if (other != this) {
    std::swap(donation_type_, other->donation_type_);
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(donation_amount_, other->donation_amount_);
    std::swap(exp_increment_, other->exp_increment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGuildMercenaryDonation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGuildMercenaryDonation_descriptor_;
  metadata.reflection = mdGuildMercenaryDonation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdStageFixedDrop::kStageIdFieldNumber;
const int mdStageFixedDrop::kIdxFieldNumber;
const int mdStageFixedDrop::kTemplateIdFieldNumber;
const int mdStageFixedDrop::kMinFieldNumber;
const int mdStageFixedDrop::kMaxFieldNumber;
const int mdStageFixedDrop::kRateFieldNumber;
#endif  // !_MSC_VER

mdStageFixedDrop::mdStageFixedDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdStageFixedDrop)
}

void mdStageFixedDrop::InitAsDefaultInstance() {
}

mdStageFixedDrop::mdStageFixedDrop(const mdStageFixedDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdStageFixedDrop)
}

void mdStageFixedDrop::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  idx_ = 0;
  template_id_ = 0;
  min_ = 0;
  max_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdStageFixedDrop::~mdStageFixedDrop() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdStageFixedDrop)
  SharedDtor();
}

void mdStageFixedDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdStageFixedDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdStageFixedDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdStageFixedDrop_descriptor_;
}

const mdStageFixedDrop& mdStageFixedDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdStageFixedDrop* mdStageFixedDrop::default_instance_ = NULL;

mdStageFixedDrop* mdStageFixedDrop::New() const {
  return new mdStageFixedDrop;
}

void mdStageFixedDrop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdStageFixedDrop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(stage_id_, rate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdStageFixedDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdStageFixedDrop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // required int32 idx = 2;
      case 2: {
        if (tag == 16) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 3;
      case 3: {
        if (tag == 24) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min;
        break;
      }

      // required int32 min = 4;
      case 4: {
        if (tag == 32) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max;
        break;
      }

      // required int32 max = 5;
      case 5: {
        if (tag == 40) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rate;
        break;
      }

      // required int32 rate = 6;
      case 6: {
        if (tag == 48) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdStageFixedDrop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdStageFixedDrop)
  return false;
#undef DO_
}

void mdStageFixedDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdStageFixedDrop)
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  // required int32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idx(), output);
  }

  // required int32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // required int32 min = 4;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min(), output);
  }

  // required int32 max = 5;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max(), output);
  }

  // required int32 rate = 6;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdStageFixedDrop)
}

::google::protobuf::uint8* mdStageFixedDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdStageFixedDrop)
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  // required int32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idx(), target);
  }

  // required int32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // required int32 min = 4;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min(), target);
  }

  // required int32 max = 5;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max(), target);
  }

  // required int32 rate = 6;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdStageFixedDrop)
  return target;
}

int mdStageFixedDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idx());
    }

    // required int32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 min = 4;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min());
    }

    // required int32 max = 5;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max());
    }

    // required int32 rate = 6;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdStageFixedDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdStageFixedDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdStageFixedDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdStageFixedDrop::MergeFrom(const mdStageFixedDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdStageFixedDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdStageFixedDrop::CopyFrom(const mdStageFixedDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdStageFixedDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdStageFixedDrop::Swap(mdStageFixedDrop* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(idx_, other->idx_);
    std::swap(template_id_, other->template_id_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdStageFixedDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdStageFixedDrop_descriptor_;
  metadata.reflection = mdStageFixedDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopCashBonus::kIdFieldNumber;
const int mdShopCashBonus::kIncreaseRateFieldNumber;
const int mdShopCashBonus::kStartTimeFieldNumber;
const int mdShopCashBonus::kEndTimeFieldNumber;
#endif  // !_MSC_VER

mdShopCashBonus::mdShopCashBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopCashBonus)
}

void mdShopCashBonus::InitAsDefaultInstance() {
}

mdShopCashBonus::mdShopCashBonus(const mdShopCashBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopCashBonus)
}

void mdShopCashBonus::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  increase_rate_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopCashBonus::~mdShopCashBonus() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopCashBonus)
  SharedDtor();
}

void mdShopCashBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopCashBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopCashBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopCashBonus_descriptor_;
}

const mdShopCashBonus& mdShopCashBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopCashBonus* mdShopCashBonus::default_instance_ = NULL;

mdShopCashBonus* mdShopCashBonus::New() const {
  return new mdShopCashBonus;
}

void mdShopCashBonus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopCashBonus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, end_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopCashBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopCashBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_increase_rate;
        break;
      }

      // required int32 increase_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_increase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_rate_)));
          set_has_increase_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopCashBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopCashBonus)
  return false;
#undef DO_
}

void mdShopCashBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopCashBonus)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 increase_rate = 2;
  if (has_increase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->increase_rate(), output);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopCashBonus)
}

::google::protobuf::uint8* mdShopCashBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopCashBonus)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 increase_rate = 2;
  if (has_increase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->increase_rate(), target);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopCashBonus)
  return target;
}

int mdShopCashBonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 increase_rate = 2;
    if (has_increase_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase_rate());
    }

    // required int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopCashBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopCashBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopCashBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopCashBonus::MergeFrom(const mdShopCashBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_increase_rate()) {
      set_increase_rate(from.increase_rate());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopCashBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopCashBonus::CopyFrom(const mdShopCashBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopCashBonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdShopCashBonus::Swap(mdShopCashBonus* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(increase_rate_, other->increase_rate_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopCashBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopCashBonus_descriptor_;
  metadata.reflection = mdShopCashBonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopFundsSale::kIdFieldNumber;
const int mdShopFundsSale::kDiscountRateFieldNumber;
const int mdShopFundsSale::kStartTimeFieldNumber;
const int mdShopFundsSale::kEndTimeFieldNumber;
#endif  // !_MSC_VER

mdShopFundsSale::mdShopFundsSale()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopFundsSale)
}

void mdShopFundsSale::InitAsDefaultInstance() {
}

mdShopFundsSale::mdShopFundsSale(const mdShopFundsSale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopFundsSale)
}

void mdShopFundsSale::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  discount_rate_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopFundsSale::~mdShopFundsSale() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopFundsSale)
  SharedDtor();
}

void mdShopFundsSale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopFundsSale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopFundsSale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopFundsSale_descriptor_;
}

const mdShopFundsSale& mdShopFundsSale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopFundsSale* mdShopFundsSale::default_instance_ = NULL;

mdShopFundsSale* mdShopFundsSale::New() const {
  return new mdShopFundsSale;
}

void mdShopFundsSale::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopFundsSale*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, end_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopFundsSale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopFundsSale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_discount_rate;
        break;
      }

      // required int32 discount_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_discount_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_rate_)));
          set_has_discount_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopFundsSale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopFundsSale)
  return false;
#undef DO_
}

void mdShopFundsSale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopFundsSale)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 discount_rate = 2;
  if (has_discount_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->discount_rate(), output);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopFundsSale)
}

::google::protobuf::uint8* mdShopFundsSale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopFundsSale)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 discount_rate = 2;
  if (has_discount_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->discount_rate(), target);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopFundsSale)
  return target;
}

int mdShopFundsSale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 discount_rate = 2;
    if (has_discount_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount_rate());
    }

    // required int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopFundsSale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopFundsSale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopFundsSale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopFundsSale::MergeFrom(const mdShopFundsSale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_discount_rate()) {
      set_discount_rate(from.discount_rate());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopFundsSale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopFundsSale::CopyFrom(const mdShopFundsSale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopFundsSale::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdShopFundsSale::Swap(mdShopFundsSale* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(discount_rate_, other->discount_rate_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopFundsSale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopFundsSale_descriptor_;
  metadata.reflection = mdShopFundsSale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopLotteryPrice::kContinuousFieldNumber;
const int mdShopLotteryPrice::kIsAgainFieldNumber;
const int mdShopLotteryPrice::kGemFieldNumber;
const int mdShopLotteryPrice::kCalculatedGemFieldNumber;
const int mdShopLotteryPrice::kSocialPointFieldNumber;
#endif  // !_MSC_VER

mdShopLotteryPrice::mdShopLotteryPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopLotteryPrice)
}

void mdShopLotteryPrice::InitAsDefaultInstance() {
}

mdShopLotteryPrice::mdShopLotteryPrice(const mdShopLotteryPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopLotteryPrice)
}

void mdShopLotteryPrice::SharedCtor() {
  _cached_size_ = 0;
  continuous_ = false;
  is_again_ = false;
  gem_ = 0;
  calculated_gem_ = 0;
  social_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopLotteryPrice::~mdShopLotteryPrice() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopLotteryPrice)
  SharedDtor();
}

void mdShopLotteryPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopLotteryPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopLotteryPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopLotteryPrice_descriptor_;
}

const mdShopLotteryPrice& mdShopLotteryPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopLotteryPrice* mdShopLotteryPrice::default_instance_ = NULL;

mdShopLotteryPrice* mdShopLotteryPrice::New() const {
  return new mdShopLotteryPrice;
}

void mdShopLotteryPrice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopLotteryPrice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(continuous_, social_point_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopLotteryPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopLotteryPrice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool continuous = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuous_)));
          set_has_continuous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_again;
        break;
      }

      // required bool is_again = 2;
      case 2: {
        if (tag == 16) {
         parse_is_again:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_again_)));
          set_has_is_again();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gem;
        break;
      }

      // required int32 gem = 3;
      case 3: {
        if (tag == 24) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_calculated_gem;
        break;
      }

      // required int32 calculated_gem = 4;
      case 4: {
        if (tag == 32) {
         parse_calculated_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calculated_gem_)));
          set_has_calculated_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_social_point;
        break;
      }

      // required int32 social_point = 5;
      case 5: {
        if (tag == 40) {
         parse_social_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &social_point_)));
          set_has_social_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopLotteryPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopLotteryPrice)
  return false;
#undef DO_
}

void mdShopLotteryPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopLotteryPrice)
  // required bool continuous = 1;
  if (has_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->continuous(), output);
  }

  // required bool is_again = 2;
  if (has_is_again()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_again(), output);
  }

  // required int32 gem = 3;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gem(), output);
  }

  // required int32 calculated_gem = 4;
  if (has_calculated_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->calculated_gem(), output);
  }

  // required int32 social_point = 5;
  if (has_social_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->social_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopLotteryPrice)
}

::google::protobuf::uint8* mdShopLotteryPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopLotteryPrice)
  // required bool continuous = 1;
  if (has_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->continuous(), target);
  }

  // required bool is_again = 2;
  if (has_is_again()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_again(), target);
  }

  // required int32 gem = 3;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gem(), target);
  }

  // required int32 calculated_gem = 4;
  if (has_calculated_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->calculated_gem(), target);
  }

  // required int32 social_point = 5;
  if (has_social_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->social_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopLotteryPrice)
  return target;
}

int mdShopLotteryPrice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool continuous = 1;
    if (has_continuous()) {
      total_size += 1 + 1;
    }

    // required bool is_again = 2;
    if (has_is_again()) {
      total_size += 1 + 1;
    }

    // required int32 gem = 3;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }

    // required int32 calculated_gem = 4;
    if (has_calculated_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calculated_gem());
    }

    // required int32 social_point = 5;
    if (has_social_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->social_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopLotteryPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopLotteryPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopLotteryPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopLotteryPrice::MergeFrom(const mdShopLotteryPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_continuous()) {
      set_continuous(from.continuous());
    }
    if (from.has_is_again()) {
      set_is_again(from.is_again());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_calculated_gem()) {
      set_calculated_gem(from.calculated_gem());
    }
    if (from.has_social_point()) {
      set_social_point(from.social_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopLotteryPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopLotteryPrice::CopyFrom(const mdShopLotteryPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopLotteryPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdShopLotteryPrice::Swap(mdShopLotteryPrice* other) {
  if (other != this) {
    std::swap(continuous_, other->continuous_);
    std::swap(is_again_, other->is_again_);
    std::swap(gem_, other->gem_);
    std::swap(calculated_gem_, other->calculated_gem_);
    std::swap(social_point_, other->social_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopLotteryPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopLotteryPrice_descriptor_;
  metadata.reflection = mdShopLotteryPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopLotteryPossibleGrade::kDrawPriceTypeFieldNumber;
const int mdShopLotteryPossibleGrade::kIsContinuousFieldNumber;
const int mdShopLotteryPossibleGrade::kMinGradeFieldNumber;
const int mdShopLotteryPossibleGrade::kMaxGradeFieldNumber;
#endif  // !_MSC_VER

mdShopLotteryPossibleGrade::mdShopLotteryPossibleGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
}

void mdShopLotteryPossibleGrade::InitAsDefaultInstance() {
}

mdShopLotteryPossibleGrade::mdShopLotteryPossibleGrade(const mdShopLotteryPossibleGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
}

void mdShopLotteryPossibleGrade::SharedCtor() {
  _cached_size_ = 0;
  draw_price_type_ = 1;
  is_continuous_ = false;
  min_grade_ = 0;
  max_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopLotteryPossibleGrade::~mdShopLotteryPossibleGrade() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  SharedDtor();
}

void mdShopLotteryPossibleGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopLotteryPossibleGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopLotteryPossibleGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopLotteryPossibleGrade_descriptor_;
}

const mdShopLotteryPossibleGrade& mdShopLotteryPossibleGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopLotteryPossibleGrade* mdShopLotteryPossibleGrade::default_instance_ = NULL;

mdShopLotteryPossibleGrade* mdShopLotteryPossibleGrade::New() const {
  return new mdShopLotteryPossibleGrade;
}

void mdShopLotteryPossibleGrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopLotteryPossibleGrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(is_continuous_, max_grade_);
    draw_price_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopLotteryPossibleGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_DrawPriceType_IsValid(value)) {
            set_draw_price_type(static_cast< ::b2::protocol::commondata::Shop_DrawPriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_continuous;
        break;
      }

      // required bool is_continuous = 2;
      case 2: {
        if (tag == 16) {
         parse_is_continuous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
          set_has_is_continuous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_grade;
        break;
      }

      // required int32 min_grade = 3;
      case 3: {
        if (tag == 24) {
         parse_min_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_grade_)));
          set_has_min_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_grade;
        break;
      }

      // required int32 max_grade = 4;
      case 4: {
        if (tag == 32) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  return false;
#undef DO_
}

void mdShopLotteryPossibleGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->draw_price_type(), output);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_continuous(), output);
  }

  // required int32 min_grade = 3;
  if (has_min_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_grade(), output);
  }

  // required int32 max_grade = 4;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
}

::google::protobuf::uint8* mdShopLotteryPossibleGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->draw_price_type(), target);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_continuous(), target);
  }

  // required int32 min_grade = 3;
  if (has_min_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_grade(), target);
  }

  // required int32 max_grade = 4;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopLotteryPossibleGrade)
  return target;
}

int mdShopLotteryPossibleGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
    if (has_draw_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->draw_price_type());
    }

    // required bool is_continuous = 2;
    if (has_is_continuous()) {
      total_size += 1 + 1;
    }

    // required int32 min_grade = 3;
    if (has_min_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_grade());
    }

    // required int32 max_grade = 4;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopLotteryPossibleGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopLotteryPossibleGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopLotteryPossibleGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopLotteryPossibleGrade::MergeFrom(const mdShopLotteryPossibleGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draw_price_type()) {
      set_draw_price_type(from.draw_price_type());
    }
    if (from.has_is_continuous()) {
      set_is_continuous(from.is_continuous());
    }
    if (from.has_min_grade()) {
      set_min_grade(from.min_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopLotteryPossibleGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopLotteryPossibleGrade::CopyFrom(const mdShopLotteryPossibleGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopLotteryPossibleGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdShopLotteryPossibleGrade::Swap(mdShopLotteryPossibleGrade* other) {
  if (other != this) {
    std::swap(draw_price_type_, other->draw_price_type_);
    std::swap(is_continuous_, other->is_continuous_);
    std::swap(min_grade_, other->min_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopLotteryPossibleGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopLotteryPossibleGrade_descriptor_;
  metadata.reflection = mdShopLotteryPossibleGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopLotterySpecialGrade::kMinGradeFieldNumber;
const int mdShopLotterySpecialGrade::kMaxGradeFieldNumber;
#endif  // !_MSC_VER

mdShopLotterySpecialGrade::mdShopLotterySpecialGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopLotterySpecialGrade)
}

void mdShopLotterySpecialGrade::InitAsDefaultInstance() {
}

mdShopLotterySpecialGrade::mdShopLotterySpecialGrade(const mdShopLotterySpecialGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopLotterySpecialGrade)
}

void mdShopLotterySpecialGrade::SharedCtor() {
  _cached_size_ = 0;
  min_grade_ = 0;
  max_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopLotterySpecialGrade::~mdShopLotterySpecialGrade() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  SharedDtor();
}

void mdShopLotterySpecialGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopLotterySpecialGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopLotterySpecialGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopLotterySpecialGrade_descriptor_;
}

const mdShopLotterySpecialGrade& mdShopLotterySpecialGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopLotterySpecialGrade* mdShopLotterySpecialGrade::default_instance_ = NULL;

mdShopLotterySpecialGrade* mdShopLotterySpecialGrade::New() const {
  return new mdShopLotterySpecialGrade;
}

void mdShopLotterySpecialGrade::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopLotterySpecialGrade*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(min_grade_, max_grade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopLotterySpecialGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 min_grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_grade_)));
          set_has_min_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_grade;
        break;
      }

      // required int32 max_grade = 2;
      case 2: {
        if (tag == 16) {
         parse_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_grade_)));
          set_has_max_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  return false;
#undef DO_
}

void mdShopLotterySpecialGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  // required int32 min_grade = 1;
  if (has_min_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_grade(), output);
  }

  // required int32 max_grade = 2;
  if (has_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopLotterySpecialGrade)
}

::google::protobuf::uint8* mdShopLotterySpecialGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  // required int32 min_grade = 1;
  if (has_min_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_grade(), target);
  }

  // required int32 max_grade = 2;
  if (has_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopLotterySpecialGrade)
  return target;
}

int mdShopLotterySpecialGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 min_grade = 1;
    if (has_min_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_grade());
    }

    // required int32 max_grade = 2;
    if (has_max_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopLotterySpecialGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopLotterySpecialGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopLotterySpecialGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopLotterySpecialGrade::MergeFrom(const mdShopLotterySpecialGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_grade()) {
      set_min_grade(from.min_grade());
    }
    if (from.has_max_grade()) {
      set_max_grade(from.max_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopLotterySpecialGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopLotterySpecialGrade::CopyFrom(const mdShopLotterySpecialGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopLotterySpecialGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdShopLotterySpecialGrade::Swap(mdShopLotterySpecialGrade* other) {
  if (other != this) {
    std::swap(min_grade_, other->min_grade_);
    std::swap(max_grade_, other->max_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopLotterySpecialGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopLotterySpecialGrade_descriptor_;
  metadata.reflection = mdShopLotterySpecialGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopLotteryDailyLimit::kDrawPriceTypeFieldNumber;
const int mdShopLotteryDailyLimit::kIsContinuousFieldNumber;
const int mdShopLotteryDailyLimit::kLimitCountFieldNumber;
#endif  // !_MSC_VER

mdShopLotteryDailyLimit::mdShopLotteryDailyLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopLotteryDailyLimit)
}

void mdShopLotteryDailyLimit::InitAsDefaultInstance() {
}

mdShopLotteryDailyLimit::mdShopLotteryDailyLimit(const mdShopLotteryDailyLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopLotteryDailyLimit)
}

void mdShopLotteryDailyLimit::SharedCtor() {
  _cached_size_ = 0;
  draw_price_type_ = 1;
  is_continuous_ = false;
  limit_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopLotteryDailyLimit::~mdShopLotteryDailyLimit() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  SharedDtor();
}

void mdShopLotteryDailyLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopLotteryDailyLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopLotteryDailyLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopLotteryDailyLimit_descriptor_;
}

const mdShopLotteryDailyLimit& mdShopLotteryDailyLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopLotteryDailyLimit* mdShopLotteryDailyLimit::default_instance_ = NULL;

mdShopLotteryDailyLimit* mdShopLotteryDailyLimit::New() const {
  return new mdShopLotteryDailyLimit;
}

void mdShopLotteryDailyLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopLotteryDailyLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(is_continuous_, limit_count_);
    draw_price_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopLotteryDailyLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_DrawPriceType_IsValid(value)) {
            set_draw_price_type(static_cast< ::b2::protocol::commondata::Shop_DrawPriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_continuous;
        break;
      }

      // required bool is_continuous = 2;
      case 2: {
        if (tag == 16) {
         parse_is_continuous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
          set_has_is_continuous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit_count;
        break;
      }

      // required int32 limit_count = 3;
      case 3: {
        if (tag == 24) {
         parse_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_count_)));
          set_has_limit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  return false;
#undef DO_
}

void mdShopLotteryDailyLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->draw_price_type(), output);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_continuous(), output);
  }

  // required int32 limit_count = 3;
  if (has_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopLotteryDailyLimit)
}

::google::protobuf::uint8* mdShopLotteryDailyLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->draw_price_type(), target);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_continuous(), target);
  }

  // required int32 limit_count = 3;
  if (has_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopLotteryDailyLimit)
  return target;
}

int mdShopLotteryDailyLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
    if (has_draw_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->draw_price_type());
    }

    // required bool is_continuous = 2;
    if (has_is_continuous()) {
      total_size += 1 + 1;
    }

    // required int32 limit_count = 3;
    if (has_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopLotteryDailyLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopLotteryDailyLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopLotteryDailyLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopLotteryDailyLimit::MergeFrom(const mdShopLotteryDailyLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draw_price_type()) {
      set_draw_price_type(from.draw_price_type());
    }
    if (from.has_is_continuous()) {
      set_is_continuous(from.is_continuous());
    }
    if (from.has_limit_count()) {
      set_limit_count(from.limit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopLotteryDailyLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopLotteryDailyLimit::CopyFrom(const mdShopLotteryDailyLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopLotteryDailyLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdShopLotteryDailyLimit::Swap(mdShopLotteryDailyLimit* other) {
  if (other != this) {
    std::swap(draw_price_type_, other->draw_price_type_);
    std::swap(is_continuous_, other->is_continuous_);
    std::swap(limit_count_, other->limit_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopLotteryDailyLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopLotteryDailyLimit_descriptor_;
  metadata.reflection = mdShopLotteryDailyLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopLotterySale::kDrawPriceTypeFieldNumber;
const int mdShopLotterySale::kIsContinuousFieldNumber;
const int mdShopLotterySale::kDiscountRateFieldNumber;
const int mdShopLotterySale::kStartTimeFieldNumber;
const int mdShopLotterySale::kEndTimeFieldNumber;
#endif  // !_MSC_VER

mdShopLotterySale::mdShopLotterySale()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopLotterySale)
}

void mdShopLotterySale::InitAsDefaultInstance() {
}

mdShopLotterySale::mdShopLotterySale(const mdShopLotterySale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopLotterySale)
}

void mdShopLotterySale::SharedCtor() {
  _cached_size_ = 0;
  draw_price_type_ = 1;
  is_continuous_ = false;
  discount_rate_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopLotterySale::~mdShopLotterySale() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopLotterySale)
  SharedDtor();
}

void mdShopLotterySale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopLotterySale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopLotterySale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopLotterySale_descriptor_;
}

const mdShopLotterySale& mdShopLotterySale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopLotterySale* mdShopLotterySale::default_instance_ = NULL;

mdShopLotterySale* mdShopLotterySale::New() const {
  return new mdShopLotterySale;
}

void mdShopLotterySale::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopLotterySale*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(is_continuous_, discount_rate_);
    draw_price_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopLotterySale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopLotterySale)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_DrawPriceType_IsValid(value)) {
            set_draw_price_type(static_cast< ::b2::protocol::commondata::Shop_DrawPriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_continuous;
        break;
      }

      // required bool is_continuous = 2;
      case 2: {
        if (tag == 16) {
         parse_is_continuous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
          set_has_is_continuous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_discount_rate;
        break;
      }

      // required int32 discount_rate = 3;
      case 3: {
        if (tag == 24) {
         parse_discount_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_rate_)));
          set_has_discount_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 6;
      case 6: {
        if (tag == 48) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopLotterySale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopLotterySale)
  return false;
#undef DO_
}

void mdShopLotterySale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopLotterySale)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->draw_price_type(), output);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_continuous(), output);
  }

  // required int32 discount_rate = 3;
  if (has_discount_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->discount_rate(), output);
  }

  // required int64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_time(), output);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopLotterySale)
}

::google::protobuf::uint8* mdShopLotterySale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopLotterySale)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->draw_price_type(), target);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_continuous(), target);
  }

  // required int32 discount_rate = 3;
  if (has_discount_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->discount_rate(), target);
  }

  // required int64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_time(), target);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopLotterySale)
  return target;
}

int mdShopLotterySale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
    if (has_draw_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->draw_price_type());
    }

    // required bool is_continuous = 2;
    if (has_is_continuous()) {
      total_size += 1 + 1;
    }

    // required int32 discount_rate = 3;
    if (has_discount_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount_rate());
    }

    // required int64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopLotterySale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopLotterySale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopLotterySale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopLotterySale::MergeFrom(const mdShopLotterySale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draw_price_type()) {
      set_draw_price_type(from.draw_price_type());
    }
    if (from.has_is_continuous()) {
      set_is_continuous(from.is_continuous());
    }
    if (from.has_discount_rate()) {
      set_discount_rate(from.discount_rate());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopLotterySale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopLotterySale::CopyFrom(const mdShopLotterySale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopLotterySale::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdShopLotterySale::Swap(mdShopLotterySale* other) {
  if (other != this) {
    std::swap(draw_price_type_, other->draw_price_type_);
    std::swap(is_continuous_, other->is_continuous_);
    std::swap(discount_rate_, other->discount_rate_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopLotterySale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopLotterySale_descriptor_;
  metadata.reflection = mdShopLotterySale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemInfo::kMdTemplateIdFieldNumber;
const int mdItemInfo::kMdGroupIdFieldNumber;
const int mdItemInfo::kMdSetIdFieldNumber;
const int mdItemInfo::kMdTypeFieldNumber;
const int mdItemInfo::kMdGradeFieldNumber;
const int mdItemInfo::kMdInventoryTypeFieldNumber;
const int mdItemInfo::kMdEquipPositionFieldNumber;
const int mdItemInfo::kMdMaxLevelupFieldNumber;
const int mdItemInfo::kMdMainAttributeFieldNumber;
const int mdItemInfo::kMdLevelFactorFieldNumber;
const int mdItemInfo::kMdUniqueOptionId1FieldNumber;
const int mdItemInfo::kMdUniqueOptionValue1FieldNumber;
const int mdItemInfo::kMdUniqueOptionId2FieldNumber;
const int mdItemInfo::kMdUniqueOptionValue2FieldNumber;
const int mdItemInfo::kMdUniqueOptionId3FieldNumber;
const int mdItemInfo::kMdUniqueOptionValue3FieldNumber;
const int mdItemInfo::kMdUniqueOptionId4FieldNumber;
const int mdItemInfo::kMdUniqueOptionValue4FieldNumber;
const int mdItemInfo::kMdUniqueSkillIdFieldNumber;
const int mdItemInfo::kSealSlotFieldNumber;
const int mdItemInfo::kSealSlotOpenFieldNumber;
const int mdItemInfo::kMdMaxGradeFieldNumber;
const int mdItemInfo::kMdRandomOptionCountFieldNumber;
const int mdItemInfo::kMdNextGradeTemplateIdFieldNumber;
const int mdItemInfo::kMdBuyPriceFieldNumber;
const int mdItemInfo::kMdSellPriceFieldNumber;
const int mdItemInfo::kIsStackableFieldNumber;
const int mdItemInfo::kIsSaleableFieldNumber;
const int mdItemInfo::kIsEquipableFieldNumber;
const int mdItemInfo::kIsLevelupableFieldNumber;
const int mdItemInfo::kIsEnhanceableFieldNumber;
const int mdItemInfo::kIsUpgradableFieldNumber;
const int mdItemInfo::kIsComposableFieldNumber;
const int mdItemInfo::kIsSurpassableFieldNumber;
const int mdItemInfo::kIsSealableFieldNumber;
#endif  // !_MSC_VER

mdItemInfo::mdItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemInfo)
}

void mdItemInfo::InitAsDefaultInstance() {
}

mdItemInfo::mdItemInfo(const mdItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemInfo)
}

void mdItemInfo::SharedCtor() {
  _cached_size_ = 0;
  md_template_id_ = 0;
  md_group_id_ = 1;
  md_set_id_ = 0;
  md_type_ = 1;
  md_grade_ = 0;
  md_inventory_type_ = 2;
  md_equip_position_ = 0;
  md_max_levelup_ = 0;
  md_main_attribute_ = 0;
  md_level_factor_ = 0;
  md_unique_option_id1_ = 0;
  md_unique_option_value1_ = 0;
  md_unique_option_id2_ = 0;
  md_unique_option_value2_ = 0;
  md_unique_option_id3_ = 0;
  md_unique_option_value3_ = 0;
  md_unique_option_id4_ = 0;
  md_unique_option_value4_ = 0;
  md_unique_skill_id_ = 0;
  seal_slot_ = 0;
  seal_slot_open_ = 0;
  md_max_grade_ = 0;
  md_random_option_count_ = 0;
  md_next_grade_template_id_ = 0;
  md_buy_price_ = 0;
  md_sell_price_ = 0;
  is_stackable_ = false;
  is_saleable_ = false;
  is_equipable_ = false;
  is_levelupable_ = false;
  is_enhanceable_ = false;
  is_upgradable_ = false;
  is_composable_ = false;
  is_surpassable_ = false;
  is_sealable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemInfo::~mdItemInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemInfo)
  SharedDtor();
}

void mdItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemInfo_descriptor_;
}

const mdItemInfo& mdItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemInfo* mdItemInfo::default_instance_ = NULL;

mdItemInfo* mdItemInfo::New() const {
  return new mdItemInfo;
}

void mdItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(md_equip_position_, md_max_levelup_);
    md_template_id_ = 0;
    md_group_id_ = 1;
    md_set_id_ = 0;
    md_type_ = 1;
    md_grade_ = 0;
    md_inventory_type_ = 2;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(md_main_attribute_, md_unique_option_value3_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(md_unique_option_id4_, md_next_grade_template_id_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(md_buy_price_, is_upgradable_);
  }
  ZR_(is_composable_, is_sealable_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 md_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_template_id_)));
          set_has_md_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_md_group_id;
        break;
      }

      // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_md_group_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GroupPrefix_IsValid(value)) {
            set_md_group_id(static_cast< ::b2::protocol::commondata::GroupPrefix >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_md_set_id;
        break;
      }

      // required int32 md_set_id = 3;
      case 3: {
        if (tag == 24) {
         parse_md_set_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_set_id_)));
          set_has_md_set_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_md_type;
        break;
      }

      // required .b2.protocol.commondata.Item.TYPE md_type = 4;
      case 4: {
        if (tag == 32) {
         parse_md_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_TYPE_IsValid(value)) {
            set_md_type(static_cast< ::b2::protocol::commondata::Item_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_md_grade;
        break;
      }

      // required int32 md_grade = 5;
      case 5: {
        if (tag == 40) {
         parse_md_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_grade_)));
          set_has_md_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_md_inventory_type;
        break;
      }

      // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
      case 6: {
        if (tag == 48) {
         parse_md_inventory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Inventory_TYPE_IsValid(value)) {
            set_md_inventory_type(static_cast< ::b2::protocol::commondata::Inventory_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_md_equip_position;
        break;
      }

      // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
      case 7: {
        if (tag == 56) {
         parse_md_equip_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipPosition_IsValid(value)) {
            set_md_equip_position(static_cast< ::b2::protocol::commondata::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_md_max_levelup;
        break;
      }

      // required int32 md_max_levelup = 8;
      case 8: {
        if (tag == 64) {
         parse_md_max_levelup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_max_levelup_)));
          set_has_md_max_levelup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_md_main_attribute;
        break;
      }

      // required int32 md_main_attribute = 9;
      case 9: {
        if (tag == 72) {
         parse_md_main_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_main_attribute_)));
          set_has_md_main_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_md_level_factor;
        break;
      }

      // required float md_level_factor = 10;
      case 10: {
        if (tag == 85) {
         parse_md_level_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_level_factor_)));
          set_has_md_level_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_md_unique_option_id1;
        break;
      }

      // required int32 md_unique_option_id1 = 11;
      case 11: {
        if (tag == 88) {
         parse_md_unique_option_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id1_)));
          set_has_md_unique_option_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_md_unique_option_value1;
        break;
      }

      // required float md_unique_option_value1 = 12;
      case 12: {
        if (tag == 101) {
         parse_md_unique_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value1_)));
          set_has_md_unique_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_md_unique_option_id2;
        break;
      }

      // required int32 md_unique_option_id2 = 13;
      case 13: {
        if (tag == 104) {
         parse_md_unique_option_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id2_)));
          set_has_md_unique_option_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_md_unique_option_value2;
        break;
      }

      // required float md_unique_option_value2 = 14;
      case 14: {
        if (tag == 117) {
         parse_md_unique_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value2_)));
          set_has_md_unique_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_md_unique_option_id3;
        break;
      }

      // required int32 md_unique_option_id3 = 15;
      case 15: {
        if (tag == 120) {
         parse_md_unique_option_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id3_)));
          set_has_md_unique_option_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_md_unique_option_value3;
        break;
      }

      // required float md_unique_option_value3 = 16;
      case 16: {
        if (tag == 133) {
         parse_md_unique_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value3_)));
          set_has_md_unique_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_md_unique_option_id4;
        break;
      }

      // required int32 md_unique_option_id4 = 17;
      case 17: {
        if (tag == 136) {
         parse_md_unique_option_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id4_)));
          set_has_md_unique_option_id4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_md_unique_option_value4;
        break;
      }

      // required float md_unique_option_value4 = 18;
      case 18: {
        if (tag == 149) {
         parse_md_unique_option_value4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value4_)));
          set_has_md_unique_option_value4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_md_unique_skill_id;
        break;
      }

      // required int32 md_unique_skill_id = 19;
      case 19: {
        if (tag == 152) {
         parse_md_unique_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_skill_id_)));
          set_has_md_unique_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_seal_slot;
        break;
      }

      // required int32 seal_slot = 20;
      case 20: {
        if (tag == 160) {
         parse_seal_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_slot_)));
          set_has_seal_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_seal_slot_open;
        break;
      }

      // required int32 seal_slot_open = 21;
      case 21: {
        if (tag == 168) {
         parse_seal_slot_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_slot_open_)));
          set_has_seal_slot_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_md_max_grade;
        break;
      }

      // required int32 md_max_grade = 22;
      case 22: {
        if (tag == 176) {
         parse_md_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_max_grade_)));
          set_has_md_max_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_md_random_option_count;
        break;
      }

      // required int32 md_random_option_count = 23;
      case 23: {
        if (tag == 184) {
         parse_md_random_option_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_random_option_count_)));
          set_has_md_random_option_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_md_next_grade_template_id;
        break;
      }

      // required int32 md_next_grade_template_id = 24;
      case 24: {
        if (tag == 192) {
         parse_md_next_grade_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_next_grade_template_id_)));
          set_has_md_next_grade_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_md_buy_price;
        break;
      }

      // required int32 md_buy_price = 25;
      case 25: {
        if (tag == 200) {
         parse_md_buy_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_buy_price_)));
          set_has_md_buy_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_md_sell_price;
        break;
      }

      // required int32 md_sell_price = 26;
      case 26: {
        if (tag == 208) {
         parse_md_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_sell_price_)));
          set_has_md_sell_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_stackable;
        break;
      }

      // required bool is_stackable = 27;
      case 27: {
        if (tag == 216) {
         parse_is_stackable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stackable_)));
          set_has_is_stackable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_is_saleable;
        break;
      }

      // required bool is_saleable = 28;
      case 28: {
        if (tag == 224) {
         parse_is_saleable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_saleable_)));
          set_has_is_saleable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_is_equipable;
        break;
      }

      // required bool is_equipable = 29;
      case 29: {
        if (tag == 232) {
         parse_is_equipable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_equipable_)));
          set_has_is_equipable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_is_levelupable;
        break;
      }

      // required bool is_levelupable = 30;
      case 30: {
        if (tag == 240) {
         parse_is_levelupable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_levelupable_)));
          set_has_is_levelupable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_is_enhanceable;
        break;
      }

      // required bool is_enhanceable = 31;
      case 31: {
        if (tag == 248) {
         parse_is_enhanceable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enhanceable_)));
          set_has_is_enhanceable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_is_upgradable;
        break;
      }

      // required bool is_upgradable = 32;
      case 32: {
        if (tag == 256) {
         parse_is_upgradable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upgradable_)));
          set_has_is_upgradable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_is_composable;
        break;
      }

      // required bool is_composable = 33;
      case 33: {
        if (tag == 264) {
         parse_is_composable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_composable_)));
          set_has_is_composable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_is_surpassable;
        break;
      }

      // required bool is_surpassable = 34;
      case 34: {
        if (tag == 272) {
         parse_is_surpassable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_surpassable_)));
          set_has_is_surpassable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_is_sealable;
        break;
      }

      // required bool is_sealable = 35;
      case 35: {
        if (tag == 280) {
         parse_is_sealable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sealable_)));
          set_has_is_sealable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemInfo)
  return false;
#undef DO_
}

void mdItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemInfo)
  // required int32 md_template_id = 1;
  if (has_md_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->md_template_id(), output);
  }

  // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
  if (has_md_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->md_group_id(), output);
  }

  // required int32 md_set_id = 3;
  if (has_md_set_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->md_set_id(), output);
  }

  // required .b2.protocol.commondata.Item.TYPE md_type = 4;
  if (has_md_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->md_type(), output);
  }

  // required int32 md_grade = 5;
  if (has_md_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->md_grade(), output);
  }

  // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
  if (has_md_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->md_inventory_type(), output);
  }

  // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
  if (has_md_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->md_equip_position(), output);
  }

  // required int32 md_max_levelup = 8;
  if (has_md_max_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->md_max_levelup(), output);
  }

  // required int32 md_main_attribute = 9;
  if (has_md_main_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->md_main_attribute(), output);
  }

  // required float md_level_factor = 10;
  if (has_md_level_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->md_level_factor(), output);
  }

  // required int32 md_unique_option_id1 = 11;
  if (has_md_unique_option_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->md_unique_option_id1(), output);
  }

  // required float md_unique_option_value1 = 12;
  if (has_md_unique_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->md_unique_option_value1(), output);
  }

  // required int32 md_unique_option_id2 = 13;
  if (has_md_unique_option_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->md_unique_option_id2(), output);
  }

  // required float md_unique_option_value2 = 14;
  if (has_md_unique_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->md_unique_option_value2(), output);
  }

  // required int32 md_unique_option_id3 = 15;
  if (has_md_unique_option_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->md_unique_option_id3(), output);
  }

  // required float md_unique_option_value3 = 16;
  if (has_md_unique_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->md_unique_option_value3(), output);
  }

  // required int32 md_unique_option_id4 = 17;
  if (has_md_unique_option_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->md_unique_option_id4(), output);
  }

  // required float md_unique_option_value4 = 18;
  if (has_md_unique_option_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->md_unique_option_value4(), output);
  }

  // required int32 md_unique_skill_id = 19;
  if (has_md_unique_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->md_unique_skill_id(), output);
  }

  // required int32 seal_slot = 20;
  if (has_seal_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->seal_slot(), output);
  }

  // required int32 seal_slot_open = 21;
  if (has_seal_slot_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->seal_slot_open(), output);
  }

  // required int32 md_max_grade = 22;
  if (has_md_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->md_max_grade(), output);
  }

  // required int32 md_random_option_count = 23;
  if (has_md_random_option_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->md_random_option_count(), output);
  }

  // required int32 md_next_grade_template_id = 24;
  if (has_md_next_grade_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->md_next_grade_template_id(), output);
  }

  // required int32 md_buy_price = 25;
  if (has_md_buy_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->md_buy_price(), output);
  }

  // required int32 md_sell_price = 26;
  if (has_md_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->md_sell_price(), output);
  }

  // required bool is_stackable = 27;
  if (has_is_stackable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_stackable(), output);
  }

  // required bool is_saleable = 28;
  if (has_is_saleable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_saleable(), output);
  }

  // required bool is_equipable = 29;
  if (has_is_equipable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->is_equipable(), output);
  }

  // required bool is_levelupable = 30;
  if (has_is_levelupable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->is_levelupable(), output);
  }

  // required bool is_enhanceable = 31;
  if (has_is_enhanceable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_enhanceable(), output);
  }

  // required bool is_upgradable = 32;
  if (has_is_upgradable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_upgradable(), output);
  }

  // required bool is_composable = 33;
  if (has_is_composable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->is_composable(), output);
  }

  // required bool is_surpassable = 34;
  if (has_is_surpassable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_surpassable(), output);
  }

  // required bool is_sealable = 35;
  if (has_is_sealable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->is_sealable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemInfo)
}

::google::protobuf::uint8* mdItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemInfo)
  // required int32 md_template_id = 1;
  if (has_md_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->md_template_id(), target);
  }

  // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
  if (has_md_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->md_group_id(), target);
  }

  // required int32 md_set_id = 3;
  if (has_md_set_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->md_set_id(), target);
  }

  // required .b2.protocol.commondata.Item.TYPE md_type = 4;
  if (has_md_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->md_type(), target);
  }

  // required int32 md_grade = 5;
  if (has_md_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->md_grade(), target);
  }

  // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
  if (has_md_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->md_inventory_type(), target);
  }

  // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
  if (has_md_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->md_equip_position(), target);
  }

  // required int32 md_max_levelup = 8;
  if (has_md_max_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->md_max_levelup(), target);
  }

  // required int32 md_main_attribute = 9;
  if (has_md_main_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->md_main_attribute(), target);
  }

  // required float md_level_factor = 10;
  if (has_md_level_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->md_level_factor(), target);
  }

  // required int32 md_unique_option_id1 = 11;
  if (has_md_unique_option_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->md_unique_option_id1(), target);
  }

  // required float md_unique_option_value1 = 12;
  if (has_md_unique_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->md_unique_option_value1(), target);
  }

  // required int32 md_unique_option_id2 = 13;
  if (has_md_unique_option_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->md_unique_option_id2(), target);
  }

  // required float md_unique_option_value2 = 14;
  if (has_md_unique_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->md_unique_option_value2(), target);
  }

  // required int32 md_unique_option_id3 = 15;
  if (has_md_unique_option_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->md_unique_option_id3(), target);
  }

  // required float md_unique_option_value3 = 16;
  if (has_md_unique_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->md_unique_option_value3(), target);
  }

  // required int32 md_unique_option_id4 = 17;
  if (has_md_unique_option_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->md_unique_option_id4(), target);
  }

  // required float md_unique_option_value4 = 18;
  if (has_md_unique_option_value4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->md_unique_option_value4(), target);
  }

  // required int32 md_unique_skill_id = 19;
  if (has_md_unique_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->md_unique_skill_id(), target);
  }

  // required int32 seal_slot = 20;
  if (has_seal_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->seal_slot(), target);
  }

  // required int32 seal_slot_open = 21;
  if (has_seal_slot_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->seal_slot_open(), target);
  }

  // required int32 md_max_grade = 22;
  if (has_md_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->md_max_grade(), target);
  }

  // required int32 md_random_option_count = 23;
  if (has_md_random_option_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->md_random_option_count(), target);
  }

  // required int32 md_next_grade_template_id = 24;
  if (has_md_next_grade_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->md_next_grade_template_id(), target);
  }

  // required int32 md_buy_price = 25;
  if (has_md_buy_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->md_buy_price(), target);
  }

  // required int32 md_sell_price = 26;
  if (has_md_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->md_sell_price(), target);
  }

  // required bool is_stackable = 27;
  if (has_is_stackable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_stackable(), target);
  }

  // required bool is_saleable = 28;
  if (has_is_saleable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_saleable(), target);
  }

  // required bool is_equipable = 29;
  if (has_is_equipable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->is_equipable(), target);
  }

  // required bool is_levelupable = 30;
  if (has_is_levelupable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->is_levelupable(), target);
  }

  // required bool is_enhanceable = 31;
  if (has_is_enhanceable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_enhanceable(), target);
  }

  // required bool is_upgradable = 32;
  if (has_is_upgradable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_upgradable(), target);
  }

  // required bool is_composable = 33;
  if (has_is_composable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->is_composable(), target);
  }

  // required bool is_surpassable = 34;
  if (has_is_surpassable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_surpassable(), target);
  }

  // required bool is_sealable = 35;
  if (has_is_sealable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->is_sealable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemInfo)
  return target;
}

int mdItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 md_template_id = 1;
    if (has_md_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_template_id());
    }

    // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
    if (has_md_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_group_id());
    }

    // required int32 md_set_id = 3;
    if (has_md_set_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_set_id());
    }

    // required .b2.protocol.commondata.Item.TYPE md_type = 4;
    if (has_md_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_type());
    }

    // required int32 md_grade = 5;
    if (has_md_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_grade());
    }

    // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
    if (has_md_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_inventory_type());
    }

    // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
    if (has_md_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_equip_position());
    }

    // required int32 md_max_levelup = 8;
    if (has_md_max_levelup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_max_levelup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 md_main_attribute = 9;
    if (has_md_main_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_main_attribute());
    }

    // required float md_level_factor = 10;
    if (has_md_level_factor()) {
      total_size += 1 + 4;
    }

    // required int32 md_unique_option_id1 = 11;
    if (has_md_unique_option_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id1());
    }

    // required float md_unique_option_value1 = 12;
    if (has_md_unique_option_value1()) {
      total_size += 1 + 4;
    }

    // required int32 md_unique_option_id2 = 13;
    if (has_md_unique_option_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id2());
    }

    // required float md_unique_option_value2 = 14;
    if (has_md_unique_option_value2()) {
      total_size += 1 + 4;
    }

    // required int32 md_unique_option_id3 = 15;
    if (has_md_unique_option_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id3());
    }

    // required float md_unique_option_value3 = 16;
    if (has_md_unique_option_value3()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 md_unique_option_id4 = 17;
    if (has_md_unique_option_id4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id4());
    }

    // required float md_unique_option_value4 = 18;
    if (has_md_unique_option_value4()) {
      total_size += 2 + 4;
    }

    // required int32 md_unique_skill_id = 19;
    if (has_md_unique_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_skill_id());
    }

    // required int32 seal_slot = 20;
    if (has_seal_slot()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_slot());
    }

    // required int32 seal_slot_open = 21;
    if (has_seal_slot_open()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_slot_open());
    }

    // required int32 md_max_grade = 22;
    if (has_md_max_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_max_grade());
    }

    // required int32 md_random_option_count = 23;
    if (has_md_random_option_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_random_option_count());
    }

    // required int32 md_next_grade_template_id = 24;
    if (has_md_next_grade_template_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_next_grade_template_id());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 md_buy_price = 25;
    if (has_md_buy_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_buy_price());
    }

    // required int32 md_sell_price = 26;
    if (has_md_sell_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_sell_price());
    }

    // required bool is_stackable = 27;
    if (has_is_stackable()) {
      total_size += 2 + 1;
    }

    // required bool is_saleable = 28;
    if (has_is_saleable()) {
      total_size += 2 + 1;
    }

    // required bool is_equipable = 29;
    if (has_is_equipable()) {
      total_size += 2 + 1;
    }

    // required bool is_levelupable = 30;
    if (has_is_levelupable()) {
      total_size += 2 + 1;
    }

    // required bool is_enhanceable = 31;
    if (has_is_enhanceable()) {
      total_size += 2 + 1;
    }

    // required bool is_upgradable = 32;
    if (has_is_upgradable()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required bool is_composable = 33;
    if (has_is_composable()) {
      total_size += 2 + 1;
    }

    // required bool is_surpassable = 34;
    if (has_is_surpassable()) {
      total_size += 2 + 1;
    }

    // required bool is_sealable = 35;
    if (has_is_sealable()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemInfo::MergeFrom(const mdItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_md_template_id()) {
      set_md_template_id(from.md_template_id());
    }
    if (from.has_md_group_id()) {
      set_md_group_id(from.md_group_id());
    }
    if (from.has_md_set_id()) {
      set_md_set_id(from.md_set_id());
    }
    if (from.has_md_type()) {
      set_md_type(from.md_type());
    }
    if (from.has_md_grade()) {
      set_md_grade(from.md_grade());
    }
    if (from.has_md_inventory_type()) {
      set_md_inventory_type(from.md_inventory_type());
    }
    if (from.has_md_equip_position()) {
      set_md_equip_position(from.md_equip_position());
    }
    if (from.has_md_max_levelup()) {
      set_md_max_levelup(from.md_max_levelup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_md_main_attribute()) {
      set_md_main_attribute(from.md_main_attribute());
    }
    if (from.has_md_level_factor()) {
      set_md_level_factor(from.md_level_factor());
    }
    if (from.has_md_unique_option_id1()) {
      set_md_unique_option_id1(from.md_unique_option_id1());
    }
    if (from.has_md_unique_option_value1()) {
      set_md_unique_option_value1(from.md_unique_option_value1());
    }
    if (from.has_md_unique_option_id2()) {
      set_md_unique_option_id2(from.md_unique_option_id2());
    }
    if (from.has_md_unique_option_value2()) {
      set_md_unique_option_value2(from.md_unique_option_value2());
    }
    if (from.has_md_unique_option_id3()) {
      set_md_unique_option_id3(from.md_unique_option_id3());
    }
    if (from.has_md_unique_option_value3()) {
      set_md_unique_option_value3(from.md_unique_option_value3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_md_unique_option_id4()) {
      set_md_unique_option_id4(from.md_unique_option_id4());
    }
    if (from.has_md_unique_option_value4()) {
      set_md_unique_option_value4(from.md_unique_option_value4());
    }
    if (from.has_md_unique_skill_id()) {
      set_md_unique_skill_id(from.md_unique_skill_id());
    }
    if (from.has_seal_slot()) {
      set_seal_slot(from.seal_slot());
    }
    if (from.has_seal_slot_open()) {
      set_seal_slot_open(from.seal_slot_open());
    }
    if (from.has_md_max_grade()) {
      set_md_max_grade(from.md_max_grade());
    }
    if (from.has_md_random_option_count()) {
      set_md_random_option_count(from.md_random_option_count());
    }
    if (from.has_md_next_grade_template_id()) {
      set_md_next_grade_template_id(from.md_next_grade_template_id());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_md_buy_price()) {
      set_md_buy_price(from.md_buy_price());
    }
    if (from.has_md_sell_price()) {
      set_md_sell_price(from.md_sell_price());
    }
    if (from.has_is_stackable()) {
      set_is_stackable(from.is_stackable());
    }
    if (from.has_is_saleable()) {
      set_is_saleable(from.is_saleable());
    }
    if (from.has_is_equipable()) {
      set_is_equipable(from.is_equipable());
    }
    if (from.has_is_levelupable()) {
      set_is_levelupable(from.is_levelupable());
    }
    if (from.has_is_enhanceable()) {
      set_is_enhanceable(from.is_enhanceable());
    }
    if (from.has_is_upgradable()) {
      set_is_upgradable(from.is_upgradable());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_is_composable()) {
      set_is_composable(from.is_composable());
    }
    if (from.has_is_surpassable()) {
      set_is_surpassable(from.is_surpassable());
    }
    if (from.has_is_sealable()) {
      set_is_sealable(from.is_sealable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemInfo::CopyFrom(const mdItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdItemInfo::Swap(mdItemInfo* other) {
  if (other != this) {
    std::swap(md_template_id_, other->md_template_id_);
    std::swap(md_group_id_, other->md_group_id_);
    std::swap(md_set_id_, other->md_set_id_);
    std::swap(md_type_, other->md_type_);
    std::swap(md_grade_, other->md_grade_);
    std::swap(md_inventory_type_, other->md_inventory_type_);
    std::swap(md_equip_position_, other->md_equip_position_);
    std::swap(md_max_levelup_, other->md_max_levelup_);
    std::swap(md_main_attribute_, other->md_main_attribute_);
    std::swap(md_level_factor_, other->md_level_factor_);
    std::swap(md_unique_option_id1_, other->md_unique_option_id1_);
    std::swap(md_unique_option_value1_, other->md_unique_option_value1_);
    std::swap(md_unique_option_id2_, other->md_unique_option_id2_);
    std::swap(md_unique_option_value2_, other->md_unique_option_value2_);
    std::swap(md_unique_option_id3_, other->md_unique_option_id3_);
    std::swap(md_unique_option_value3_, other->md_unique_option_value3_);
    std::swap(md_unique_option_id4_, other->md_unique_option_id4_);
    std::swap(md_unique_option_value4_, other->md_unique_option_value4_);
    std::swap(md_unique_skill_id_, other->md_unique_skill_id_);
    std::swap(seal_slot_, other->seal_slot_);
    std::swap(seal_slot_open_, other->seal_slot_open_);
    std::swap(md_max_grade_, other->md_max_grade_);
    std::swap(md_random_option_count_, other->md_random_option_count_);
    std::swap(md_next_grade_template_id_, other->md_next_grade_template_id_);
    std::swap(md_buy_price_, other->md_buy_price_);
    std::swap(md_sell_price_, other->md_sell_price_);
    std::swap(is_stackable_, other->is_stackable_);
    std::swap(is_saleable_, other->is_saleable_);
    std::swap(is_equipable_, other->is_equipable_);
    std::swap(is_levelupable_, other->is_levelupable_);
    std::swap(is_enhanceable_, other->is_enhanceable_);
    std::swap(is_upgradable_, other->is_upgradable_);
    std::swap(is_composable_, other->is_composable_);
    std::swap(is_surpassable_, other->is_surpassable_);
    std::swap(is_sealable_, other->is_sealable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemInfo_descriptor_;
  metadata.reflection = mdItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdCostumeInfo::kMdTemplateIdFieldNumber;
const int mdCostumeInfo::kMdGroupIdFieldNumber;
const int mdCostumeInfo::kMdSetIdFieldNumber;
const int mdCostumeInfo::kMdTypeFieldNumber;
const int mdCostumeInfo::kMdGradeFieldNumber;
const int mdCostumeInfo::kMdInventoryTypeFieldNumber;
const int mdCostumeInfo::kMdEquipPositionFieldNumber;
const int mdCostumeInfo::kMdMaxLevelupFieldNumber;
const int mdCostumeInfo::kMdMainAttributeFieldNumber;
const int mdCostumeInfo::kMdLevelFactorFieldNumber;
const int mdCostumeInfo::kMdUniqueOptionId1FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionValue1FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionId2FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionValue2FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionId3FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionValue3FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionId4FieldNumber;
const int mdCostumeInfo::kMdUniqueOptionValue4FieldNumber;
const int mdCostumeInfo::kMdUniqueSkillIdFieldNumber;
const int mdCostumeInfo::kMdMaxGradeFieldNumber;
const int mdCostumeInfo::kMdRandomOptionCountFieldNumber;
const int mdCostumeInfo::kMdNextGradeTemplateIdFieldNumber;
const int mdCostumeInfo::kMdBuyPriceFieldNumber;
const int mdCostumeInfo::kMdSellPriceFieldNumber;
const int mdCostumeInfo::kIsStackableFieldNumber;
const int mdCostumeInfo::kIsSaleableFieldNumber;
const int mdCostumeInfo::kIsEquipableFieldNumber;
const int mdCostumeInfo::kIsLevelupableFieldNumber;
const int mdCostumeInfo::kIsEnhanceableFieldNumber;
const int mdCostumeInfo::kIsUpgradableFieldNumber;
const int mdCostumeInfo::kIsComposableFieldNumber;
const int mdCostumeInfo::kIsSurpassableFieldNumber;
#endif  // !_MSC_VER

mdCostumeInfo::mdCostumeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdCostumeInfo)
}

void mdCostumeInfo::InitAsDefaultInstance() {
}

mdCostumeInfo::mdCostumeInfo(const mdCostumeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdCostumeInfo)
}

void mdCostumeInfo::SharedCtor() {
  _cached_size_ = 0;
  md_template_id_ = 0;
  md_group_id_ = 1;
  md_set_id_ = 0;
  md_type_ = 201;
  md_grade_ = 0;
  md_inventory_type_ = 2;
  md_equip_position_ = 0;
  md_max_levelup_ = 0;
  md_main_attribute_ = 0;
  md_level_factor_ = 0;
  md_unique_option_id1_ = 0;
  md_unique_option_value1_ = 0;
  md_unique_option_id2_ = 0;
  md_unique_option_value2_ = 0;
  md_unique_option_id3_ = 0;
  md_unique_option_value3_ = 0;
  md_unique_option_id4_ = 0;
  md_unique_option_value4_ = 0;
  md_unique_skill_id_ = 0;
  md_max_grade_ = 0;
  md_random_option_count_ = 0;
  md_next_grade_template_id_ = 0;
  md_buy_price_ = 0;
  md_sell_price_ = 0;
  is_stackable_ = false;
  is_saleable_ = false;
  is_equipable_ = false;
  is_levelupable_ = false;
  is_enhanceable_ = false;
  is_upgradable_ = false;
  is_composable_ = false;
  is_surpassable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdCostumeInfo::~mdCostumeInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdCostumeInfo)
  SharedDtor();
}

void mdCostumeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdCostumeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdCostumeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCostumeInfo_descriptor_;
}

const mdCostumeInfo& mdCostumeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdCostumeInfo* mdCostumeInfo::default_instance_ = NULL;

mdCostumeInfo* mdCostumeInfo::New() const {
  return new mdCostumeInfo;
}

void mdCostumeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdCostumeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(md_equip_position_, md_max_levelup_);
    md_template_id_ = 0;
    md_group_id_ = 1;
    md_set_id_ = 0;
    md_type_ = 201;
    md_grade_ = 0;
    md_inventory_type_ = 2;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(md_main_attribute_, md_unique_option_value3_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(md_unique_option_id4_, md_sell_price_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(is_stackable_, is_surpassable_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdCostumeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdCostumeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 md_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_template_id_)));
          set_has_md_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_md_group_id;
        break;
      }

      // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_md_group_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GroupPrefix_IsValid(value)) {
            set_md_group_id(static_cast< ::b2::protocol::commondata::GroupPrefix >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_md_set_id;
        break;
      }

      // required int32 md_set_id = 3;
      case 3: {
        if (tag == 24) {
         parse_md_set_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_set_id_)));
          set_has_md_set_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_md_type;
        break;
      }

      // required .b2.protocol.commondata.Costume.TYPE md_type = 4;
      case 4: {
        if (tag == 32) {
         parse_md_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Costume_TYPE_IsValid(value)) {
            set_md_type(static_cast< ::b2::protocol::commondata::Costume_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_md_grade;
        break;
      }

      // required int32 md_grade = 5;
      case 5: {
        if (tag == 40) {
         parse_md_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_grade_)));
          set_has_md_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_md_inventory_type;
        break;
      }

      // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
      case 6: {
        if (tag == 48) {
         parse_md_inventory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Inventory_TYPE_IsValid(value)) {
            set_md_inventory_type(static_cast< ::b2::protocol::commondata::Inventory_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_md_equip_position;
        break;
      }

      // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
      case 7: {
        if (tag == 56) {
         parse_md_equip_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipPosition_IsValid(value)) {
            set_md_equip_position(static_cast< ::b2::protocol::commondata::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_md_max_levelup;
        break;
      }

      // required int32 md_max_levelup = 8;
      case 8: {
        if (tag == 64) {
         parse_md_max_levelup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_max_levelup_)));
          set_has_md_max_levelup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_md_main_attribute;
        break;
      }

      // required int32 md_main_attribute = 9;
      case 9: {
        if (tag == 72) {
         parse_md_main_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_main_attribute_)));
          set_has_md_main_attribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_md_level_factor;
        break;
      }

      // required float md_level_factor = 10;
      case 10: {
        if (tag == 85) {
         parse_md_level_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_level_factor_)));
          set_has_md_level_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_md_unique_option_id1;
        break;
      }

      // required int32 md_unique_option_id1 = 11;
      case 11: {
        if (tag == 88) {
         parse_md_unique_option_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id1_)));
          set_has_md_unique_option_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_md_unique_option_value1;
        break;
      }

      // required float md_unique_option_value1 = 12;
      case 12: {
        if (tag == 101) {
         parse_md_unique_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value1_)));
          set_has_md_unique_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_md_unique_option_id2;
        break;
      }

      // required int32 md_unique_option_id2 = 13;
      case 13: {
        if (tag == 104) {
         parse_md_unique_option_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id2_)));
          set_has_md_unique_option_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_md_unique_option_value2;
        break;
      }

      // required float md_unique_option_value2 = 14;
      case 14: {
        if (tag == 117) {
         parse_md_unique_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value2_)));
          set_has_md_unique_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_md_unique_option_id3;
        break;
      }

      // required int32 md_unique_option_id3 = 15;
      case 15: {
        if (tag == 120) {
         parse_md_unique_option_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id3_)));
          set_has_md_unique_option_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_md_unique_option_value3;
        break;
      }

      // required float md_unique_option_value3 = 16;
      case 16: {
        if (tag == 133) {
         parse_md_unique_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value3_)));
          set_has_md_unique_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_md_unique_option_id4;
        break;
      }

      // required int32 md_unique_option_id4 = 17;
      case 17: {
        if (tag == 136) {
         parse_md_unique_option_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_option_id4_)));
          set_has_md_unique_option_id4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_md_unique_option_value4;
        break;
      }

      // required float md_unique_option_value4 = 18;
      case 18: {
        if (tag == 149) {
         parse_md_unique_option_value4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_unique_option_value4_)));
          set_has_md_unique_option_value4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_md_unique_skill_id;
        break;
      }

      // required int32 md_unique_skill_id = 19;
      case 19: {
        if (tag == 152) {
         parse_md_unique_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_unique_skill_id_)));
          set_has_md_unique_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_md_max_grade;
        break;
      }

      // required int32 md_max_grade = 20;
      case 20: {
        if (tag == 160) {
         parse_md_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_max_grade_)));
          set_has_md_max_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_md_random_option_count;
        break;
      }

      // required int32 md_random_option_count = 21;
      case 21: {
        if (tag == 168) {
         parse_md_random_option_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_random_option_count_)));
          set_has_md_random_option_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_md_next_grade_template_id;
        break;
      }

      // required int32 md_next_grade_template_id = 22;
      case 22: {
        if (tag == 176) {
         parse_md_next_grade_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_next_grade_template_id_)));
          set_has_md_next_grade_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_md_buy_price;
        break;
      }

      // required int32 md_buy_price = 23;
      case 23: {
        if (tag == 184) {
         parse_md_buy_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_buy_price_)));
          set_has_md_buy_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_md_sell_price;
        break;
      }

      // required int32 md_sell_price = 24;
      case 24: {
        if (tag == 192) {
         parse_md_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &md_sell_price_)));
          set_has_md_sell_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_is_stackable;
        break;
      }

      // required bool is_stackable = 25;
      case 25: {
        if (tag == 200) {
         parse_is_stackable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stackable_)));
          set_has_is_stackable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_is_saleable;
        break;
      }

      // required bool is_saleable = 26;
      case 26: {
        if (tag == 208) {
         parse_is_saleable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_saleable_)));
          set_has_is_saleable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_is_equipable;
        break;
      }

      // required bool is_equipable = 27;
      case 27: {
        if (tag == 216) {
         parse_is_equipable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_equipable_)));
          set_has_is_equipable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_is_levelupable;
        break;
      }

      // required bool is_levelupable = 28;
      case 28: {
        if (tag == 224) {
         parse_is_levelupable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_levelupable_)));
          set_has_is_levelupable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_is_enhanceable;
        break;
      }

      // required bool is_enhanceable = 29;
      case 29: {
        if (tag == 232) {
         parse_is_enhanceable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enhanceable_)));
          set_has_is_enhanceable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_is_upgradable;
        break;
      }

      // required bool is_upgradable = 30;
      case 30: {
        if (tag == 240) {
         parse_is_upgradable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_upgradable_)));
          set_has_is_upgradable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_is_composable;
        break;
      }

      // required bool is_composable = 31;
      case 31: {
        if (tag == 248) {
         parse_is_composable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_composable_)));
          set_has_is_composable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_is_surpassable;
        break;
      }

      // required bool is_surpassable = 32;
      case 32: {
        if (tag == 256) {
         parse_is_surpassable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_surpassable_)));
          set_has_is_surpassable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdCostumeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdCostumeInfo)
  return false;
#undef DO_
}

void mdCostumeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdCostumeInfo)
  // required int32 md_template_id = 1;
  if (has_md_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->md_template_id(), output);
  }

  // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
  if (has_md_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->md_group_id(), output);
  }

  // required int32 md_set_id = 3;
  if (has_md_set_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->md_set_id(), output);
  }

  // required .b2.protocol.commondata.Costume.TYPE md_type = 4;
  if (has_md_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->md_type(), output);
  }

  // required int32 md_grade = 5;
  if (has_md_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->md_grade(), output);
  }

  // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
  if (has_md_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->md_inventory_type(), output);
  }

  // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
  if (has_md_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->md_equip_position(), output);
  }

  // required int32 md_max_levelup = 8;
  if (has_md_max_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->md_max_levelup(), output);
  }

  // required int32 md_main_attribute = 9;
  if (has_md_main_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->md_main_attribute(), output);
  }

  // required float md_level_factor = 10;
  if (has_md_level_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->md_level_factor(), output);
  }

  // required int32 md_unique_option_id1 = 11;
  if (has_md_unique_option_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->md_unique_option_id1(), output);
  }

  // required float md_unique_option_value1 = 12;
  if (has_md_unique_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->md_unique_option_value1(), output);
  }

  // required int32 md_unique_option_id2 = 13;
  if (has_md_unique_option_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->md_unique_option_id2(), output);
  }

  // required float md_unique_option_value2 = 14;
  if (has_md_unique_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->md_unique_option_value2(), output);
  }

  // required int32 md_unique_option_id3 = 15;
  if (has_md_unique_option_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->md_unique_option_id3(), output);
  }

  // required float md_unique_option_value3 = 16;
  if (has_md_unique_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->md_unique_option_value3(), output);
  }

  // required int32 md_unique_option_id4 = 17;
  if (has_md_unique_option_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->md_unique_option_id4(), output);
  }

  // required float md_unique_option_value4 = 18;
  if (has_md_unique_option_value4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->md_unique_option_value4(), output);
  }

  // required int32 md_unique_skill_id = 19;
  if (has_md_unique_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->md_unique_skill_id(), output);
  }

  // required int32 md_max_grade = 20;
  if (has_md_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->md_max_grade(), output);
  }

  // required int32 md_random_option_count = 21;
  if (has_md_random_option_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->md_random_option_count(), output);
  }

  // required int32 md_next_grade_template_id = 22;
  if (has_md_next_grade_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->md_next_grade_template_id(), output);
  }

  // required int32 md_buy_price = 23;
  if (has_md_buy_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->md_buy_price(), output);
  }

  // required int32 md_sell_price = 24;
  if (has_md_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->md_sell_price(), output);
  }

  // required bool is_stackable = 25;
  if (has_is_stackable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->is_stackable(), output);
  }

  // required bool is_saleable = 26;
  if (has_is_saleable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->is_saleable(), output);
  }

  // required bool is_equipable = 27;
  if (has_is_equipable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->is_equipable(), output);
  }

  // required bool is_levelupable = 28;
  if (has_is_levelupable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->is_levelupable(), output);
  }

  // required bool is_enhanceable = 29;
  if (has_is_enhanceable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->is_enhanceable(), output);
  }

  // required bool is_upgradable = 30;
  if (has_is_upgradable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->is_upgradable(), output);
  }

  // required bool is_composable = 31;
  if (has_is_composable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_composable(), output);
  }

  // required bool is_surpassable = 32;
  if (has_is_surpassable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->is_surpassable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdCostumeInfo)
}

::google::protobuf::uint8* mdCostumeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdCostumeInfo)
  // required int32 md_template_id = 1;
  if (has_md_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->md_template_id(), target);
  }

  // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
  if (has_md_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->md_group_id(), target);
  }

  // required int32 md_set_id = 3;
  if (has_md_set_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->md_set_id(), target);
  }

  // required .b2.protocol.commondata.Costume.TYPE md_type = 4;
  if (has_md_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->md_type(), target);
  }

  // required int32 md_grade = 5;
  if (has_md_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->md_grade(), target);
  }

  // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
  if (has_md_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->md_inventory_type(), target);
  }

  // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
  if (has_md_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->md_equip_position(), target);
  }

  // required int32 md_max_levelup = 8;
  if (has_md_max_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->md_max_levelup(), target);
  }

  // required int32 md_main_attribute = 9;
  if (has_md_main_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->md_main_attribute(), target);
  }

  // required float md_level_factor = 10;
  if (has_md_level_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->md_level_factor(), target);
  }

  // required int32 md_unique_option_id1 = 11;
  if (has_md_unique_option_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->md_unique_option_id1(), target);
  }

  // required float md_unique_option_value1 = 12;
  if (has_md_unique_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->md_unique_option_value1(), target);
  }

  // required int32 md_unique_option_id2 = 13;
  if (has_md_unique_option_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->md_unique_option_id2(), target);
  }

  // required float md_unique_option_value2 = 14;
  if (has_md_unique_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->md_unique_option_value2(), target);
  }

  // required int32 md_unique_option_id3 = 15;
  if (has_md_unique_option_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->md_unique_option_id3(), target);
  }

  // required float md_unique_option_value3 = 16;
  if (has_md_unique_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->md_unique_option_value3(), target);
  }

  // required int32 md_unique_option_id4 = 17;
  if (has_md_unique_option_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->md_unique_option_id4(), target);
  }

  // required float md_unique_option_value4 = 18;
  if (has_md_unique_option_value4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->md_unique_option_value4(), target);
  }

  // required int32 md_unique_skill_id = 19;
  if (has_md_unique_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->md_unique_skill_id(), target);
  }

  // required int32 md_max_grade = 20;
  if (has_md_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->md_max_grade(), target);
  }

  // required int32 md_random_option_count = 21;
  if (has_md_random_option_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->md_random_option_count(), target);
  }

  // required int32 md_next_grade_template_id = 22;
  if (has_md_next_grade_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->md_next_grade_template_id(), target);
  }

  // required int32 md_buy_price = 23;
  if (has_md_buy_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->md_buy_price(), target);
  }

  // required int32 md_sell_price = 24;
  if (has_md_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->md_sell_price(), target);
  }

  // required bool is_stackable = 25;
  if (has_is_stackable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->is_stackable(), target);
  }

  // required bool is_saleable = 26;
  if (has_is_saleable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->is_saleable(), target);
  }

  // required bool is_equipable = 27;
  if (has_is_equipable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->is_equipable(), target);
  }

  // required bool is_levelupable = 28;
  if (has_is_levelupable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->is_levelupable(), target);
  }

  // required bool is_enhanceable = 29;
  if (has_is_enhanceable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->is_enhanceable(), target);
  }

  // required bool is_upgradable = 30;
  if (has_is_upgradable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->is_upgradable(), target);
  }

  // required bool is_composable = 31;
  if (has_is_composable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_composable(), target);
  }

  // required bool is_surpassable = 32;
  if (has_is_surpassable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->is_surpassable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdCostumeInfo)
  return target;
}

int mdCostumeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 md_template_id = 1;
    if (has_md_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_template_id());
    }

    // required .b2.protocol.commondata.GroupPrefix md_group_id = 2;
    if (has_md_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_group_id());
    }

    // required int32 md_set_id = 3;
    if (has_md_set_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_set_id());
    }

    // required .b2.protocol.commondata.Costume.TYPE md_type = 4;
    if (has_md_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_type());
    }

    // required int32 md_grade = 5;
    if (has_md_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_grade());
    }

    // required .b2.protocol.commondata.Inventory.TYPE md_inventory_type = 6;
    if (has_md_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_inventory_type());
    }

    // required .b2.protocol.commondata.EquipPosition md_equip_position = 7;
    if (has_md_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->md_equip_position());
    }

    // required int32 md_max_levelup = 8;
    if (has_md_max_levelup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_max_levelup());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 md_main_attribute = 9;
    if (has_md_main_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_main_attribute());
    }

    // required float md_level_factor = 10;
    if (has_md_level_factor()) {
      total_size += 1 + 4;
    }

    // required int32 md_unique_option_id1 = 11;
    if (has_md_unique_option_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id1());
    }

    // required float md_unique_option_value1 = 12;
    if (has_md_unique_option_value1()) {
      total_size += 1 + 4;
    }

    // required int32 md_unique_option_id2 = 13;
    if (has_md_unique_option_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id2());
    }

    // required float md_unique_option_value2 = 14;
    if (has_md_unique_option_value2()) {
      total_size += 1 + 4;
    }

    // required int32 md_unique_option_id3 = 15;
    if (has_md_unique_option_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id3());
    }

    // required float md_unique_option_value3 = 16;
    if (has_md_unique_option_value3()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 md_unique_option_id4 = 17;
    if (has_md_unique_option_id4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_option_id4());
    }

    // required float md_unique_option_value4 = 18;
    if (has_md_unique_option_value4()) {
      total_size += 2 + 4;
    }

    // required int32 md_unique_skill_id = 19;
    if (has_md_unique_skill_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_unique_skill_id());
    }

    // required int32 md_max_grade = 20;
    if (has_md_max_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_max_grade());
    }

    // required int32 md_random_option_count = 21;
    if (has_md_random_option_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_random_option_count());
    }

    // required int32 md_next_grade_template_id = 22;
    if (has_md_next_grade_template_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_next_grade_template_id());
    }

    // required int32 md_buy_price = 23;
    if (has_md_buy_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_buy_price());
    }

    // required int32 md_sell_price = 24;
    if (has_md_sell_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->md_sell_price());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required bool is_stackable = 25;
    if (has_is_stackable()) {
      total_size += 2 + 1;
    }

    // required bool is_saleable = 26;
    if (has_is_saleable()) {
      total_size += 2 + 1;
    }

    // required bool is_equipable = 27;
    if (has_is_equipable()) {
      total_size += 2 + 1;
    }

    // required bool is_levelupable = 28;
    if (has_is_levelupable()) {
      total_size += 2 + 1;
    }

    // required bool is_enhanceable = 29;
    if (has_is_enhanceable()) {
      total_size += 2 + 1;
    }

    // required bool is_upgradable = 30;
    if (has_is_upgradable()) {
      total_size += 2 + 1;
    }

    // required bool is_composable = 31;
    if (has_is_composable()) {
      total_size += 2 + 1;
    }

    // required bool is_surpassable = 32;
    if (has_is_surpassable()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdCostumeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdCostumeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdCostumeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdCostumeInfo::MergeFrom(const mdCostumeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_md_template_id()) {
      set_md_template_id(from.md_template_id());
    }
    if (from.has_md_group_id()) {
      set_md_group_id(from.md_group_id());
    }
    if (from.has_md_set_id()) {
      set_md_set_id(from.md_set_id());
    }
    if (from.has_md_type()) {
      set_md_type(from.md_type());
    }
    if (from.has_md_grade()) {
      set_md_grade(from.md_grade());
    }
    if (from.has_md_inventory_type()) {
      set_md_inventory_type(from.md_inventory_type());
    }
    if (from.has_md_equip_position()) {
      set_md_equip_position(from.md_equip_position());
    }
    if (from.has_md_max_levelup()) {
      set_md_max_levelup(from.md_max_levelup());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_md_main_attribute()) {
      set_md_main_attribute(from.md_main_attribute());
    }
    if (from.has_md_level_factor()) {
      set_md_level_factor(from.md_level_factor());
    }
    if (from.has_md_unique_option_id1()) {
      set_md_unique_option_id1(from.md_unique_option_id1());
    }
    if (from.has_md_unique_option_value1()) {
      set_md_unique_option_value1(from.md_unique_option_value1());
    }
    if (from.has_md_unique_option_id2()) {
      set_md_unique_option_id2(from.md_unique_option_id2());
    }
    if (from.has_md_unique_option_value2()) {
      set_md_unique_option_value2(from.md_unique_option_value2());
    }
    if (from.has_md_unique_option_id3()) {
      set_md_unique_option_id3(from.md_unique_option_id3());
    }
    if (from.has_md_unique_option_value3()) {
      set_md_unique_option_value3(from.md_unique_option_value3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_md_unique_option_id4()) {
      set_md_unique_option_id4(from.md_unique_option_id4());
    }
    if (from.has_md_unique_option_value4()) {
      set_md_unique_option_value4(from.md_unique_option_value4());
    }
    if (from.has_md_unique_skill_id()) {
      set_md_unique_skill_id(from.md_unique_skill_id());
    }
    if (from.has_md_max_grade()) {
      set_md_max_grade(from.md_max_grade());
    }
    if (from.has_md_random_option_count()) {
      set_md_random_option_count(from.md_random_option_count());
    }
    if (from.has_md_next_grade_template_id()) {
      set_md_next_grade_template_id(from.md_next_grade_template_id());
    }
    if (from.has_md_buy_price()) {
      set_md_buy_price(from.md_buy_price());
    }
    if (from.has_md_sell_price()) {
      set_md_sell_price(from.md_sell_price());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_is_stackable()) {
      set_is_stackable(from.is_stackable());
    }
    if (from.has_is_saleable()) {
      set_is_saleable(from.is_saleable());
    }
    if (from.has_is_equipable()) {
      set_is_equipable(from.is_equipable());
    }
    if (from.has_is_levelupable()) {
      set_is_levelupable(from.is_levelupable());
    }
    if (from.has_is_enhanceable()) {
      set_is_enhanceable(from.is_enhanceable());
    }
    if (from.has_is_upgradable()) {
      set_is_upgradable(from.is_upgradable());
    }
    if (from.has_is_composable()) {
      set_is_composable(from.is_composable());
    }
    if (from.has_is_surpassable()) {
      set_is_surpassable(from.is_surpassable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdCostumeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdCostumeInfo::CopyFrom(const mdCostumeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdCostumeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;

  return true;
}

void mdCostumeInfo::Swap(mdCostumeInfo* other) {
  if (other != this) {
    std::swap(md_template_id_, other->md_template_id_);
    std::swap(md_group_id_, other->md_group_id_);
    std::swap(md_set_id_, other->md_set_id_);
    std::swap(md_type_, other->md_type_);
    std::swap(md_grade_, other->md_grade_);
    std::swap(md_inventory_type_, other->md_inventory_type_);
    std::swap(md_equip_position_, other->md_equip_position_);
    std::swap(md_max_levelup_, other->md_max_levelup_);
    std::swap(md_main_attribute_, other->md_main_attribute_);
    std::swap(md_level_factor_, other->md_level_factor_);
    std::swap(md_unique_option_id1_, other->md_unique_option_id1_);
    std::swap(md_unique_option_value1_, other->md_unique_option_value1_);
    std::swap(md_unique_option_id2_, other->md_unique_option_id2_);
    std::swap(md_unique_option_value2_, other->md_unique_option_value2_);
    std::swap(md_unique_option_id3_, other->md_unique_option_id3_);
    std::swap(md_unique_option_value3_, other->md_unique_option_value3_);
    std::swap(md_unique_option_id4_, other->md_unique_option_id4_);
    std::swap(md_unique_option_value4_, other->md_unique_option_value4_);
    std::swap(md_unique_skill_id_, other->md_unique_skill_id_);
    std::swap(md_max_grade_, other->md_max_grade_);
    std::swap(md_random_option_count_, other->md_random_option_count_);
    std::swap(md_next_grade_template_id_, other->md_next_grade_template_id_);
    std::swap(md_buy_price_, other->md_buy_price_);
    std::swap(md_sell_price_, other->md_sell_price_);
    std::swap(is_stackable_, other->is_stackable_);
    std::swap(is_saleable_, other->is_saleable_);
    std::swap(is_equipable_, other->is_equipable_);
    std::swap(is_levelupable_, other->is_levelupable_);
    std::swap(is_enhanceable_, other->is_enhanceable_);
    std::swap(is_upgradable_, other->is_upgradable_);
    std::swap(is_composable_, other->is_composable_);
    std::swap(is_surpassable_, other->is_surpassable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdCostumeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdCostumeInfo_descriptor_;
  metadata.reflection = mdCostumeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopProduct::kIdFieldNumber;
const int mdShopProduct::kShopTypeFieldNumber;
const int mdShopProduct::kShopOrderFieldNumber;
const int mdShopProduct::kProductTypeFieldNumber;
const int mdShopProduct::kProductOrderFieldNumber;
const int mdShopProduct::kProductIdFieldNumber;
const int mdShopProduct::kProductCountFieldNumber;
const int mdShopProduct::kBonusProductTypeFieldNumber;
const int mdShopProduct::kBonusProductIdFieldNumber;
const int mdShopProduct::kBonusProductCountFieldNumber;
const int mdShopProduct::kCalculatedBonusCountFieldNumber;
const int mdShopProduct::kBuyPriceTypeFieldNumber;
const int mdShopProduct::kPriceFieldNumber;
const int mdShopProduct::kCalculatedPriceFieldNumber;
const int mdShopProduct::kRestricTypeFieldNumber;
const int mdShopProduct::kBuyLimitCountFieldNumber;
#endif  // !_MSC_VER

mdShopProduct::mdShopProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopProduct)
}

void mdShopProduct::InitAsDefaultInstance() {
}

mdShopProduct::mdShopProduct(const mdShopProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopProduct)
}

void mdShopProduct::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  shop_type_ = 1;
  shop_order_ = 0;
  product_type_ = 0;
  product_order_ = 0;
  product_id_ = 0;
  product_count_ = 0;
  bonus_product_type_ = 0;
  bonus_product_id_ = 0;
  bonus_product_count_ = 0;
  calculated_bonus_count_ = 0;
  buy_price_type_ = 1;
  price_ = 0;
  calculated_price_ = 0;
  restric_type_ = 0;
  buy_limit_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopProduct::~mdShopProduct() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopProduct)
  SharedDtor();
}

void mdShopProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopProduct_descriptor_;
}

const mdShopProduct& mdShopProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopProduct* mdShopProduct::default_instance_ = NULL;

mdShopProduct* mdShopProduct::New() const {
  return new mdShopProduct;
}

void mdShopProduct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopProduct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(shop_order_, bonus_product_type_);
    id_ = 0;
    shop_type_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(bonus_product_id_, calculated_bonus_count_);
    ZR_(price_, buy_limit_count_);
    buy_price_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shop_type;
        break;
      }

      // required .b2.protocol.commondata.Shop.ShopType shop_type = 2;
      case 2: {
        if (tag == 16) {
         parse_shop_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_ShopType_IsValid(value)) {
            set_shop_type(static_cast< ::b2::protocol::commondata::Shop_ShopType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shop_order;
        break;
      }

      // required int32 shop_order = 3;
      case 3: {
        if (tag == 24) {
         parse_shop_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_order_)));
          set_has_shop_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_product_type;
        break;
      }

      // required .b2.protocol.commondata.Shop.ProductType product_type = 4;
      case 4: {
        if (tag == 32) {
         parse_product_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_ProductType_IsValid(value)) {
            set_product_type(static_cast< ::b2::protocol::commondata::Shop_ProductType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_product_order;
        break;
      }

      // required int32 product_order = 5;
      case 5: {
        if (tag == 40) {
         parse_product_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_order_)));
          set_has_product_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_product_id;
        break;
      }

      // required int32 product_id = 6;
      case 6: {
        if (tag == 48) {
         parse_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_product_count;
        break;
      }

      // required int32 product_count = 7;
      case 7: {
        if (tag == 56) {
         parse_product_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_count_)));
          set_has_product_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bonus_product_type;
        break;
      }

      // required .b2.protocol.commondata.Shop.ProductType bonus_product_type = 8;
      case 8: {
        if (tag == 64) {
         parse_bonus_product_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_ProductType_IsValid(value)) {
            set_bonus_product_type(static_cast< ::b2::protocol::commondata::Shop_ProductType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bonus_product_id;
        break;
      }

      // required int32 bonus_product_id = 9;
      case 9: {
        if (tag == 72) {
         parse_bonus_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_product_id_)));
          set_has_bonus_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_bonus_product_count;
        break;
      }

      // required int32 bonus_product_count = 10;
      case 10: {
        if (tag == 80) {
         parse_bonus_product_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_product_count_)));
          set_has_bonus_product_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_calculated_bonus_count;
        break;
      }

      // required int32 calculated_bonus_count = 11;
      case 11: {
        if (tag == 88) {
         parse_calculated_bonus_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calculated_bonus_count_)));
          set_has_calculated_bonus_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_buy_price_type;
        break;
      }

      // required .b2.protocol.commondata.Shop.BuyPriceType buy_price_type = 12;
      case 12: {
        if (tag == 96) {
         parse_buy_price_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_BuyPriceType_IsValid(value)) {
            set_buy_price_type(static_cast< ::b2::protocol::commondata::Shop_BuyPriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_price;
        break;
      }

      // required int32 price = 13;
      case 13: {
        if (tag == 104) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_calculated_price;
        break;
      }

      // required int32 calculated_price = 14;
      case 14: {
        if (tag == 112) {
         parse_calculated_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calculated_price_)));
          set_has_calculated_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_restric_type;
        break;
      }

      // required .b2.protocol.commondata.Shop.RestrictType restric_type = 15;
      case 15: {
        if (tag == 120) {
         parse_restric_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_RestrictType_IsValid(value)) {
            set_restric_type(static_cast< ::b2::protocol::commondata::Shop_RestrictType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_buy_limit_count;
        break;
      }

      // required int32 buy_limit_count = 16;
      case 16: {
        if (tag == 128) {
         parse_buy_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_limit_count_)));
          set_has_buy_limit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopProduct)
  return false;
#undef DO_
}

void mdShopProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopProduct)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.Shop.ShopType shop_type = 2;
  if (has_shop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->shop_type(), output);
  }

  // required int32 shop_order = 3;
  if (has_shop_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shop_order(), output);
  }

  // required .b2.protocol.commondata.Shop.ProductType product_type = 4;
  if (has_product_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->product_type(), output);
  }

  // required int32 product_order = 5;
  if (has_product_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->product_order(), output);
  }

  // required int32 product_id = 6;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->product_id(), output);
  }

  // required int32 product_count = 7;
  if (has_product_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->product_count(), output);
  }

  // required .b2.protocol.commondata.Shop.ProductType bonus_product_type = 8;
  if (has_bonus_product_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bonus_product_type(), output);
  }

  // required int32 bonus_product_id = 9;
  if (has_bonus_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bonus_product_id(), output);
  }

  // required int32 bonus_product_count = 10;
  if (has_bonus_product_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bonus_product_count(), output);
  }

  // required int32 calculated_bonus_count = 11;
  if (has_calculated_bonus_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->calculated_bonus_count(), output);
  }

  // required .b2.protocol.commondata.Shop.BuyPriceType buy_price_type = 12;
  if (has_buy_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->buy_price_type(), output);
  }

  // required int32 price = 13;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->price(), output);
  }

  // required int32 calculated_price = 14;
  if (has_calculated_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->calculated_price(), output);
  }

  // required .b2.protocol.commondata.Shop.RestrictType restric_type = 15;
  if (has_restric_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->restric_type(), output);
  }

  // required int32 buy_limit_count = 16;
  if (has_buy_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->buy_limit_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopProduct)
}

::google::protobuf::uint8* mdShopProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopProduct)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.Shop.ShopType shop_type = 2;
  if (has_shop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->shop_type(), target);
  }

  // required int32 shop_order = 3;
  if (has_shop_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shop_order(), target);
  }

  // required .b2.protocol.commondata.Shop.ProductType product_type = 4;
  if (has_product_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->product_type(), target);
  }

  // required int32 product_order = 5;
  if (has_product_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->product_order(), target);
  }

  // required int32 product_id = 6;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->product_id(), target);
  }

  // required int32 product_count = 7;
  if (has_product_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->product_count(), target);
  }

  // required .b2.protocol.commondata.Shop.ProductType bonus_product_type = 8;
  if (has_bonus_product_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bonus_product_type(), target);
  }

  // required int32 bonus_product_id = 9;
  if (has_bonus_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bonus_product_id(), target);
  }

  // required int32 bonus_product_count = 10;
  if (has_bonus_product_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->bonus_product_count(), target);
  }

  // required int32 calculated_bonus_count = 11;
  if (has_calculated_bonus_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->calculated_bonus_count(), target);
  }

  // required .b2.protocol.commondata.Shop.BuyPriceType buy_price_type = 12;
  if (has_buy_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->buy_price_type(), target);
  }

  // required int32 price = 13;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->price(), target);
  }

  // required int32 calculated_price = 14;
  if (has_calculated_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->calculated_price(), target);
  }

  // required .b2.protocol.commondata.Shop.RestrictType restric_type = 15;
  if (has_restric_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->restric_type(), target);
  }

  // required int32 buy_limit_count = 16;
  if (has_buy_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->buy_limit_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopProduct)
  return target;
}

int mdShopProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.Shop.ShopType shop_type = 2;
    if (has_shop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_type());
    }

    // required int32 shop_order = 3;
    if (has_shop_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_order());
    }

    // required .b2.protocol.commondata.Shop.ProductType product_type = 4;
    if (has_product_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->product_type());
    }

    // required int32 product_order = 5;
    if (has_product_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_order());
    }

    // required int32 product_id = 6;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // required int32 product_count = 7;
    if (has_product_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_count());
    }

    // required .b2.protocol.commondata.Shop.ProductType bonus_product_type = 8;
    if (has_bonus_product_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bonus_product_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 bonus_product_id = 9;
    if (has_bonus_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_product_id());
    }

    // required int32 bonus_product_count = 10;
    if (has_bonus_product_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_product_count());
    }

    // required int32 calculated_bonus_count = 11;
    if (has_calculated_bonus_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calculated_bonus_count());
    }

    // required .b2.protocol.commondata.Shop.BuyPriceType buy_price_type = 12;
    if (has_buy_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_price_type());
    }

    // required int32 price = 13;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 calculated_price = 14;
    if (has_calculated_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->calculated_price());
    }

    // required .b2.protocol.commondata.Shop.RestrictType restric_type = 15;
    if (has_restric_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->restric_type());
    }

    // required int32 buy_limit_count = 16;
    if (has_buy_limit_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_limit_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopProduct::MergeFrom(const mdShopProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_shop_type()) {
      set_shop_type(from.shop_type());
    }
    if (from.has_shop_order()) {
      set_shop_order(from.shop_order());
    }
    if (from.has_product_type()) {
      set_product_type(from.product_type());
    }
    if (from.has_product_order()) {
      set_product_order(from.product_order());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_product_count()) {
      set_product_count(from.product_count());
    }
    if (from.has_bonus_product_type()) {
      set_bonus_product_type(from.bonus_product_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonus_product_id()) {
      set_bonus_product_id(from.bonus_product_id());
    }
    if (from.has_bonus_product_count()) {
      set_bonus_product_count(from.bonus_product_count());
    }
    if (from.has_calculated_bonus_count()) {
      set_calculated_bonus_count(from.calculated_bonus_count());
    }
    if (from.has_buy_price_type()) {
      set_buy_price_type(from.buy_price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_calculated_price()) {
      set_calculated_price(from.calculated_price());
    }
    if (from.has_restric_type()) {
      set_restric_type(from.restric_type());
    }
    if (from.has_buy_limit_count()) {
      set_buy_limit_count(from.buy_limit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopProduct::CopyFrom(const mdShopProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void mdShopProduct::Swap(mdShopProduct* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(shop_type_, other->shop_type_);
    std::swap(shop_order_, other->shop_order_);
    std::swap(product_type_, other->product_type_);
    std::swap(product_order_, other->product_order_);
    std::swap(product_id_, other->product_id_);
    std::swap(product_count_, other->product_count_);
    std::swap(bonus_product_type_, other->bonus_product_type_);
    std::swap(bonus_product_id_, other->bonus_product_id_);
    std::swap(bonus_product_count_, other->bonus_product_count_);
    std::swap(calculated_bonus_count_, other->calculated_bonus_count_);
    std::swap(buy_price_type_, other->buy_price_type_);
    std::swap(price_, other->price_);
    std::swap(calculated_price_, other->calculated_price_);
    std::swap(restric_type_, other->restric_type_);
    std::swap(buy_limit_count_, other->buy_limit_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopProduct_descriptor_;
  metadata.reflection = mdShopProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopPackage::kIdFieldNumber;
const int mdShopPackage::kCategoryFieldNumber;
const int mdShopPackage::kTabTypeFieldNumber;
const int mdShopPackage::kNameFieldNumber;
const int mdShopPackage::kPayPeriodFieldNumber;
const int mdShopPackage::kPeriodBonusRewardIdFieldNumber;
const int mdShopPackage::kPeriodBonusRewardCountFieldNumber;
#endif  // !_MSC_VER

mdShopPackage::mdShopPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopPackage)
}

void mdShopPackage::InitAsDefaultInstance() {
}

mdShopPackage::mdShopPackage(const mdShopPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopPackage)
}

void mdShopPackage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  category_ = 0;
  tab_type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pay_period_ = 0;
  period_bonus_reward_id_ = 0;
  period_bonus_reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopPackage::~mdShopPackage() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopPackage)
  SharedDtor();
}

void mdShopPackage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void mdShopPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopPackage_descriptor_;
}

const mdShopPackage& mdShopPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopPackage* mdShopPackage::default_instance_ = NULL;

mdShopPackage* mdShopPackage::New() const {
  return new mdShopPackage;
}

void mdShopPackage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopPackage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, category_);
    ZR_(tab_type_, period_bonus_reward_count_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // required int32 category = 2;
      case 2: {
        if (tag == 16) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tab_type;
        break;
      }

      // required int32 tab_type = 3;
      case 3: {
        if (tag == 24) {
         parse_tab_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_type_)));
          set_has_tab_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pay_period;
        break;
      }

      // required int32 pay_period = 5;
      case 5: {
        if (tag == 40) {
         parse_pay_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pay_period_)));
          set_has_pay_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_period_bonus_reward_id;
        break;
      }

      // required int32 period_bonus_reward_id = 6;
      case 6: {
        if (tag == 48) {
         parse_period_bonus_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_bonus_reward_id_)));
          set_has_period_bonus_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_period_bonus_reward_count;
        break;
      }

      // required int32 period_bonus_reward_count = 7;
      case 7: {
        if (tag == 56) {
         parse_period_bonus_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_bonus_reward_count_)));
          set_has_period_bonus_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopPackage)
  return false;
#undef DO_
}

void mdShopPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopPackage)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->category(), output);
  }

  // required int32 tab_type = 3;
  if (has_tab_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tab_type(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // required int32 pay_period = 5;
  if (has_pay_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pay_period(), output);
  }

  // required int32 period_bonus_reward_id = 6;
  if (has_period_bonus_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->period_bonus_reward_id(), output);
  }

  // required int32 period_bonus_reward_count = 7;
  if (has_period_bonus_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->period_bonus_reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopPackage)
}

::google::protobuf::uint8* mdShopPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopPackage)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->category(), target);
  }

  // required int32 tab_type = 3;
  if (has_tab_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tab_type(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // required int32 pay_period = 5;
  if (has_pay_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pay_period(), target);
  }

  // required int32 period_bonus_reward_id = 6;
  if (has_period_bonus_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->period_bonus_reward_id(), target);
  }

  // required int32 period_bonus_reward_count = 7;
  if (has_period_bonus_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->period_bonus_reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopPackage)
  return target;
}

int mdShopPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->category());
    }

    // required int32 tab_type = 3;
    if (has_tab_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_type());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 pay_period = 5;
    if (has_pay_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pay_period());
    }

    // required int32 period_bonus_reward_id = 6;
    if (has_period_bonus_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period_bonus_reward_id());
    }

    // required int32 period_bonus_reward_count = 7;
    if (has_period_bonus_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period_bonus_reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopPackage::MergeFrom(const mdShopPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_tab_type()) {
      set_tab_type(from.tab_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pay_period()) {
      set_pay_period(from.pay_period());
    }
    if (from.has_period_bonus_reward_id()) {
      set_period_bonus_reward_id(from.period_bonus_reward_id());
    }
    if (from.has_period_bonus_reward_count()) {
      set_period_bonus_reward_count(from.period_bonus_reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopPackage::CopyFrom(const mdShopPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdShopPackage::Swap(mdShopPackage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(category_, other->category_);
    std::swap(tab_type_, other->tab_type_);
    std::swap(name_, other->name_);
    std::swap(pay_period_, other->pay_period_);
    std::swap(period_bonus_reward_id_, other->period_bonus_reward_id_);
    std::swap(period_bonus_reward_count_, other->period_bonus_reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopPackage_descriptor_;
  metadata.reflection = mdShopPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopPackageProduct::kPackageIdFieldNumber;
const int mdShopPackageProduct::kIndexFieldNumber;
const int mdShopPackageProduct::kProductFieldNumber;
#endif  // !_MSC_VER

mdShopPackageProduct::mdShopPackageProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopPackageProduct)
}

void mdShopPackageProduct::InitAsDefaultInstance() {
  product_ = const_cast< ::b2::protocol::commondata::ShopProduct*>(&::b2::protocol::commondata::ShopProduct::default_instance());
}

mdShopPackageProduct::mdShopPackageProduct(const mdShopPackageProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopPackageProduct)
}

void mdShopPackageProduct::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0;
  index_ = 0;
  product_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopPackageProduct::~mdShopPackageProduct() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopPackageProduct)
  SharedDtor();
}

void mdShopPackageProduct::SharedDtor() {
  if (this != default_instance_) {
    delete product_;
  }
}

void mdShopPackageProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopPackageProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopPackageProduct_descriptor_;
}

const mdShopPackageProduct& mdShopPackageProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopPackageProduct* mdShopPackageProduct::default_instance_ = NULL;

mdShopPackageProduct* mdShopPackageProduct::New() const {
  return new mdShopPackageProduct;
}

void mdShopPackageProduct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopPackageProduct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(package_id_, index_);
    if (has_product()) {
      if (product_ != NULL) product_->::b2::protocol::commondata::ShopProduct::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopPackageProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopPackageProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_product;
        break;
      }

      // required .b2.protocol.commondata.ShopProduct product = 3;
      case 3: {
        if (tag == 26) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopPackageProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopPackageProduct)
  return false;
#undef DO_
}

void mdShopPackageProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopPackageProduct)
  // required int32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required .b2.protocol.commondata.ShopProduct product = 3;
  if (has_product()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->product(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopPackageProduct)
}

::google::protobuf::uint8* mdShopPackageProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopPackageProduct)
  // required int32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required .b2.protocol.commondata.ShopProduct product = 3;
  if (has_product()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->product(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopPackageProduct)
  return target;
}

int mdShopPackageProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .b2.protocol.commondata.ShopProduct product = 3;
    if (has_product()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->product());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopPackageProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopPackageProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopPackageProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopPackageProduct::MergeFrom(const mdShopPackageProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_product()) {
      mutable_product()->::b2::protocol::commondata::ShopProduct::MergeFrom(from.product());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopPackageProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopPackageProduct::CopyFrom(const mdShopPackageProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopPackageProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_product()) {
    if (!this->product().IsInitialized()) return false;
  }
  return true;
}

void mdShopPackageProduct::Swap(mdShopPackageProduct* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(index_, other->index_);
    std::swap(product_, other->product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopPackageProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopPackageProduct_descriptor_;
  metadata.reflection = mdShopPackageProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopMileageReward::kMileageTypeFieldNumber;
const int mdShopMileageReward::kIndexFieldNumber;
const int mdShopMileageReward::kMileageFieldNumber;
const int mdShopMileageReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdShopMileageReward::mdShopMileageReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopMileageReward)
}

void mdShopMileageReward::InitAsDefaultInstance() {
}

mdShopMileageReward::mdShopMileageReward(const mdShopMileageReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopMileageReward)
}

void mdShopMileageReward::SharedCtor() {
  _cached_size_ = 0;
  mileage_type_ = 1;
  index_ = 0;
  mileage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopMileageReward::~mdShopMileageReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopMileageReward)
  SharedDtor();
}

void mdShopMileageReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopMileageReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopMileageReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopMileageReward_descriptor_;
}

const mdShopMileageReward& mdShopMileageReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopMileageReward* mdShopMileageReward::default_instance_ = NULL;

mdShopMileageReward* mdShopMileageReward::New() const {
  return new mdShopMileageReward;
}

void mdShopMileageReward::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    mileage_type_ = 1;
    index_ = 0;
    mileage_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopMileageReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopMileageReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.MileageType mileage_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_MileageType_IsValid(value)) {
            set_mileage_type(static_cast< ::b2::protocol::commondata::Shop_MileageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mileage;
        break;
      }

      // required int32 mileage = 3;
      case 3: {
        if (tag == 24) {
         parse_mileage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mileage_)));
          set_has_mileage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopMileageReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopMileageReward)
  return false;
#undef DO_
}

void mdShopMileageReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopMileageReward)
  // required .b2.protocol.commondata.Shop.MileageType mileage_type = 1;
  if (has_mileage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mileage_type(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 mileage = 3;
  if (has_mileage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mileage(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopMileageReward)
}

::google::protobuf::uint8* mdShopMileageReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopMileageReward)
  // required .b2.protocol.commondata.Shop.MileageType mileage_type = 1;
  if (has_mileage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mileage_type(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 mileage = 3;
  if (has_mileage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mileage(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopMileageReward)
  return target;
}

int mdShopMileageReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.MileageType mileage_type = 1;
    if (has_mileage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mileage_type());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 mileage = 3;
    if (has_mileage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mileage());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopMileageReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopMileageReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopMileageReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopMileageReward::MergeFrom(const mdShopMileageReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mileage_type()) {
      set_mileage_type(from.mileage_type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_mileage()) {
      set_mileage(from.mileage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopMileageReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopMileageReward::CopyFrom(const mdShopMileageReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopMileageReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdShopMileageReward::Swap(mdShopMileageReward* other) {
  if (other != this) {
    std::swap(mileage_type_, other->mileage_type_);
    std::swap(index_, other->index_);
    std::swap(mileage_, other->mileage_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopMileageReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopMileageReward_descriptor_;
  metadata.reflection = mdShopMileageReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMarketProduct::kShopProductIdFieldNumber;
const int mdMarketProduct::kMarketProductIdFieldNumber;
const int mdMarketProduct::kCurrencyCodeFieldNumber;
const int mdMarketProduct::kPriceFieldNumber;
#endif  // !_MSC_VER

mdMarketProduct::mdMarketProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMarketProduct)
}

void mdMarketProduct::InitAsDefaultInstance() {
}

mdMarketProduct::mdMarketProduct(const mdMarketProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMarketProduct)
}

void mdMarketProduct::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shop_product_id_ = 0;
  market_product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  currency_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMarketProduct::~mdMarketProduct() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMarketProduct)
  SharedDtor();
}

void mdMarketProduct::SharedDtor() {
  if (market_product_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete market_product_id_;
  }
  if (currency_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete currency_code_;
  }
  if (this != default_instance_) {
  }
}

void mdMarketProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMarketProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMarketProduct_descriptor_;
}

const mdMarketProduct& mdMarketProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMarketProduct* mdMarketProduct::default_instance_ = NULL;

mdMarketProduct* mdMarketProduct::New() const {
  return new mdMarketProduct;
}

void mdMarketProduct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMarketProduct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(shop_product_id_, price_);
    if (has_market_product_id()) {
      if (market_product_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        market_product_id_->clear();
      }
    }
    if (has_currency_code()) {
      if (currency_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        currency_code_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMarketProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMarketProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shop_product_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_product_id_)));
          set_has_shop_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_market_product_id;
        break;
      }

      // required string market_product_id = 2;
      case 2: {
        if (tag == 18) {
         parse_market_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->market_product_id().data(), this->market_product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "market_product_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_currency_code;
        break;
      }

      // required string currency_code = 3;
      case 3: {
        if (tag == 26) {
         parse_currency_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_currency_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->currency_code().data(), this->currency_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "currency_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_price;
        break;
      }

      // required float price = 12;
      case 12: {
        if (tag == 101) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMarketProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMarketProduct)
  return false;
#undef DO_
}

void mdMarketProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMarketProduct)
  // required int32 shop_product_id = 1;
  if (has_shop_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shop_product_id(), output);
  }

  // required string market_product_id = 2;
  if (has_market_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->market_product_id().data(), this->market_product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "market_product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->market_product_id(), output);
  }

  // required string currency_code = 3;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->currency_code(), output);
  }

  // required float price = 12;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMarketProduct)
}

::google::protobuf::uint8* mdMarketProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMarketProduct)
  // required int32 shop_product_id = 1;
  if (has_shop_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shop_product_id(), target);
  }

  // required string market_product_id = 2;
  if (has_market_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->market_product_id().data(), this->market_product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "market_product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->market_product_id(), target);
  }

  // required string currency_code = 3;
  if (has_currency_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->currency_code().data(), this->currency_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "currency_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->currency_code(), target);
  }

  // required float price = 12;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMarketProduct)
  return target;
}

int mdMarketProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 shop_product_id = 1;
    if (has_shop_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_product_id());
    }

    // required string market_product_id = 2;
    if (has_market_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_product_id());
    }

    // required string currency_code = 3;
    if (has_currency_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->currency_code());
    }

    // required float price = 12;
    if (has_price()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMarketProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMarketProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMarketProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMarketProduct::MergeFrom(const mdMarketProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_product_id()) {
      set_shop_product_id(from.shop_product_id());
    }
    if (from.has_market_product_id()) {
      set_market_product_id(from.market_product_id());
    }
    if (from.has_currency_code()) {
      set_currency_code(from.currency_code());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMarketProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMarketProduct::CopyFrom(const mdMarketProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMarketProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdMarketProduct::Swap(mdMarketProduct* other) {
  if (other != this) {
    std::swap(shop_product_id_, other->shop_product_id_);
    std::swap(market_product_id_, other->market_product_id_);
    std::swap(currency_code_, other->currency_code_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMarketProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMarketProduct_descriptor_;
  metadata.reflection = mdMarketProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDailyAttendanceInfo::kAttendanceTypeFieldNumber;
const int mdDailyAttendanceInfo::kDayFieldNumber;
const int mdDailyAttendanceInfo::kRewardIdFieldNumber;
const int mdDailyAttendanceInfo::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdDailyAttendanceInfo::mdDailyAttendanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDailyAttendanceInfo)
}

void mdDailyAttendanceInfo::InitAsDefaultInstance() {
}

mdDailyAttendanceInfo::mdDailyAttendanceInfo(const mdDailyAttendanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDailyAttendanceInfo)
}

void mdDailyAttendanceInfo::SharedCtor() {
  _cached_size_ = 0;
  attendance_type_ = 1;
  day_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDailyAttendanceInfo::~mdDailyAttendanceInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDailyAttendanceInfo)
  SharedDtor();
}

void mdDailyAttendanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDailyAttendanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDailyAttendanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDailyAttendanceInfo_descriptor_;
}

const mdDailyAttendanceInfo& mdDailyAttendanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDailyAttendanceInfo* mdDailyAttendanceInfo::default_instance_ = NULL;

mdDailyAttendanceInfo* mdDailyAttendanceInfo::New() const {
  return new mdDailyAttendanceInfo;
}

void mdDailyAttendanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDailyAttendanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(day_, reward_count_);
    attendance_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDailyAttendanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDailyAttendanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.DailyAttendanceType attendance_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DailyAttendanceType_IsValid(value)) {
            set_attendance_type(static_cast< ::b2::protocol::commondata::DailyAttendanceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // required int32 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDailyAttendanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDailyAttendanceInfo)
  return false;
#undef DO_
}

void mdDailyAttendanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDailyAttendanceInfo)
  // required .b2.protocol.commondata.DailyAttendanceType attendance_type = 1;
  if (has_attendance_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attendance_type(), output);
  }

  // required int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDailyAttendanceInfo)
}

::google::protobuf::uint8* mdDailyAttendanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDailyAttendanceInfo)
  // required .b2.protocol.commondata.DailyAttendanceType attendance_type = 1;
  if (has_attendance_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attendance_type(), target);
  }

  // required int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDailyAttendanceInfo)
  return target;
}

int mdDailyAttendanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.DailyAttendanceType attendance_type = 1;
    if (has_attendance_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attendance_type());
    }

    // required int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 4;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDailyAttendanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDailyAttendanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDailyAttendanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDailyAttendanceInfo::MergeFrom(const mdDailyAttendanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attendance_type()) {
      set_attendance_type(from.attendance_type());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDailyAttendanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDailyAttendanceInfo::CopyFrom(const mdDailyAttendanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDailyAttendanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdDailyAttendanceInfo::Swap(mdDailyAttendanceInfo* other) {
  if (other != this) {
    std::swap(attendance_type_, other->attendance_type_);
    std::swap(day_, other->day_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDailyAttendanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDailyAttendanceInfo_descriptor_;
  metadata.reflection = mdDailyAttendanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRaidInfo::kRaidTypeFieldNumber;
const int mdRaidInfo::kStepFieldNumber;
const int mdRaidInfo::kDifficultyScaleFieldNumber;
const int mdRaidInfo::kRecommendPowerFieldNumber;
const int mdRaidInfo::kRecommendAttackFieldNumber;
const int mdRaidInfo::kRecommendDefenseFieldNumber;
const int mdRaidInfo::kRewardIdFieldNumber;
const int mdRaidInfo::kRewardMinCountFieldNumber;
const int mdRaidInfo::kRewardMaxCountFieldNumber;
const int mdRaidInfo::kMainRewardIdFieldNumber;
const int mdRaidInfo::kMainRewardMinCountFieldNumber;
const int mdRaidInfo::kMainRewardMaxCountFieldNumber;
const int mdRaidInfo::kRewardItemMinGradeFieldNumber;
const int mdRaidInfo::kRewardItemMaxGradeFieldNumber;
#endif  // !_MSC_VER

mdRaidInfo::mdRaidInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRaidInfo)
}

void mdRaidInfo::InitAsDefaultInstance() {
}

mdRaidInfo::mdRaidInfo(const mdRaidInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRaidInfo)
}

void mdRaidInfo::SharedCtor() {
  _cached_size_ = 0;
  raid_type_ = 0;
  step_ = 0;
  difficulty_scale_ = 0;
  recommend_power_ = 0;
  recommend_attack_ = 0;
  recommend_defense_ = 0;
  reward_id_ = 0;
  reward_min_count_ = 0;
  reward_max_count_ = 0;
  main_reward_id_ = 0;
  main_reward_min_count_ = 0;
  main_reward_max_count_ = 0;
  reward_item_min_grade_ = 0;
  reward_item_max_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRaidInfo::~mdRaidInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRaidInfo)
  SharedDtor();
}

void mdRaidInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRaidInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRaidInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRaidInfo_descriptor_;
}

const mdRaidInfo& mdRaidInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRaidInfo* mdRaidInfo::default_instance_ = NULL;

mdRaidInfo* mdRaidInfo::New() const {
  return new mdRaidInfo;
}

void mdRaidInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRaidInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(raid_type_, reward_min_count_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(reward_max_count_, reward_item_max_grade_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRaidInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRaidInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 raid_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // required int32 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty_scale;
        break;
      }

      // required int32 difficulty_scale = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_scale_)));
          set_has_difficulty_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recommend_power;
        break;
      }

      // required int32 recommend_power = 4;
      case 4: {
        if (tag == 32) {
         parse_recommend_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_power_)));
          set_has_recommend_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_recommend_attack;
        break;
      }

      // required int32 recommend_attack = 5;
      case 5: {
        if (tag == 40) {
         parse_recommend_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_attack_)));
          set_has_recommend_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_recommend_defense;
        break;
      }

      // required int32 recommend_defense = 6;
      case 6: {
        if (tag == 48) {
         parse_recommend_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_defense_)));
          set_has_recommend_defense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 7;
      case 7: {
        if (tag == 56) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reward_min_count;
        break;
      }

      // required int32 reward_min_count = 8;
      case 8: {
        if (tag == 64) {
         parse_reward_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_min_count_)));
          set_has_reward_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_max_count;
        break;
      }

      // required int32 reward_max_count = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_max_count_)));
          set_has_reward_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_main_reward_id;
        break;
      }

      // required int32 main_reward_id = 10;
      case 10: {
        if (tag == 80) {
         parse_main_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_reward_id_)));
          set_has_main_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_main_reward_min_count;
        break;
      }

      // required int32 main_reward_min_count = 11;
      case 11: {
        if (tag == 88) {
         parse_main_reward_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_reward_min_count_)));
          set_has_main_reward_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_main_reward_max_count;
        break;
      }

      // required int32 main_reward_max_count = 12;
      case 12: {
        if (tag == 96) {
         parse_main_reward_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_reward_max_count_)));
          set_has_main_reward_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_reward_item_min_grade;
        break;
      }

      // required int32 reward_item_min_grade = 20;
      case 20: {
        if (tag == 160) {
         parse_reward_item_min_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_item_min_grade_)));
          set_has_reward_item_min_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_reward_item_max_grade;
        break;
      }

      // required int32 reward_item_max_grade = 21;
      case 21: {
        if (tag == 168) {
         parse_reward_item_max_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_item_max_grade_)));
          set_has_reward_item_max_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRaidInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRaidInfo)
  return false;
#undef DO_
}

void mdRaidInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRaidInfo)
  // required int32 raid_type = 1;
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->raid_type(), output);
  }

  // required int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  // required int32 difficulty_scale = 3;
  if (has_difficulty_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->difficulty_scale(), output);
  }

  // required int32 recommend_power = 4;
  if (has_recommend_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recommend_power(), output);
  }

  // required int32 recommend_attack = 5;
  if (has_recommend_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recommend_attack(), output);
  }

  // required int32 recommend_defense = 6;
  if (has_recommend_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recommend_defense(), output);
  }

  // required int32 reward_id = 7;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_id(), output);
  }

  // required int32 reward_min_count = 8;
  if (has_reward_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_min_count(), output);
  }

  // required int32 reward_max_count = 9;
  if (has_reward_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_max_count(), output);
  }

  // required int32 main_reward_id = 10;
  if (has_main_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->main_reward_id(), output);
  }

  // required int32 main_reward_min_count = 11;
  if (has_main_reward_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->main_reward_min_count(), output);
  }

  // required int32 main_reward_max_count = 12;
  if (has_main_reward_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->main_reward_max_count(), output);
  }

  // required int32 reward_item_min_grade = 20;
  if (has_reward_item_min_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->reward_item_min_grade(), output);
  }

  // required int32 reward_item_max_grade = 21;
  if (has_reward_item_max_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->reward_item_max_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRaidInfo)
}

::google::protobuf::uint8* mdRaidInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRaidInfo)
  // required int32 raid_type = 1;
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->raid_type(), target);
  }

  // required int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  // required int32 difficulty_scale = 3;
  if (has_difficulty_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->difficulty_scale(), target);
  }

  // required int32 recommend_power = 4;
  if (has_recommend_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recommend_power(), target);
  }

  // required int32 recommend_attack = 5;
  if (has_recommend_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recommend_attack(), target);
  }

  // required int32 recommend_defense = 6;
  if (has_recommend_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->recommend_defense(), target);
  }

  // required int32 reward_id = 7;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_id(), target);
  }

  // required int32 reward_min_count = 8;
  if (has_reward_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_min_count(), target);
  }

  // required int32 reward_max_count = 9;
  if (has_reward_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_max_count(), target);
  }

  // required int32 main_reward_id = 10;
  if (has_main_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->main_reward_id(), target);
  }

  // required int32 main_reward_min_count = 11;
  if (has_main_reward_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->main_reward_min_count(), target);
  }

  // required int32 main_reward_max_count = 12;
  if (has_main_reward_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->main_reward_max_count(), target);
  }

  // required int32 reward_item_min_grade = 20;
  if (has_reward_item_min_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->reward_item_min_grade(), target);
  }

  // required int32 reward_item_max_grade = 21;
  if (has_reward_item_max_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->reward_item_max_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRaidInfo)
  return target;
}

int mdRaidInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 raid_type = 1;
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_type());
    }

    // required int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required int32 difficulty_scale = 3;
    if (has_difficulty_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_scale());
    }

    // required int32 recommend_power = 4;
    if (has_recommend_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_power());
    }

    // required int32 recommend_attack = 5;
    if (has_recommend_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_attack());
    }

    // required int32 recommend_defense = 6;
    if (has_recommend_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_defense());
    }

    // required int32 reward_id = 7;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_min_count = 8;
    if (has_reward_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_min_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_max_count = 9;
    if (has_reward_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_max_count());
    }

    // required int32 main_reward_id = 10;
    if (has_main_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_reward_id());
    }

    // required int32 main_reward_min_count = 11;
    if (has_main_reward_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_reward_min_count());
    }

    // required int32 main_reward_max_count = 12;
    if (has_main_reward_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_reward_max_count());
    }

    // required int32 reward_item_min_grade = 20;
    if (has_reward_item_min_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_item_min_grade());
    }

    // required int32 reward_item_max_grade = 21;
    if (has_reward_item_max_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_item_max_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRaidInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRaidInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRaidInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRaidInfo::MergeFrom(const mdRaidInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_difficulty_scale()) {
      set_difficulty_scale(from.difficulty_scale());
    }
    if (from.has_recommend_power()) {
      set_recommend_power(from.recommend_power());
    }
    if (from.has_recommend_attack()) {
      set_recommend_attack(from.recommend_attack());
    }
    if (from.has_recommend_defense()) {
      set_recommend_defense(from.recommend_defense());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_min_count()) {
      set_reward_min_count(from.reward_min_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_max_count()) {
      set_reward_max_count(from.reward_max_count());
    }
    if (from.has_main_reward_id()) {
      set_main_reward_id(from.main_reward_id());
    }
    if (from.has_main_reward_min_count()) {
      set_main_reward_min_count(from.main_reward_min_count());
    }
    if (from.has_main_reward_max_count()) {
      set_main_reward_max_count(from.main_reward_max_count());
    }
    if (from.has_reward_item_min_grade()) {
      set_reward_item_min_grade(from.reward_item_min_grade());
    }
    if (from.has_reward_item_max_grade()) {
      set_reward_item_max_grade(from.reward_item_max_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRaidInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRaidInfo::CopyFrom(const mdRaidInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRaidInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void mdRaidInfo::Swap(mdRaidInfo* other) {
  if (other != this) {
    std::swap(raid_type_, other->raid_type_);
    std::swap(step_, other->step_);
    std::swap(difficulty_scale_, other->difficulty_scale_);
    std::swap(recommend_power_, other->recommend_power_);
    std::swap(recommend_attack_, other->recommend_attack_);
    std::swap(recommend_defense_, other->recommend_defense_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_min_count_, other->reward_min_count_);
    std::swap(reward_max_count_, other->reward_max_count_);
    std::swap(main_reward_id_, other->main_reward_id_);
    std::swap(main_reward_min_count_, other->main_reward_min_count_);
    std::swap(main_reward_max_count_, other->main_reward_max_count_);
    std::swap(reward_item_min_grade_, other->reward_item_min_grade_);
    std::swap(reward_item_max_grade_, other->reward_item_max_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRaidInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRaidInfo_descriptor_;
  metadata.reflection = mdRaidInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMonsterInfo::kIdFieldNumber;
const int mdMonsterInfo::kNameFieldNumber;
const int mdMonsterInfo::kSymbolFieldNumber;
const int mdMonsterInfo::kGradeFieldNumber;
const int mdMonsterInfo::kTypeFieldNumber;
const int mdMonsterInfo::kDescFieldNumber;
const int mdMonsterInfo::kHpScaleFieldNumber;
const int mdMonsterInfo::kAttackDefenseLevelScaleFieldNumber;
const int mdMonsterInfo::kMaxArmorOverrideFieldNumber;
#endif  // !_MSC_VER

mdMonsterInfo::mdMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMonsterInfo)
}

void mdMonsterInfo::InitAsDefaultInstance() {
}

mdMonsterInfo::mdMonsterInfo(const mdMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMonsterInfo)
}

void mdMonsterInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hp_scale_ = 0;
  attack_defense_level_scale_ = 0;
  max_armor_override_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMonsterInfo::~mdMonsterInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMonsterInfo)
  SharedDtor();
}

void mdMonsterInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (grade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete grade_;
  }
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void mdMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMonsterInfo_descriptor_;
}

const mdMonsterInfo& mdMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMonsterInfo* mdMonsterInfo::default_instance_ = NULL;

mdMonsterInfo* mdMonsterInfo::New() const {
  return new mdMonsterInfo;
}

void mdMonsterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMonsterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, hp_scale_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
    if (has_grade()) {
      if (grade_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        grade_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        desc_->clear();
      }
    }
    attack_defense_level_scale_ = 0;
  }
  max_armor_override_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_symbol;
        break;
      }

      // required string symbol = 3;
      case 3: {
        if (tag == 26) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_grade;
        break;
      }

      // required string grade = 4;
      case 4: {
        if (tag == 34) {
         parse_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->grade().data(), this->grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "grade");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // required string type = 5;
      case 5: {
        if (tag == 42) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // required string desc = 6;
      case 6: {
        if (tag == 50) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hp_scale;
        break;
      }

      // required int32 hp_scale = 7;
      case 7: {
        if (tag == 56) {
         parse_hp_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_scale_)));
          set_has_hp_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_attack_defense_level_scale;
        break;
      }

      // required int32 attack_defense_level_scale = 8;
      case 8: {
        if (tag == 64) {
         parse_attack_defense_level_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_defense_level_scale_)));
          set_has_attack_defense_level_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_armor_override;
        break;
      }

      // required int32 max_armor_override = 9;
      case 9: {
        if (tag == 72) {
         parse_max_armor_override:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_armor_override_)));
          set_has_max_armor_override();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMonsterInfo)
  return false;
#undef DO_
}

void mdMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMonsterInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbol(), output);
  }

  // required string grade = 4;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grade");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->grade(), output);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // required string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->desc(), output);
  }

  // required int32 hp_scale = 7;
  if (has_hp_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hp_scale(), output);
  }

  // required int32 attack_defense_level_scale = 8;
  if (has_attack_defense_level_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->attack_defense_level_scale(), output);
  }

  // required int32 max_armor_override = 9;
  if (has_max_armor_override()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_armor_override(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMonsterInfo)
}

::google::protobuf::uint8* mdMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMonsterInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string symbol = 3;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbol(), target);
  }

  // required string grade = 4;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->grade().data(), this->grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "grade");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->grade(), target);
  }

  // required string type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // required string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }

  // required int32 hp_scale = 7;
  if (has_hp_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hp_scale(), target);
  }

  // required int32 attack_defense_level_scale = 8;
  if (has_attack_defense_level_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->attack_defense_level_scale(), target);
  }

  // required int32 max_armor_override = 9;
  if (has_max_armor_override()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_armor_override(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMonsterInfo)
  return target;
}

int mdMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string symbol = 3;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // required string grade = 4;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grade());
    }

    // required string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // required string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required int32 hp_scale = 7;
    if (has_hp_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp_scale());
    }

    // required int32 attack_defense_level_scale = 8;
    if (has_attack_defense_level_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_defense_level_scale());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 max_armor_override = 9;
    if (has_max_armor_override()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_armor_override());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMonsterInfo::MergeFrom(const mdMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_hp_scale()) {
      set_hp_scale(from.hp_scale());
    }
    if (from.has_attack_defense_level_scale()) {
      set_attack_defense_level_scale(from.attack_defense_level_scale());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_armor_override()) {
      set_max_armor_override(from.max_armor_override());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMonsterInfo::CopyFrom(const mdMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdMonsterInfo::Swap(mdMonsterInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(symbol_, other->symbol_);
    std::swap(grade_, other->grade_);
    std::swap(type_, other->type_);
    std::swap(desc_, other->desc_);
    std::swap(hp_scale_, other->hp_scale_);
    std::swap(attack_defense_level_scale_, other->attack_defense_level_scale_);
    std::swap(max_armor_override_, other->max_armor_override_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMonsterInfo_descriptor_;
  metadata.reflection = mdMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGeneralLottery::kIdFieldNumber;
const int mdGeneralLottery::kGradeFieldNumber;
const int mdGeneralLottery::kCharacterTypeFieldNumber;
const int mdGeneralLottery::kEquipCategoryFieldNumber;
#endif  // !_MSC_VER

mdGeneralLottery::mdGeneralLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGeneralLottery)
}

void mdGeneralLottery::InitAsDefaultInstance() {
}

mdGeneralLottery::mdGeneralLottery(const mdGeneralLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGeneralLottery)
}

void mdGeneralLottery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  grade_ = 1;
  character_type_ = 0;
  equip_category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGeneralLottery::~mdGeneralLottery() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGeneralLottery)
  SharedDtor();
}

void mdGeneralLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGeneralLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGeneralLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGeneralLottery_descriptor_;
}

const mdGeneralLottery& mdGeneralLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGeneralLottery* mdGeneralLottery::default_instance_ = NULL;

mdGeneralLottery* mdGeneralLottery::New() const {
  return new mdGeneralLottery;
}

void mdGeneralLottery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGeneralLottery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(character_type_, equip_category_);
    id_ = 0;
    grade_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGeneralLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGeneralLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required .b2.protocol.commondata.LotteryGrade grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::LotteryGrade_IsValid(value)) {
            set_grade(static_cast< ::b2::protocol::commondata::LotteryGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Item_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equip_category;
        break;
      }

      // required .b2.protocol.commondata.EquipCategory equip_category = 4;
      case 4: {
        if (tag == 32) {
         parse_equip_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGeneralLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGeneralLottery)
  return false;
#undef DO_
}

void mdGeneralLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGeneralLottery)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.LotteryGrade grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->grade(), output);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 4;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->equip_category(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGeneralLottery)
}

::google::protobuf::uint8* mdGeneralLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGeneralLottery)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.LotteryGrade grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->grade(), target);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 4;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->equip_category(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGeneralLottery)
  return target;
}

int mdGeneralLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.LotteryGrade grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grade());
    }

    // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.EquipCategory equip_category = 4;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGeneralLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGeneralLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGeneralLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGeneralLottery::MergeFrom(const mdGeneralLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGeneralLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGeneralLottery::CopyFrom(const mdGeneralLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGeneralLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdGeneralLottery::Swap(mdGeneralLottery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(grade_, other->grade_);
    std::swap(character_type_, other->character_type_);
    std::swap(equip_category_, other->equip_category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGeneralLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGeneralLottery_descriptor_;
  metadata.reflection = mdGeneralLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFixedGradeLottery::kIdFieldNumber;
const int mdFixedGradeLottery::kCharacterTypeFieldNumber;
const int mdFixedGradeLottery::kEquipCategoryFieldNumber;
const int mdFixedGradeLottery::kItemGradeFieldNumber;
#endif  // !_MSC_VER

mdFixedGradeLottery::mdFixedGradeLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFixedGradeLottery)
}

void mdFixedGradeLottery::InitAsDefaultInstance() {
}

mdFixedGradeLottery::mdFixedGradeLottery(const mdFixedGradeLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFixedGradeLottery)
}

void mdFixedGradeLottery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  character_type_ = 0;
  equip_category_ = 0;
  item_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFixedGradeLottery::~mdFixedGradeLottery() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFixedGradeLottery)
  SharedDtor();
}

void mdFixedGradeLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFixedGradeLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFixedGradeLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFixedGradeLottery_descriptor_;
}

const mdFixedGradeLottery& mdFixedGradeLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFixedGradeLottery* mdFixedGradeLottery::default_instance_ = NULL;

mdFixedGradeLottery* mdFixedGradeLottery::New() const {
  return new mdFixedGradeLottery;
}

void mdFixedGradeLottery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdFixedGradeLottery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, item_grade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFixedGradeLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFixedGradeLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Item_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equip_category;
        break;
      }

      // required .b2.protocol.commondata.EquipCategory equip_category = 3;
      case 3: {
        if (tag == 24) {
         parse_equip_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_grade;
        break;
      }

      // required int32 item_grade = 4;
      case 4: {
        if (tag == 32) {
         parse_item_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_grade_)));
          set_has_item_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFixedGradeLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFixedGradeLottery)
  return false;
#undef DO_
}

void mdFixedGradeLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFixedGradeLottery)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 3;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->equip_category(), output);
  }

  // required int32 item_grade = 4;
  if (has_item_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFixedGradeLottery)
}

::google::protobuf::uint8* mdFixedGradeLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFixedGradeLottery)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 3;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->equip_category(), target);
  }

  // required int32 item_grade = 4;
  if (has_item_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFixedGradeLottery)
  return target;
}

int mdFixedGradeLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.EquipCategory equip_category = 3;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

    // required int32 item_grade = 4;
    if (has_item_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFixedGradeLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFixedGradeLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFixedGradeLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFixedGradeLottery::MergeFrom(const mdFixedGradeLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
    if (from.has_item_grade()) {
      set_item_grade(from.item_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFixedGradeLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFixedGradeLottery::CopyFrom(const mdFixedGradeLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFixedGradeLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdFixedGradeLottery::Swap(mdFixedGradeLottery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(character_type_, other->character_type_);
    std::swap(equip_category_, other->equip_category_);
    std::swap(item_grade_, other->item_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFixedGradeLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFixedGradeLottery_descriptor_;
  metadata.reflection = mdFixedGradeLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdPrefixSelectiveLottery::kIdFieldNumber;
const int mdPrefixSelectiveLottery::kCharacterTypeFieldNumber;
const int mdPrefixSelectiveLottery::kGroupIdFieldNumber;
const int mdPrefixSelectiveLottery::kEquipCategoryFieldNumber;
const int mdPrefixSelectiveLottery::kItemGradeFieldNumber;
const int mdPrefixSelectiveLottery::kSurpassLevelFieldNumber;
const int mdPrefixSelectiveLottery::kQualityFieldNumber;
#endif  // !_MSC_VER

mdPrefixSelectiveLottery::mdPrefixSelectiveLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdPrefixSelectiveLottery)
}

void mdPrefixSelectiveLottery::InitAsDefaultInstance() {
}

mdPrefixSelectiveLottery::mdPrefixSelectiveLottery(const mdPrefixSelectiveLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdPrefixSelectiveLottery)
}

void mdPrefixSelectiveLottery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  character_type_ = 0;
  group_id_ = 1;
  equip_category_ = 0;
  item_grade_ = 0;
  surpass_level_ = 0;
  quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdPrefixSelectiveLottery::~mdPrefixSelectiveLottery() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  SharedDtor();
}

void mdPrefixSelectiveLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdPrefixSelectiveLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdPrefixSelectiveLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdPrefixSelectiveLottery_descriptor_;
}

const mdPrefixSelectiveLottery& mdPrefixSelectiveLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdPrefixSelectiveLottery* mdPrefixSelectiveLottery::default_instance_ = NULL;

mdPrefixSelectiveLottery* mdPrefixSelectiveLottery::New() const {
  return new mdPrefixSelectiveLottery;
}

void mdPrefixSelectiveLottery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdPrefixSelectiveLottery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, character_type_);
    ZR_(equip_category_, quality_);
    group_id_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdPrefixSelectiveLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Item_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_group_id;
        break;
      }

      // required .b2.protocol.commondata.GroupPrefix group_id = 3;
      case 3: {
        if (tag == 24) {
         parse_group_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GroupPrefix_IsValid(value)) {
            set_group_id(static_cast< ::b2::protocol::commondata::GroupPrefix >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equip_category;
        break;
      }

      // required .b2.protocol.commondata.EquipCategory equip_category = 4;
      case 4: {
        if (tag == 32) {
         parse_equip_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_grade;
        break;
      }

      // required int32 item_grade = 5;
      case 5: {
        if (tag == 40) {
         parse_item_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_grade_)));
          set_has_item_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_surpass_level;
        break;
      }

      // required int32 surpass_level = 6;
      case 6: {
        if (tag == 48) {
         parse_surpass_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surpass_level_)));
          set_has_surpass_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // required int32 quality = 7;
      case 7: {
        if (tag == 56) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  return false;
#undef DO_
}

void mdPrefixSelectiveLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required .b2.protocol.commondata.GroupPrefix group_id = 3;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->group_id(), output);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 4;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->equip_category(), output);
  }

  // required int32 item_grade = 5;
  if (has_item_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->item_grade(), output);
  }

  // required int32 surpass_level = 6;
  if (has_surpass_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->surpass_level(), output);
  }

  // required int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdPrefixSelectiveLottery)
}

::google::protobuf::uint8* mdPrefixSelectiveLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required .b2.protocol.commondata.GroupPrefix group_id = 3;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->group_id(), target);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 4;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->equip_category(), target);
  }

  // required int32 item_grade = 5;
  if (has_item_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->item_grade(), target);
  }

  // required int32 surpass_level = 6;
  if (has_surpass_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->surpass_level(), target);
  }

  // required int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdPrefixSelectiveLottery)
  return target;
}

int mdPrefixSelectiveLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.GroupPrefix group_id = 3;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_id());
    }

    // required .b2.protocol.commondata.EquipCategory equip_category = 4;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

    // required int32 item_grade = 5;
    if (has_item_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_grade());
    }

    // required int32 surpass_level = 6;
    if (has_surpass_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surpass_level());
    }

    // required int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdPrefixSelectiveLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdPrefixSelectiveLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdPrefixSelectiveLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdPrefixSelectiveLottery::MergeFrom(const mdPrefixSelectiveLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
    if (from.has_item_grade()) {
      set_item_grade(from.item_grade());
    }
    if (from.has_surpass_level()) {
      set_surpass_level(from.surpass_level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdPrefixSelectiveLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdPrefixSelectiveLottery::CopyFrom(const mdPrefixSelectiveLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdPrefixSelectiveLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdPrefixSelectiveLottery::Swap(mdPrefixSelectiveLottery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(character_type_, other->character_type_);
    std::swap(group_id_, other->group_id_);
    std::swap(equip_category_, other->equip_category_);
    std::swap(item_grade_, other->item_grade_);
    std::swap(surpass_level_, other->surpass_level_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdPrefixSelectiveLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdPrefixSelectiveLottery_descriptor_;
  metadata.reflection = mdPrefixSelectiveLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSelectiveLottery::kIdFieldNumber;
const int mdSelectiveLottery::kCharacterTypeFieldNumber;
const int mdSelectiveLottery::kEquipCategoryFieldNumber;
const int mdSelectiveLottery::kItemGradeFieldNumber;
#endif  // !_MSC_VER

mdSelectiveLottery::mdSelectiveLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSelectiveLottery)
}

void mdSelectiveLottery::InitAsDefaultInstance() {
}

mdSelectiveLottery::mdSelectiveLottery(const mdSelectiveLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSelectiveLottery)
}

void mdSelectiveLottery::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  character_type_ = 0;
  equip_category_ = 0;
  item_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSelectiveLottery::~mdSelectiveLottery() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSelectiveLottery)
  SharedDtor();
}

void mdSelectiveLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSelectiveLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSelectiveLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSelectiveLottery_descriptor_;
}

const mdSelectiveLottery& mdSelectiveLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSelectiveLottery* mdSelectiveLottery::default_instance_ = NULL;

mdSelectiveLottery* mdSelectiveLottery::New() const {
  return new mdSelectiveLottery;
}

void mdSelectiveLottery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSelectiveLottery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, item_grade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSelectiveLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSelectiveLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Item_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equip_category;
        break;
      }

      // required .b2.protocol.commondata.EquipCategory equip_category = 3;
      case 3: {
        if (tag == 24) {
         parse_equip_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_grade;
        break;
      }

      // required int32 item_grade = 4;
      case 4: {
        if (tag == 32) {
         parse_item_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_grade_)));
          set_has_item_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSelectiveLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSelectiveLottery)
  return false;
#undef DO_
}

void mdSelectiveLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSelectiveLottery)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 3;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->equip_category(), output);
  }

  // required int32 item_grade = 4;
  if (has_item_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSelectiveLottery)
}

::google::protobuf::uint8* mdSelectiveLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSelectiveLottery)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 3;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->equip_category(), target);
  }

  // required int32 item_grade = 4;
  if (has_item_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSelectiveLottery)
  return target;
}

int mdSelectiveLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.Item.CharacterType character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.EquipCategory equip_category = 3;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

    // required int32 item_grade = 4;
    if (has_item_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSelectiveLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSelectiveLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSelectiveLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSelectiveLottery::MergeFrom(const mdSelectiveLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
    if (from.has_item_grade()) {
      set_item_grade(from.item_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSelectiveLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSelectiveLottery::CopyFrom(const mdSelectiveLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSelectiveLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdSelectiveLottery::Swap(mdSelectiveLottery* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(character_type_, other->character_type_);
    std::swap(equip_category_, other->equip_category_);
    std::swap(item_grade_, other->item_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSelectiveLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSelectiveLottery_descriptor_;
  metadata.reflection = mdSelectiveLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAdditionalMatchCost::kCountFieldNumber;
const int mdAdditionalMatchCost::kCostFieldNumber;
#endif  // !_MSC_VER

mdAdditionalMatchCost::mdAdditionalMatchCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAdditionalMatchCost)
}

void mdAdditionalMatchCost::InitAsDefaultInstance() {
}

mdAdditionalMatchCost::mdAdditionalMatchCost(const mdAdditionalMatchCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAdditionalMatchCost)
}

void mdAdditionalMatchCost::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAdditionalMatchCost::~mdAdditionalMatchCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAdditionalMatchCost)
  SharedDtor();
}

void mdAdditionalMatchCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAdditionalMatchCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAdditionalMatchCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAdditionalMatchCost_descriptor_;
}

const mdAdditionalMatchCost& mdAdditionalMatchCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAdditionalMatchCost* mdAdditionalMatchCost::default_instance_ = NULL;

mdAdditionalMatchCost* mdAdditionalMatchCost::New() const {
  return new mdAdditionalMatchCost;
}

void mdAdditionalMatchCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAdditionalMatchCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(count_, cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAdditionalMatchCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAdditionalMatchCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // required int32 cost = 2;
      case 2: {
        if (tag == 16) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAdditionalMatchCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAdditionalMatchCost)
  return false;
#undef DO_
}

void mdAdditionalMatchCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAdditionalMatchCost)
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // required int32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAdditionalMatchCost)
}

::google::protobuf::uint8* mdAdditionalMatchCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAdditionalMatchCost)
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // required int32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAdditionalMatchCost)
  return target;
}

int mdAdditionalMatchCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAdditionalMatchCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAdditionalMatchCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAdditionalMatchCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAdditionalMatchCost::MergeFrom(const mdAdditionalMatchCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAdditionalMatchCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAdditionalMatchCost::CopyFrom(const mdAdditionalMatchCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAdditionalMatchCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdAdditionalMatchCost::Swap(mdAdditionalMatchCost* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAdditionalMatchCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAdditionalMatchCost_descriptor_;
  metadata.reflection = mdAdditionalMatchCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDuelRewardBoxInfo::kDuelModeFieldNumber;
const int mdDuelRewardBoxInfo::kGradeFieldNumber;
const int mdDuelRewardBoxInfo::kWinCountFieldNumber;
const int mdDuelRewardBoxInfo::kRewardGroupIdsFieldNumber;
#endif  // !_MSC_VER

mdDuelRewardBoxInfo::mdDuelRewardBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDuelRewardBoxInfo)
}

void mdDuelRewardBoxInfo::InitAsDefaultInstance() {
}

mdDuelRewardBoxInfo::mdDuelRewardBoxInfo(const mdDuelRewardBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDuelRewardBoxInfo)
}

void mdDuelRewardBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  duel_mode_ = 0;
  grade_ = 0;
  win_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDuelRewardBoxInfo::~mdDuelRewardBoxInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  SharedDtor();
}

void mdDuelRewardBoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDuelRewardBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDuelRewardBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDuelRewardBoxInfo_descriptor_;
}

const mdDuelRewardBoxInfo& mdDuelRewardBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDuelRewardBoxInfo* mdDuelRewardBoxInfo::default_instance_ = NULL;

mdDuelRewardBoxInfo* mdDuelRewardBoxInfo::New() const {
  return new mdDuelRewardBoxInfo;
}

void mdDuelRewardBoxInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDuelRewardBoxInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(duel_mode_, grade_);
    win_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reward_group_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDuelRewardBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.DuelMode duel_mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DuelMode_IsValid(value)) {
            set_duel_mode(static_cast< ::b2::protocol::commondata::DuelMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required .b2.protocol.commondata.RewardBoxGrade grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::RewardBoxGrade_IsValid(value)) {
            set_grade(static_cast< ::b2::protocol::commondata::RewardBoxGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win_count;
        break;
      }

      // required int32 win_count = 3;
      case 3: {
        if (tag == 24) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_group_ids;
        break;
      }

      // repeated int32 reward_group_ids = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_group_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_reward_group_ids())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_group_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_group_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  return false;
#undef DO_
}

void mdDuelRewardBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  // required .b2.protocol.commondata.DuelMode duel_mode = 1;
  if (has_duel_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->duel_mode(), output);
  }

  // required .b2.protocol.commondata.RewardBoxGrade grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->grade(), output);
  }

  // required int32 win_count = 3;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_count(), output);
  }

  // repeated int32 reward_group_ids = 10;
  for (int i = 0; i < this->reward_group_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->reward_group_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDuelRewardBoxInfo)
}

::google::protobuf::uint8* mdDuelRewardBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  // required .b2.protocol.commondata.DuelMode duel_mode = 1;
  if (has_duel_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->duel_mode(), target);
  }

  // required .b2.protocol.commondata.RewardBoxGrade grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->grade(), target);
  }

  // required int32 win_count = 3;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_count(), target);
  }

  // repeated int32 reward_group_ids = 10;
  for (int i = 0; i < this->reward_group_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->reward_group_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDuelRewardBoxInfo)
  return target;
}

int mdDuelRewardBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.DuelMode duel_mode = 1;
    if (has_duel_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->duel_mode());
    }

    // required .b2.protocol.commondata.RewardBoxGrade grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grade());
    }

    // required int32 win_count = 3;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

  }
  // repeated int32 reward_group_ids = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_group_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_group_ids(i));
    }
    total_size += 1 * this->reward_group_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDuelRewardBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDuelRewardBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDuelRewardBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDuelRewardBoxInfo::MergeFrom(const mdDuelRewardBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_group_ids_.MergeFrom(from.reward_group_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duel_mode()) {
      set_duel_mode(from.duel_mode());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDuelRewardBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDuelRewardBoxInfo::CopyFrom(const mdDuelRewardBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDuelRewardBoxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdDuelRewardBoxInfo::Swap(mdDuelRewardBoxInfo* other) {
  if (other != this) {
    std::swap(duel_mode_, other->duel_mode_);
    std::swap(grade_, other->grade_);
    std::swap(win_count_, other->win_count_);
    reward_group_ids_.Swap(&other->reward_group_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDuelRewardBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDuelRewardBoxInfo_descriptor_;
  metadata.reflection = mdDuelRewardBoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRandomRewardGroupInfo::kGroupIdFieldNumber;
const int mdRandomRewardGroupInfo::kIndexFieldNumber;
const int mdRandomRewardGroupInfo::kRewardIdFieldNumber;
const int mdRandomRewardGroupInfo::kRateFieldNumber;
const int mdRandomRewardGroupInfo::kMinCountFieldNumber;
const int mdRandomRewardGroupInfo::kMaxCountFieldNumber;
#endif  // !_MSC_VER

mdRandomRewardGroupInfo::mdRandomRewardGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRandomRewardGroupInfo)
}

void mdRandomRewardGroupInfo::InitAsDefaultInstance() {
}

mdRandomRewardGroupInfo::mdRandomRewardGroupInfo(const mdRandomRewardGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRandomRewardGroupInfo)
}

void mdRandomRewardGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 0;
  index_ = 0;
  reward_id_ = 0;
  rate_ = 0;
  min_count_ = 0;
  max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRandomRewardGroupInfo::~mdRandomRewardGroupInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  SharedDtor();
}

void mdRandomRewardGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRandomRewardGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRandomRewardGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRandomRewardGroupInfo_descriptor_;
}

const mdRandomRewardGroupInfo& mdRandomRewardGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRandomRewardGroupInfo* mdRandomRewardGroupInfo::default_instance_ = NULL;

mdRandomRewardGroupInfo* mdRandomRewardGroupInfo::New() const {
  return new mdRandomRewardGroupInfo;
}

void mdRandomRewardGroupInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRandomRewardGroupInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(group_id_, max_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRandomRewardGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 group_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rate;
        break;
      }

      // required int32 rate = 4;
      case 4: {
        if (tag == 32) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_min_count;
        break;
      }

      // required int32 min_count = 5;
      case 5: {
        if (tag == 40) {
         parse_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_count_)));
          set_has_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 6;
      case 6: {
        if (tag == 48) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  return false;
#undef DO_
}

void mdRandomRewardGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  // required int32 group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 rate = 4;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rate(), output);
  }

  // required int32 min_count = 5;
  if (has_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->min_count(), output);
  }

  // required int32 max_count = 6;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRandomRewardGroupInfo)
}

::google::protobuf::uint8* mdRandomRewardGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  // required int32 group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 rate = 4;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rate(), target);
  }

  // required int32 min_count = 5;
  if (has_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->min_count(), target);
  }

  // required int32 max_count = 6;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRandomRewardGroupInfo)
  return target;
}

int mdRandomRewardGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 rate = 4;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // required int32 min_count = 5;
    if (has_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_count());
    }

    // required int32 max_count = 6;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRandomRewardGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRandomRewardGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRandomRewardGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRandomRewardGroupInfo::MergeFrom(const mdRandomRewardGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_min_count()) {
      set_min_count(from.min_count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRandomRewardGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRandomRewardGroupInfo::CopyFrom(const mdRandomRewardGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRandomRewardGroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdRandomRewardGroupInfo::Swap(mdRandomRewardGroupInfo* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(index_, other->index_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(rate_, other->rate_);
    std::swap(min_count_, other->min_count_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRandomRewardGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRandomRewardGroupInfo_descriptor_;
  metadata.reflection = mdRandomRewardGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAssaultVictoryRewardInfo::kMatchResultFieldNumber;
const int mdAssaultVictoryRewardInfo::kRewardIdFieldNumber;
const int mdAssaultVictoryRewardInfo::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdAssaultVictoryRewardInfo::mdAssaultVictoryRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
}

void mdAssaultVictoryRewardInfo::InitAsDefaultInstance() {
}

mdAssaultVictoryRewardInfo::mdAssaultVictoryRewardInfo(const mdAssaultVictoryRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
}

void mdAssaultVictoryRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  match_result_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAssaultVictoryRewardInfo::~mdAssaultVictoryRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  SharedDtor();
}

void mdAssaultVictoryRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAssaultVictoryRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAssaultVictoryRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAssaultVictoryRewardInfo_descriptor_;
}

const mdAssaultVictoryRewardInfo& mdAssaultVictoryRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAssaultVictoryRewardInfo* mdAssaultVictoryRewardInfo::default_instance_ = NULL;

mdAssaultVictoryRewardInfo* mdAssaultVictoryRewardInfo::New() const {
  return new mdAssaultVictoryRewardInfo;
}

void mdAssaultVictoryRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAssaultVictoryRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(match_result_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAssaultVictoryRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MatchResult.TYPE match_result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchResult_TYPE_IsValid(value)) {
            set_match_result(static_cast< ::b2::protocol::commondata::MatchResult_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  return false;
#undef DO_
}

void mdAssaultVictoryRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  // required .b2.protocol.commondata.MatchResult.TYPE match_result = 1;
  if (has_match_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_result(), output);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  // required int32 reward_count = 3;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
}

::google::protobuf::uint8* mdAssaultVictoryRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  // required .b2.protocol.commondata.MatchResult.TYPE match_result = 1;
  if (has_match_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_result(), target);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  // required int32 reward_count = 3;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAssaultVictoryRewardInfo)
  return target;
}

int mdAssaultVictoryRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MatchResult.TYPE match_result = 1;
    if (has_match_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_result());
    }

    // required int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 3;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAssaultVictoryRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAssaultVictoryRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAssaultVictoryRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAssaultVictoryRewardInfo::MergeFrom(const mdAssaultVictoryRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_result()) {
      set_match_result(from.match_result());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAssaultVictoryRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAssaultVictoryRewardInfo::CopyFrom(const mdAssaultVictoryRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAssaultVictoryRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdAssaultVictoryRewardInfo::Swap(mdAssaultVictoryRewardInfo* other) {
  if (other != this) {
    std::swap(match_result_, other->match_result_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAssaultVictoryRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAssaultVictoryRewardInfo_descriptor_;
  metadata.reflection = mdAssaultVictoryRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAssaultMvpRewardInfo::kRewardIdFieldNumber;
const int mdAssaultMvpRewardInfo::kRewardMinCountFieldNumber;
const int mdAssaultMvpRewardInfo::kRewardMaxCountFieldNumber;
#endif  // !_MSC_VER

mdAssaultMvpRewardInfo::mdAssaultMvpRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
}

void mdAssaultMvpRewardInfo::InitAsDefaultInstance() {
}

mdAssaultMvpRewardInfo::mdAssaultMvpRewardInfo(const mdAssaultMvpRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
}

void mdAssaultMvpRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0;
  reward_min_count_ = 0;
  reward_max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAssaultMvpRewardInfo::~mdAssaultMvpRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  SharedDtor();
}

void mdAssaultMvpRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAssaultMvpRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAssaultMvpRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAssaultMvpRewardInfo_descriptor_;
}

const mdAssaultMvpRewardInfo& mdAssaultMvpRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAssaultMvpRewardInfo* mdAssaultMvpRewardInfo::default_instance_ = NULL;

mdAssaultMvpRewardInfo* mdAssaultMvpRewardInfo::New() const {
  return new mdAssaultMvpRewardInfo;
}

void mdAssaultMvpRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAssaultMvpRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reward_id_, reward_max_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAssaultMvpRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reward_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_min_count;
        break;
      }

      // required int32 reward_min_count = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_min_count_)));
          set_has_reward_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_max_count;
        break;
      }

      // required int32 reward_max_count = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_max_count_)));
          set_has_reward_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  return false;
#undef DO_
}

void mdAssaultMvpRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  // required int32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_id(), output);
  }

  // required int32 reward_min_count = 2;
  if (has_reward_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_min_count(), output);
  }

  // required int32 reward_max_count = 3;
  if (has_reward_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
}

::google::protobuf::uint8* mdAssaultMvpRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  // required int32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_id(), target);
  }

  // required int32 reward_min_count = 2;
  if (has_reward_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_min_count(), target);
  }

  // required int32 reward_max_count = 3;
  if (has_reward_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAssaultMvpRewardInfo)
  return target;
}

int mdAssaultMvpRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_min_count = 2;
    if (has_reward_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_min_count());
    }

    // required int32 reward_max_count = 3;
    if (has_reward_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAssaultMvpRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAssaultMvpRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAssaultMvpRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAssaultMvpRewardInfo::MergeFrom(const mdAssaultMvpRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_min_count()) {
      set_reward_min_count(from.reward_min_count());
    }
    if (from.has_reward_max_count()) {
      set_reward_max_count(from.reward_max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAssaultMvpRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAssaultMvpRewardInfo::CopyFrom(const mdAssaultMvpRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAssaultMvpRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdAssaultMvpRewardInfo::Swap(mdAssaultMvpRewardInfo* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_min_count_, other->reward_min_count_);
    std::swap(reward_max_count_, other->reward_max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAssaultMvpRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAssaultMvpRewardInfo_descriptor_;
  metadata.reflection = mdAssaultMvpRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdCollectionReward::kCollectionCategoryFieldNumber;
const int mdCollectionReward::kGradeFieldNumber;
const int mdCollectionReward::kRewardIdFieldNumber;
const int mdCollectionReward::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdCollectionReward::mdCollectionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdCollectionReward)
}

void mdCollectionReward::InitAsDefaultInstance() {
}

mdCollectionReward::mdCollectionReward(const mdCollectionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdCollectionReward)
}

void mdCollectionReward::SharedCtor() {
  _cached_size_ = 0;
  collection_category_ = 1;
  grade_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdCollectionReward::~mdCollectionReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdCollectionReward)
  SharedDtor();
}

void mdCollectionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdCollectionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdCollectionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdCollectionReward_descriptor_;
}

const mdCollectionReward& mdCollectionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdCollectionReward* mdCollectionReward::default_instance_ = NULL;

mdCollectionReward* mdCollectionReward::New() const {
  return new mdCollectionReward;
}

void mdCollectionReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdCollectionReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(grade_, reward_count_);
    collection_category_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdCollectionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdCollectionReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.CollectionCategory collection_category = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::CollectionCategory_IsValid(value)) {
            set_collection_category(static_cast< ::b2::protocol::commondata::CollectionCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdCollectionReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdCollectionReward)
  return false;
#undef DO_
}

void mdCollectionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdCollectionReward)
  // required .b2.protocol.commondata.CollectionCategory collection_category = 1;
  if (has_collection_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->collection_category(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdCollectionReward)
}

::google::protobuf::uint8* mdCollectionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdCollectionReward)
  // required .b2.protocol.commondata.CollectionCategory collection_category = 1;
  if (has_collection_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->collection_category(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdCollectionReward)
  return target;
}

int mdCollectionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.CollectionCategory collection_category = 1;
    if (has_collection_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->collection_category());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 4;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdCollectionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdCollectionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdCollectionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdCollectionReward::MergeFrom(const mdCollectionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collection_category()) {
      set_collection_category(from.collection_category());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdCollectionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdCollectionReward::CopyFrom(const mdCollectionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdCollectionReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdCollectionReward::Swap(mdCollectionReward* other) {
  if (other != this) {
    std::swap(collection_category_, other->collection_category_);
    std::swap(grade_, other->grade_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdCollectionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdCollectionReward_descriptor_;
  metadata.reflection = mdCollectionReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdItemSet::kSetIdFieldNumber;
const int mdItemSet::kNameFieldNumber;
const int mdItemSet::kSetOptionIdSet2FieldNumber;
const int mdItemSet::kSetValueSet2FieldNumber;
const int mdItemSet::kSetOptionIdSet3FieldNumber;
const int mdItemSet::kSetValueSet3FieldNumber;
const int mdItemSet::kSetOptionIdSet4FieldNumber;
const int mdItemSet::kSetValueSet4FieldNumber;
#endif  // !_MSC_VER

mdItemSet::mdItemSet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdItemSet)
}

void mdItemSet::InitAsDefaultInstance() {
}

mdItemSet::mdItemSet(const mdItemSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdItemSet)
}

void mdItemSet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  set_id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  set_option_id_set2_ = 0;
  set_value_set2_ = 0;
  set_option_id_set3_ = 0;
  set_value_set3_ = 0;
  set_option_id_set4_ = 0;
  set_value_set4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdItemSet::~mdItemSet() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdItemSet)
  SharedDtor();
}

void mdItemSet::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void mdItemSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdItemSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdItemSet_descriptor_;
}

const mdItemSet& mdItemSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdItemSet* mdItemSet::default_instance_ = NULL;

mdItemSet* mdItemSet::New() const {
  return new mdItemSet;
}

void mdItemSet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdItemSet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(set_id_, set_value_set4_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdItemSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdItemSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 set_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_id_)));
          set_has_set_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_set_option_id_set2;
        break;
      }

      // required int32 set_option_id_set2 = 3;
      case 3: {
        if (tag == 24) {
         parse_set_option_id_set2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_option_id_set2_)));
          set_has_set_option_id_set2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_set_value_set2;
        break;
      }

      // required float set_value_set2 = 4;
      case 4: {
        if (tag == 37) {
         parse_set_value_set2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_value_set2_)));
          set_has_set_value_set2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_set_option_id_set3;
        break;
      }

      // required int32 set_option_id_set3 = 5;
      case 5: {
        if (tag == 40) {
         parse_set_option_id_set3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_option_id_set3_)));
          set_has_set_option_id_set3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_set_value_set3;
        break;
      }

      // required float set_value_set3 = 6;
      case 6: {
        if (tag == 53) {
         parse_set_value_set3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_value_set3_)));
          set_has_set_value_set3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_set_option_id_set4;
        break;
      }

      // required int32 set_option_id_set4 = 7;
      case 7: {
        if (tag == 56) {
         parse_set_option_id_set4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_option_id_set4_)));
          set_has_set_option_id_set4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_set_value_set4;
        break;
      }

      // required float set_value_set4 = 8;
      case 8: {
        if (tag == 69) {
         parse_set_value_set4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &set_value_set4_)));
          set_has_set_value_set4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdItemSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdItemSet)
  return false;
#undef DO_
}

void mdItemSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdItemSet)
  // required int32 set_id = 1;
  if (has_set_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->set_id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required int32 set_option_id_set2 = 3;
  if (has_set_option_id_set2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_option_id_set2(), output);
  }

  // required float set_value_set2 = 4;
  if (has_set_value_set2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->set_value_set2(), output);
  }

  // required int32 set_option_id_set3 = 5;
  if (has_set_option_id_set3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->set_option_id_set3(), output);
  }

  // required float set_value_set3 = 6;
  if (has_set_value_set3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->set_value_set3(), output);
  }

  // required int32 set_option_id_set4 = 7;
  if (has_set_option_id_set4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->set_option_id_set4(), output);
  }

  // required float set_value_set4 = 8;
  if (has_set_value_set4()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->set_value_set4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdItemSet)
}

::google::protobuf::uint8* mdItemSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdItemSet)
  // required int32 set_id = 1;
  if (has_set_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->set_id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required int32 set_option_id_set2 = 3;
  if (has_set_option_id_set2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_option_id_set2(), target);
  }

  // required float set_value_set2 = 4;
  if (has_set_value_set2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->set_value_set2(), target);
  }

  // required int32 set_option_id_set3 = 5;
  if (has_set_option_id_set3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->set_option_id_set3(), target);
  }

  // required float set_value_set3 = 6;
  if (has_set_value_set3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->set_value_set3(), target);
  }

  // required int32 set_option_id_set4 = 7;
  if (has_set_option_id_set4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->set_option_id_set4(), target);
  }

  // required float set_value_set4 = 8;
  if (has_set_value_set4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->set_value_set4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdItemSet)
  return target;
}

int mdItemSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 set_id = 1;
    if (has_set_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 set_option_id_set2 = 3;
    if (has_set_option_id_set2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_option_id_set2());
    }

    // required float set_value_set2 = 4;
    if (has_set_value_set2()) {
      total_size += 1 + 4;
    }

    // required int32 set_option_id_set3 = 5;
    if (has_set_option_id_set3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_option_id_set3());
    }

    // required float set_value_set3 = 6;
    if (has_set_value_set3()) {
      total_size += 1 + 4;
    }

    // required int32 set_option_id_set4 = 7;
    if (has_set_option_id_set4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_option_id_set4());
    }

    // required float set_value_set4 = 8;
    if (has_set_value_set4()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdItemSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdItemSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdItemSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdItemSet::MergeFrom(const mdItemSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_set_id()) {
      set_set_id(from.set_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_set_option_id_set2()) {
      set_set_option_id_set2(from.set_option_id_set2());
    }
    if (from.has_set_value_set2()) {
      set_set_value_set2(from.set_value_set2());
    }
    if (from.has_set_option_id_set3()) {
      set_set_option_id_set3(from.set_option_id_set3());
    }
    if (from.has_set_value_set3()) {
      set_set_value_set3(from.set_value_set3());
    }
    if (from.has_set_option_id_set4()) {
      set_set_option_id_set4(from.set_option_id_set4());
    }
    if (from.has_set_value_set4()) {
      set_set_value_set4(from.set_value_set4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdItemSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdItemSet::CopyFrom(const mdItemSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdItemSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdItemSet::Swap(mdItemSet* other) {
  if (other != this) {
    std::swap(set_id_, other->set_id_);
    std::swap(name_, other->name_);
    std::swap(set_option_id_set2_, other->set_option_id_set2_);
    std::swap(set_value_set2_, other->set_value_set2_);
    std::swap(set_option_id_set3_, other->set_option_id_set3_);
    std::swap(set_value_set3_, other->set_value_set3_);
    std::swap(set_option_id_set4_, other->set_option_id_set4_);
    std::swap(set_value_set4_, other->set_value_set4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdItemSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdItemSet_descriptor_;
  metadata.reflection = mdItemSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSelectItemOption::kOptionIdFieldNumber;
const int mdSelectItemOption::kGradeFieldNumber;
const int mdSelectItemOption::kEquipPositionFieldNumber;
const int mdSelectItemOption::kProbFieldNumber;
const int mdSelectItemOption::kDecimalPointFieldNumber;
const int mdSelectItemOption::kMinFieldNumber;
const int mdSelectItemOption::kMaxFieldNumber;
#endif  // !_MSC_VER

mdSelectItemOption::mdSelectItemOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSelectItemOption)
}

void mdSelectItemOption::InitAsDefaultInstance() {
}

mdSelectItemOption::mdSelectItemOption(const mdSelectItemOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSelectItemOption)
}

void mdSelectItemOption::SharedCtor() {
  _cached_size_ = 0;
  option_id_ = 0;
  grade_ = 0;
  equip_position_ = 0;
  prob_ = 0;
  decimal_point_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSelectItemOption::~mdSelectItemOption() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSelectItemOption)
  SharedDtor();
}

void mdSelectItemOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSelectItemOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSelectItemOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSelectItemOption_descriptor_;
}

const mdSelectItemOption& mdSelectItemOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSelectItemOption* mdSelectItemOption::default_instance_ = NULL;

mdSelectItemOption* mdSelectItemOption::New() const {
  return new mdSelectItemOption;
}

void mdSelectItemOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSelectItemOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(option_id_, max_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSelectItemOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSelectItemOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_equip_position;
        break;
      }

      // required int32 equip_position = 3;
      case 3: {
        if (tag == 24) {
         parse_equip_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_position_)));
          set_has_equip_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_prob;
        break;
      }

      // required float prob = 4;
      case 4: {
        if (tag == 37) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_decimal_point;
        break;
      }

      // required int32 decimal_point = 5;
      case 5: {
        if (tag == 40) {
         parse_decimal_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimal_point_)));
          set_has_decimal_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_min;
        break;
      }

      // required float min = 6;
      case 6: {
        if (tag == 53) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_max;
        break;
      }

      // required float max = 7;
      case 7: {
        if (tag == 61) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSelectItemOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSelectItemOption)
  return false;
#undef DO_
}

void mdSelectItemOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSelectItemOption)
  // required int32 option_id = 1;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option_id(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required int32 equip_position = 3;
  if (has_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_position(), output);
  }

  // required float prob = 4;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->prob(), output);
  }

  // required int32 decimal_point = 5;
  if (has_decimal_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decimal_point(), output);
  }

  // required float min = 6;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->min(), output);
  }

  // required float max = 7;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSelectItemOption)
}

::google::protobuf::uint8* mdSelectItemOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSelectItemOption)
  // required int32 option_id = 1;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option_id(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required int32 equip_position = 3;
  if (has_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_position(), target);
  }

  // required float prob = 4;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->prob(), target);
  }

  // required int32 decimal_point = 5;
  if (has_decimal_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decimal_point(), target);
  }

  // required float min = 6;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->min(), target);
  }

  // required float max = 7;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSelectItemOption)
  return target;
}

int mdSelectItemOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 option_id = 1;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 equip_position = 3;
    if (has_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_position());
    }

    // required float prob = 4;
    if (has_prob()) {
      total_size += 1 + 4;
    }

    // required int32 decimal_point = 5;
    if (has_decimal_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decimal_point());
    }

    // required float min = 6;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // required float max = 7;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSelectItemOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSelectItemOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSelectItemOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSelectItemOption::MergeFrom(const mdSelectItemOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_equip_position()) {
      set_equip_position(from.equip_position());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
    if (from.has_decimal_point()) {
      set_decimal_point(from.decimal_point());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSelectItemOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSelectItemOption::CopyFrom(const mdSelectItemOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSelectItemOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdSelectItemOption::Swap(mdSelectItemOption* other) {
  if (other != this) {
    std::swap(option_id_, other->option_id_);
    std::swap(grade_, other->grade_);
    std::swap(equip_position_, other->equip_position_);
    std::swap(prob_, other->prob_);
    std::swap(decimal_point_, other->decimal_point_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSelectItemOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSelectItemOption_descriptor_;
  metadata.reflection = mdSelectItemOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSelectItemSealOption::kOptionIdFieldNumber;
const int mdSelectItemSealOption::kSlotFieldNumber;
const int mdSelectItemSealOption::kProbFieldNumber;
const int mdSelectItemSealOption::kDecimalPointFieldNumber;
const int mdSelectItemSealOption::kMinFieldNumber;
const int mdSelectItemSealOption::kMaxFieldNumber;
#endif  // !_MSC_VER

mdSelectItemSealOption::mdSelectItemSealOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSelectItemSealOption)
}

void mdSelectItemSealOption::InitAsDefaultInstance() {
}

mdSelectItemSealOption::mdSelectItemSealOption(const mdSelectItemSealOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSelectItemSealOption)
}

void mdSelectItemSealOption::SharedCtor() {
  _cached_size_ = 0;
  option_id_ = 0;
  slot_ = 0;
  prob_ = 0;
  decimal_point_ = 0;
  min_ = 0;
  max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSelectItemSealOption::~mdSelectItemSealOption() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSelectItemSealOption)
  SharedDtor();
}

void mdSelectItemSealOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSelectItemSealOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSelectItemSealOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSelectItemSealOption_descriptor_;
}

const mdSelectItemSealOption& mdSelectItemSealOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSelectItemSealOption* mdSelectItemSealOption::default_instance_ = NULL;

mdSelectItemSealOption* mdSelectItemSealOption::New() const {
  return new mdSelectItemSealOption;
}

void mdSelectItemSealOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSelectItemSealOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(option_id_, max_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSelectItemSealOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSelectItemSealOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // required int32 slot = 2;
      case 2: {
        if (tag == 16) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_prob;
        break;
      }

      // required float prob = 3;
      case 3: {
        if (tag == 29) {
         parse_prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_decimal_point;
        break;
      }

      // required int32 decimal_point = 4;
      case 4: {
        if (tag == 32) {
         parse_decimal_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimal_point_)));
          set_has_decimal_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_min;
        break;
      }

      // required float min = 5;
      case 5: {
        if (tag == 45) {
         parse_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_)));
          set_has_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_max;
        break;
      }

      // required float max = 6;
      case 6: {
        if (tag == 53) {
         parse_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_)));
          set_has_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSelectItemSealOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSelectItemSealOption)
  return false;
#undef DO_
}

void mdSelectItemSealOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSelectItemSealOption)
  // required int32 option_id = 1;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option_id(), output);
  }

  // required int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // required float prob = 3;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->prob(), output);
  }

  // required int32 decimal_point = 4;
  if (has_decimal_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->decimal_point(), output);
  }

  // required float min = 5;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->min(), output);
  }

  // required float max = 6;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSelectItemSealOption)
}

::google::protobuf::uint8* mdSelectItemSealOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSelectItemSealOption)
  // required int32 option_id = 1;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option_id(), target);
  }

  // required int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // required float prob = 3;
  if (has_prob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->prob(), target);
  }

  // required int32 decimal_point = 4;
  if (has_decimal_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->decimal_point(), target);
  }

  // required float min = 5;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->min(), target);
  }

  // required float max = 6;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSelectItemSealOption)
  return target;
}

int mdSelectItemSealOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 option_id = 1;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // required float prob = 3;
    if (has_prob()) {
      total_size += 1 + 4;
    }

    // required int32 decimal_point = 4;
    if (has_decimal_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decimal_point());
    }

    // required float min = 5;
    if (has_min()) {
      total_size += 1 + 4;
    }

    // required float max = 6;
    if (has_max()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSelectItemSealOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSelectItemSealOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSelectItemSealOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSelectItemSealOption::MergeFrom(const mdSelectItemSealOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
    if (from.has_decimal_point()) {
      set_decimal_point(from.decimal_point());
    }
    if (from.has_min()) {
      set_min(from.min());
    }
    if (from.has_max()) {
      set_max(from.max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSelectItemSealOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSelectItemSealOption::CopyFrom(const mdSelectItemSealOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSelectItemSealOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdSelectItemSealOption::Swap(mdSelectItemSealOption* other) {
  if (other != this) {
    std::swap(option_id_, other->option_id_);
    std::swap(slot_, other->slot_);
    std::swap(prob_, other->prob_);
    std::swap(decimal_point_, other->decimal_point_);
    std::swap(min_, other->min_);
    std::swap(max_, other->max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSelectItemSealOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSelectItemSealOption_descriptor_;
  metadata.reflection = mdSelectItemSealOption_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* mdEventAttendance_BonusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdEventAttendance_BonusType_descriptor_;
}
bool mdEventAttendance_BonusType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const mdEventAttendance_BonusType mdEventAttendance::NONE;
const mdEventAttendance_BonusType mdEventAttendance::PERIODIC_PACKAGE;
const mdEventAttendance_BonusType mdEventAttendance::BonusType_MIN;
const mdEventAttendance_BonusType mdEventAttendance::BonusType_MAX;
const int mdEventAttendance::BonusType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int mdEventAttendance::kEventIdFieldNumber;
const int mdEventAttendance::kTitleFieldNumber;
const int mdEventAttendance::kTotalAttendanceDaysFieldNumber;
const int mdEventAttendance::kStartTimeFieldNumber;
const int mdEventAttendance::kEndTimeFieldNumber;
const int mdEventAttendance::kExplainFieldNumber;
const int mdEventAttendance::kEventUrlFieldNumber;
const int mdEventAttendance::kBonusTypeFieldNumber;
#endif  // !_MSC_VER

mdEventAttendance::mdEventAttendance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdEventAttendance)
}

void mdEventAttendance::InitAsDefaultInstance() {
}

mdEventAttendance::mdEventAttendance(const mdEventAttendance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdEventAttendance)
}

void mdEventAttendance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_attendance_days_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  explain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  event_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bonus_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdEventAttendance::~mdEventAttendance() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdEventAttendance)
  SharedDtor();
}

void mdEventAttendance::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explain_;
  }
  if (event_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_url_;
  }
  if (this != default_instance_) {
  }
}

void mdEventAttendance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdEventAttendance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdEventAttendance_descriptor_;
}

const mdEventAttendance& mdEventAttendance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdEventAttendance* mdEventAttendance::default_instance_ = NULL;

mdEventAttendance* mdEventAttendance::New() const {
  return new mdEventAttendance;
}

void mdEventAttendance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdEventAttendance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_id_, end_time_);
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_explain()) {
      if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        explain_->clear();
      }
    }
    if (has_event_url()) {
      if (event_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_url_->clear();
      }
    }
    bonus_type_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdEventAttendance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdEventAttendance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_attendance_days;
        break;
      }

      // required int32 total_attendance_days = 3;
      case 3: {
        if (tag == 24) {
         parse_total_attendance_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attendance_days_)));
          set_has_total_attendance_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_explain;
        break;
      }

      // required string explain = 6;
      case 6: {
        if (tag == 50) {
         parse_explain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explain().data(), this->explain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_event_url;
        break;
      }

      // required string event_url = 7;
      case 7: {
        if (tag == 58) {
         parse_event_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_url().data(), this->event_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bonus_type;
        break;
      }

      // required .b2.protocol.masterdata.mdEventAttendance.BonusType bonus_type = 8;
      case 8: {
        if (tag == 64) {
         parse_bonus_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::masterdata::mdEventAttendance_BonusType_IsValid(value)) {
            set_bonus_type(static_cast< ::b2::protocol::masterdata::mdEventAttendance_BonusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdEventAttendance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdEventAttendance)
  return false;
#undef DO_
}

void mdEventAttendance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdEventAttendance)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required int32 total_attendance_days = 3;
  if (has_total_attendance_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_attendance_days(), output);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  // required string explain = 6;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->explain(), output);
  }

  // required string event_url = 7;
  if (has_event_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_url().data(), this->event_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->event_url(), output);
  }

  // required .b2.protocol.masterdata.mdEventAttendance.BonusType bonus_type = 8;
  if (has_bonus_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bonus_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdEventAttendance)
}

::google::protobuf::uint8* mdEventAttendance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdEventAttendance)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required int32 total_attendance_days = 3;
  if (has_total_attendance_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_attendance_days(), target);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  // required string explain = 6;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->explain(), target);
  }

  // required string event_url = 7;
  if (has_event_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_url().data(), this->event_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->event_url(), target);
  }

  // required .b2.protocol.masterdata.mdEventAttendance.BonusType bonus_type = 8;
  if (has_bonus_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bonus_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdEventAttendance)
  return target;
}

int mdEventAttendance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 total_attendance_days = 3;
    if (has_total_attendance_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attendance_days());
    }

    // required int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // required string explain = 6;
    if (has_explain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain());
    }

    // required string event_url = 7;
    if (has_event_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_url());
    }

    // required .b2.protocol.masterdata.mdEventAttendance.BonusType bonus_type = 8;
    if (has_bonus_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bonus_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdEventAttendance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdEventAttendance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdEventAttendance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdEventAttendance::MergeFrom(const mdEventAttendance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_total_attendance_days()) {
      set_total_attendance_days(from.total_attendance_days());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_explain()) {
      set_explain(from.explain());
    }
    if (from.has_event_url()) {
      set_event_url(from.event_url());
    }
    if (from.has_bonus_type()) {
      set_bonus_type(from.bonus_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdEventAttendance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdEventAttendance::CopyFrom(const mdEventAttendance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdEventAttendance::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdEventAttendance::Swap(mdEventAttendance* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(title_, other->title_);
    std::swap(total_attendance_days_, other->total_attendance_days_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(explain_, other->explain_);
    std::swap(event_url_, other->event_url_);
    std::swap(bonus_type_, other->bonus_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdEventAttendance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdEventAttendance_descriptor_;
  metadata.reflection = mdEventAttendance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdEventAttendanceReward::kEventIdFieldNumber;
const int mdEventAttendanceReward::kDayFieldNumber;
const int mdEventAttendanceReward::kRewardIdFieldNumber;
const int mdEventAttendanceReward::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdEventAttendanceReward::mdEventAttendanceReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdEventAttendanceReward)
}

void mdEventAttendanceReward::InitAsDefaultInstance() {
}

mdEventAttendanceReward::mdEventAttendanceReward(const mdEventAttendanceReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdEventAttendanceReward)
}

void mdEventAttendanceReward::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  day_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdEventAttendanceReward::~mdEventAttendanceReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdEventAttendanceReward)
  SharedDtor();
}

void mdEventAttendanceReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdEventAttendanceReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdEventAttendanceReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdEventAttendanceReward_descriptor_;
}

const mdEventAttendanceReward& mdEventAttendanceReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdEventAttendanceReward* mdEventAttendanceReward::default_instance_ = NULL;

mdEventAttendanceReward* mdEventAttendanceReward::New() const {
  return new mdEventAttendanceReward;
}

void mdEventAttendanceReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdEventAttendanceReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdEventAttendanceReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdEventAttendanceReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // required int32 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdEventAttendanceReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdEventAttendanceReward)
  return false;
#undef DO_
}

void mdEventAttendanceReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdEventAttendanceReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdEventAttendanceReward)
}

::google::protobuf::uint8* mdEventAttendanceReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdEventAttendanceReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdEventAttendanceReward)
  return target;
}

int mdEventAttendanceReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 4;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdEventAttendanceReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdEventAttendanceReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdEventAttendanceReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdEventAttendanceReward::MergeFrom(const mdEventAttendanceReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdEventAttendanceReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdEventAttendanceReward::CopyFrom(const mdEventAttendanceReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdEventAttendanceReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdEventAttendanceReward::Swap(mdEventAttendanceReward* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(day_, other->day_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdEventAttendanceReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdEventAttendanceReward_descriptor_;
  metadata.reflection = mdEventAttendanceReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDailyPlayTimeReward::kRewardIndexFieldNumber;
const int mdDailyPlayTimeReward::kPlayTimeInminFieldNumber;
const int mdDailyPlayTimeReward::kRewardIdFieldNumber;
const int mdDailyPlayTimeReward::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdDailyPlayTimeReward::mdDailyPlayTimeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDailyPlayTimeReward)
}

void mdDailyPlayTimeReward::InitAsDefaultInstance() {
}

mdDailyPlayTimeReward::mdDailyPlayTimeReward(const mdDailyPlayTimeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDailyPlayTimeReward)
}

void mdDailyPlayTimeReward::SharedCtor() {
  _cached_size_ = 0;
  reward_index_ = 0;
  play_time_inmin_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDailyPlayTimeReward::~mdDailyPlayTimeReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDailyPlayTimeReward)
  SharedDtor();
}

void mdDailyPlayTimeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDailyPlayTimeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDailyPlayTimeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDailyPlayTimeReward_descriptor_;
}

const mdDailyPlayTimeReward& mdDailyPlayTimeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDailyPlayTimeReward* mdDailyPlayTimeReward::default_instance_ = NULL;

mdDailyPlayTimeReward* mdDailyPlayTimeReward::New() const {
  return new mdDailyPlayTimeReward;
}

void mdDailyPlayTimeReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDailyPlayTimeReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(reward_index_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDailyPlayTimeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDailyPlayTimeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reward_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_index_)));
          set_has_reward_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_play_time_inmin;
        break;
      }

      // required int32 play_time_inmin = 2;
      case 2: {
        if (tag == 16) {
         parse_play_time_inmin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &play_time_inmin_)));
          set_has_play_time_inmin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDailyPlayTimeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDailyPlayTimeReward)
  return false;
#undef DO_
}

void mdDailyPlayTimeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDailyPlayTimeReward)
  // required int32 reward_index = 1;
  if (has_reward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reward_index(), output);
  }

  // required int32 play_time_inmin = 2;
  if (has_play_time_inmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->play_time_inmin(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDailyPlayTimeReward)
}

::google::protobuf::uint8* mdDailyPlayTimeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDailyPlayTimeReward)
  // required int32 reward_index = 1;
  if (has_reward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reward_index(), target);
  }

  // required int32 play_time_inmin = 2;
  if (has_play_time_inmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->play_time_inmin(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDailyPlayTimeReward)
  return target;
}

int mdDailyPlayTimeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reward_index = 1;
    if (has_reward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_index());
    }

    // required int32 play_time_inmin = 2;
    if (has_play_time_inmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->play_time_inmin());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 4;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDailyPlayTimeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDailyPlayTimeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDailyPlayTimeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDailyPlayTimeReward::MergeFrom(const mdDailyPlayTimeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_index()) {
      set_reward_index(from.reward_index());
    }
    if (from.has_play_time_inmin()) {
      set_play_time_inmin(from.play_time_inmin());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDailyPlayTimeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDailyPlayTimeReward::CopyFrom(const mdDailyPlayTimeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDailyPlayTimeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdDailyPlayTimeReward::Swap(mdDailyPlayTimeReward* other) {
  if (other != this) {
    std::swap(reward_index_, other->reward_index_);
    std::swap(play_time_inmin_, other->play_time_inmin_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDailyPlayTimeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDailyPlayTimeReward_descriptor_;
  metadata.reflection = mdDailyPlayTimeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTutorialInfo::kTutorialIdFieldNumber;
const int mdTutorialInfo::kPrevTutorialIdFieldNumber;
const int mdTutorialInfo::kCharacterLevelFieldNumber;
const int mdTutorialInfo::kActClearedFieldNumber;
const int mdTutorialInfo::kCashFieldNumber;
const int mdTutorialInfo::kGoldFieldNumber;
const int mdTutorialInfo::kRewardId1FieldNumber;
const int mdTutorialInfo::kRewardCount1FieldNumber;
const int mdTutorialInfo::kRewardId2FieldNumber;
const int mdTutorialInfo::kRewardCount2FieldNumber;
const int mdTutorialInfo::kRewardId3FieldNumber;
const int mdTutorialInfo::kRewardCount3FieldNumber;
#endif  // !_MSC_VER

mdTutorialInfo::mdTutorialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTutorialInfo)
}

void mdTutorialInfo::InitAsDefaultInstance() {
}

mdTutorialInfo::mdTutorialInfo(const mdTutorialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTutorialInfo)
}

void mdTutorialInfo::SharedCtor() {
  _cached_size_ = 0;
  tutorial_id_ = 0;
  prev_tutorial_id_ = 0;
  character_level_ = 0;
  act_cleared_ = 0;
  cash_ = 0;
  gold_ = 0;
  reward_id1_ = 0;
  reward_count1_ = 0;
  reward_id2_ = 0;
  reward_count2_ = 0;
  reward_id3_ = 0;
  reward_count3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTutorialInfo::~mdTutorialInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTutorialInfo)
  SharedDtor();
}

void mdTutorialInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTutorialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTutorialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTutorialInfo_descriptor_;
}

const mdTutorialInfo& mdTutorialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTutorialInfo* mdTutorialInfo::default_instance_ = NULL;

mdTutorialInfo* mdTutorialInfo::New() const {
  return new mdTutorialInfo;
}

void mdTutorialInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTutorialInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tutorial_id_, reward_count1_);
  }
  ZR_(reward_id2_, reward_count3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTutorialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTutorialInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tutorial_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tutorial_id_)));
          set_has_tutorial_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_prev_tutorial_id;
        break;
      }

      // required int32 prev_tutorial_id = 2;
      case 2: {
        if (tag == 16) {
         parse_prev_tutorial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prev_tutorial_id_)));
          set_has_prev_tutorial_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_level;
        break;
      }

      // required int32 character_level = 3;
      case 3: {
        if (tag == 24) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_act_cleared;
        break;
      }

      // required int32 act_cleared = 4;
      case 4: {
        if (tag == 32) {
         parse_act_cleared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &act_cleared_)));
          set_has_act_cleared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // required int32 cash = 5;
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // required int32 gold = 6;
      case 6: {
        if (tag == 48) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_id1;
        break;
      }

      // required int32 reward_id1 = 7;
      case 7: {
        if (tag == 56) {
         parse_reward_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id1_)));
          set_has_reward_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reward_count1;
        break;
      }

      // required int32 reward_count1 = 8;
      case 8: {
        if (tag == 64) {
         parse_reward_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count1_)));
          set_has_reward_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_id2;
        break;
      }

      // required int32 reward_id2 = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id2_)));
          set_has_reward_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_count2;
        break;
      }

      // required int32 reward_count2 = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count2_)));
          set_has_reward_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward_id3;
        break;
      }

      // required int32 reward_id3 = 11;
      case 11: {
        if (tag == 88) {
         parse_reward_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id3_)));
          set_has_reward_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_reward_count3;
        break;
      }

      // required int32 reward_count3 = 12;
      case 12: {
        if (tag == 96) {
         parse_reward_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count3_)));
          set_has_reward_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTutorialInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTutorialInfo)
  return false;
#undef DO_
}

void mdTutorialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTutorialInfo)
  // required int32 tutorial_id = 1;
  if (has_tutorial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tutorial_id(), output);
  }

  // required int32 prev_tutorial_id = 2;
  if (has_prev_tutorial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prev_tutorial_id(), output);
  }

  // required int32 character_level = 3;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->character_level(), output);
  }

  // required int32 act_cleared = 4;
  if (has_act_cleared()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->act_cleared(), output);
  }

  // required int32 cash = 5;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cash(), output);
  }

  // required int32 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gold(), output);
  }

  // required int32 reward_id1 = 7;
  if (has_reward_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_id1(), output);
  }

  // required int32 reward_count1 = 8;
  if (has_reward_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_count1(), output);
  }

  // required int32 reward_id2 = 9;
  if (has_reward_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_id2(), output);
  }

  // required int32 reward_count2 = 10;
  if (has_reward_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reward_count2(), output);
  }

  // required int32 reward_id3 = 11;
  if (has_reward_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_id3(), output);
  }

  // required int32 reward_count3 = 12;
  if (has_reward_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reward_count3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTutorialInfo)
}

::google::protobuf::uint8* mdTutorialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTutorialInfo)
  // required int32 tutorial_id = 1;
  if (has_tutorial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tutorial_id(), target);
  }

  // required int32 prev_tutorial_id = 2;
  if (has_prev_tutorial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prev_tutorial_id(), target);
  }

  // required int32 character_level = 3;
  if (has_character_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->character_level(), target);
  }

  // required int32 act_cleared = 4;
  if (has_act_cleared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->act_cleared(), target);
  }

  // required int32 cash = 5;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cash(), target);
  }

  // required int32 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gold(), target);
  }

  // required int32 reward_id1 = 7;
  if (has_reward_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_id1(), target);
  }

  // required int32 reward_count1 = 8;
  if (has_reward_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_count1(), target);
  }

  // required int32 reward_id2 = 9;
  if (has_reward_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_id2(), target);
  }

  // required int32 reward_count2 = 10;
  if (has_reward_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reward_count2(), target);
  }

  // required int32 reward_id3 = 11;
  if (has_reward_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_id3(), target);
  }

  // required int32 reward_count3 = 12;
  if (has_reward_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reward_count3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTutorialInfo)
  return target;
}

int mdTutorialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tutorial_id = 1;
    if (has_tutorial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorial_id());
    }

    // required int32 prev_tutorial_id = 2;
    if (has_prev_tutorial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prev_tutorial_id());
    }

    // required int32 character_level = 3;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }

    // required int32 act_cleared = 4;
    if (has_act_cleared()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->act_cleared());
    }

    // required int32 cash = 5;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }

    // required int32 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 reward_id1 = 7;
    if (has_reward_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id1());
    }

    // required int32 reward_count1 = 8;
    if (has_reward_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_id2 = 9;
    if (has_reward_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id2());
    }

    // required int32 reward_count2 = 10;
    if (has_reward_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count2());
    }

    // required int32 reward_id3 = 11;
    if (has_reward_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id3());
    }

    // required int32 reward_count3 = 12;
    if (has_reward_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTutorialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTutorialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTutorialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTutorialInfo::MergeFrom(const mdTutorialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tutorial_id()) {
      set_tutorial_id(from.tutorial_id());
    }
    if (from.has_prev_tutorial_id()) {
      set_prev_tutorial_id(from.prev_tutorial_id());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
    if (from.has_act_cleared()) {
      set_act_cleared(from.act_cleared());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_reward_id1()) {
      set_reward_id1(from.reward_id1());
    }
    if (from.has_reward_count1()) {
      set_reward_count1(from.reward_count1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_id2()) {
      set_reward_id2(from.reward_id2());
    }
    if (from.has_reward_count2()) {
      set_reward_count2(from.reward_count2());
    }
    if (from.has_reward_id3()) {
      set_reward_id3(from.reward_id3());
    }
    if (from.has_reward_count3()) {
      set_reward_count3(from.reward_count3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTutorialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTutorialInfo::CopyFrom(const mdTutorialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTutorialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdTutorialInfo::Swap(mdTutorialInfo* other) {
  if (other != this) {
    std::swap(tutorial_id_, other->tutorial_id_);
    std::swap(prev_tutorial_id_, other->prev_tutorial_id_);
    std::swap(character_level_, other->character_level_);
    std::swap(act_cleared_, other->act_cleared_);
    std::swap(cash_, other->cash_);
    std::swap(gold_, other->gold_);
    std::swap(reward_id1_, other->reward_id1_);
    std::swap(reward_count1_, other->reward_count1_);
    std::swap(reward_id2_, other->reward_id2_);
    std::swap(reward_count2_, other->reward_count2_);
    std::swap(reward_id3_, other->reward_id3_);
    std::swap(reward_count3_, other->reward_count3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTutorialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTutorialInfo_descriptor_;
  metadata.reflection = mdTutorialInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAetherOptionInfo::kOptionIdFieldNumber;
const int mdAetherOptionInfo::kOptionGroupFieldNumber;
const int mdAetherOptionInfo::kGradeFieldNumber;
const int mdAetherOptionInfo::kDefaultValueFieldNumber;
const int mdAetherOptionInfo::kIncreaseValuePerLevelFieldNumber;
#endif  // !_MSC_VER

mdAetherOptionInfo::mdAetherOptionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAetherOptionInfo)
}

void mdAetherOptionInfo::InitAsDefaultInstance() {
}

mdAetherOptionInfo::mdAetherOptionInfo(const mdAetherOptionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAetherOptionInfo)
}

void mdAetherOptionInfo::SharedCtor() {
  _cached_size_ = 0;
  option_id_ = 0;
  option_group_ = 0;
  grade_ = 0;
  default_value_ = 0;
  increase_value_per_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAetherOptionInfo::~mdAetherOptionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAetherOptionInfo)
  SharedDtor();
}

void mdAetherOptionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAetherOptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAetherOptionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAetherOptionInfo_descriptor_;
}

const mdAetherOptionInfo& mdAetherOptionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAetherOptionInfo* mdAetherOptionInfo::default_instance_ = NULL;

mdAetherOptionInfo* mdAetherOptionInfo::New() const {
  return new mdAetherOptionInfo;
}

void mdAetherOptionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAetherOptionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(option_id_, increase_value_per_level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAetherOptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAetherOptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_group;
        break;
      }

      // required int32 option_group = 2;
      case 2: {
        if (tag == 16) {
         parse_option_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_group_)));
          set_has_option_group();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // required int32 grade = 3;
      case 3: {
        if (tag == 24) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_default_value;
        break;
      }

      // required float default_value = 4;
      case 4: {
        if (tag == 37) {
         parse_default_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &default_value_)));
          set_has_default_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_increase_value_per_level;
        break;
      }

      // required float increase_value_per_level = 5;
      case 5: {
        if (tag == 45) {
         parse_increase_value_per_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &increase_value_per_level_)));
          set_has_increase_value_per_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAetherOptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAetherOptionInfo)
  return false;
#undef DO_
}

void mdAetherOptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAetherOptionInfo)
  // required int32 option_id = 1;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option_id(), output);
  }

  // required int32 option_group = 2;
  if (has_option_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_group(), output);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // required float default_value = 4;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->default_value(), output);
  }

  // required float increase_value_per_level = 5;
  if (has_increase_value_per_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->increase_value_per_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAetherOptionInfo)
}

::google::protobuf::uint8* mdAetherOptionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAetherOptionInfo)
  // required int32 option_id = 1;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option_id(), target);
  }

  // required int32 option_group = 2;
  if (has_option_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_group(), target);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // required float default_value = 4;
  if (has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->default_value(), target);
  }

  // required float increase_value_per_level = 5;
  if (has_increase_value_per_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->increase_value_per_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAetherOptionInfo)
  return target;
}

int mdAetherOptionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 option_id = 1;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required int32 option_group = 2;
    if (has_option_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_group());
    }

    // required int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required float default_value = 4;
    if (has_default_value()) {
      total_size += 1 + 4;
    }

    // required float increase_value_per_level = 5;
    if (has_increase_value_per_level()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAetherOptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAetherOptionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAetherOptionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAetherOptionInfo::MergeFrom(const mdAetherOptionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_option_group()) {
      set_option_group(from.option_group());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
    if (from.has_increase_value_per_level()) {
      set_increase_value_per_level(from.increase_value_per_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAetherOptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAetherOptionInfo::CopyFrom(const mdAetherOptionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAetherOptionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdAetherOptionInfo::Swap(mdAetherOptionInfo* other) {
  if (other != this) {
    std::swap(option_id_, other->option_id_);
    std::swap(option_group_, other->option_group_);
    std::swap(grade_, other->grade_);
    std::swap(default_value_, other->default_value_);
    std::swap(increase_value_per_level_, other->increase_value_per_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAetherOptionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAetherOptionInfo_descriptor_;
  metadata.reflection = mdAetherOptionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAetherSlotInfo::kSlotIdFieldNumber;
const int mdAetherSlotInfo::kOptionIdFieldNumber;
#endif  // !_MSC_VER

mdAetherSlotInfo::mdAetherSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAetherSlotInfo)
}

void mdAetherSlotInfo::InitAsDefaultInstance() {
}

mdAetherSlotInfo::mdAetherSlotInfo(const mdAetherSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAetherSlotInfo)
}

void mdAetherSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_id_ = 0;
  option_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAetherSlotInfo::~mdAetherSlotInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAetherSlotInfo)
  SharedDtor();
}

void mdAetherSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAetherSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAetherSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAetherSlotInfo_descriptor_;
}

const mdAetherSlotInfo& mdAetherSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAetherSlotInfo* mdAetherSlotInfo::default_instance_ = NULL;

mdAetherSlotInfo* mdAetherSlotInfo::New() const {
  return new mdAetherSlotInfo;
}

void mdAetherSlotInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAetherSlotInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(slot_id_, option_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAetherSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAetherSlotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slot_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_id_)));
          set_has_slot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_id;
        break;
      }

      // required int32 option_id = 2;
      case 2: {
        if (tag == 16) {
         parse_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAetherSlotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAetherSlotInfo)
  return false;
#undef DO_
}

void mdAetherSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAetherSlotInfo)
  // required int32 slot_id = 1;
  if (has_slot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_id(), output);
  }

  // required int32 option_id = 2;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAetherSlotInfo)
}

::google::protobuf::uint8* mdAetherSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAetherSlotInfo)
  // required int32 slot_id = 1;
  if (has_slot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_id(), target);
  }

  // required int32 option_id = 2;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAetherSlotInfo)
  return target;
}

int mdAetherSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 slot_id = 1;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_id());
    }

    // required int32 option_id = 2;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAetherSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAetherSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAetherSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAetherSlotInfo::MergeFrom(const mdAetherSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_id()) {
      set_slot_id(from.slot_id());
    }
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAetherSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAetherSlotInfo::CopyFrom(const mdAetherSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAetherSlotInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdAetherSlotInfo::Swap(mdAetherSlotInfo* other) {
  if (other != this) {
    std::swap(slot_id_, other->slot_id_);
    std::swap(option_id_, other->option_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAetherSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAetherSlotInfo_descriptor_;
  metadata.reflection = mdAetherSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAetherEnhanceInfo::kEnhanceLevelFieldNumber;
const int mdAetherEnhanceInfo::kGradeFieldNumber;
const int mdAetherEnhanceInfo::kAetherPieceCostFieldNumber;
const int mdAetherEnhanceInfo::kEnhanceRateFieldNumber;
const int mdAetherEnhanceInfo::kDismantleAmountFieldNumber;
const int mdAetherEnhanceInfo::kSellPriceFieldNumber;
#endif  // !_MSC_VER

mdAetherEnhanceInfo::mdAetherEnhanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAetherEnhanceInfo)
}

void mdAetherEnhanceInfo::InitAsDefaultInstance() {
}

mdAetherEnhanceInfo::mdAetherEnhanceInfo(const mdAetherEnhanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAetherEnhanceInfo)
}

void mdAetherEnhanceInfo::SharedCtor() {
  _cached_size_ = 0;
  enhance_level_ = 0;
  grade_ = 0;
  aether_piece_cost_ = 0;
  enhance_rate_ = 0;
  dismantle_amount_ = 0;
  sell_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAetherEnhanceInfo::~mdAetherEnhanceInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAetherEnhanceInfo)
  SharedDtor();
}

void mdAetherEnhanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAetherEnhanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAetherEnhanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAetherEnhanceInfo_descriptor_;
}

const mdAetherEnhanceInfo& mdAetherEnhanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAetherEnhanceInfo* mdAetherEnhanceInfo::default_instance_ = NULL;

mdAetherEnhanceInfo* mdAetherEnhanceInfo::New() const {
  return new mdAetherEnhanceInfo;
}

void mdAetherEnhanceInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAetherEnhanceInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(enhance_level_, sell_price_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAetherEnhanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAetherEnhanceInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enhance_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_aether_piece_cost;
        break;
      }

      // required int32 aether_piece_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_aether_piece_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aether_piece_cost_)));
          set_has_aether_piece_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enhance_rate;
        break;
      }

      // required int32 enhance_rate = 4;
      case 4: {
        if (tag == 32) {
         parse_enhance_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_rate_)));
          set_has_enhance_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dismantle_amount;
        break;
      }

      // required int32 dismantle_amount = 5;
      case 5: {
        if (tag == 40) {
         parse_dismantle_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dismantle_amount_)));
          set_has_dismantle_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sell_price;
        break;
      }

      // required int32 sell_price = 6;
      case 6: {
        if (tag == 48) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAetherEnhanceInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAetherEnhanceInfo)
  return false;
#undef DO_
}

void mdAetherEnhanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAetherEnhanceInfo)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enhance_level(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required int32 aether_piece_cost = 3;
  if (has_aether_piece_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->aether_piece_cost(), output);
  }

  // required int32 enhance_rate = 4;
  if (has_enhance_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enhance_rate(), output);
  }

  // required int32 dismantle_amount = 5;
  if (has_dismantle_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dismantle_amount(), output);
  }

  // required int32 sell_price = 6;
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sell_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAetherEnhanceInfo)
}

::google::protobuf::uint8* mdAetherEnhanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAetherEnhanceInfo)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enhance_level(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required int32 aether_piece_cost = 3;
  if (has_aether_piece_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->aether_piece_cost(), target);
  }

  // required int32 enhance_rate = 4;
  if (has_enhance_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enhance_rate(), target);
  }

  // required int32 dismantle_amount = 5;
  if (has_dismantle_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dismantle_amount(), target);
  }

  // required int32 sell_price = 6;
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sell_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAetherEnhanceInfo)
  return target;
}

int mdAetherEnhanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enhance_level = 1;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 aether_piece_cost = 3;
    if (has_aether_piece_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aether_piece_cost());
    }

    // required int32 enhance_rate = 4;
    if (has_enhance_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_rate());
    }

    // required int32 dismantle_amount = 5;
    if (has_dismantle_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dismantle_amount());
    }

    // required int32 sell_price = 6;
    if (has_sell_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAetherEnhanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAetherEnhanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAetherEnhanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAetherEnhanceInfo::MergeFrom(const mdAetherEnhanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_aether_piece_cost()) {
      set_aether_piece_cost(from.aether_piece_cost());
    }
    if (from.has_enhance_rate()) {
      set_enhance_rate(from.enhance_rate());
    }
    if (from.has_dismantle_amount()) {
      set_dismantle_amount(from.dismantle_amount());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAetherEnhanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAetherEnhanceInfo::CopyFrom(const mdAetherEnhanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAetherEnhanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdAetherEnhanceInfo::Swap(mdAetherEnhanceInfo* other) {
  if (other != this) {
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(grade_, other->grade_);
    std::swap(aether_piece_cost_, other->aether_piece_cost_);
    std::swap(enhance_rate_, other->enhance_rate_);
    std::swap(dismantle_amount_, other->dismantle_amount_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAetherEnhanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAetherEnhanceInfo_descriptor_;
  metadata.reflection = mdAetherEnhanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAetherEnhanceOptionInfo::kEnhanceLevelFieldNumber;
const int mdAetherEnhanceOptionInfo::kTierFieldNumber;
const int mdAetherEnhanceOptionInfo::kStateMainOptionFieldNumber;
const int mdAetherEnhanceOptionInfo::kStateSubOptionFieldNumber;
#endif  // !_MSC_VER

mdAetherEnhanceOptionInfo::mdAetherEnhanceOptionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
}

void mdAetherEnhanceOptionInfo::InitAsDefaultInstance() {
}

mdAetherEnhanceOptionInfo::mdAetherEnhanceOptionInfo(const mdAetherEnhanceOptionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
}

void mdAetherEnhanceOptionInfo::SharedCtor() {
  _cached_size_ = 0;
  enhance_level_ = 0;
  tier_ = 0;
  state_main_option_ = 0;
  state_sub_option_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAetherEnhanceOptionInfo::~mdAetherEnhanceOptionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  SharedDtor();
}

void mdAetherEnhanceOptionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAetherEnhanceOptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAetherEnhanceOptionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAetherEnhanceOptionInfo_descriptor_;
}

const mdAetherEnhanceOptionInfo& mdAetherEnhanceOptionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAetherEnhanceOptionInfo* mdAetherEnhanceOptionInfo::default_instance_ = NULL;

mdAetherEnhanceOptionInfo* mdAetherEnhanceOptionInfo::New() const {
  return new mdAetherEnhanceOptionInfo;
}

void mdAetherEnhanceOptionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAetherEnhanceOptionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enhance_level_, state_sub_option_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAetherEnhanceOptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 enhance_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tier;
        break;
      }

      // required int32 tier = 2;
      case 2: {
        if (tag == 16) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state_main_option;
        break;
      }

      // required int32 state_main_option = 3;
      case 3: {
        if (tag == 24) {
         parse_state_main_option:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_main_option_)));
          set_has_state_main_option();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state_sub_option;
        break;
      }

      // required int32 state_sub_option = 4;
      case 4: {
        if (tag == 32) {
         parse_state_sub_option:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_sub_option_)));
          set_has_state_sub_option();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  return false;
#undef DO_
}

void mdAetherEnhanceOptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->enhance_level(), output);
  }

  // required int32 tier = 2;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tier(), output);
  }

  // required int32 state_main_option = 3;
  if (has_state_main_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state_main_option(), output);
  }

  // required int32 state_sub_option = 4;
  if (has_state_sub_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state_sub_option(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
}

::google::protobuf::uint8* mdAetherEnhanceOptionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  // required int32 enhance_level = 1;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->enhance_level(), target);
  }

  // required int32 tier = 2;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tier(), target);
  }

  // required int32 state_main_option = 3;
  if (has_state_main_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state_main_option(), target);
  }

  // required int32 state_sub_option = 4;
  if (has_state_sub_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state_sub_option(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAetherEnhanceOptionInfo)
  return target;
}

int mdAetherEnhanceOptionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 enhance_level = 1;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 tier = 2;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }

    // required int32 state_main_option = 3;
    if (has_state_main_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_main_option());
    }

    // required int32 state_sub_option = 4;
    if (has_state_sub_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_sub_option());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAetherEnhanceOptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAetherEnhanceOptionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAetherEnhanceOptionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAetherEnhanceOptionInfo::MergeFrom(const mdAetherEnhanceOptionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_state_main_option()) {
      set_state_main_option(from.state_main_option());
    }
    if (from.has_state_sub_option()) {
      set_state_sub_option(from.state_sub_option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAetherEnhanceOptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAetherEnhanceOptionInfo::CopyFrom(const mdAetherEnhanceOptionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAetherEnhanceOptionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdAetherEnhanceOptionInfo::Swap(mdAetherEnhanceOptionInfo* other) {
  if (other != this) {
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(tier_, other->tier_);
    std::swap(state_main_option_, other->state_main_option_);
    std::swap(state_sub_option_, other->state_sub_option_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAetherEnhanceOptionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAetherEnhanceOptionInfo_descriptor_;
  metadata.reflection = mdAetherEnhanceOptionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdAetherSetOptionInfo::kTypeFieldNumber;
const int mdAetherSetOptionInfo::kTierFieldNumber;
const int mdAetherSetOptionInfo::kSetOptionIdFieldNumber;
const int mdAetherSetOptionInfo::kMinApplyCountFieldNumber;
const int mdAetherSetOptionInfo::kTriggerRateFieldNumber;
const int mdAetherSetOptionInfo::kCooldownSecondFieldNumber;
const int mdAetherSetOptionInfo::kDamageRateFieldNumber;
#endif  // !_MSC_VER

mdAetherSetOptionInfo::mdAetherSetOptionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdAetherSetOptionInfo)
}

void mdAetherSetOptionInfo::InitAsDefaultInstance() {
}

mdAetherSetOptionInfo::mdAetherSetOptionInfo(const mdAetherSetOptionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdAetherSetOptionInfo)
}

void mdAetherSetOptionInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  tier_ = 0;
  set_option_id_ = 0;
  min_apply_count_ = 0;
  trigger_rate_ = 0;
  cooldown_second_ = 0;
  damage_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdAetherSetOptionInfo::~mdAetherSetOptionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdAetherSetOptionInfo)
  SharedDtor();
}

void mdAetherSetOptionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdAetherSetOptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdAetherSetOptionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdAetherSetOptionInfo_descriptor_;
}

const mdAetherSetOptionInfo& mdAetherSetOptionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdAetherSetOptionInfo* mdAetherSetOptionInfo::default_instance_ = NULL;

mdAetherSetOptionInfo* mdAetherSetOptionInfo::New() const {
  return new mdAetherSetOptionInfo;
}

void mdAetherSetOptionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdAetherSetOptionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(type_, damage_rate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdAetherSetOptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdAetherSetOptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tier;
        break;
      }

      // required int32 tier = 2;
      case 2: {
        if (tag == 16) {
         parse_tier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tier_)));
          set_has_tier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_set_option_id;
        break;
      }

      // required int32 set_option_id = 3;
      case 3: {
        if (tag == 24) {
         parse_set_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_option_id_)));
          set_has_set_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_apply_count;
        break;
      }

      // required int32 min_apply_count = 4;
      case 4: {
        if (tag == 32) {
         parse_min_apply_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_apply_count_)));
          set_has_min_apply_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trigger_rate;
        break;
      }

      // required int32 trigger_rate = 5;
      case 5: {
        if (tag == 40) {
         parse_trigger_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_rate_)));
          set_has_trigger_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cooldown_second;
        break;
      }

      // required int32 cooldown_second = 6;
      case 6: {
        if (tag == 48) {
         parse_cooldown_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooldown_second_)));
          set_has_cooldown_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_damage_rate;
        break;
      }

      // required int32 damage_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_damage_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_rate_)));
          set_has_damage_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdAetherSetOptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdAetherSetOptionInfo)
  return false;
#undef DO_
}

void mdAetherSetOptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdAetherSetOptionInfo)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 tier = 2;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tier(), output);
  }

  // required int32 set_option_id = 3;
  if (has_set_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->set_option_id(), output);
  }

  // required int32 min_apply_count = 4;
  if (has_min_apply_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_apply_count(), output);
  }

  // required int32 trigger_rate = 5;
  if (has_trigger_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->trigger_rate(), output);
  }

  // required int32 cooldown_second = 6;
  if (has_cooldown_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cooldown_second(), output);
  }

  // required int32 damage_rate = 7;
  if (has_damage_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damage_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdAetherSetOptionInfo)
}

::google::protobuf::uint8* mdAetherSetOptionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdAetherSetOptionInfo)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 tier = 2;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tier(), target);
  }

  // required int32 set_option_id = 3;
  if (has_set_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->set_option_id(), target);
  }

  // required int32 min_apply_count = 4;
  if (has_min_apply_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_apply_count(), target);
  }

  // required int32 trigger_rate = 5;
  if (has_trigger_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->trigger_rate(), target);
  }

  // required int32 cooldown_second = 6;
  if (has_cooldown_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cooldown_second(), target);
  }

  // required int32 damage_rate = 7;
  if (has_damage_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damage_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdAetherSetOptionInfo)
  return target;
}

int mdAetherSetOptionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 tier = 2;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tier());
    }

    // required int32 set_option_id = 3;
    if (has_set_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_option_id());
    }

    // required int32 min_apply_count = 4;
    if (has_min_apply_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_apply_count());
    }

    // required int32 trigger_rate = 5;
    if (has_trigger_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger_rate());
    }

    // required int32 cooldown_second = 6;
    if (has_cooldown_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooldown_second());
    }

    // required int32 damage_rate = 7;
    if (has_damage_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdAetherSetOptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdAetherSetOptionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdAetherSetOptionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdAetherSetOptionInfo::MergeFrom(const mdAetherSetOptionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_set_option_id()) {
      set_set_option_id(from.set_option_id());
    }
    if (from.has_min_apply_count()) {
      set_min_apply_count(from.min_apply_count());
    }
    if (from.has_trigger_rate()) {
      set_trigger_rate(from.trigger_rate());
    }
    if (from.has_cooldown_second()) {
      set_cooldown_second(from.cooldown_second());
    }
    if (from.has_damage_rate()) {
      set_damage_rate(from.damage_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdAetherSetOptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdAetherSetOptionInfo::CopyFrom(const mdAetherSetOptionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdAetherSetOptionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdAetherSetOptionInfo::Swap(mdAetherSetOptionInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tier_, other->tier_);
    std::swap(set_option_id_, other->set_option_id_);
    std::swap(min_apply_count_, other->min_apply_count_);
    std::swap(trigger_rate_, other->trigger_rate_);
    std::swap(cooldown_second_, other->cooldown_second_);
    std::swap(damage_rate_, other->damage_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdAetherSetOptionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdAetherSetOptionInfo_descriptor_;
  metadata.reflection = mdAetherSetOptionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDuelModeReward::kDuelModeFieldNumber;
const int mdDuelModeReward::kMatchResultFieldNumber;
const int mdDuelModeReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdDuelModeReward::mdDuelModeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDuelModeReward)
}

void mdDuelModeReward::InitAsDefaultInstance() {
}

mdDuelModeReward::mdDuelModeReward(const mdDuelModeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDuelModeReward)
}

void mdDuelModeReward::SharedCtor() {
  _cached_size_ = 0;
  duel_mode_ = 0;
  match_result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDuelModeReward::~mdDuelModeReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDuelModeReward)
  SharedDtor();
}

void mdDuelModeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDuelModeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDuelModeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDuelModeReward_descriptor_;
}

const mdDuelModeReward& mdDuelModeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDuelModeReward* mdDuelModeReward::default_instance_ = NULL;

mdDuelModeReward* mdDuelModeReward::New() const {
  return new mdDuelModeReward;
}

void mdDuelModeReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDuelModeReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(duel_mode_, match_result_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDuelModeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDuelModeReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.DuelMode duel_mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DuelMode_IsValid(value)) {
            set_duel_mode(static_cast< ::b2::protocol::commondata::DuelMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_match_result;
        break;
      }

      // required .b2.protocol.commondata.MatchResult.TYPE match_result = 2;
      case 2: {
        if (tag == 16) {
         parse_match_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchResult_TYPE_IsValid(value)) {
            set_match_result(static_cast< ::b2::protocol::commondata::MatchResult_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 3;
      case 3: {
        if (tag == 26) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDuelModeReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDuelModeReward)
  return false;
#undef DO_
}

void mdDuelModeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDuelModeReward)
  // required .b2.protocol.commondata.DuelMode duel_mode = 1;
  if (has_duel_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->duel_mode(), output);
  }

  // required .b2.protocol.commondata.MatchResult.TYPE match_result = 2;
  if (has_match_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_result(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDuelModeReward)
}

::google::protobuf::uint8* mdDuelModeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDuelModeReward)
  // required .b2.protocol.commondata.DuelMode duel_mode = 1;
  if (has_duel_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->duel_mode(), target);
  }

  // required .b2.protocol.commondata.MatchResult.TYPE match_result = 2;
  if (has_match_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_result(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDuelModeReward)
  return target;
}

int mdDuelModeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.DuelMode duel_mode = 1;
    if (has_duel_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->duel_mode());
    }

    // required .b2.protocol.commondata.MatchResult.TYPE match_result = 2;
    if (has_match_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_result());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 3;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDuelModeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDuelModeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDuelModeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDuelModeReward::MergeFrom(const mdDuelModeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duel_mode()) {
      set_duel_mode(from.duel_mode());
    }
    if (from.has_match_result()) {
      set_match_result(from.match_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDuelModeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDuelModeReward::CopyFrom(const mdDuelModeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDuelModeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdDuelModeReward::Swap(mdDuelModeReward* other) {
  if (other != this) {
    std::swap(duel_mode_, other->duel_mode_);
    std::swap(match_result_, other->match_result_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDuelModeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDuelModeReward_descriptor_;
  metadata.reflection = mdDuelModeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRaidExp::kRaidTypeFieldNumber;
const int mdRaidExp::kStepFieldNumber;
const int mdRaidExp::kExpFieldNumber;
#endif  // !_MSC_VER

mdRaidExp::mdRaidExp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRaidExp)
}

void mdRaidExp::InitAsDefaultInstance() {
}

mdRaidExp::mdRaidExp(const mdRaidExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRaidExp)
}

void mdRaidExp::SharedCtor() {
  _cached_size_ = 0;
  raid_type_ = 0;
  step_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRaidExp::~mdRaidExp() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRaidExp)
  SharedDtor();
}

void mdRaidExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRaidExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRaidExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRaidExp_descriptor_;
}

const mdRaidExp& mdRaidExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRaidExp* mdRaidExp::default_instance_ = NULL;

mdRaidExp* mdRaidExp::New() const {
  return new mdRaidExp;
}

void mdRaidExp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRaidExp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(raid_type_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRaidExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRaidExp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 raid_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // required int32 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required int32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRaidExp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRaidExp)
  return false;
#undef DO_
}

void mdRaidExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRaidExp)
  // required int32 raid_type = 1;
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->raid_type(), output);
  }

  // required int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRaidExp)
}

::google::protobuf::uint8* mdRaidExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRaidExp)
  // required int32 raid_type = 1;
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->raid_type(), target);
  }

  // required int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRaidExp)
  return target;
}

int mdRaidExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 raid_type = 1;
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_type());
    }

    // required int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRaidExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRaidExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRaidExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRaidExp::MergeFrom(const mdRaidExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRaidExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRaidExp::CopyFrom(const mdRaidExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRaidExp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdRaidExp::Swap(mdRaidExp* other) {
  if (other != this) {
    std::swap(raid_type_, other->raid_type_);
    std::swap(step_, other->step_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRaidExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRaidExp_descriptor_;
  metadata.reflection = mdRaidExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdUnitySkillMission::kMainCharacterTypeFieldNumber;
const int mdUnitySkillMission::kUnityCharacterTypeFieldNumber;
const int mdUnitySkillMission::kStepFieldNumber;
const int mdUnitySkillMission::kIndexFieldNumber;
const int mdUnitySkillMission::kEventTypeFieldNumber;
const int mdUnitySkillMission::kCondition1FieldNumber;
const int mdUnitySkillMission::kCondition2FieldNumber;
const int mdUnitySkillMission::kCondition3FieldNumber;
const int mdUnitySkillMission::kCondition4FieldNumber;
const int mdUnitySkillMission::kGoalCountFieldNumber;
const int mdUnitySkillMission::kRewardIdFieldNumber;
const int mdUnitySkillMission::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdUnitySkillMission::mdUnitySkillMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdUnitySkillMission)
}

void mdUnitySkillMission::InitAsDefaultInstance() {
}

mdUnitySkillMission::mdUnitySkillMission(const mdUnitySkillMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdUnitySkillMission)
}

void mdUnitySkillMission::SharedCtor() {
  _cached_size_ = 0;
  main_character_type_ = 1;
  unity_character_type_ = 1;
  step_ = 0;
  index_ = 0;
  event_type_ = 1;
  condition1_ = 0;
  condition2_ = 0;
  condition3_ = 0;
  condition4_ = 0;
  goal_count_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdUnitySkillMission::~mdUnitySkillMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdUnitySkillMission)
  SharedDtor();
}

void mdUnitySkillMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdUnitySkillMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdUnitySkillMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdUnitySkillMission_descriptor_;
}

const mdUnitySkillMission& mdUnitySkillMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdUnitySkillMission* mdUnitySkillMission::default_instance_ = NULL;

mdUnitySkillMission* mdUnitySkillMission::New() const {
  return new mdUnitySkillMission;
}

void mdUnitySkillMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdUnitySkillMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(step_, index_);
    ZR_(condition1_, condition3_);
    main_character_type_ = 1;
    unity_character_type_ = 1;
    event_type_ = 1;
  }
  ZR_(condition4_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdUnitySkillMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdUnitySkillMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_main_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unity_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_unity_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_unity_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_event_type;
        break;
      }

      // required .b2.protocol.commondata.UnitySkillEventType event_type = 5;
      case 5: {
        if (tag == 40) {
         parse_event_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::UnitySkillEventType_IsValid(value)) {
            set_event_type(static_cast< ::b2::protocol::commondata::UnitySkillEventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_condition1;
        break;
      }

      // required int32 condition1 = 6;
      case 6: {
        if (tag == 48) {
         parse_condition1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition1_)));
          set_has_condition1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_condition2;
        break;
      }

      // required int32 condition2 = 7;
      case 7: {
        if (tag == 56) {
         parse_condition2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition2_)));
          set_has_condition2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_condition3;
        break;
      }

      // required int32 condition3 = 8;
      case 8: {
        if (tag == 64) {
         parse_condition3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition3_)));
          set_has_condition3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_condition4;
        break;
      }

      // required int32 condition4 = 9;
      case 9: {
        if (tag == 72) {
         parse_condition4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition4_)));
          set_has_condition4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 10;
      case 10: {
        if (tag == 80) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 11;
      case 11: {
        if (tag == 88) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 12;
      case 12: {
        if (tag == 96) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdUnitySkillMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdUnitySkillMission)
  return false;
#undef DO_
}

void mdUnitySkillMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdUnitySkillMission)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->main_character_type(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unity_character_type(), output);
  }

  // required int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // required .b2.protocol.commondata.UnitySkillEventType event_type = 5;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->event_type(), output);
  }

  // required int32 condition1 = 6;
  if (has_condition1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition1(), output);
  }

  // required int32 condition2 = 7;
  if (has_condition2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->condition2(), output);
  }

  // required int32 condition3 = 8;
  if (has_condition3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->condition3(), output);
  }

  // required int32 condition4 = 9;
  if (has_condition4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->condition4(), output);
  }

  // required int32 goal_count = 10;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->goal_count(), output);
  }

  // required int32 reward_id = 11;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_id(), output);
  }

  // required int32 reward_count = 12;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdUnitySkillMission)
}

::google::protobuf::uint8* mdUnitySkillMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdUnitySkillMission)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->main_character_type(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unity_character_type(), target);
  }

  // required int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // required .b2.protocol.commondata.UnitySkillEventType event_type = 5;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->event_type(), target);
  }

  // required int32 condition1 = 6;
  if (has_condition1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition1(), target);
  }

  // required int32 condition2 = 7;
  if (has_condition2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->condition2(), target);
  }

  // required int32 condition3 = 8;
  if (has_condition3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->condition3(), target);
  }

  // required int32 condition4 = 9;
  if (has_condition4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->condition4(), target);
  }

  // required int32 goal_count = 10;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->goal_count(), target);
  }

  // required int32 reward_id = 11;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_id(), target);
  }

  // required int32 reward_count = 12;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdUnitySkillMission)
  return target;
}

int mdUnitySkillMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
    if (has_main_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_character_type());
    }

    // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
    if (has_unity_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unity_character_type());
    }

    // required int32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .b2.protocol.commondata.UnitySkillEventType event_type = 5;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_type());
    }

    // required int32 condition1 = 6;
    if (has_condition1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition1());
    }

    // required int32 condition2 = 7;
    if (has_condition2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition2());
    }

    // required int32 condition3 = 8;
    if (has_condition3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 condition4 = 9;
    if (has_condition4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition4());
    }

    // required int32 goal_count = 10;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

    // required int32 reward_id = 11;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 12;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdUnitySkillMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdUnitySkillMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdUnitySkillMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdUnitySkillMission::MergeFrom(const mdUnitySkillMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_character_type()) {
      set_main_character_type(from.main_character_type());
    }
    if (from.has_unity_character_type()) {
      set_unity_character_type(from.unity_character_type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_condition1()) {
      set_condition1(from.condition1());
    }
    if (from.has_condition2()) {
      set_condition2(from.condition2());
    }
    if (from.has_condition3()) {
      set_condition3(from.condition3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_condition4()) {
      set_condition4(from.condition4());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdUnitySkillMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdUnitySkillMission::CopyFrom(const mdUnitySkillMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdUnitySkillMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdUnitySkillMission::Swap(mdUnitySkillMission* other) {
  if (other != this) {
    std::swap(main_character_type_, other->main_character_type_);
    std::swap(unity_character_type_, other->unity_character_type_);
    std::swap(step_, other->step_);
    std::swap(index_, other->index_);
    std::swap(event_type_, other->event_type_);
    std::swap(condition1_, other->condition1_);
    std::swap(condition2_, other->condition2_);
    std::swap(condition3_, other->condition3_);
    std::swap(condition4_, other->condition4_);
    std::swap(goal_count_, other->goal_count_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdUnitySkillMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdUnitySkillMission_descriptor_;
  metadata.reflection = mdUnitySkillMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdUnitySkillOption::kMainCharacterTypeFieldNumber;
const int mdUnitySkillOption::kUnityCharacterTypeFieldNumber;
const int mdUnitySkillOption::kStepFieldNumber;
const int mdUnitySkillOption::kOptionIdFieldNumber;
const int mdUnitySkillOption::kOptionValueFieldNumber;
const int mdUnitySkillOption::kPowerFieldNumber;
#endif  // !_MSC_VER

mdUnitySkillOption::mdUnitySkillOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdUnitySkillOption)
}

void mdUnitySkillOption::InitAsDefaultInstance() {
}

mdUnitySkillOption::mdUnitySkillOption(const mdUnitySkillOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdUnitySkillOption)
}

void mdUnitySkillOption::SharedCtor() {
  _cached_size_ = 0;
  main_character_type_ = 1;
  unity_character_type_ = 1;
  step_ = 0;
  option_id_ = 0;
  option_value_ = 0;
  power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdUnitySkillOption::~mdUnitySkillOption() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdUnitySkillOption)
  SharedDtor();
}

void mdUnitySkillOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdUnitySkillOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdUnitySkillOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdUnitySkillOption_descriptor_;
}

const mdUnitySkillOption& mdUnitySkillOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdUnitySkillOption* mdUnitySkillOption::default_instance_ = NULL;

mdUnitySkillOption* mdUnitySkillOption::New() const {
  return new mdUnitySkillOption;
}

void mdUnitySkillOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdUnitySkillOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(step_, power_);
    main_character_type_ = 1;
    unity_character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdUnitySkillOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdUnitySkillOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_main_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unity_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_unity_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_unity_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_option_id;
        break;
      }

      // required int32 option_id = 4;
      case 4: {
        if (tag == 32) {
         parse_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_option_value;
        break;
      }

      // required double option_value = 5;
      case 5: {
        if (tag == 41) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_power;
        break;
      }

      // required double power = 6;
      case 6: {
        if (tag == 49) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdUnitySkillOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdUnitySkillOption)
  return false;
#undef DO_
}

void mdUnitySkillOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdUnitySkillOption)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->main_character_type(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unity_character_type(), output);
  }

  // required int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // required int32 option_id = 4;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->option_id(), output);
  }

  // required double option_value = 5;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->option_value(), output);
  }

  // required double power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdUnitySkillOption)
}

::google::protobuf::uint8* mdUnitySkillOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdUnitySkillOption)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->main_character_type(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unity_character_type(), target);
  }

  // required int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // required int32 option_id = 4;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->option_id(), target);
  }

  // required double option_value = 5;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->option_value(), target);
  }

  // required double power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdUnitySkillOption)
  return target;
}

int mdUnitySkillOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
    if (has_main_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_character_type());
    }

    // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
    if (has_unity_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unity_character_type());
    }

    // required int32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required int32 option_id = 4;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required double option_value = 5;
    if (has_option_value()) {
      total_size += 1 + 8;
    }

    // required double power = 6;
    if (has_power()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdUnitySkillOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdUnitySkillOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdUnitySkillOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdUnitySkillOption::MergeFrom(const mdUnitySkillOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_character_type()) {
      set_main_character_type(from.main_character_type());
    }
    if (from.has_unity_character_type()) {
      set_unity_character_type(from.unity_character_type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdUnitySkillOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdUnitySkillOption::CopyFrom(const mdUnitySkillOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdUnitySkillOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdUnitySkillOption::Swap(mdUnitySkillOption* other) {
  if (other != this) {
    std::swap(main_character_type_, other->main_character_type_);
    std::swap(unity_character_type_, other->unity_character_type_);
    std::swap(step_, other->step_);
    std::swap(option_id_, other->option_id_);
    std::swap(option_value_, other->option_value_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdUnitySkillOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdUnitySkillOption_descriptor_;
  metadata.reflection = mdUnitySkillOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdUnitySkillAwakenMission::kCharacterTypeFieldNumber;
const int mdUnitySkillAwakenMission::kMissionIdFieldNumber;
const int mdUnitySkillAwakenMission::kReqItemId1FieldNumber;
const int mdUnitySkillAwakenMission::kReqItemCount1FieldNumber;
const int mdUnitySkillAwakenMission::kReqItemId2FieldNumber;
const int mdUnitySkillAwakenMission::kReqItemCount2FieldNumber;
const int mdUnitySkillAwakenMission::kReqGoldFieldNumber;
const int mdUnitySkillAwakenMission::kSuccessRateFieldNumber;
const int mdUnitySkillAwakenMission::kSuccessRateAddFieldNumber;
#endif  // !_MSC_VER

mdUnitySkillAwakenMission::mdUnitySkillAwakenMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdUnitySkillAwakenMission)
}

void mdUnitySkillAwakenMission::InitAsDefaultInstance() {
}

mdUnitySkillAwakenMission::mdUnitySkillAwakenMission(const mdUnitySkillAwakenMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdUnitySkillAwakenMission)
}

void mdUnitySkillAwakenMission::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  mission_id_ = 0;
  req_item_id_1_ = 0;
  req_item_count_1_ = 0;
  req_item_id_2_ = 0;
  req_item_count_2_ = 0;
  req_gold_ = 0;
  success_rate_ = 0;
  success_rate_add_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdUnitySkillAwakenMission::~mdUnitySkillAwakenMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  SharedDtor();
}

void mdUnitySkillAwakenMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdUnitySkillAwakenMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdUnitySkillAwakenMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdUnitySkillAwakenMission_descriptor_;
}

const mdUnitySkillAwakenMission& mdUnitySkillAwakenMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdUnitySkillAwakenMission* mdUnitySkillAwakenMission::default_instance_ = NULL;

mdUnitySkillAwakenMission* mdUnitySkillAwakenMission::New() const {
  return new mdUnitySkillAwakenMission;
}

void mdUnitySkillAwakenMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdUnitySkillAwakenMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mission_id_, success_rate_);
    character_type_ = 1;
  }
  success_rate_add_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdUnitySkillAwakenMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // required int32 mission_id = 2;
      case 2: {
        if (tag == 16) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_req_item_id_1;
        break;
      }

      // required int32 req_item_id_1 = 3;
      case 3: {
        if (tag == 24) {
         parse_req_item_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_item_id_1_)));
          set_has_req_item_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_req_item_count_1;
        break;
      }

      // required int32 req_item_count_1 = 4;
      case 4: {
        if (tag == 32) {
         parse_req_item_count_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_item_count_1_)));
          set_has_req_item_count_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_req_item_id_2;
        break;
      }

      // required int32 req_item_id_2 = 5;
      case 5: {
        if (tag == 40) {
         parse_req_item_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_item_id_2_)));
          set_has_req_item_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_req_item_count_2;
        break;
      }

      // required int32 req_item_count_2 = 6;
      case 6: {
        if (tag == 48) {
         parse_req_item_count_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_item_count_2_)));
          set_has_req_item_count_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_req_gold;
        break;
      }

      // required int32 req_gold = 7;
      case 7: {
        if (tag == 56) {
         parse_req_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &req_gold_)));
          set_has_req_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_success_rate;
        break;
      }

      // required int32 success_rate = 8;
      case 8: {
        if (tag == 64) {
         parse_success_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_rate_)));
          set_has_success_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_success_rate_add;
        break;
      }

      // required int32 success_rate_add = 9;
      case 9: {
        if (tag == 72) {
         parse_success_rate_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_rate_add_)));
          set_has_success_rate_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  return false;
#undef DO_
}

void mdUnitySkillAwakenMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_id(), output);
  }

  // required int32 req_item_id_1 = 3;
  if (has_req_item_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->req_item_id_1(), output);
  }

  // required int32 req_item_count_1 = 4;
  if (has_req_item_count_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->req_item_count_1(), output);
  }

  // required int32 req_item_id_2 = 5;
  if (has_req_item_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->req_item_id_2(), output);
  }

  // required int32 req_item_count_2 = 6;
  if (has_req_item_count_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->req_item_count_2(), output);
  }

  // required int32 req_gold = 7;
  if (has_req_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->req_gold(), output);
  }

  // required int32 success_rate = 8;
  if (has_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->success_rate(), output);
  }

  // required int32 success_rate_add = 9;
  if (has_success_rate_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->success_rate_add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdUnitySkillAwakenMission)
}

::google::protobuf::uint8* mdUnitySkillAwakenMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_id(), target);
  }

  // required int32 req_item_id_1 = 3;
  if (has_req_item_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->req_item_id_1(), target);
  }

  // required int32 req_item_count_1 = 4;
  if (has_req_item_count_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->req_item_count_1(), target);
  }

  // required int32 req_item_id_2 = 5;
  if (has_req_item_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->req_item_id_2(), target);
  }

  // required int32 req_item_count_2 = 6;
  if (has_req_item_count_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->req_item_count_2(), target);
  }

  // required int32 req_gold = 7;
  if (has_req_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->req_gold(), target);
  }

  // required int32 success_rate = 8;
  if (has_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->success_rate(), target);
  }

  // required int32 success_rate_add = 9;
  if (has_success_rate_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->success_rate_add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdUnitySkillAwakenMission)
  return target;
}

int mdUnitySkillAwakenMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // required int32 req_item_id_1 = 3;
    if (has_req_item_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_item_id_1());
    }

    // required int32 req_item_count_1 = 4;
    if (has_req_item_count_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_item_count_1());
    }

    // required int32 req_item_id_2 = 5;
    if (has_req_item_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_item_id_2());
    }

    // required int32 req_item_count_2 = 6;
    if (has_req_item_count_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_item_count_2());
    }

    // required int32 req_gold = 7;
    if (has_req_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->req_gold());
    }

    // required int32 success_rate = 8;
    if (has_success_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_rate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 success_rate_add = 9;
    if (has_success_rate_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_rate_add());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdUnitySkillAwakenMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdUnitySkillAwakenMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdUnitySkillAwakenMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdUnitySkillAwakenMission::MergeFrom(const mdUnitySkillAwakenMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_req_item_id_1()) {
      set_req_item_id_1(from.req_item_id_1());
    }
    if (from.has_req_item_count_1()) {
      set_req_item_count_1(from.req_item_count_1());
    }
    if (from.has_req_item_id_2()) {
      set_req_item_id_2(from.req_item_id_2());
    }
    if (from.has_req_item_count_2()) {
      set_req_item_count_2(from.req_item_count_2());
    }
    if (from.has_req_gold()) {
      set_req_gold(from.req_gold());
    }
    if (from.has_success_rate()) {
      set_success_rate(from.success_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_success_rate_add()) {
      set_success_rate_add(from.success_rate_add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdUnitySkillAwakenMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdUnitySkillAwakenMission::CopyFrom(const mdUnitySkillAwakenMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdUnitySkillAwakenMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdUnitySkillAwakenMission::Swap(mdUnitySkillAwakenMission* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(req_item_id_1_, other->req_item_id_1_);
    std::swap(req_item_count_1_, other->req_item_count_1_);
    std::swap(req_item_id_2_, other->req_item_id_2_);
    std::swap(req_item_count_2_, other->req_item_count_2_);
    std::swap(req_gold_, other->req_gold_);
    std::swap(success_rate_, other->success_rate_);
    std::swap(success_rate_add_, other->success_rate_add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdUnitySkillAwakenMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdUnitySkillAwakenMission_descriptor_;
  metadata.reflection = mdUnitySkillAwakenMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdRestReward::kIdFieldNumber;
const int mdRestReward::kRewardIdFieldNumber;
const int mdRestReward::kRewardCountPerPointFieldNumber;
#endif  // !_MSC_VER

mdRestReward::mdRestReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdRestReward)
}

void mdRestReward::InitAsDefaultInstance() {
}

mdRestReward::mdRestReward(const mdRestReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdRestReward)
}

void mdRestReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  reward_id_ = 0;
  reward_count_per_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdRestReward::~mdRestReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdRestReward)
  SharedDtor();
}

void mdRestReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdRestReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdRestReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdRestReward_descriptor_;
}

const mdRestReward& mdRestReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdRestReward* mdRestReward::default_instance_ = NULL;

mdRestReward* mdRestReward::New() const {
  return new mdRestReward;
}

void mdRestReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdRestReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, reward_count_per_point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdRestReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdRestReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_reward_count_per_point;
        break;
      }

      // required float reward_count_per_point = 3;
      case 3: {
        if (tag == 29) {
         parse_reward_count_per_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reward_count_per_point_)));
          set_has_reward_count_per_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdRestReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdRestReward)
  return false;
#undef DO_
}

void mdRestReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdRestReward)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  // required float reward_count_per_point = 3;
  if (has_reward_count_per_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->reward_count_per_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdRestReward)
}

::google::protobuf::uint8* mdRestReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdRestReward)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  // required float reward_count_per_point = 3;
  if (has_reward_count_per_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->reward_count_per_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdRestReward)
  return target;
}

int mdRestReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required float reward_count_per_point = 3;
    if (has_reward_count_per_point()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdRestReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdRestReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdRestReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdRestReward::MergeFrom(const mdRestReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count_per_point()) {
      set_reward_count_per_point(from.reward_count_per_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdRestReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdRestReward::CopyFrom(const mdRestReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdRestReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdRestReward::Swap(mdRestReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_per_point_, other->reward_count_per_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdRestReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdRestReward_descriptor_;
  metadata.reflection = mdRestReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdEventInfo::kEventIdFieldNumber;
const int mdEventInfo::kEventCategoryFieldNumber;
const int mdEventInfo::kEventTabNameFieldNumber;
const int mdEventInfo::kTitleFieldNumber;
const int mdEventInfo::kStartTimeFieldNumber;
const int mdEventInfo::kEndTimeFieldNumber;
const int mdEventInfo::kExplainFieldNumber;
const int mdEventInfo::kBannerUrlFieldNumber;
const int mdEventInfo::kLinkTextFieldNumber;
const int mdEventInfo::kLinkUrlFieldNumber;
const int mdEventInfo::kTabOrderFieldNumber;
const int mdEventInfo::kEventSubCategoryFieldNumber;
#endif  // !_MSC_VER

mdEventInfo::mdEventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdEventInfo)
}

void mdEventInfo::InitAsDefaultInstance() {
}

mdEventInfo::mdEventInfo(const mdEventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdEventInfo)
}

void mdEventInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_id_ = 0;
  event_category_ = 1;
  event_tab_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  explain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tab_order_ = 0;
  event_sub_category_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdEventInfo::~mdEventInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdEventInfo)
  SharedDtor();
}

void mdEventInfo::SharedDtor() {
  if (event_tab_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete event_tab_name_;
  }
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explain_;
  }
  if (banner_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banner_url_;
  }
  if (link_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete link_text_;
  }
  if (link_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete link_url_;
  }
  if (this != default_instance_) {
  }
}

void mdEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdEventInfo_descriptor_;
}

const mdEventInfo& mdEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdEventInfo* mdEventInfo::default_instance_ = NULL;

mdEventInfo* mdEventInfo::New() const {
  return new mdEventInfo;
}

void mdEventInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdEventInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_time_, end_time_);
    event_id_ = 0;
    event_category_ = 1;
    if (has_event_tab_name()) {
      if (event_tab_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        event_tab_name_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_explain()) {
      if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        explain_->clear();
      }
    }
    if (has_banner_url()) {
      if (banner_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banner_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(tab_order_, event_sub_category_);
    if (has_link_text()) {
      if (link_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        link_text_->clear();
      }
    }
    if (has_link_url()) {
      if (link_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        link_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_category;
        break;
      }

      // required .b2.protocol.commondata.EventCategory event_category = 2;
      case 2: {
        if (tag == 16) {
         parse_event_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EventCategory_IsValid(value)) {
            set_event_category(static_cast< ::b2::protocol::commondata::EventCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_event_tab_name;
        break;
      }

      // required string event_tab_name = 3;
      case 3: {
        if (tag == 26) {
         parse_event_tab_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_tab_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_tab_name().data(), this->event_tab_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "event_tab_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_title;
        break;
      }

      // required string title = 4;
      case 4: {
        if (tag == 34) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 6;
      case 6: {
        if (tag == 48) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_explain;
        break;
      }

      // required string explain = 7;
      case 7: {
        if (tag == 58) {
         parse_explain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explain().data(), this->explain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_banner_url;
        break;
      }

      // required string banner_url = 8;
      case 8: {
        if (tag == 66) {
         parse_banner_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->banner_url().data(), this->banner_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "banner_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_link_text;
        break;
      }

      // required string link_text = 9;
      case 9: {
        if (tag == 74) {
         parse_link_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_text().data(), this->link_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "link_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_link_url;
        break;
      }

      // required string link_url = 10;
      case 10: {
        if (tag == 82) {
         parse_link_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_url().data(), this->link_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "link_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tab_order;
        break;
      }

      // required int32 tab_order = 11;
      case 11: {
        if (tag == 88) {
         parse_tab_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_order_)));
          set_has_tab_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_event_sub_category;
        break;
      }

      // required int32 event_sub_category = 12;
      case 12: {
        if (tag == 96) {
         parse_event_sub_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_sub_category_)));
          set_has_event_sub_category();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdEventInfo)
  return false;
#undef DO_
}

void mdEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdEventInfo)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required .b2.protocol.commondata.EventCategory event_category = 2;
  if (has_event_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event_category(), output);
  }

  // required string event_tab_name = 3;
  if (has_event_tab_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_tab_name().data(), this->event_tab_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_tab_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->event_tab_name(), output);
  }

  // required string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->title(), output);
  }

  // required int64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_time(), output);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  // required string explain = 7;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->explain(), output);
  }

  // required string banner_url = 8;
  if (has_banner_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banner_url().data(), this->banner_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banner_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->banner_url(), output);
  }

  // required string link_text = 9;
  if (has_link_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_text().data(), this->link_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->link_text(), output);
  }

  // required string link_url = 10;
  if (has_link_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_url().data(), this->link_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->link_url(), output);
  }

  // required int32 tab_order = 11;
  if (has_tab_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tab_order(), output);
  }

  // required int32 event_sub_category = 12;
  if (has_event_sub_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->event_sub_category(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdEventInfo)
}

::google::protobuf::uint8* mdEventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdEventInfo)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required .b2.protocol.commondata.EventCategory event_category = 2;
  if (has_event_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event_category(), target);
  }

  // required string event_tab_name = 3;
  if (has_event_tab_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_tab_name().data(), this->event_tab_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "event_tab_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->event_tab_name(), target);
  }

  // required string title = 4;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->title(), target);
  }

  // required int64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_time(), target);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  // required string explain = 7;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->explain(), target);
  }

  // required string banner_url = 8;
  if (has_banner_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banner_url().data(), this->banner_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banner_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->banner_url(), target);
  }

  // required string link_text = 9;
  if (has_link_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_text().data(), this->link_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->link_text(), target);
  }

  // required string link_url = 10;
  if (has_link_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_url().data(), this->link_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->link_url(), target);
  }

  // required int32 tab_order = 11;
  if (has_tab_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tab_order(), target);
  }

  // required int32 event_sub_category = 12;
  if (has_event_sub_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->event_sub_category(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdEventInfo)
  return target;
}

int mdEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required .b2.protocol.commondata.EventCategory event_category = 2;
    if (has_event_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event_category());
    }

    // required string event_tab_name = 3;
    if (has_event_tab_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_tab_name());
    }

    // required string title = 4;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // required string explain = 7;
    if (has_explain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain());
    }

    // required string banner_url = 8;
    if (has_banner_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_url());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string link_text = 9;
    if (has_link_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_text());
    }

    // required string link_url = 10;
    if (has_link_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_url());
    }

    // required int32 tab_order = 11;
    if (has_tab_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_order());
    }

    // required int32 event_sub_category = 12;
    if (has_event_sub_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_sub_category());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdEventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdEventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdEventInfo::MergeFrom(const mdEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_category()) {
      set_event_category(from.event_category());
    }
    if (from.has_event_tab_name()) {
      set_event_tab_name(from.event_tab_name());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_explain()) {
      set_explain(from.explain());
    }
    if (from.has_banner_url()) {
      set_banner_url(from.banner_url());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_link_text()) {
      set_link_text(from.link_text());
    }
    if (from.has_link_url()) {
      set_link_url(from.link_url());
    }
    if (from.has_tab_order()) {
      set_tab_order(from.tab_order());
    }
    if (from.has_event_sub_category()) {
      set_event_sub_category(from.event_sub_category());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdEventInfo::CopyFrom(const mdEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdEventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdEventInfo::Swap(mdEventInfo* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_category_, other->event_category_);
    std::swap(event_tab_name_, other->event_tab_name_);
    std::swap(title_, other->title_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(explain_, other->explain_);
    std::swap(banner_url_, other->banner_url_);
    std::swap(link_text_, other->link_text_);
    std::swap(link_url_, other->link_url_);
    std::swap(tab_order_, other->tab_order_);
    std::swap(event_sub_category_, other->event_sub_category_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdEventInfo_descriptor_;
  metadata.reflection = mdEventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdPointEvent::kEventIdFieldNumber;
const int mdPointEvent::kEventTypeFieldNumber;
const int mdPointEvent::kPointFieldNumber;
const int mdPointEvent::kIndexFieldNumber;
const int mdPointEvent::kCondition1FieldNumber;
const int mdPointEvent::kCondition2FieldNumber;
const int mdPointEvent::kCondition3FieldNumber;
const int mdPointEvent::kCondition4FieldNumber;
#endif  // !_MSC_VER

mdPointEvent::mdPointEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdPointEvent)
}

void mdPointEvent::InitAsDefaultInstance() {
}

mdPointEvent::mdPointEvent(const mdPointEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdPointEvent)
}

void mdPointEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  event_type_ = 0;
  point_ = 0;
  index_ = 0;
  condition1_ = 0;
  condition2_ = 0;
  condition3_ = 0;
  condition4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdPointEvent::~mdPointEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdPointEvent)
  SharedDtor();
}

void mdPointEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdPointEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdPointEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdPointEvent_descriptor_;
}

const mdPointEvent& mdPointEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdPointEvent* mdPointEvent::default_instance_ = NULL;

mdPointEvent* mdPointEvent::New() const {
  return new mdPointEvent;
}

void mdPointEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdPointEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_id_, condition4_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdPointEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdPointEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 2;
      case 2: {
        if (tag == 16) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // required int32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition1;
        break;
      }

      // required int32 condition1 = 5;
      case 5: {
        if (tag == 40) {
         parse_condition1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition1_)));
          set_has_condition1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_condition2;
        break;
      }

      // required int32 condition2 = 6;
      case 6: {
        if (tag == 48) {
         parse_condition2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition2_)));
          set_has_condition2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_condition3;
        break;
      }

      // required int32 condition3 = 7;
      case 7: {
        if (tag == 56) {
         parse_condition3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition3_)));
          set_has_condition3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_condition4;
        break;
      }

      // required int32 condition4 = 8;
      case 8: {
        if (tag == 64) {
         parse_condition4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition4_)));
          set_has_condition4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdPointEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdPointEvent)
  return false;
#undef DO_
}

void mdPointEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdPointEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // required int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // required int32 condition1 = 5;
  if (has_condition1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition1(), output);
  }

  // required int32 condition2 = 6;
  if (has_condition2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition2(), output);
  }

  // required int32 condition3 = 7;
  if (has_condition3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->condition3(), output);
  }

  // required int32 condition4 = 8;
  if (has_condition4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->condition4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdPointEvent)
}

::google::protobuf::uint8* mdPointEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdPointEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_type(), target);
  }

  // required int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // required int32 condition1 = 5;
  if (has_condition1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition1(), target);
  }

  // required int32 condition2 = 6;
  if (has_condition2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition2(), target);
  }

  // required int32 condition3 = 7;
  if (has_condition3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->condition3(), target);
  }

  // required int32 condition4 = 8;
  if (has_condition4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->condition4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdPointEvent)
  return target;
}

int mdPointEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 condition1 = 5;
    if (has_condition1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition1());
    }

    // required int32 condition2 = 6;
    if (has_condition2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition2());
    }

    // required int32 condition3 = 7;
    if (has_condition3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition3());
    }

    // required int32 condition4 = 8;
    if (has_condition4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdPointEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdPointEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdPointEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdPointEvent::MergeFrom(const mdPointEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_condition1()) {
      set_condition1(from.condition1());
    }
    if (from.has_condition2()) {
      set_condition2(from.condition2());
    }
    if (from.has_condition3()) {
      set_condition3(from.condition3());
    }
    if (from.has_condition4()) {
      set_condition4(from.condition4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdPointEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdPointEvent::CopyFrom(const mdPointEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdPointEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdPointEvent::Swap(mdPointEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(point_, other->point_);
    std::swap(index_, other->index_);
    std::swap(condition1_, other->condition1_);
    std::swap(condition2_, other->condition2_);
    std::swap(condition3_, other->condition3_);
    std::swap(condition4_, other->condition4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdPointEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdPointEvent_descriptor_;
  metadata.reflection = mdPointEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdPointEventReward::kEventIdFieldNumber;
const int mdPointEventReward::kIndexFieldNumber;
const int mdPointEventReward::kRewardIdFieldNumber;
const int mdPointEventReward::kRewardCountFieldNumber;
const int mdPointEventReward::kNeedPointFieldNumber;
const int mdPointEventReward::kTabGroupIdFieldNumber;
const int mdPointEventReward::kBuyLimitCountFieldNumber;
#endif  // !_MSC_VER

mdPointEventReward::mdPointEventReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdPointEventReward)
}

void mdPointEventReward::InitAsDefaultInstance() {
}

mdPointEventReward::mdPointEventReward(const mdPointEventReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdPointEventReward)
}

void mdPointEventReward::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  need_point_ = 0;
  tab_group_id_ = 0;
  buy_limit_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdPointEventReward::~mdPointEventReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdPointEventReward)
  SharedDtor();
}

void mdPointEventReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdPointEventReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdPointEventReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdPointEventReward_descriptor_;
}

const mdPointEventReward& mdPointEventReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdPointEventReward* mdPointEventReward::default_instance_ = NULL;

mdPointEventReward* mdPointEventReward::New() const {
  return new mdPointEventReward;
}

void mdPointEventReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdPointEventReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(event_id_, buy_limit_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdPointEventReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdPointEventReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_need_point;
        break;
      }

      // required int32 need_point = 5;
      case 5: {
        if (tag == 40) {
         parse_need_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_point_)));
          set_has_need_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tab_group_id;
        break;
      }

      // required int32 tab_group_id = 6;
      case 6: {
        if (tag == 48) {
         parse_tab_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_group_id_)));
          set_has_tab_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_buy_limit_count;
        break;
      }

      // required int32 buy_limit_count = 7;
      case 7: {
        if (tag == 56) {
         parse_buy_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_limit_count_)));
          set_has_buy_limit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdPointEventReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdPointEventReward)
  return false;
#undef DO_
}

void mdPointEventReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdPointEventReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count(), output);
  }

  // required int32 need_point = 5;
  if (has_need_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->need_point(), output);
  }

  // required int32 tab_group_id = 6;
  if (has_tab_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tab_group_id(), output);
  }

  // required int32 buy_limit_count = 7;
  if (has_buy_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buy_limit_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdPointEventReward)
}

::google::protobuf::uint8* mdPointEventReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdPointEventReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count(), target);
  }

  // required int32 need_point = 5;
  if (has_need_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->need_point(), target);
  }

  // required int32 tab_group_id = 6;
  if (has_tab_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tab_group_id(), target);
  }

  // required int32 buy_limit_count = 7;
  if (has_buy_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buy_limit_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdPointEventReward)
  return target;
}

int mdPointEventReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 4;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

    // required int32 need_point = 5;
    if (has_need_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_point());
    }

    // required int32 tab_group_id = 6;
    if (has_tab_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_group_id());
    }

    // required int32 buy_limit_count = 7;
    if (has_buy_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_limit_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdPointEventReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdPointEventReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdPointEventReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdPointEventReward::MergeFrom(const mdPointEventReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_need_point()) {
      set_need_point(from.need_point());
    }
    if (from.has_tab_group_id()) {
      set_tab_group_id(from.tab_group_id());
    }
    if (from.has_buy_limit_count()) {
      set_buy_limit_count(from.buy_limit_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdPointEventReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdPointEventReward::CopyFrom(const mdPointEventReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdPointEventReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdPointEventReward::Swap(mdPointEventReward* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(need_point_, other->need_point_);
    std::swap(tab_group_id_, other->tab_group_id_);
    std::swap(buy_limit_count_, other->buy_limit_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdPointEventReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdPointEventReward_descriptor_;
  metadata.reflection = mdPointEventReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdGemPurchaseEventReward::kEventIdFieldNumber;
const int mdGemPurchaseEventReward::kIndexFieldNumber;
const int mdGemPurchaseEventReward::kGoalCountFieldNumber;
const int mdGemPurchaseEventReward::kRewardId1FieldNumber;
const int mdGemPurchaseEventReward::kRewardCount1FieldNumber;
const int mdGemPurchaseEventReward::kRewardId2FieldNumber;
const int mdGemPurchaseEventReward::kRewardCount2FieldNumber;
const int mdGemPurchaseEventReward::kRewardId3FieldNumber;
const int mdGemPurchaseEventReward::kRewardCount3FieldNumber;
#endif  // !_MSC_VER

mdGemPurchaseEventReward::mdGemPurchaseEventReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdGemPurchaseEventReward)
}

void mdGemPurchaseEventReward::InitAsDefaultInstance() {
}

mdGemPurchaseEventReward::mdGemPurchaseEventReward(const mdGemPurchaseEventReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdGemPurchaseEventReward)
}

void mdGemPurchaseEventReward::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  goal_count_ = 0;
  reward_id1_ = 0;
  reward_count1_ = 0;
  reward_id2_ = 0;
  reward_count2_ = 0;
  reward_id3_ = 0;
  reward_count3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdGemPurchaseEventReward::~mdGemPurchaseEventReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdGemPurchaseEventReward)
  SharedDtor();
}

void mdGemPurchaseEventReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdGemPurchaseEventReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdGemPurchaseEventReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdGemPurchaseEventReward_descriptor_;
}

const mdGemPurchaseEventReward& mdGemPurchaseEventReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdGemPurchaseEventReward* mdGemPurchaseEventReward::default_instance_ = NULL;

mdGemPurchaseEventReward* mdGemPurchaseEventReward::New() const {
  return new mdGemPurchaseEventReward;
}

void mdGemPurchaseEventReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdGemPurchaseEventReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_id_, reward_id3_);
  }
  reward_count3_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdGemPurchaseEventReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdGemPurchaseEventReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 3;
      case 3: {
        if (tag == 24) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id1;
        break;
      }

      // required int32 reward_id1 = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id1_)));
          set_has_reward_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count1;
        break;
      }

      // required int32 reward_count1 = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count1_)));
          set_has_reward_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_id2;
        break;
      }

      // required int32 reward_id2 = 6;
      case 6: {
        if (tag == 48) {
         parse_reward_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id2_)));
          set_has_reward_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_count2;
        break;
      }

      // required int32 reward_count2 = 7;
      case 7: {
        if (tag == 56) {
         parse_reward_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count2_)));
          set_has_reward_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reward_id3;
        break;
      }

      // required int32 reward_id3 = 8;
      case 8: {
        if (tag == 64) {
         parse_reward_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id3_)));
          set_has_reward_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_count3;
        break;
      }

      // required int32 reward_count3 = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count3_)));
          set_has_reward_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdGemPurchaseEventReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdGemPurchaseEventReward)
  return false;
#undef DO_
}

void mdGemPurchaseEventReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdGemPurchaseEventReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 goal_count = 3;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_count(), output);
  }

  // required int32 reward_id1 = 4;
  if (has_reward_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id1(), output);
  }

  // required int32 reward_count1 = 5;
  if (has_reward_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count1(), output);
  }

  // required int32 reward_id2 = 6;
  if (has_reward_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_id2(), output);
  }

  // required int32 reward_count2 = 7;
  if (has_reward_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_count2(), output);
  }

  // required int32 reward_id3 = 8;
  if (has_reward_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_id3(), output);
  }

  // required int32 reward_count3 = 9;
  if (has_reward_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_count3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdGemPurchaseEventReward)
}

::google::protobuf::uint8* mdGemPurchaseEventReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdGemPurchaseEventReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 goal_count = 3;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_count(), target);
  }

  // required int32 reward_id1 = 4;
  if (has_reward_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id1(), target);
  }

  // required int32 reward_count1 = 5;
  if (has_reward_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count1(), target);
  }

  // required int32 reward_id2 = 6;
  if (has_reward_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_id2(), target);
  }

  // required int32 reward_count2 = 7;
  if (has_reward_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_count2(), target);
  }

  // required int32 reward_id3 = 8;
  if (has_reward_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_id3(), target);
  }

  // required int32 reward_count3 = 9;
  if (has_reward_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_count3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdGemPurchaseEventReward)
  return target;
}

int mdGemPurchaseEventReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 goal_count = 3;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

    // required int32 reward_id1 = 4;
    if (has_reward_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id1());
    }

    // required int32 reward_count1 = 5;
    if (has_reward_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count1());
    }

    // required int32 reward_id2 = 6;
    if (has_reward_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id2());
    }

    // required int32 reward_count2 = 7;
    if (has_reward_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count2());
    }

    // required int32 reward_id3 = 8;
    if (has_reward_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_count3 = 9;
    if (has_reward_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdGemPurchaseEventReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdGemPurchaseEventReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdGemPurchaseEventReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdGemPurchaseEventReward::MergeFrom(const mdGemPurchaseEventReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
    if (from.has_reward_id1()) {
      set_reward_id1(from.reward_id1());
    }
    if (from.has_reward_count1()) {
      set_reward_count1(from.reward_count1());
    }
    if (from.has_reward_id2()) {
      set_reward_id2(from.reward_id2());
    }
    if (from.has_reward_count2()) {
      set_reward_count2(from.reward_count2());
    }
    if (from.has_reward_id3()) {
      set_reward_id3(from.reward_id3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_count3()) {
      set_reward_count3(from.reward_count3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdGemPurchaseEventReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdGemPurchaseEventReward::CopyFrom(const mdGemPurchaseEventReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdGemPurchaseEventReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdGemPurchaseEventReward::Swap(mdGemPurchaseEventReward* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(goal_count_, other->goal_count_);
    std::swap(reward_id1_, other->reward_id1_);
    std::swap(reward_count1_, other->reward_count1_);
    std::swap(reward_id2_, other->reward_id2_);
    std::swap(reward_count2_, other->reward_count2_);
    std::swap(reward_id3_, other->reward_id3_);
    std::swap(reward_count3_, other->reward_count3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdGemPurchaseEventReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdGemPurchaseEventReward_descriptor_;
  metadata.reflection = mdGemPurchaseEventReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdLevelUpEvent::kEventIdFieldNumber;
const int mdLevelUpEvent::kIndexFieldNumber;
const int mdLevelUpEvent::kLevelFieldNumber;
const int mdLevelUpEvent::kRewardIdFieldNumber;
const int mdLevelUpEvent::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdLevelUpEvent::mdLevelUpEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdLevelUpEvent)
}

void mdLevelUpEvent::InitAsDefaultInstance() {
}

mdLevelUpEvent::mdLevelUpEvent(const mdLevelUpEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdLevelUpEvent)
}

void mdLevelUpEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  level_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdLevelUpEvent::~mdLevelUpEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdLevelUpEvent)
  SharedDtor();
}

void mdLevelUpEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdLevelUpEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdLevelUpEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdLevelUpEvent_descriptor_;
}

const mdLevelUpEvent& mdLevelUpEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdLevelUpEvent* mdLevelUpEvent::default_instance_ = NULL;

mdLevelUpEvent* mdLevelUpEvent::New() const {
  return new mdLevelUpEvent;
}

void mdLevelUpEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdLevelUpEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(event_id_, reward_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdLevelUpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdLevelUpEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdLevelUpEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdLevelUpEvent)
  return false;
#undef DO_
}

void mdLevelUpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdLevelUpEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdLevelUpEvent)
}

::google::protobuf::uint8* mdLevelUpEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdLevelUpEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdLevelUpEvent)
  return target;
}

int mdLevelUpEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 5;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdLevelUpEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdLevelUpEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdLevelUpEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdLevelUpEvent::MergeFrom(const mdLevelUpEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdLevelUpEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdLevelUpEvent::CopyFrom(const mdLevelUpEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdLevelUpEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdLevelUpEvent::Swap(mdLevelUpEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(level_, other->level_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdLevelUpEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdLevelUpEvent_descriptor_;
  metadata.reflection = mdLevelUpEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdHotTimeEvent::kEventIdFieldNumber;
const int mdHotTimeEvent::kDayOfWeekFieldNumber;
const int mdHotTimeEvent::kIndexFieldNumber;
const int mdHotTimeEvent::kBuffTypeFieldNumber;
const int mdHotTimeEvent::kBeginHourFieldNumber;
const int mdHotTimeEvent::kBeginMinFieldNumber;
const int mdHotTimeEvent::kEndHourFieldNumber;
const int mdHotTimeEvent::kEndMinFieldNumber;
const int mdHotTimeEvent::kIncreaseRateFieldNumber;
#endif  // !_MSC_VER

mdHotTimeEvent::mdHotTimeEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdHotTimeEvent)
}

void mdHotTimeEvent::InitAsDefaultInstance() {
}

mdHotTimeEvent::mdHotTimeEvent(const mdHotTimeEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdHotTimeEvent)
}

void mdHotTimeEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  day_of_week_ = 0;
  index_ = 0;
  buff_type_ = 1;
  begin_hour_ = 0;
  begin_min_ = 0;
  end_hour_ = 0;
  end_min_ = 0;
  increase_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdHotTimeEvent::~mdHotTimeEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdHotTimeEvent)
  SharedDtor();
}

void mdHotTimeEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdHotTimeEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdHotTimeEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdHotTimeEvent_descriptor_;
}

const mdHotTimeEvent& mdHotTimeEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdHotTimeEvent* mdHotTimeEvent::default_instance_ = NULL;

mdHotTimeEvent* mdHotTimeEvent::New() const {
  return new mdHotTimeEvent;
}

void mdHotTimeEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdHotTimeEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_id_, index_);
    ZR_(begin_hour_, end_min_);
    buff_type_ = 1;
  }
  increase_rate_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdHotTimeEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdHotTimeEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day_of_week;
        break;
      }

      // required int32 day_of_week = 2;
      case 2: {
        if (tag == 16) {
         parse_day_of_week:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_of_week_)));
          set_has_day_of_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buff_type;
        break;
      }

      // required .b2.protocol.commondata.HotTimeBuffType buff_type = 4;
      case 4: {
        if (tag == 32) {
         parse_buff_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::HotTimeBuffType_IsValid(value)) {
            set_buff_type(static_cast< ::b2::protocol::commondata::HotTimeBuffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_begin_hour;
        break;
      }

      // required int32 begin_hour = 5;
      case 5: {
        if (tag == 40) {
         parse_begin_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_hour_)));
          set_has_begin_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_begin_min;
        break;
      }

      // required int32 begin_min = 6;
      case 6: {
        if (tag == 48) {
         parse_begin_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_min_)));
          set_has_begin_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_end_hour;
        break;
      }

      // required int32 end_hour = 7;
      case 7: {
        if (tag == 56) {
         parse_end_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_hour_)));
          set_has_end_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_min;
        break;
      }

      // required int32 end_min = 8;
      case 8: {
        if (tag == 64) {
         parse_end_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_min_)));
          set_has_end_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_increase_rate;
        break;
      }

      // required int32 increase_rate = 9;
      case 9: {
        if (tag == 72) {
         parse_increase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_rate_)));
          set_has_increase_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdHotTimeEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdHotTimeEvent)
  return false;
#undef DO_
}

void mdHotTimeEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdHotTimeEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 day_of_week = 2;
  if (has_day_of_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day_of_week(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // required .b2.protocol.commondata.HotTimeBuffType buff_type = 4;
  if (has_buff_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->buff_type(), output);
  }

  // required int32 begin_hour = 5;
  if (has_begin_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->begin_hour(), output);
  }

  // required int32 begin_min = 6;
  if (has_begin_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->begin_min(), output);
  }

  // required int32 end_hour = 7;
  if (has_end_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->end_hour(), output);
  }

  // required int32 end_min = 8;
  if (has_end_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->end_min(), output);
  }

  // required int32 increase_rate = 9;
  if (has_increase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->increase_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdHotTimeEvent)
}

::google::protobuf::uint8* mdHotTimeEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdHotTimeEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 day_of_week = 2;
  if (has_day_of_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day_of_week(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // required .b2.protocol.commondata.HotTimeBuffType buff_type = 4;
  if (has_buff_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->buff_type(), target);
  }

  // required int32 begin_hour = 5;
  if (has_begin_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->begin_hour(), target);
  }

  // required int32 begin_min = 6;
  if (has_begin_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->begin_min(), target);
  }

  // required int32 end_hour = 7;
  if (has_end_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->end_hour(), target);
  }

  // required int32 end_min = 8;
  if (has_end_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->end_min(), target);
  }

  // required int32 increase_rate = 9;
  if (has_increase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->increase_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdHotTimeEvent)
  return target;
}

int mdHotTimeEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 day_of_week = 2;
    if (has_day_of_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_of_week());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .b2.protocol.commondata.HotTimeBuffType buff_type = 4;
    if (has_buff_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buff_type());
    }

    // required int32 begin_hour = 5;
    if (has_begin_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_hour());
    }

    // required int32 begin_min = 6;
    if (has_begin_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_min());
    }

    // required int32 end_hour = 7;
    if (has_end_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_hour());
    }

    // required int32 end_min = 8;
    if (has_end_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_min());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 increase_rate = 9;
    if (has_increase_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdHotTimeEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdHotTimeEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdHotTimeEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdHotTimeEvent::MergeFrom(const mdHotTimeEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_day_of_week()) {
      set_day_of_week(from.day_of_week());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_buff_type()) {
      set_buff_type(from.buff_type());
    }
    if (from.has_begin_hour()) {
      set_begin_hour(from.begin_hour());
    }
    if (from.has_begin_min()) {
      set_begin_min(from.begin_min());
    }
    if (from.has_end_hour()) {
      set_end_hour(from.end_hour());
    }
    if (from.has_end_min()) {
      set_end_min(from.end_min());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_increase_rate()) {
      set_increase_rate(from.increase_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdHotTimeEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdHotTimeEvent::CopyFrom(const mdHotTimeEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdHotTimeEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdHotTimeEvent::Swap(mdHotTimeEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(day_of_week_, other->day_of_week_);
    std::swap(index_, other->index_);
    std::swap(buff_type_, other->buff_type_);
    std::swap(begin_hour_, other->begin_hour_);
    std::swap(begin_min_, other->begin_min_);
    std::swap(end_hour_, other->end_hour_);
    std::swap(end_min_, other->end_min_);
    std::swap(increase_rate_, other->increase_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdHotTimeEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdHotTimeEvent_descriptor_;
  metadata.reflection = mdHotTimeEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSeasonMissionEvent::kEventIdFieldNumber;
const int mdSeasonMissionEvent::kDayFieldNumber;
const int mdSeasonMissionEvent::kIndexFieldNumber;
const int mdSeasonMissionEvent::kEventTypeFieldNumber;
const int mdSeasonMissionEvent::kCondition1FieldNumber;
const int mdSeasonMissionEvent::kCondition2FieldNumber;
const int mdSeasonMissionEvent::kCondition3FieldNumber;
const int mdSeasonMissionEvent::kCondition4FieldNumber;
const int mdSeasonMissionEvent::kGoalCountFieldNumber;
const int mdSeasonMissionEvent::kRewardIdFieldNumber;
const int mdSeasonMissionEvent::kRewardCountFieldNumber;
const int mdSeasonMissionEvent::kTutorialIdFieldNumber;
#endif  // !_MSC_VER

mdSeasonMissionEvent::mdSeasonMissionEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSeasonMissionEvent)
}

void mdSeasonMissionEvent::InitAsDefaultInstance() {
}

mdSeasonMissionEvent::mdSeasonMissionEvent(const mdSeasonMissionEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSeasonMissionEvent)
}

void mdSeasonMissionEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  day_ = 0;
  index_ = 0;
  event_type_ = 0;
  condition1_ = 0;
  condition2_ = 0;
  condition3_ = 0;
  condition4_ = 0;
  goalcount_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  tutorial_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSeasonMissionEvent::~mdSeasonMissionEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSeasonMissionEvent)
  SharedDtor();
}

void mdSeasonMissionEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSeasonMissionEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSeasonMissionEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSeasonMissionEvent_descriptor_;
}

const mdSeasonMissionEvent& mdSeasonMissionEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSeasonMissionEvent* mdSeasonMissionEvent::default_instance_ = NULL;

mdSeasonMissionEvent* mdSeasonMissionEvent::New() const {
  return new mdSeasonMissionEvent;
}

void mdSeasonMissionEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSeasonMissionEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_id_, condition4_);
  }
  ZR_(goalcount_, tutorial_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSeasonMissionEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSeasonMissionEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // required int32 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 4;
      case 4: {
        if (tag == 32) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition1;
        break;
      }

      // required int32 condition1 = 5;
      case 5: {
        if (tag == 40) {
         parse_condition1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition1_)));
          set_has_condition1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_condition2;
        break;
      }

      // required int32 condition2 = 6;
      case 6: {
        if (tag == 48) {
         parse_condition2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition2_)));
          set_has_condition2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_condition3;
        break;
      }

      // required int32 condition3 = 7;
      case 7: {
        if (tag == 56) {
         parse_condition3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition3_)));
          set_has_condition3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_condition4;
        break;
      }

      // required int32 condition4 = 8;
      case 8: {
        if (tag == 64) {
         parse_condition4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition4_)));
          set_has_condition4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_goalCount;
        break;
      }

      // required int32 goalCount = 9;
      case 9: {
        if (tag == 72) {
         parse_goalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goalcount_)));
          set_has_goalcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 11;
      case 11: {
        if (tag == 88) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_tutorial_id;
        break;
      }

      // required int32 tutorial_id = 12;
      case 12: {
        if (tag == 96) {
         parse_tutorial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tutorial_id_)));
          set_has_tutorial_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSeasonMissionEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSeasonMissionEvent)
  return false;
#undef DO_
}

void mdSeasonMissionEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSeasonMissionEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // required int32 event_type = 4;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->event_type(), output);
  }

  // required int32 condition1 = 5;
  if (has_condition1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition1(), output);
  }

  // required int32 condition2 = 6;
  if (has_condition2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->condition2(), output);
  }

  // required int32 condition3 = 7;
  if (has_condition3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->condition3(), output);
  }

  // required int32 condition4 = 8;
  if (has_condition4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->condition4(), output);
  }

  // required int32 goalCount = 9;
  if (has_goalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->goalcount(), output);
  }

  // required int32 reward_id = 10;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reward_id(), output);
  }

  // required int32 reward_count = 11;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_count(), output);
  }

  // required int32 tutorial_id = 12;
  if (has_tutorial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tutorial_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSeasonMissionEvent)
}

::google::protobuf::uint8* mdSeasonMissionEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSeasonMissionEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // required int32 event_type = 4;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->event_type(), target);
  }

  // required int32 condition1 = 5;
  if (has_condition1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition1(), target);
  }

  // required int32 condition2 = 6;
  if (has_condition2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->condition2(), target);
  }

  // required int32 condition3 = 7;
  if (has_condition3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->condition3(), target);
  }

  // required int32 condition4 = 8;
  if (has_condition4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->condition4(), target);
  }

  // required int32 goalCount = 9;
  if (has_goalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->goalcount(), target);
  }

  // required int32 reward_id = 10;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reward_id(), target);
  }

  // required int32 reward_count = 11;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_count(), target);
  }

  // required int32 tutorial_id = 12;
  if (has_tutorial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tutorial_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSeasonMissionEvent)
  return target;
}

int mdSeasonMissionEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 event_type = 4;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 condition1 = 5;
    if (has_condition1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition1());
    }

    // required int32 condition2 = 6;
    if (has_condition2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition2());
    }

    // required int32 condition3 = 7;
    if (has_condition3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition3());
    }

    // required int32 condition4 = 8;
    if (has_condition4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition4());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 goalCount = 9;
    if (has_goalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goalcount());
    }

    // required int32 reward_id = 10;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 11;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

    // required int32 tutorial_id = 12;
    if (has_tutorial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorial_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSeasonMissionEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSeasonMissionEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSeasonMissionEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSeasonMissionEvent::MergeFrom(const mdSeasonMissionEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_condition1()) {
      set_condition1(from.condition1());
    }
    if (from.has_condition2()) {
      set_condition2(from.condition2());
    }
    if (from.has_condition3()) {
      set_condition3(from.condition3());
    }
    if (from.has_condition4()) {
      set_condition4(from.condition4());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goalcount()) {
      set_goalcount(from.goalcount());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_tutorial_id()) {
      set_tutorial_id(from.tutorial_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSeasonMissionEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSeasonMissionEvent::CopyFrom(const mdSeasonMissionEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSeasonMissionEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdSeasonMissionEvent::Swap(mdSeasonMissionEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(day_, other->day_);
    std::swap(index_, other->index_);
    std::swap(event_type_, other->event_type_);
    std::swap(condition1_, other->condition1_);
    std::swap(condition2_, other->condition2_);
    std::swap(condition3_, other->condition3_);
    std::swap(condition4_, other->condition4_);
    std::swap(goalcount_, other->goalcount_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(tutorial_id_, other->tutorial_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSeasonMissionEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSeasonMissionEvent_descriptor_;
  metadata.reflection = mdSeasonMissionEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdStageClearEvent::kEventIdFieldNumber;
const int mdStageClearEvent::kIndexFieldNumber;
const int mdStageClearEvent::kStageFieldNumber;
const int mdStageClearEvent::kRewardIdFieldNumber;
const int mdStageClearEvent::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdStageClearEvent::mdStageClearEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdStageClearEvent)
}

void mdStageClearEvent::InitAsDefaultInstance() {
}

mdStageClearEvent::mdStageClearEvent(const mdStageClearEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdStageClearEvent)
}

void mdStageClearEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  stage_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdStageClearEvent::~mdStageClearEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdStageClearEvent)
  SharedDtor();
}

void mdStageClearEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdStageClearEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdStageClearEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdStageClearEvent_descriptor_;
}

const mdStageClearEvent& mdStageClearEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdStageClearEvent* mdStageClearEvent::default_instance_ = NULL;

mdStageClearEvent* mdStageClearEvent::New() const {
  return new mdStageClearEvent;
}

void mdStageClearEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdStageClearEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(event_id_, reward_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdStageClearEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdStageClearEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stage;
        break;
      }

      // required int32 stage = 3;
      case 3: {
        if (tag == 24) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdStageClearEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdStageClearEvent)
  return false;
#undef DO_
}

void mdStageClearEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdStageClearEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 stage = 3;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage(), output);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdStageClearEvent)
}

::google::protobuf::uint8* mdStageClearEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdStageClearEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 stage = 3;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage(), target);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdStageClearEvent)
  return target;
}

int mdStageClearEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 stage = 3;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // required int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 5;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdStageClearEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdStageClearEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdStageClearEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdStageClearEvent::MergeFrom(const mdStageClearEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdStageClearEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdStageClearEvent::CopyFrom(const mdStageClearEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdStageClearEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdStageClearEvent::Swap(mdStageClearEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(stage_, other->stage_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdStageClearEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdStageClearEvent_descriptor_;
  metadata.reflection = mdStageClearEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdKakaoFriendInviteReward::kInviteRewardTypeFieldNumber;
const int mdKakaoFriendInviteReward::kRewardIndexFieldNumber;
const int mdKakaoFriendInviteReward::kGoalCountFieldNumber;
const int mdKakaoFriendInviteReward::kRewardIdFieldNumber;
const int mdKakaoFriendInviteReward::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdKakaoFriendInviteReward::mdKakaoFriendInviteReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdKakaoFriendInviteReward)
}

void mdKakaoFriendInviteReward::InitAsDefaultInstance() {
}

mdKakaoFriendInviteReward::mdKakaoFriendInviteReward(const mdKakaoFriendInviteReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdKakaoFriendInviteReward)
}

void mdKakaoFriendInviteReward::SharedCtor() {
  _cached_size_ = 0;
  invite_reward_type_ = 1;
  reward_index_ = 0;
  goal_count_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdKakaoFriendInviteReward::~mdKakaoFriendInviteReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  SharedDtor();
}

void mdKakaoFriendInviteReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdKakaoFriendInviteReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdKakaoFriendInviteReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdKakaoFriendInviteReward_descriptor_;
}

const mdKakaoFriendInviteReward& mdKakaoFriendInviteReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdKakaoFriendInviteReward* mdKakaoFriendInviteReward::default_instance_ = NULL;

mdKakaoFriendInviteReward* mdKakaoFriendInviteReward::New() const {
  return new mdKakaoFriendInviteReward;
}

void mdKakaoFriendInviteReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdKakaoFriendInviteReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(reward_index_, reward_count_);
    invite_reward_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdKakaoFriendInviteReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.FriendInviteRewardType invite_reward_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FriendInviteRewardType_IsValid(value)) {
            set_invite_reward_type(static_cast< ::b2::protocol::commondata::FriendInviteRewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_index;
        break;
      }

      // required int32 reward_index = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_index_)));
          set_has_reward_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 3;
      case 3: {
        if (tag == 24) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  return false;
#undef DO_
}

void mdKakaoFriendInviteReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  // required .b2.protocol.commondata.FriendInviteRewardType invite_reward_type = 1;
  if (has_invite_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->invite_reward_type(), output);
  }

  // required int32 reward_index = 2;
  if (has_reward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_index(), output);
  }

  // required int32 goal_count = 3;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_count(), output);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdKakaoFriendInviteReward)
}

::google::protobuf::uint8* mdKakaoFriendInviteReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  // required .b2.protocol.commondata.FriendInviteRewardType invite_reward_type = 1;
  if (has_invite_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->invite_reward_type(), target);
  }

  // required int32 reward_index = 2;
  if (has_reward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_index(), target);
  }

  // required int32 goal_count = 3;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_count(), target);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdKakaoFriendInviteReward)
  return target;
}

int mdKakaoFriendInviteReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.FriendInviteRewardType invite_reward_type = 1;
    if (has_invite_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invite_reward_type());
    }

    // required int32 reward_index = 2;
    if (has_reward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_index());
    }

    // required int32 goal_count = 3;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

    // required int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 5;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdKakaoFriendInviteReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdKakaoFriendInviteReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdKakaoFriendInviteReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdKakaoFriendInviteReward::MergeFrom(const mdKakaoFriendInviteReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_reward_type()) {
      set_invite_reward_type(from.invite_reward_type());
    }
    if (from.has_reward_index()) {
      set_reward_index(from.reward_index());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdKakaoFriendInviteReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdKakaoFriendInviteReward::CopyFrom(const mdKakaoFriendInviteReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdKakaoFriendInviteReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdKakaoFriendInviteReward::Swap(mdKakaoFriendInviteReward* other) {
  if (other != this) {
    std::swap(invite_reward_type_, other->invite_reward_type_);
    std::swap(reward_index_, other->reward_index_);
    std::swap(goal_count_, other->goal_count_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdKakaoFriendInviteReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdKakaoFriendInviteReward_descriptor_;
  metadata.reflection = mdKakaoFriendInviteReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdHotTimeProduct::kBuffTypeFieldNumber;
const int mdHotTimeProduct::kPeriodHourFieldNumber;
const int mdHotTimeProduct::kPriceFieldNumber;
const int mdHotTimeProduct::kIncreaseRateFieldNumber;
#endif  // !_MSC_VER

mdHotTimeProduct::mdHotTimeProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdHotTimeProduct)
}

void mdHotTimeProduct::InitAsDefaultInstance() {
}

mdHotTimeProduct::mdHotTimeProduct(const mdHotTimeProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdHotTimeProduct)
}

void mdHotTimeProduct::SharedCtor() {
  _cached_size_ = 0;
  buff_type_ = 0;
  period_hour_ = 0;
  price_ = 0;
  increase_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdHotTimeProduct::~mdHotTimeProduct() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdHotTimeProduct)
  SharedDtor();
}

void mdHotTimeProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdHotTimeProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdHotTimeProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdHotTimeProduct_descriptor_;
}

const mdHotTimeProduct& mdHotTimeProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdHotTimeProduct* mdHotTimeProduct::default_instance_ = NULL;

mdHotTimeProduct* mdHotTimeProduct::New() const {
  return new mdHotTimeProduct;
}

void mdHotTimeProduct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdHotTimeProduct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(buff_type_, increase_rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdHotTimeProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdHotTimeProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buff_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_type_)));
          set_has_buff_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_period_hour;
        break;
      }

      // required int32 period_hour = 2;
      case 2: {
        if (tag == 16) {
         parse_period_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_hour_)));
          set_has_period_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // required int32 price = 3;
      case 3: {
        if (tag == 24) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_increase_rate;
        break;
      }

      // required int32 increase_rate = 4;
      case 4: {
        if (tag == 32) {
         parse_increase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_rate_)));
          set_has_increase_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdHotTimeProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdHotTimeProduct)
  return false;
#undef DO_
}

void mdHotTimeProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdHotTimeProduct)
  // required int32 buff_type = 1;
  if (has_buff_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buff_type(), output);
  }

  // required int32 period_hour = 2;
  if (has_period_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period_hour(), output);
  }

  // required int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // required int32 increase_rate = 4;
  if (has_increase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->increase_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdHotTimeProduct)
}

::google::protobuf::uint8* mdHotTimeProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdHotTimeProduct)
  // required int32 buff_type = 1;
  if (has_buff_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buff_type(), target);
  }

  // required int32 period_hour = 2;
  if (has_period_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period_hour(), target);
  }

  // required int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // required int32 increase_rate = 4;
  if (has_increase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->increase_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdHotTimeProduct)
  return target;
}

int mdHotTimeProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buff_type = 1;
    if (has_buff_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_type());
    }

    // required int32 period_hour = 2;
    if (has_period_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period_hour());
    }

    // required int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 increase_rate = 4;
    if (has_increase_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdHotTimeProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdHotTimeProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdHotTimeProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdHotTimeProduct::MergeFrom(const mdHotTimeProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_type()) {
      set_buff_type(from.buff_type());
    }
    if (from.has_period_hour()) {
      set_period_hour(from.period_hour());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_increase_rate()) {
      set_increase_rate(from.increase_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdHotTimeProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdHotTimeProduct::CopyFrom(const mdHotTimeProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdHotTimeProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdHotTimeProduct::Swap(mdHotTimeProduct* other) {
  if (other != this) {
    std::swap(buff_type_, other->buff_type_);
    std::swap(period_hour_, other->period_hour_);
    std::swap(price_, other->price_);
    std::swap(increase_rate_, other->increase_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdHotTimeProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdHotTimeProduct_descriptor_;
  metadata.reflection = mdHotTimeProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMagicShopProduct::kIdFieldNumber;
const int mdMagicShopProduct::kMagicShopGroupTypeFieldNumber;
const int mdMagicShopProduct::kProductTypeFieldNumber;
const int mdMagicShopProduct::kProductDetailFieldNumber;
const int mdMagicShopProduct::kProductCountFieldNumber;
const int mdMagicShopProduct::kPriceTypeFieldNumber;
const int mdMagicShopProduct::kPriceFieldNumber;
#endif  // !_MSC_VER

mdMagicShopProduct::mdMagicShopProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMagicShopProduct)
}

void mdMagicShopProduct::InitAsDefaultInstance() {
}

mdMagicShopProduct::mdMagicShopProduct(const mdMagicShopProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMagicShopProduct)
}

void mdMagicShopProduct::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  magic_shop_group_type_ = 0;
  product_type_ = 0;
  product_detail_ = 0;
  product_count_ = 0;
  price_type_ = 0;
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMagicShopProduct::~mdMagicShopProduct() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMagicShopProduct)
  SharedDtor();
}

void mdMagicShopProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdMagicShopProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMagicShopProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMagicShopProduct_descriptor_;
}

const mdMagicShopProduct& mdMagicShopProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMagicShopProduct* mdMagicShopProduct::default_instance_ = NULL;

mdMagicShopProduct* mdMagicShopProduct::New() const {
  return new mdMagicShopProduct;
}

void mdMagicShopProduct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMagicShopProduct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, price_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMagicShopProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMagicShopProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_magic_shop_group_type;
        break;
      }

      // required int32 magic_shop_group_type = 2;
      case 2: {
        if (tag == 16) {
         parse_magic_shop_group_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_shop_group_type_)));
          set_has_magic_shop_group_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_product_type;
        break;
      }

      // required int32 product_type = 3;
      case 3: {
        if (tag == 24) {
         parse_product_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_type_)));
          set_has_product_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_product_detail;
        break;
      }

      // required int32 product_detail = 4;
      case 4: {
        if (tag == 32) {
         parse_product_detail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_detail_)));
          set_has_product_detail();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_product_count;
        break;
      }

      // required int32 product_count = 5;
      case 5: {
        if (tag == 40) {
         parse_product_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_count_)));
          set_has_product_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_price_type;
        break;
      }

      // required int32 price_type = 6;
      case 6: {
        if (tag == 48) {
         parse_price_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_type_)));
          set_has_price_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_price;
        break;
      }

      // required int32 price = 7;
      case 7: {
        if (tag == 56) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMagicShopProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMagicShopProduct)
  return false;
#undef DO_
}

void mdMagicShopProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMagicShopProduct)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 magic_shop_group_type = 2;
  if (has_magic_shop_group_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->magic_shop_group_type(), output);
  }

  // required int32 product_type = 3;
  if (has_product_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->product_type(), output);
  }

  // required int32 product_detail = 4;
  if (has_product_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->product_detail(), output);
  }

  // required int32 product_count = 5;
  if (has_product_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->product_count(), output);
  }

  // required int32 price_type = 6;
  if (has_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price_type(), output);
  }

  // required int32 price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMagicShopProduct)
}

::google::protobuf::uint8* mdMagicShopProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMagicShopProduct)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 magic_shop_group_type = 2;
  if (has_magic_shop_group_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->magic_shop_group_type(), target);
  }

  // required int32 product_type = 3;
  if (has_product_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->product_type(), target);
  }

  // required int32 product_detail = 4;
  if (has_product_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->product_detail(), target);
  }

  // required int32 product_count = 5;
  if (has_product_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->product_count(), target);
  }

  // required int32 price_type = 6;
  if (has_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price_type(), target);
  }

  // required int32 price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMagicShopProduct)
  return target;
}

int mdMagicShopProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 magic_shop_group_type = 2;
    if (has_magic_shop_group_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic_shop_group_type());
    }

    // required int32 product_type = 3;
    if (has_product_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_type());
    }

    // required int32 product_detail = 4;
    if (has_product_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_detail());
    }

    // required int32 product_count = 5;
    if (has_product_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_count());
    }

    // required int32 price_type = 6;
    if (has_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price_type());
    }

    // required int32 price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMagicShopProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMagicShopProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMagicShopProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMagicShopProduct::MergeFrom(const mdMagicShopProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_magic_shop_group_type()) {
      set_magic_shop_group_type(from.magic_shop_group_type());
    }
    if (from.has_product_type()) {
      set_product_type(from.product_type());
    }
    if (from.has_product_detail()) {
      set_product_detail(from.product_detail());
    }
    if (from.has_product_count()) {
      set_product_count(from.product_count());
    }
    if (from.has_price_type()) {
      set_price_type(from.price_type());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMagicShopProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMagicShopProduct::CopyFrom(const mdMagicShopProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMagicShopProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdMagicShopProduct::Swap(mdMagicShopProduct* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(magic_shop_group_type_, other->magic_shop_group_type_);
    std::swap(product_type_, other->product_type_);
    std::swap(product_detail_, other->product_detail_);
    std::swap(product_count_, other->product_count_);
    std::swap(price_type_, other->price_type_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMagicShopProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMagicShopProduct_descriptor_;
  metadata.reflection = mdMagicShopProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdMagicShopRenewalCost::kRenewalCountFieldNumber;
const int mdMagicShopRenewalCost::kGemCostFieldNumber;
#endif  // !_MSC_VER

mdMagicShopRenewalCost::mdMagicShopRenewalCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdMagicShopRenewalCost)
}

void mdMagicShopRenewalCost::InitAsDefaultInstance() {
}

mdMagicShopRenewalCost::mdMagicShopRenewalCost(const mdMagicShopRenewalCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdMagicShopRenewalCost)
}

void mdMagicShopRenewalCost::SharedCtor() {
  _cached_size_ = 0;
  renewal_count_ = 0;
  gem_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdMagicShopRenewalCost::~mdMagicShopRenewalCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdMagicShopRenewalCost)
  SharedDtor();
}

void mdMagicShopRenewalCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdMagicShopRenewalCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdMagicShopRenewalCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdMagicShopRenewalCost_descriptor_;
}

const mdMagicShopRenewalCost& mdMagicShopRenewalCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdMagicShopRenewalCost* mdMagicShopRenewalCost::default_instance_ = NULL;

mdMagicShopRenewalCost* mdMagicShopRenewalCost::New() const {
  return new mdMagicShopRenewalCost;
}

void mdMagicShopRenewalCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdMagicShopRenewalCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(renewal_count_, gem_cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdMagicShopRenewalCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdMagicShopRenewalCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 renewal_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renewal_count_)));
          set_has_renewal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gem_cost;
        break;
      }

      // required int32 gem_cost = 2;
      case 2: {
        if (tag == 16) {
         parse_gem_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_cost_)));
          set_has_gem_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdMagicShopRenewalCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdMagicShopRenewalCost)
  return false;
#undef DO_
}

void mdMagicShopRenewalCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdMagicShopRenewalCost)
  // required int32 renewal_count = 1;
  if (has_renewal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->renewal_count(), output);
  }

  // required int32 gem_cost = 2;
  if (has_gem_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdMagicShopRenewalCost)
}

::google::protobuf::uint8* mdMagicShopRenewalCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdMagicShopRenewalCost)
  // required int32 renewal_count = 1;
  if (has_renewal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->renewal_count(), target);
  }

  // required int32 gem_cost = 2;
  if (has_gem_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdMagicShopRenewalCost)
  return target;
}

int mdMagicShopRenewalCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 renewal_count = 1;
    if (has_renewal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renewal_count());
    }

    // required int32 gem_cost = 2;
    if (has_gem_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdMagicShopRenewalCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdMagicShopRenewalCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdMagicShopRenewalCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdMagicShopRenewalCost::MergeFrom(const mdMagicShopRenewalCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_renewal_count()) {
      set_renewal_count(from.renewal_count());
    }
    if (from.has_gem_cost()) {
      set_gem_cost(from.gem_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdMagicShopRenewalCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdMagicShopRenewalCost::CopyFrom(const mdMagicShopRenewalCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdMagicShopRenewalCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdMagicShopRenewalCost::Swap(mdMagicShopRenewalCost* other) {
  if (other != this) {
    std::swap(renewal_count_, other->renewal_count_);
    std::swap(gem_cost_, other->gem_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdMagicShopRenewalCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdMagicShopRenewalCost_descriptor_;
  metadata.reflection = mdMagicShopRenewalCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDuelModeSettleSchedule::kModeTypeFieldNumber;
const int mdDuelModeSettleSchedule::kRankingSettleStateFieldNumber;
const int mdDuelModeSettleSchedule::kDayFieldNumber;
const int mdDuelModeSettleSchedule::kEndHourFieldNumber;
const int mdDuelModeSettleSchedule::kEndMinFieldNumber;
#endif  // !_MSC_VER

mdDuelModeSettleSchedule::mdDuelModeSettleSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDuelModeSettleSchedule)
}

void mdDuelModeSettleSchedule::InitAsDefaultInstance() {
}

mdDuelModeSettleSchedule::mdDuelModeSettleSchedule(const mdDuelModeSettleSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDuelModeSettleSchedule)
}

void mdDuelModeSettleSchedule::SharedCtor() {
  _cached_size_ = 0;
  mode_type_ = 1;
  ranking_settle_state_ = 0;
  day_ = 1;
  end_hour_ = 0;
  end_min_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDuelModeSettleSchedule::~mdDuelModeSettleSchedule() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  SharedDtor();
}

void mdDuelModeSettleSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDuelModeSettleSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDuelModeSettleSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDuelModeSettleSchedule_descriptor_;
}

const mdDuelModeSettleSchedule& mdDuelModeSettleSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDuelModeSettleSchedule* mdDuelModeSettleSchedule::default_instance_ = NULL;

mdDuelModeSettleSchedule* mdDuelModeSettleSchedule::New() const {
  return new mdDuelModeSettleSchedule;
}

void mdDuelModeSettleSchedule::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDuelModeSettleSchedule*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(end_hour_, end_min_);
    mode_type_ = 1;
    ranking_settle_state_ = 0;
    day_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDuelModeSettleSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.ContentsMode mode_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsMode_IsValid(value)) {
            set_mode_type(static_cast< ::b2::protocol::commondata::ContentsMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking_settle_state;
        break;
      }

      // required .b2.protocol.commondata.ContentsModeState ranking_settle_state = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking_settle_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsModeState_IsValid(value)) {
            set_ranking_settle_state(static_cast< ::b2::protocol::commondata::ContentsModeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // required .b2.protocol.commondata.DayOfWeek day = 3;
      case 3: {
        if (tag == 24) {
         parse_day:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DayOfWeek_IsValid(value)) {
            set_day(static_cast< ::b2::protocol::commondata::DayOfWeek >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_hour;
        break;
      }

      // required int32 end_hour = 4;
      case 4: {
        if (tag == 32) {
         parse_end_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_hour_)));
          set_has_end_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_min;
        break;
      }

      // required int32 end_min = 5;
      case 5: {
        if (tag == 40) {
         parse_end_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_min_)));
          set_has_end_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  return false;
#undef DO_
}

void mdDuelModeSettleSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  // required .b2.protocol.commondata.ContentsMode mode_type = 1;
  if (has_mode_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode_type(), output);
  }

  // required .b2.protocol.commondata.ContentsModeState ranking_settle_state = 2;
  if (has_ranking_settle_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->ranking_settle_state(), output);
  }

  // required .b2.protocol.commondata.DayOfWeek day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->day(), output);
  }

  // required int32 end_hour = 4;
  if (has_end_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_hour(), output);
  }

  // required int32 end_min = 5;
  if (has_end_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_min(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDuelModeSettleSchedule)
}

::google::protobuf::uint8* mdDuelModeSettleSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  // required .b2.protocol.commondata.ContentsMode mode_type = 1;
  if (has_mode_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode_type(), target);
  }

  // required .b2.protocol.commondata.ContentsModeState ranking_settle_state = 2;
  if (has_ranking_settle_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->ranking_settle_state(), target);
  }

  // required .b2.protocol.commondata.DayOfWeek day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->day(), target);
  }

  // required int32 end_hour = 4;
  if (has_end_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_hour(), target);
  }

  // required int32 end_min = 5;
  if (has_end_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_min(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDuelModeSettleSchedule)
  return target;
}

int mdDuelModeSettleSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.ContentsMode mode_type = 1;
    if (has_mode_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode_type());
    }

    // required .b2.protocol.commondata.ContentsModeState ranking_settle_state = 2;
    if (has_ranking_settle_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ranking_settle_state());
    }

    // required .b2.protocol.commondata.DayOfWeek day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->day());
    }

    // required int32 end_hour = 4;
    if (has_end_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_hour());
    }

    // required int32 end_min = 5;
    if (has_end_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_min());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDuelModeSettleSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDuelModeSettleSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDuelModeSettleSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDuelModeSettleSchedule::MergeFrom(const mdDuelModeSettleSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode_type()) {
      set_mode_type(from.mode_type());
    }
    if (from.has_ranking_settle_state()) {
      set_ranking_settle_state(from.ranking_settle_state());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_end_hour()) {
      set_end_hour(from.end_hour());
    }
    if (from.has_end_min()) {
      set_end_min(from.end_min());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDuelModeSettleSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDuelModeSettleSchedule::CopyFrom(const mdDuelModeSettleSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDuelModeSettleSchedule::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdDuelModeSettleSchedule::Swap(mdDuelModeSettleSchedule* other) {
  if (other != this) {
    std::swap(mode_type_, other->mode_type_);
    std::swap(ranking_settle_state_, other->ranking_settle_state_);
    std::swap(day_, other->day_);
    std::swap(end_hour_, other->end_hour_);
    std::swap(end_min_, other->end_min_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDuelModeSettleSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDuelModeSettleSchedule_descriptor_;
  metadata.reflection = mdDuelModeSettleSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopLevelUpPackage::kPackageIdFieldNumber;
const int mdShopLevelUpPackage::kCharacterTypeFieldNumber;
const int mdShopLevelUpPackage::kLevelFieldNumber;
const int mdShopLevelUpPackage::kRewardIdFieldNumber;
const int mdShopLevelUpPackage::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdShopLevelUpPackage::mdShopLevelUpPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopLevelUpPackage)
}

void mdShopLevelUpPackage::InitAsDefaultInstance() {
}

mdShopLevelUpPackage::mdShopLevelUpPackage(const mdShopLevelUpPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopLevelUpPackage)
}

void mdShopLevelUpPackage::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0;
  character_type_ = 1;
  level_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopLevelUpPackage::~mdShopLevelUpPackage() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopLevelUpPackage)
  SharedDtor();
}

void mdShopLevelUpPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopLevelUpPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopLevelUpPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopLevelUpPackage_descriptor_;
}

const mdShopLevelUpPackage& mdShopLevelUpPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopLevelUpPackage* mdShopLevelUpPackage::default_instance_ = NULL;

mdShopLevelUpPackage* mdShopLevelUpPackage::New() const {
  return new mdShopLevelUpPackage;
}

void mdShopLevelUpPackage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopLevelUpPackage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(level_, reward_count_);
    package_id_ = 0;
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopLevelUpPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopLevelUpPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopLevelUpPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopLevelUpPackage)
  return false;
#undef DO_
}

void mdShopLevelUpPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopLevelUpPackage)
  // required int32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_id(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopLevelUpPackage)
}

::google::protobuf::uint8* mdShopLevelUpPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopLevelUpPackage)
  // required int32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_id(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopLevelUpPackage)
  return target;
}

int mdShopLevelUpPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 5;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopLevelUpPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopLevelUpPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopLevelUpPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopLevelUpPackage::MergeFrom(const mdShopLevelUpPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopLevelUpPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopLevelUpPackage::CopyFrom(const mdShopLevelUpPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopLevelUpPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdShopLevelUpPackage::Swap(mdShopLevelUpPackage* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopLevelUpPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopLevelUpPackage_descriptor_;
  metadata.reflection = mdShopLevelUpPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopReachLevelPackage::kPackageIdFieldNumber;
const int mdShopReachLevelPackage::kCharacterTypeFieldNumber;
const int mdShopReachLevelPackage::kReachLevelFieldNumber;
const int mdShopReachLevelPackage::kLimitLevelFieldNumber;
const int mdShopReachLevelPackage::kBuyRewardIdFieldNumber;
const int mdShopReachLevelPackage::kBuyRewardCountFieldNumber;
const int mdShopReachLevelPackage::kCompleteRewardIdFieldNumber;
const int mdShopReachLevelPackage::kCompleteRewardCountFieldNumber;
const int mdShopReachLevelPackage::kExpireDayFieldNumber;
#endif  // !_MSC_VER

mdShopReachLevelPackage::mdShopReachLevelPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopReachLevelPackage)
}

void mdShopReachLevelPackage::InitAsDefaultInstance() {
}

mdShopReachLevelPackage::mdShopReachLevelPackage(const mdShopReachLevelPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopReachLevelPackage)
}

void mdShopReachLevelPackage::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0;
  character_type_ = 1;
  reach_level_ = 0;
  limit_level_ = 0;
  buy_reward_id_ = 0;
  buy_reward_count_ = 0;
  complete_reward_id_ = 0;
  complete_reward_count_ = 0;
  expire_day_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopReachLevelPackage::~mdShopReachLevelPackage() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopReachLevelPackage)
  SharedDtor();
}

void mdShopReachLevelPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopReachLevelPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopReachLevelPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopReachLevelPackage_descriptor_;
}

const mdShopReachLevelPackage& mdShopReachLevelPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopReachLevelPackage* mdShopReachLevelPackage::default_instance_ = NULL;

mdShopReachLevelPackage* mdShopReachLevelPackage::New() const {
  return new mdShopReachLevelPackage;
}

void mdShopReachLevelPackage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopReachLevelPackage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(reach_level_, complete_reward_count_);
    package_id_ = 0;
    character_type_ = 1;
  }
  expire_day_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopReachLevelPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopReachLevelPackage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reach_level;
        break;
      }

      // required int32 reach_level = 3;
      case 3: {
        if (tag == 24) {
         parse_reach_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reach_level_)));
          set_has_reach_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit_level;
        break;
      }

      // required int32 limit_level = 4;
      case 4: {
        if (tag == 32) {
         parse_limit_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_level_)));
          set_has_limit_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_buy_reward_id;
        break;
      }

      // required int32 buy_reward_id = 5;
      case 5: {
        if (tag == 40) {
         parse_buy_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_reward_id_)));
          set_has_buy_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_buy_reward_count;
        break;
      }

      // required int32 buy_reward_count = 6;
      case 6: {
        if (tag == 48) {
         parse_buy_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_reward_count_)));
          set_has_buy_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_complete_reward_id;
        break;
      }

      // required int32 complete_reward_id = 7;
      case 7: {
        if (tag == 56) {
         parse_complete_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &complete_reward_id_)));
          set_has_complete_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_complete_reward_count;
        break;
      }

      // required int32 complete_reward_count = 8;
      case 8: {
        if (tag == 64) {
         parse_complete_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &complete_reward_count_)));
          set_has_complete_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_expire_day;
        break;
      }

      // required int32 expire_day = 9;
      case 9: {
        if (tag == 72) {
         parse_expire_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expire_day_)));
          set_has_expire_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopReachLevelPackage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopReachLevelPackage)
  return false;
#undef DO_
}

void mdShopReachLevelPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopReachLevelPackage)
  // required int32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_id(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required int32 reach_level = 3;
  if (has_reach_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reach_level(), output);
  }

  // required int32 limit_level = 4;
  if (has_limit_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->limit_level(), output);
  }

  // required int32 buy_reward_id = 5;
  if (has_buy_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_reward_id(), output);
  }

  // required int32 buy_reward_count = 6;
  if (has_buy_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buy_reward_count(), output);
  }

  // required int32 complete_reward_id = 7;
  if (has_complete_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->complete_reward_id(), output);
  }

  // required int32 complete_reward_count = 8;
  if (has_complete_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->complete_reward_count(), output);
  }

  // required int32 expire_day = 9;
  if (has_expire_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->expire_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopReachLevelPackage)
}

::google::protobuf::uint8* mdShopReachLevelPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopReachLevelPackage)
  // required int32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_id(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required int32 reach_level = 3;
  if (has_reach_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reach_level(), target);
  }

  // required int32 limit_level = 4;
  if (has_limit_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->limit_level(), target);
  }

  // required int32 buy_reward_id = 5;
  if (has_buy_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_reward_id(), target);
  }

  // required int32 buy_reward_count = 6;
  if (has_buy_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buy_reward_count(), target);
  }

  // required int32 complete_reward_id = 7;
  if (has_complete_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->complete_reward_id(), target);
  }

  // required int32 complete_reward_count = 8;
  if (has_complete_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->complete_reward_count(), target);
  }

  // required int32 expire_day = 9;
  if (has_expire_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->expire_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopReachLevelPackage)
  return target;
}

int mdShopReachLevelPackage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 reach_level = 3;
    if (has_reach_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reach_level());
    }

    // required int32 limit_level = 4;
    if (has_limit_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_level());
    }

    // required int32 buy_reward_id = 5;
    if (has_buy_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_reward_id());
    }

    // required int32 buy_reward_count = 6;
    if (has_buy_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_reward_count());
    }

    // required int32 complete_reward_id = 7;
    if (has_complete_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->complete_reward_id());
    }

    // required int32 complete_reward_count = 8;
    if (has_complete_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->complete_reward_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 expire_day = 9;
    if (has_expire_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expire_day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopReachLevelPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopReachLevelPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopReachLevelPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopReachLevelPackage::MergeFrom(const mdShopReachLevelPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_reach_level()) {
      set_reach_level(from.reach_level());
    }
    if (from.has_limit_level()) {
      set_limit_level(from.limit_level());
    }
    if (from.has_buy_reward_id()) {
      set_buy_reward_id(from.buy_reward_id());
    }
    if (from.has_buy_reward_count()) {
      set_buy_reward_count(from.buy_reward_count());
    }
    if (from.has_complete_reward_id()) {
      set_complete_reward_id(from.complete_reward_id());
    }
    if (from.has_complete_reward_count()) {
      set_complete_reward_count(from.complete_reward_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expire_day()) {
      set_expire_day(from.expire_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopReachLevelPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopReachLevelPackage::CopyFrom(const mdShopReachLevelPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopReachLevelPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdShopReachLevelPackage::Swap(mdShopReachLevelPackage* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(reach_level_, other->reach_level_);
    std::swap(limit_level_, other->limit_level_);
    std::swap(buy_reward_id_, other->buy_reward_id_);
    std::swap(buy_reward_count_, other->buy_reward_count_);
    std::swap(complete_reward_id_, other->complete_reward_id_);
    std::swap(complete_reward_count_, other->complete_reward_count_);
    std::swap(expire_day_, other->expire_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopReachLevelPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopReachLevelPackage_descriptor_;
  metadata.reflection = mdShopReachLevelPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopFlatRatePackageBonus::kIndexFieldNumber;
const int mdShopFlatRatePackageBonus::kRewardIdFieldNumber;
const int mdShopFlatRatePackageBonus::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdShopFlatRatePackageBonus::mdShopFlatRatePackageBonus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
}

void mdShopFlatRatePackageBonus::InitAsDefaultInstance() {
}

mdShopFlatRatePackageBonus::mdShopFlatRatePackageBonus(const mdShopFlatRatePackageBonus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
}

void mdShopFlatRatePackageBonus::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopFlatRatePackageBonus::~mdShopFlatRatePackageBonus() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  SharedDtor();
}

void mdShopFlatRatePackageBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopFlatRatePackageBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopFlatRatePackageBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopFlatRatePackageBonus_descriptor_;
}

const mdShopFlatRatePackageBonus& mdShopFlatRatePackageBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopFlatRatePackageBonus* mdShopFlatRatePackageBonus::default_instance_ = NULL;

mdShopFlatRatePackageBonus* mdShopFlatRatePackageBonus::New() const {
  return new mdShopFlatRatePackageBonus;
}

void mdShopFlatRatePackageBonus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopFlatRatePackageBonus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopFlatRatePackageBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  return false;
#undef DO_
}

void mdShopFlatRatePackageBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  // required int32 reward_count = 3;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
}

::google::protobuf::uint8* mdShopFlatRatePackageBonus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  // required int32 reward_count = 3;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopFlatRatePackageBonus)
  return target;
}

int mdShopFlatRatePackageBonus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 3;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopFlatRatePackageBonus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopFlatRatePackageBonus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopFlatRatePackageBonus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopFlatRatePackageBonus::MergeFrom(const mdShopFlatRatePackageBonus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopFlatRatePackageBonus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopFlatRatePackageBonus::CopyFrom(const mdShopFlatRatePackageBonus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopFlatRatePackageBonus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdShopFlatRatePackageBonus::Swap(mdShopFlatRatePackageBonus* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopFlatRatePackageBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopFlatRatePackageBonus_descriptor_;
  metadata.reflection = mdShopFlatRatePackageBonus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdShopPackageTab::kTabTypeFieldNumber;
const int mdShopPackageTab::kSortOrderFieldNumber;
const int mdShopPackageTab::kIsOpenFieldNumber;
#endif  // !_MSC_VER

mdShopPackageTab::mdShopPackageTab()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdShopPackageTab)
}

void mdShopPackageTab::InitAsDefaultInstance() {
}

mdShopPackageTab::mdShopPackageTab(const mdShopPackageTab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdShopPackageTab)
}

void mdShopPackageTab::SharedCtor() {
  _cached_size_ = 0;
  tab_type_ = 0;
  sort_order_ = 0;
  is_open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdShopPackageTab::~mdShopPackageTab() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdShopPackageTab)
  SharedDtor();
}

void mdShopPackageTab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdShopPackageTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdShopPackageTab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdShopPackageTab_descriptor_;
}

const mdShopPackageTab& mdShopPackageTab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdShopPackageTab* mdShopPackageTab::default_instance_ = NULL;

mdShopPackageTab* mdShopPackageTab::New() const {
  return new mdShopPackageTab;
}

void mdShopPackageTab::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdShopPackageTab*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tab_type_, is_open_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdShopPackageTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdShopPackageTab)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tab_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tab_type_)));
          set_has_tab_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sort_order;
        break;
      }

      // required int32 sort_order = 2;
      case 2: {
        if (tag == 16) {
         parse_sort_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_order_)));
          set_has_sort_order();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_open;
        break;
      }

      // required bool is_open = 3;
      case 3: {
        if (tag == 24) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdShopPackageTab)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdShopPackageTab)
  return false;
#undef DO_
}

void mdShopPackageTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdShopPackageTab)
  // required int32 tab_type = 1;
  if (has_tab_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tab_type(), output);
  }

  // required int32 sort_order = 2;
  if (has_sort_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sort_order(), output);
  }

  // required bool is_open = 3;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdShopPackageTab)
}

::google::protobuf::uint8* mdShopPackageTab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdShopPackageTab)
  // required int32 tab_type = 1;
  if (has_tab_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tab_type(), target);
  }

  // required int32 sort_order = 2;
  if (has_sort_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sort_order(), target);
  }

  // required bool is_open = 3;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdShopPackageTab)
  return target;
}

int mdShopPackageTab::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tab_type = 1;
    if (has_tab_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tab_type());
    }

    // required int32 sort_order = 2;
    if (has_sort_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort_order());
    }

    // required bool is_open = 3;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdShopPackageTab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdShopPackageTab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdShopPackageTab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdShopPackageTab::MergeFrom(const mdShopPackageTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tab_type()) {
      set_tab_type(from.tab_type());
    }
    if (from.has_sort_order()) {
      set_sort_order(from.sort_order());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdShopPackageTab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdShopPackageTab::CopyFrom(const mdShopPackageTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdShopPackageTab::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdShopPackageTab::Swap(mdShopPackageTab* other) {
  if (other != this) {
    std::swap(tab_type_, other->tab_type_);
    std::swap(sort_order_, other->sort_order_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdShopPackageTab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdShopPackageTab_descriptor_;
  metadata.reflection = mdShopPackageTab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdWebUrl::kKeyFieldNumber;
const int mdWebUrl::kUrlFieldNumber;
#endif  // !_MSC_VER

mdWebUrl::mdWebUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdWebUrl)
}

void mdWebUrl::InitAsDefaultInstance() {
}

mdWebUrl::mdWebUrl(const mdWebUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdWebUrl)
}

void mdWebUrl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdWebUrl::~mdWebUrl() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdWebUrl)
  SharedDtor();
}

void mdWebUrl::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void mdWebUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdWebUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdWebUrl_descriptor_;
}

const mdWebUrl& mdWebUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdWebUrl* mdWebUrl::default_instance_ = NULL;

mdWebUrl* mdWebUrl::New() const {
  return new mdWebUrl;
}

void mdWebUrl::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdWebUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdWebUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // required string url = 2;
      case 2: {
        if (tag == 18) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdWebUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdWebUrl)
  return false;
#undef DO_
}

void mdWebUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdWebUrl)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdWebUrl)
}

::google::protobuf::uint8* mdWebUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdWebUrl)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdWebUrl)
  return target;
}

int mdWebUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdWebUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdWebUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdWebUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdWebUrl::MergeFrom(const mdWebUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdWebUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdWebUrl::CopyFrom(const mdWebUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdWebUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdWebUrl::Swap(mdWebUrl* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdWebUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdWebUrl_descriptor_;
  metadata.reflection = mdWebUrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTenLotteryEvent::kEventIdFieldNumber;
const int mdTenLotteryEvent::kIndexFieldNumber;
const int mdTenLotteryEvent::kGoalLotteryCountFieldNumber;
const int mdTenLotteryEvent::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdTenLotteryEvent::mdTenLotteryEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTenLotteryEvent)
}

void mdTenLotteryEvent::InitAsDefaultInstance() {
}

mdTenLotteryEvent::mdTenLotteryEvent(const mdTenLotteryEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTenLotteryEvent)
}

void mdTenLotteryEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  goal_lottery_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTenLotteryEvent::~mdTenLotteryEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTenLotteryEvent)
  SharedDtor();
}

void mdTenLotteryEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTenLotteryEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTenLotteryEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTenLotteryEvent_descriptor_;
}

const mdTenLotteryEvent& mdTenLotteryEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTenLotteryEvent* mdTenLotteryEvent::default_instance_ = NULL;

mdTenLotteryEvent* mdTenLotteryEvent::New() const {
  return new mdTenLotteryEvent;
}

void mdTenLotteryEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTenLotteryEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(event_id_, index_);
    goal_lottery_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTenLotteryEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTenLotteryEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goal_lottery_count;
        break;
      }

      // required int32 goal_lottery_count = 3;
      case 3: {
        if (tag == 24) {
         parse_goal_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_lottery_count_)));
          set_has_goal_lottery_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.RawReward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTenLotteryEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTenLotteryEvent)
  return false;
#undef DO_
}

void mdTenLotteryEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTenLotteryEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 goal_lottery_count = 3;
  if (has_goal_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_lottery_count(), output);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTenLotteryEvent)
}

::google::protobuf::uint8* mdTenLotteryEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTenLotteryEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 goal_lottery_count = 3;
  if (has_goal_lottery_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_lottery_count(), target);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTenLotteryEvent)
  return target;
}

int mdTenLotteryEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 goal_lottery_count = 3;
    if (has_goal_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_lottery_count());
    }

  }
  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTenLotteryEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTenLotteryEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTenLotteryEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTenLotteryEvent::MergeFrom(const mdTenLotteryEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_goal_lottery_count()) {
      set_goal_lottery_count(from.goal_lottery_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTenLotteryEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTenLotteryEvent::CopyFrom(const mdTenLotteryEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTenLotteryEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdTenLotteryEvent::Swap(mdTenLotteryEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(goal_lottery_count_, other->goal_lottery_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTenLotteryEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTenLotteryEvent_descriptor_;
  metadata.reflection = mdTenLotteryEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSpendGemEvent::kEventIdFieldNumber;
const int mdSpendGemEvent::kIndexFieldNumber;
const int mdSpendGemEvent::kGoalSpendCountFieldNumber;
const int mdSpendGemEvent::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdSpendGemEvent::mdSpendGemEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSpendGemEvent)
}

void mdSpendGemEvent::InitAsDefaultInstance() {
}

mdSpendGemEvent::mdSpendGemEvent(const mdSpendGemEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSpendGemEvent)
}

void mdSpendGemEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  goal_spend_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSpendGemEvent::~mdSpendGemEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSpendGemEvent)
  SharedDtor();
}

void mdSpendGemEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSpendGemEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSpendGemEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSpendGemEvent_descriptor_;
}

const mdSpendGemEvent& mdSpendGemEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSpendGemEvent* mdSpendGemEvent::default_instance_ = NULL;

mdSpendGemEvent* mdSpendGemEvent::New() const {
  return new mdSpendGemEvent;
}

void mdSpendGemEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSpendGemEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(event_id_, index_);
    goal_spend_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSpendGemEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSpendGemEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goal_spend_count;
        break;
      }

      // required int32 goal_spend_count = 3;
      case 3: {
        if (tag == 24) {
         parse_goal_spend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_spend_count_)));
          set_has_goal_spend_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.RawReward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSpendGemEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSpendGemEvent)
  return false;
#undef DO_
}

void mdSpendGemEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSpendGemEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 goal_spend_count = 3;
  if (has_goal_spend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_spend_count(), output);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSpendGemEvent)
}

::google::protobuf::uint8* mdSpendGemEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSpendGemEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 goal_spend_count = 3;
  if (has_goal_spend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_spend_count(), target);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSpendGemEvent)
  return target;
}

int mdSpendGemEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 goal_spend_count = 3;
    if (has_goal_spend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_spend_count());
    }

  }
  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSpendGemEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSpendGemEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSpendGemEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSpendGemEvent::MergeFrom(const mdSpendGemEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_goal_spend_count()) {
      set_goal_spend_count(from.goal_spend_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSpendGemEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSpendGemEvent::CopyFrom(const mdSpendGemEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSpendGemEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdSpendGemEvent::Swap(mdSpendGemEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(goal_spend_count_, other->goal_spend_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSpendGemEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSpendGemEvent_descriptor_;
  metadata.reflection = mdSpendGemEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTenLotterySavingsEvent::kEventIdFieldNumber;
const int mdTenLotterySavingsEvent::kGainPointFieldNumber;
const int mdTenLotterySavingsEvent::kNeedPointFieldNumber;
const int mdTenLotterySavingsEvent::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdTenLotterySavingsEvent::mdTenLotterySavingsEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTenLotterySavingsEvent)
}

void mdTenLotterySavingsEvent::InitAsDefaultInstance() {
}

mdTenLotterySavingsEvent::mdTenLotterySavingsEvent(const mdTenLotterySavingsEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTenLotterySavingsEvent)
}

void mdTenLotterySavingsEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  gain_point_ = 0;
  need_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTenLotterySavingsEvent::~mdTenLotterySavingsEvent() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  SharedDtor();
}

void mdTenLotterySavingsEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTenLotterySavingsEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTenLotterySavingsEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTenLotterySavingsEvent_descriptor_;
}

const mdTenLotterySavingsEvent& mdTenLotterySavingsEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTenLotterySavingsEvent* mdTenLotterySavingsEvent::default_instance_ = NULL;

mdTenLotterySavingsEvent* mdTenLotterySavingsEvent::New() const {
  return new mdTenLotterySavingsEvent;
}

void mdTenLotterySavingsEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTenLotterySavingsEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(event_id_, gain_point_);
    need_point_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTenLotterySavingsEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gain_point;
        break;
      }

      // required int32 gain_point = 2;
      case 2: {
        if (tag == 16) {
         parse_gain_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gain_point_)));
          set_has_gain_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_need_point;
        break;
      }

      // required int32 need_point = 3;
      case 3: {
        if (tag == 24) {
         parse_need_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_point_)));
          set_has_need_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.RawReward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  return false;
#undef DO_
}

void mdTenLotterySavingsEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 gain_point = 2;
  if (has_gain_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gain_point(), output);
  }

  // required int32 need_point = 3;
  if (has_need_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->need_point(), output);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTenLotterySavingsEvent)
}

::google::protobuf::uint8* mdTenLotterySavingsEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 gain_point = 2;
  if (has_gain_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gain_point(), target);
  }

  // required int32 need_point = 3;
  if (has_need_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->need_point(), target);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTenLotterySavingsEvent)
  return target;
}

int mdTenLotterySavingsEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 gain_point = 2;
    if (has_gain_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gain_point());
    }

    // required int32 need_point = 3;
    if (has_need_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_point());
    }

  }
  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTenLotterySavingsEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTenLotterySavingsEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTenLotterySavingsEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTenLotterySavingsEvent::MergeFrom(const mdTenLotterySavingsEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_gain_point()) {
      set_gain_point(from.gain_point());
    }
    if (from.has_need_point()) {
      set_need_point(from.need_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTenLotterySavingsEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTenLotterySavingsEvent::CopyFrom(const mdTenLotterySavingsEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTenLotterySavingsEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdTenLotterySavingsEvent::Swap(mdTenLotterySavingsEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(gain_point_, other->gain_point_);
    std::swap(need_point_, other->need_point_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTenLotterySavingsEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTenLotterySavingsEvent_descriptor_;
  metadata.reflection = mdTenLotterySavingsEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDiceEventMission::kEventIdFieldNumber;
const int mdDiceEventMission::kEventTypeFieldNumber;
const int mdDiceEventMission::kGoalCountFieldNumber;
const int mdDiceEventMission::kPointFieldNumber;
#endif  // !_MSC_VER

mdDiceEventMission::mdDiceEventMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDiceEventMission)
}

void mdDiceEventMission::InitAsDefaultInstance() {
}

mdDiceEventMission::mdDiceEventMission(const mdDiceEventMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDiceEventMission)
}

void mdDiceEventMission::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  event_type_ = 0;
  goal_count_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDiceEventMission::~mdDiceEventMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDiceEventMission)
  SharedDtor();
}

void mdDiceEventMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDiceEventMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDiceEventMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDiceEventMission_descriptor_;
}

const mdDiceEventMission& mdDiceEventMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDiceEventMission* mdDiceEventMission::default_instance_ = NULL;

mdDiceEventMission* mdDiceEventMission::New() const {
  return new mdDiceEventMission;
}

void mdDiceEventMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDiceEventMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDiceEventMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDiceEventMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_event_type;
        break;
      }

      // required int32 event_type = 2;
      case 2: {
        if (tag == 16) {
         parse_event_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_goal_count;
        break;
      }

      // required int32 goal_count = 3;
      case 3: {
        if (tag == 24) {
         parse_goal_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_count_)));
          set_has_goal_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // required int32 point = 4;
      case 4: {
        if (tag == 32) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDiceEventMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDiceEventMission)
  return false;
#undef DO_
}

void mdDiceEventMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDiceEventMission)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->event_type(), output);
  }

  // required int32 goal_count = 3;
  if (has_goal_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goal_count(), output);
  }

  // required int32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDiceEventMission)
}

::google::protobuf::uint8* mdDiceEventMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDiceEventMission)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 event_type = 2;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->event_type(), target);
  }

  // required int32 goal_count = 3;
  if (has_goal_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goal_count(), target);
  }

  // required int32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDiceEventMission)
  return target;
}

int mdDiceEventMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 event_type = 2;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 goal_count = 3;
    if (has_goal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goal_count());
    }

    // required int32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDiceEventMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDiceEventMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDiceEventMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDiceEventMission::MergeFrom(const mdDiceEventMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_goal_count()) {
      set_goal_count(from.goal_count());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDiceEventMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDiceEventMission::CopyFrom(const mdDiceEventMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDiceEventMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdDiceEventMission::Swap(mdDiceEventMission* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(event_type_, other->event_type_);
    std::swap(goal_count_, other->goal_count_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDiceEventMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDiceEventMission_descriptor_;
  metadata.reflection = mdDiceEventMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDiceEventCell::kEventIdFieldNumber;
const int mdDiceEventCell::kCellNumberFieldNumber;
const int mdDiceEventCell::kCellTypeFieldNumber;
const int mdDiceEventCell::kRewardIdFieldNumber;
const int mdDiceEventCell::kRewardCountFieldNumber;
const int mdDiceEventCell::kEffectValueFieldNumber;
#endif  // !_MSC_VER

mdDiceEventCell::mdDiceEventCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDiceEventCell)
}

void mdDiceEventCell::InitAsDefaultInstance() {
}

mdDiceEventCell::mdDiceEventCell(const mdDiceEventCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDiceEventCell)
}

void mdDiceEventCell::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  cell_number_ = 0;
  cell_type_ = 1;
  reward_id_ = 0;
  reward_count_ = 0;
  effect_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDiceEventCell::~mdDiceEventCell() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDiceEventCell)
  SharedDtor();
}

void mdDiceEventCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDiceEventCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDiceEventCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDiceEventCell_descriptor_;
}

const mdDiceEventCell& mdDiceEventCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDiceEventCell* mdDiceEventCell::default_instance_ = NULL;

mdDiceEventCell* mdDiceEventCell::New() const {
  return new mdDiceEventCell;
}

void mdDiceEventCell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDiceEventCell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(event_id_, cell_number_);
    ZR_(reward_id_, effect_value_);
    cell_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDiceEventCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDiceEventCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cell_number;
        break;
      }

      // required int32 cell_number = 2;
      case 2: {
        if (tag == 16) {
         parse_cell_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cell_number_)));
          set_has_cell_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cell_type;
        break;
      }

      // required .b2.protocol.commondata.DiceEventCellType cell_type = 3;
      case 3: {
        if (tag == 24) {
         parse_cell_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DiceEventCellType_IsValid(value)) {
            set_cell_type(static_cast< ::b2::protocol::commondata::DiceEventCellType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_effect_value;
        break;
      }

      // required int32 effect_value = 6;
      case 6: {
        if (tag == 48) {
         parse_effect_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_value_)));
          set_has_effect_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDiceEventCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDiceEventCell)
  return false;
#undef DO_
}

void mdDiceEventCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDiceEventCell)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 cell_number = 2;
  if (has_cell_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cell_number(), output);
  }

  // required .b2.protocol.commondata.DiceEventCellType cell_type = 3;
  if (has_cell_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->cell_type(), output);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id(), output);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count(), output);
  }

  // required int32 effect_value = 6;
  if (has_effect_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->effect_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDiceEventCell)
}

::google::protobuf::uint8* mdDiceEventCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDiceEventCell)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 cell_number = 2;
  if (has_cell_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cell_number(), target);
  }

  // required .b2.protocol.commondata.DiceEventCellType cell_type = 3;
  if (has_cell_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->cell_type(), target);
  }

  // required int32 reward_id = 4;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id(), target);
  }

  // required int32 reward_count = 5;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count(), target);
  }

  // required int32 effect_value = 6;
  if (has_effect_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->effect_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDiceEventCell)
  return target;
}

int mdDiceEventCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 cell_number = 2;
    if (has_cell_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cell_number());
    }

    // required .b2.protocol.commondata.DiceEventCellType cell_type = 3;
    if (has_cell_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cell_type());
    }

    // required int32 reward_id = 4;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 5;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

    // required int32 effect_value = 6;
    if (has_effect_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDiceEventCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDiceEventCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDiceEventCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDiceEventCell::MergeFrom(const mdDiceEventCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_cell_number()) {
      set_cell_number(from.cell_number());
    }
    if (from.has_cell_type()) {
      set_cell_type(from.cell_type());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
    if (from.has_effect_value()) {
      set_effect_value(from.effect_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDiceEventCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDiceEventCell::CopyFrom(const mdDiceEventCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDiceEventCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdDiceEventCell::Swap(mdDiceEventCell* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(cell_number_, other->cell_number_);
    std::swap(cell_type_, other->cell_type_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(effect_value_, other->effect_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDiceEventCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDiceEventCell_descriptor_;
  metadata.reflection = mdDiceEventCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDiceEventFinishReward::kEventIdFieldNumber;
const int mdDiceEventFinishReward::kNumberFieldNumber;
const int mdDiceEventFinishReward::kRewardIdFieldNumber;
const int mdDiceEventFinishReward::kRewardCountFieldNumber;
#endif  // !_MSC_VER

mdDiceEventFinishReward::mdDiceEventFinishReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDiceEventFinishReward)
}

void mdDiceEventFinishReward::InitAsDefaultInstance() {
}

mdDiceEventFinishReward::mdDiceEventFinishReward(const mdDiceEventFinishReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDiceEventFinishReward)
}

void mdDiceEventFinishReward::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  number_ = 0;
  reward_id_ = 0;
  reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDiceEventFinishReward::~mdDiceEventFinishReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDiceEventFinishReward)
  SharedDtor();
}

void mdDiceEventFinishReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDiceEventFinishReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDiceEventFinishReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDiceEventFinishReward_descriptor_;
}

const mdDiceEventFinishReward& mdDiceEventFinishReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDiceEventFinishReward* mdDiceEventFinishReward::default_instance_ = NULL;

mdDiceEventFinishReward* mdDiceEventFinishReward::New() const {
  return new mdDiceEventFinishReward;
}

void mdDiceEventFinishReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDiceEventFinishReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDiceEventFinishReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDiceEventFinishReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // required int32 number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count;
        break;
      }

      // required int32 reward_count = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count_)));
          set_has_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDiceEventFinishReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDiceEventFinishReward)
  return false;
#undef DO_
}

void mdDiceEventFinishReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDiceEventFinishReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id(), output);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDiceEventFinishReward)
}

::google::protobuf::uint8* mdDiceEventFinishReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDiceEventFinishReward)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  // required int32 reward_id = 3;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id(), target);
  }

  // required int32 reward_count = 4;
  if (has_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDiceEventFinishReward)
  return target;
}

int mdDiceEventFinishReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

    // required int32 reward_id = 3;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 reward_count = 4;
    if (has_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDiceEventFinishReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDiceEventFinishReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDiceEventFinishReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDiceEventFinishReward::MergeFrom(const mdDiceEventFinishReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_count()) {
      set_reward_count(from.reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDiceEventFinishReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDiceEventFinishReward::CopyFrom(const mdDiceEventFinishReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDiceEventFinishReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdDiceEventFinishReward::Swap(mdDiceEventFinishReward* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(number_, other->number_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_count_, other->reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDiceEventFinishReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDiceEventFinishReward_descriptor_;
  metadata.reflection = mdDiceEventFinishReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDiceEventBuyPoint::kEventIdFieldNumber;
const int mdDiceEventBuyPoint::kBuyCountFieldNumber;
const int mdDiceEventBuyPoint::kGemFieldNumber;
const int mdDiceEventBuyPoint::kPointFieldNumber;
#endif  // !_MSC_VER

mdDiceEventBuyPoint::mdDiceEventBuyPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDiceEventBuyPoint)
}

void mdDiceEventBuyPoint::InitAsDefaultInstance() {
}

mdDiceEventBuyPoint::mdDiceEventBuyPoint(const mdDiceEventBuyPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDiceEventBuyPoint)
}

void mdDiceEventBuyPoint::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  buy_count_ = 0;
  gem_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDiceEventBuyPoint::~mdDiceEventBuyPoint() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDiceEventBuyPoint)
  SharedDtor();
}

void mdDiceEventBuyPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDiceEventBuyPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDiceEventBuyPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDiceEventBuyPoint_descriptor_;
}

const mdDiceEventBuyPoint& mdDiceEventBuyPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDiceEventBuyPoint* mdDiceEventBuyPoint::default_instance_ = NULL;

mdDiceEventBuyPoint* mdDiceEventBuyPoint::New() const {
  return new mdDiceEventBuyPoint;
}

void mdDiceEventBuyPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDiceEventBuyPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDiceEventBuyPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDiceEventBuyPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buy_count;
        break;
      }

      // required int32 buy_count = 2;
      case 2: {
        if (tag == 16) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gem;
        break;
      }

      // required int32 gem = 3;
      case 3: {
        if (tag == 24) {
         parse_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_)));
          set_has_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // required int32 point = 4;
      case 4: {
        if (tag == 32) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDiceEventBuyPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDiceEventBuyPoint)
  return false;
#undef DO_
}

void mdDiceEventBuyPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDiceEventBuyPoint)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 buy_count = 2;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_count(), output);
  }

  // required int32 gem = 3;
  if (has_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gem(), output);
  }

  // required int32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDiceEventBuyPoint)
}

::google::protobuf::uint8* mdDiceEventBuyPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDiceEventBuyPoint)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 buy_count = 2;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_count(), target);
  }

  // required int32 gem = 3;
  if (has_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gem(), target);
  }

  // required int32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDiceEventBuyPoint)
  return target;
}

int mdDiceEventBuyPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 buy_count = 2;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

    // required int32 gem = 3;
    if (has_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem());
    }

    // required int32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDiceEventBuyPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDiceEventBuyPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDiceEventBuyPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDiceEventBuyPoint::MergeFrom(const mdDiceEventBuyPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_gem()) {
      set_gem(from.gem());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDiceEventBuyPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDiceEventBuyPoint::CopyFrom(const mdDiceEventBuyPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDiceEventBuyPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdDiceEventBuyPoint::Swap(mdDiceEventBuyPoint* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(gem_, other->gem_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDiceEventBuyPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDiceEventBuyPoint_descriptor_;
  metadata.reflection = mdDiceEventBuyPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDiceEventMileage::kEventIdFieldNumber;
const int mdDiceEventMileage::kIndexFieldNumber;
const int mdDiceEventMileage::kDiceCountFieldNumber;
const int mdDiceEventMileage::kRewardId1FieldNumber;
const int mdDiceEventMileage::kRewardCount1FieldNumber;
const int mdDiceEventMileage::kRewardId2FieldNumber;
const int mdDiceEventMileage::kRewardCount2FieldNumber;
const int mdDiceEventMileage::kRewardId3FieldNumber;
const int mdDiceEventMileage::kRewardCount3FieldNumber;
#endif  // !_MSC_VER

mdDiceEventMileage::mdDiceEventMileage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDiceEventMileage)
}

void mdDiceEventMileage::InitAsDefaultInstance() {
}

mdDiceEventMileage::mdDiceEventMileage(const mdDiceEventMileage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDiceEventMileage)
}

void mdDiceEventMileage::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  dice_count_ = 0;
  reward_id1_ = 0;
  reward_count1_ = 0;
  reward_id2_ = 0;
  reward_count2_ = 0;
  reward_id3_ = 0;
  reward_count3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDiceEventMileage::~mdDiceEventMileage() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDiceEventMileage)
  SharedDtor();
}

void mdDiceEventMileage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDiceEventMileage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDiceEventMileage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDiceEventMileage_descriptor_;
}

const mdDiceEventMileage& mdDiceEventMileage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDiceEventMileage* mdDiceEventMileage::default_instance_ = NULL;

mdDiceEventMileage* mdDiceEventMileage::New() const {
  return new mdDiceEventMileage;
}

void mdDiceEventMileage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDiceEventMileage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(event_id_, reward_id3_);
  }
  reward_count3_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDiceEventMileage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDiceEventMileage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dice_count;
        break;
      }

      // required int32 dice_count = 3;
      case 3: {
        if (tag == 24) {
         parse_dice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dice_count_)));
          set_has_dice_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_id1;
        break;
      }

      // required int32 reward_id1 = 7;
      case 7: {
        if (tag == 56) {
         parse_reward_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id1_)));
          set_has_reward_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reward_count1;
        break;
      }

      // required int32 reward_count1 = 8;
      case 8: {
        if (tag == 64) {
         parse_reward_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count1_)));
          set_has_reward_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_id2;
        break;
      }

      // required int32 reward_id2 = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id2_)));
          set_has_reward_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_count2;
        break;
      }

      // required int32 reward_count2 = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count2_)));
          set_has_reward_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward_id3;
        break;
      }

      // required int32 reward_id3 = 11;
      case 11: {
        if (tag == 88) {
         parse_reward_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id3_)));
          set_has_reward_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_reward_count3;
        break;
      }

      // required int32 reward_count3 = 12;
      case 12: {
        if (tag == 96) {
         parse_reward_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count3_)));
          set_has_reward_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDiceEventMileage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDiceEventMileage)
  return false;
#undef DO_
}

void mdDiceEventMileage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDiceEventMileage)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 dice_count = 3;
  if (has_dice_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dice_count(), output);
  }

  // required int32 reward_id1 = 7;
  if (has_reward_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_id1(), output);
  }

  // required int32 reward_count1 = 8;
  if (has_reward_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_count1(), output);
  }

  // required int32 reward_id2 = 9;
  if (has_reward_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_id2(), output);
  }

  // required int32 reward_count2 = 10;
  if (has_reward_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reward_count2(), output);
  }

  // required int32 reward_id3 = 11;
  if (has_reward_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_id3(), output);
  }

  // required int32 reward_count3 = 12;
  if (has_reward_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reward_count3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDiceEventMileage)
}

::google::protobuf::uint8* mdDiceEventMileage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDiceEventMileage)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 dice_count = 3;
  if (has_dice_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dice_count(), target);
  }

  // required int32 reward_id1 = 7;
  if (has_reward_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_id1(), target);
  }

  // required int32 reward_count1 = 8;
  if (has_reward_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_count1(), target);
  }

  // required int32 reward_id2 = 9;
  if (has_reward_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_id2(), target);
  }

  // required int32 reward_count2 = 10;
  if (has_reward_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reward_count2(), target);
  }

  // required int32 reward_id3 = 11;
  if (has_reward_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_id3(), target);
  }

  // required int32 reward_count3 = 12;
  if (has_reward_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reward_count3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDiceEventMileage)
  return target;
}

int mdDiceEventMileage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 dice_count = 3;
    if (has_dice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dice_count());
    }

    // required int32 reward_id1 = 7;
    if (has_reward_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id1());
    }

    // required int32 reward_count1 = 8;
    if (has_reward_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count1());
    }

    // required int32 reward_id2 = 9;
    if (has_reward_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id2());
    }

    // required int32 reward_count2 = 10;
    if (has_reward_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count2());
    }

    // required int32 reward_id3 = 11;
    if (has_reward_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_count3 = 12;
    if (has_reward_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDiceEventMileage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDiceEventMileage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDiceEventMileage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDiceEventMileage::MergeFrom(const mdDiceEventMileage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_dice_count()) {
      set_dice_count(from.dice_count());
    }
    if (from.has_reward_id1()) {
      set_reward_id1(from.reward_id1());
    }
    if (from.has_reward_count1()) {
      set_reward_count1(from.reward_count1());
    }
    if (from.has_reward_id2()) {
      set_reward_id2(from.reward_id2());
    }
    if (from.has_reward_count2()) {
      set_reward_count2(from.reward_count2());
    }
    if (from.has_reward_id3()) {
      set_reward_id3(from.reward_id3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_count3()) {
      set_reward_count3(from.reward_count3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDiceEventMileage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDiceEventMileage::CopyFrom(const mdDiceEventMileage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDiceEventMileage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdDiceEventMileage::Swap(mdDiceEventMileage* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(dice_count_, other->dice_count_);
    std::swap(reward_id1_, other->reward_id1_);
    std::swap(reward_count1_, other->reward_count1_);
    std::swap(reward_id2_, other->reward_id2_);
    std::swap(reward_count2_, other->reward_count2_);
    std::swap(reward_id3_, other->reward_id3_);
    std::swap(reward_count3_, other->reward_count3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDiceEventMileage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDiceEventMileage_descriptor_;
  metadata.reflection = mdDiceEventMileage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDonationEventInfo::kDonationOpenIdFieldNumber;
const int mdDonationEventInfo::kTitleFieldNumber;
const int mdDonationEventInfo::kDescriptionFieldNumber;
const int mdDonationEventInfo::kBannerUrlFieldNumber;
const int mdDonationEventInfo::kLinkTextFieldNumber;
const int mdDonationEventInfo::kLinkUrlFieldNumber;
const int mdDonationEventInfo::kStartTimeFieldNumber;
const int mdDonationEventInfo::kEndTimeFieldNumber;
const int mdDonationEventInfo::kExpireTimeFieldNumber;
const int mdDonationEventInfo::kDonationTemplateIdFieldNumber;
const int mdDonationEventInfo::kCostTypeFieldNumber;
const int mdDonationEventInfo::kCostFieldNumber;
const int mdDonationEventInfo::kExtraCostFieldNumber;
const int mdDonationEventInfo::kCutOffPointFieldNumber;
const int mdDonationEventInfo::kObtainPointFieldNumber;
const int mdDonationEventInfo::kBundleCostFieldNumber;
const int mdDonationEventInfo::kExtraBundleCostFieldNumber;
const int mdDonationEventInfo::kBundleObtainPointFieldNumber;
const int mdDonationEventInfo::kSerialDonationCountFieldNumber;
#endif  // !_MSC_VER

mdDonationEventInfo::mdDonationEventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDonationEventInfo)
}

void mdDonationEventInfo::InitAsDefaultInstance() {
}

mdDonationEventInfo::mdDonationEventInfo(const mdDonationEventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDonationEventInfo)
}

void mdDonationEventInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  donation_open_id_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  banner_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  expire_time_ = GOOGLE_LONGLONG(0);
  donation_template_id_ = 0;
  cost_type_ = 0;
  cost_ = 0;
  extra_cost_ = 0;
  cut_off_point_ = 0;
  obtain_point_ = 0;
  bundle_cost_ = 0;
  extra_bundle_cost_ = 0;
  bundle_obtain_point_ = 0;
  serial_donation_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDonationEventInfo::~mdDonationEventInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDonationEventInfo)
  SharedDtor();
}

void mdDonationEventInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (banner_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banner_url_;
  }
  if (link_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete link_text_;
  }
  if (link_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete link_url_;
  }
  if (this != default_instance_) {
  }
}

void mdDonationEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDonationEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDonationEventInfo_descriptor_;
}

const mdDonationEventInfo& mdDonationEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDonationEventInfo* mdDonationEventInfo::default_instance_ = NULL;

mdDonationEventInfo* mdDonationEventInfo::New() const {
  return new mdDonationEventInfo;
}

void mdDonationEventInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDonationEventInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_time_, end_time_);
    donation_open_id_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_banner_url()) {
      if (banner_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banner_url_->clear();
      }
    }
    if (has_link_text()) {
      if (link_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        link_text_->clear();
      }
    }
    if (has_link_url()) {
      if (link_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        link_url_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(expire_time_, bundle_cost_);
    donation_template_id_ = 0;
  }
  ZR_(extra_bundle_cost_, serial_donation_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDonationEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDonationEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 donation_open_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_open_id_)));
          set_has_donation_open_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // required string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banner_url;
        break;
      }

      // required string banner_url = 4;
      case 4: {
        if (tag == 34) {
         parse_banner_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->banner_url().data(), this->banner_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "banner_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_link_text;
        break;
      }

      // required string link_text = 5;
      case 5: {
        if (tag == 42) {
         parse_link_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_text().data(), this->link_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "link_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_link_url;
        break;
      }

      // required string link_url = 6;
      case 6: {
        if (tag == 50) {
         parse_link_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_url().data(), this->link_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "link_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 7;
      case 7: {
        if (tag == 56) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 8;
      case 8: {
        if (tag == 64) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_expire_time;
        break;
      }

      // required int64 expire_time = 9;
      case 9: {
        if (tag == 72) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_donation_template_id;
        break;
      }

      // required int32 donation_template_id = 11;
      case 11: {
        if (tag == 88) {
         parse_donation_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_template_id_)));
          set_has_donation_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_cost_type;
        break;
      }

      // required int32 cost_type = 12;
      case 12: {
        if (tag == 96) {
         parse_cost_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_type_)));
          set_has_cost_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_cost;
        break;
      }

      // required int32 cost = 13;
      case 13: {
        if (tag == 104) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_extra_cost;
        break;
      }

      // required int32 extra_cost = 14;
      case 14: {
        if (tag == 112) {
         parse_extra_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_cost_)));
          set_has_extra_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_cut_off_point;
        break;
      }

      // required int32 cut_off_point = 15;
      case 15: {
        if (tag == 120) {
         parse_cut_off_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cut_off_point_)));
          set_has_cut_off_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_obtain_point;
        break;
      }

      // required int32 obtain_point = 16;
      case 16: {
        if (tag == 128) {
         parse_obtain_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obtain_point_)));
          set_has_obtain_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_bundle_cost;
        break;
      }

      // required int32 bundle_cost = 17;
      case 17: {
        if (tag == 136) {
         parse_bundle_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bundle_cost_)));
          set_has_bundle_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_extra_bundle_cost;
        break;
      }

      // required int32 extra_bundle_cost = 18;
      case 18: {
        if (tag == 144) {
         parse_extra_bundle_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extra_bundle_cost_)));
          set_has_extra_bundle_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_bundle_obtain_point;
        break;
      }

      // required int32 bundle_obtain_point = 19;
      case 19: {
        if (tag == 152) {
         parse_bundle_obtain_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bundle_obtain_point_)));
          set_has_bundle_obtain_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_serial_donation_count;
        break;
      }

      // required int32 serial_donation_count = 20;
      case 20: {
        if (tag == 160) {
         parse_serial_donation_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_donation_count_)));
          set_has_serial_donation_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDonationEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDonationEventInfo)
  return false;
#undef DO_
}

void mdDonationEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDonationEventInfo)
  // required int32 donation_open_id = 1;
  if (has_donation_open_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donation_open_id(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // required string banner_url = 4;
  if (has_banner_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banner_url().data(), this->banner_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banner_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->banner_url(), output);
  }

  // required string link_text = 5;
  if (has_link_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_text().data(), this->link_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->link_text(), output);
  }

  // required string link_url = 6;
  if (has_link_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_url().data(), this->link_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->link_url(), output);
  }

  // required int64 start_time = 7;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->start_time(), output);
  }

  // required int64 end_time = 8;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->end_time(), output);
  }

  // required int64 expire_time = 9;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->expire_time(), output);
  }

  // required int32 donation_template_id = 11;
  if (has_donation_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->donation_template_id(), output);
  }

  // required int32 cost_type = 12;
  if (has_cost_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cost_type(), output);
  }

  // required int32 cost = 13;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cost(), output);
  }

  // required int32 extra_cost = 14;
  if (has_extra_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->extra_cost(), output);
  }

  // required int32 cut_off_point = 15;
  if (has_cut_off_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cut_off_point(), output);
  }

  // required int32 obtain_point = 16;
  if (has_obtain_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->obtain_point(), output);
  }

  // required int32 bundle_cost = 17;
  if (has_bundle_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->bundle_cost(), output);
  }

  // required int32 extra_bundle_cost = 18;
  if (has_extra_bundle_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->extra_bundle_cost(), output);
  }

  // required int32 bundle_obtain_point = 19;
  if (has_bundle_obtain_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->bundle_obtain_point(), output);
  }

  // required int32 serial_donation_count = 20;
  if (has_serial_donation_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->serial_donation_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDonationEventInfo)
}

::google::protobuf::uint8* mdDonationEventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDonationEventInfo)
  // required int32 donation_open_id = 1;
  if (has_donation_open_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donation_open_id(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // required string banner_url = 4;
  if (has_banner_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banner_url().data(), this->banner_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banner_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->banner_url(), target);
  }

  // required string link_text = 5;
  if (has_link_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_text().data(), this->link_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->link_text(), target);
  }

  // required string link_url = 6;
  if (has_link_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_url().data(), this->link_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "link_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->link_url(), target);
  }

  // required int64 start_time = 7;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->start_time(), target);
  }

  // required int64 end_time = 8;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->end_time(), target);
  }

  // required int64 expire_time = 9;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->expire_time(), target);
  }

  // required int32 donation_template_id = 11;
  if (has_donation_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->donation_template_id(), target);
  }

  // required int32 cost_type = 12;
  if (has_cost_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cost_type(), target);
  }

  // required int32 cost = 13;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cost(), target);
  }

  // required int32 extra_cost = 14;
  if (has_extra_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->extra_cost(), target);
  }

  // required int32 cut_off_point = 15;
  if (has_cut_off_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cut_off_point(), target);
  }

  // required int32 obtain_point = 16;
  if (has_obtain_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->obtain_point(), target);
  }

  // required int32 bundle_cost = 17;
  if (has_bundle_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->bundle_cost(), target);
  }

  // required int32 extra_bundle_cost = 18;
  if (has_extra_bundle_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->extra_bundle_cost(), target);
  }

  // required int32 bundle_obtain_point = 19;
  if (has_bundle_obtain_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->bundle_obtain_point(), target);
  }

  // required int32 serial_donation_count = 20;
  if (has_serial_donation_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->serial_donation_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDonationEventInfo)
  return target;
}

int mdDonationEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 donation_open_id = 1;
    if (has_donation_open_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_open_id());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required string banner_url = 4;
    if (has_banner_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_url());
    }

    // required string link_text = 5;
    if (has_link_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_text());
    }

    // required string link_url = 6;
    if (has_link_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_url());
    }

    // required int64 start_time = 7;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 8;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 expire_time = 9;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

    // required int32 donation_template_id = 11;
    if (has_donation_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_template_id());
    }

    // required int32 cost_type = 12;
    if (has_cost_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost_type());
    }

    // required int32 cost = 13;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // required int32 extra_cost = 14;
    if (has_extra_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_cost());
    }

    // required int32 cut_off_point = 15;
    if (has_cut_off_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cut_off_point());
    }

    // required int32 obtain_point = 16;
    if (has_obtain_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obtain_point());
    }

    // required int32 bundle_cost = 17;
    if (has_bundle_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bundle_cost());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 extra_bundle_cost = 18;
    if (has_extra_bundle_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extra_bundle_cost());
    }

    // required int32 bundle_obtain_point = 19;
    if (has_bundle_obtain_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bundle_obtain_point());
    }

    // required int32 serial_donation_count = 20;
    if (has_serial_donation_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_donation_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDonationEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDonationEventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDonationEventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDonationEventInfo::MergeFrom(const mdDonationEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_open_id()) {
      set_donation_open_id(from.donation_open_id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_banner_url()) {
      set_banner_url(from.banner_url());
    }
    if (from.has_link_text()) {
      set_link_text(from.link_text());
    }
    if (from.has_link_url()) {
      set_link_url(from.link_url());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
    if (from.has_donation_template_id()) {
      set_donation_template_id(from.donation_template_id());
    }
    if (from.has_cost_type()) {
      set_cost_type(from.cost_type());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_extra_cost()) {
      set_extra_cost(from.extra_cost());
    }
    if (from.has_cut_off_point()) {
      set_cut_off_point(from.cut_off_point());
    }
    if (from.has_obtain_point()) {
      set_obtain_point(from.obtain_point());
    }
    if (from.has_bundle_cost()) {
      set_bundle_cost(from.bundle_cost());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_extra_bundle_cost()) {
      set_extra_bundle_cost(from.extra_bundle_cost());
    }
    if (from.has_bundle_obtain_point()) {
      set_bundle_obtain_point(from.bundle_obtain_point());
    }
    if (from.has_serial_donation_count()) {
      set_serial_donation_count(from.serial_donation_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDonationEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDonationEventInfo::CopyFrom(const mdDonationEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDonationEventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void mdDonationEventInfo::Swap(mdDonationEventInfo* other) {
  if (other != this) {
    std::swap(donation_open_id_, other->donation_open_id_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(banner_url_, other->banner_url_);
    std::swap(link_text_, other->link_text_);
    std::swap(link_url_, other->link_url_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(donation_template_id_, other->donation_template_id_);
    std::swap(cost_type_, other->cost_type_);
    std::swap(cost_, other->cost_);
    std::swap(extra_cost_, other->extra_cost_);
    std::swap(cut_off_point_, other->cut_off_point_);
    std::swap(obtain_point_, other->obtain_point_);
    std::swap(bundle_cost_, other->bundle_cost_);
    std::swap(extra_bundle_cost_, other->extra_bundle_cost_);
    std::swap(bundle_obtain_point_, other->bundle_obtain_point_);
    std::swap(serial_donation_count_, other->serial_donation_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDonationEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDonationEventInfo_descriptor_;
  metadata.reflection = mdDonationEventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDonationPointRankingRewardInfo::kDonationIdFieldNumber;
const int mdDonationPointRankingRewardInfo::kRankFieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardId1FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardCount1FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardId2FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardCount2FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardId3FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardCount3FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardId4FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardCount4FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardId5FieldNumber;
const int mdDonationPointRankingRewardInfo::kRewardCount5FieldNumber;
#endif  // !_MSC_VER

mdDonationPointRankingRewardInfo::mdDonationPointRankingRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
}

void mdDonationPointRankingRewardInfo::InitAsDefaultInstance() {
}

mdDonationPointRankingRewardInfo::mdDonationPointRankingRewardInfo(const mdDonationPointRankingRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
}

void mdDonationPointRankingRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  donation_id_ = 0;
  rank_ = 0;
  reward_id1_ = 0;
  reward_count1_ = 0;
  reward_id2_ = 0;
  reward_count2_ = 0;
  reward_id3_ = 0;
  reward_count3_ = 0;
  reward_id4_ = 0;
  reward_count4_ = 0;
  reward_id5_ = 0;
  reward_count5_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDonationPointRankingRewardInfo::~mdDonationPointRankingRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  SharedDtor();
}

void mdDonationPointRankingRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDonationPointRankingRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDonationPointRankingRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDonationPointRankingRewardInfo_descriptor_;
}

const mdDonationPointRankingRewardInfo& mdDonationPointRankingRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDonationPointRankingRewardInfo* mdDonationPointRankingRewardInfo::default_instance_ = NULL;

mdDonationPointRankingRewardInfo* mdDonationPointRankingRewardInfo::New() const {
  return new mdDonationPointRankingRewardInfo;
}

void mdDonationPointRankingRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDonationPointRankingRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(donation_id_, reward_count3_);
  }
  ZR_(reward_id4_, reward_count5_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDonationPointRankingRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 donation_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_id_)));
          set_has_donation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_id1;
        break;
      }

      // required int32 reward_id1 = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id1_)));
          set_has_reward_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_count1;
        break;
      }

      // required int32 reward_count1 = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count1_)));
          set_has_reward_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_id2;
        break;
      }

      // required int32 reward_id2 = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id2_)));
          set_has_reward_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_count2;
        break;
      }

      // required int32 reward_count2 = 6;
      case 6: {
        if (tag == 48) {
         parse_reward_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count2_)));
          set_has_reward_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_id3;
        break;
      }

      // required int32 reward_id3 = 7;
      case 7: {
        if (tag == 56) {
         parse_reward_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id3_)));
          set_has_reward_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reward_count3;
        break;
      }

      // required int32 reward_count3 = 8;
      case 8: {
        if (tag == 64) {
         parse_reward_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count3_)));
          set_has_reward_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_id4;
        break;
      }

      // required int32 reward_id4 = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id4_)));
          set_has_reward_id4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_reward_count4;
        break;
      }

      // required int32 reward_count4 = 10;
      case 10: {
        if (tag == 80) {
         parse_reward_count4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count4_)));
          set_has_reward_count4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_reward_id5;
        break;
      }

      // required int32 reward_id5 = 11;
      case 11: {
        if (tag == 88) {
         parse_reward_id5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id5_)));
          set_has_reward_id5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_reward_count5;
        break;
      }

      // required int32 reward_count5 = 12;
      case 12: {
        if (tag == 96) {
         parse_reward_count5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count5_)));
          set_has_reward_count5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  return false;
#undef DO_
}

void mdDonationPointRankingRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donation_id(), output);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // required int32 reward_id1 = 3;
  if (has_reward_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_id1(), output);
  }

  // required int32 reward_count1 = 4;
  if (has_reward_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_count1(), output);
  }

  // required int32 reward_id2 = 5;
  if (has_reward_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_id2(), output);
  }

  // required int32 reward_count2 = 6;
  if (has_reward_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_count2(), output);
  }

  // required int32 reward_id3 = 7;
  if (has_reward_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_id3(), output);
  }

  // required int32 reward_count3 = 8;
  if (has_reward_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_count3(), output);
  }

  // required int32 reward_id4 = 9;
  if (has_reward_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_id4(), output);
  }

  // required int32 reward_count4 = 10;
  if (has_reward_count4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->reward_count4(), output);
  }

  // required int32 reward_id5 = 11;
  if (has_reward_id5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reward_id5(), output);
  }

  // required int32 reward_count5 = 12;
  if (has_reward_count5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reward_count5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
}

::google::protobuf::uint8* mdDonationPointRankingRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donation_id(), target);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // required int32 reward_id1 = 3;
  if (has_reward_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_id1(), target);
  }

  // required int32 reward_count1 = 4;
  if (has_reward_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_count1(), target);
  }

  // required int32 reward_id2 = 5;
  if (has_reward_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_id2(), target);
  }

  // required int32 reward_count2 = 6;
  if (has_reward_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_count2(), target);
  }

  // required int32 reward_id3 = 7;
  if (has_reward_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_id3(), target);
  }

  // required int32 reward_count3 = 8;
  if (has_reward_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_count3(), target);
  }

  // required int32 reward_id4 = 9;
  if (has_reward_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_id4(), target);
  }

  // required int32 reward_count4 = 10;
  if (has_reward_count4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->reward_count4(), target);
  }

  // required int32 reward_id5 = 11;
  if (has_reward_id5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->reward_id5(), target);
  }

  // required int32 reward_count5 = 12;
  if (has_reward_count5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reward_count5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDonationPointRankingRewardInfo)
  return target;
}

int mdDonationPointRankingRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 donation_id = 1;
    if (has_donation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_id());
    }

    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 reward_id1 = 3;
    if (has_reward_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id1());
    }

    // required int32 reward_count1 = 4;
    if (has_reward_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count1());
    }

    // required int32 reward_id2 = 5;
    if (has_reward_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id2());
    }

    // required int32 reward_count2 = 6;
    if (has_reward_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count2());
    }

    // required int32 reward_id3 = 7;
    if (has_reward_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id3());
    }

    // required int32 reward_count3 = 8;
    if (has_reward_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_id4 = 9;
    if (has_reward_id4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id4());
    }

    // required int32 reward_count4 = 10;
    if (has_reward_count4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count4());
    }

    // required int32 reward_id5 = 11;
    if (has_reward_id5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id5());
    }

    // required int32 reward_count5 = 12;
    if (has_reward_count5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDonationPointRankingRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDonationPointRankingRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDonationPointRankingRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDonationPointRankingRewardInfo::MergeFrom(const mdDonationPointRankingRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_id()) {
      set_donation_id(from.donation_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_reward_id1()) {
      set_reward_id1(from.reward_id1());
    }
    if (from.has_reward_count1()) {
      set_reward_count1(from.reward_count1());
    }
    if (from.has_reward_id2()) {
      set_reward_id2(from.reward_id2());
    }
    if (from.has_reward_count2()) {
      set_reward_count2(from.reward_count2());
    }
    if (from.has_reward_id3()) {
      set_reward_id3(from.reward_id3());
    }
    if (from.has_reward_count3()) {
      set_reward_count3(from.reward_count3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_id4()) {
      set_reward_id4(from.reward_id4());
    }
    if (from.has_reward_count4()) {
      set_reward_count4(from.reward_count4());
    }
    if (from.has_reward_id5()) {
      set_reward_id5(from.reward_id5());
    }
    if (from.has_reward_count5()) {
      set_reward_count5(from.reward_count5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDonationPointRankingRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDonationPointRankingRewardInfo::CopyFrom(const mdDonationPointRankingRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDonationPointRankingRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void mdDonationPointRankingRewardInfo::Swap(mdDonationPointRankingRewardInfo* other) {
  if (other != this) {
    std::swap(donation_id_, other->donation_id_);
    std::swap(rank_, other->rank_);
    std::swap(reward_id1_, other->reward_id1_);
    std::swap(reward_count1_, other->reward_count1_);
    std::swap(reward_id2_, other->reward_id2_);
    std::swap(reward_count2_, other->reward_count2_);
    std::swap(reward_id3_, other->reward_id3_);
    std::swap(reward_count3_, other->reward_count3_);
    std::swap(reward_id4_, other->reward_id4_);
    std::swap(reward_count4_, other->reward_count4_);
    std::swap(reward_id5_, other->reward_id5_);
    std::swap(reward_count5_, other->reward_count5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDonationPointRankingRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDonationPointRankingRewardInfo_descriptor_;
  metadata.reflection = mdDonationPointRankingRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDonationBundleFixedRewardInfo::kDonationIdFieldNumber;
const int mdDonationBundleFixedRewardInfo::kRewardIdFieldNumber;
const int mdDonationBundleFixedRewardInfo::kMinAmountFieldNumber;
const int mdDonationBundleFixedRewardInfo::kMaxAmountFieldNumber;
#endif  // !_MSC_VER

mdDonationBundleFixedRewardInfo::mdDonationBundleFixedRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
}

void mdDonationBundleFixedRewardInfo::InitAsDefaultInstance() {
}

mdDonationBundleFixedRewardInfo::mdDonationBundleFixedRewardInfo(const mdDonationBundleFixedRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
}

void mdDonationBundleFixedRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  donation_id_ = 0;
  reward_id_ = 0;
  min_amount_ = 0;
  max_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDonationBundleFixedRewardInfo::~mdDonationBundleFixedRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  SharedDtor();
}

void mdDonationBundleFixedRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDonationBundleFixedRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDonationBundleFixedRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDonationBundleFixedRewardInfo_descriptor_;
}

const mdDonationBundleFixedRewardInfo& mdDonationBundleFixedRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDonationBundleFixedRewardInfo* mdDonationBundleFixedRewardInfo::default_instance_ = NULL;

mdDonationBundleFixedRewardInfo* mdDonationBundleFixedRewardInfo::New() const {
  return new mdDonationBundleFixedRewardInfo;
}

void mdDonationBundleFixedRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDonationBundleFixedRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(donation_id_, max_amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDonationBundleFixedRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 donation_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_id_)));
          set_has_donation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_id;
        break;
      }

      // required int32 reward_id = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_min_amount;
        break;
      }

      // required int32 min_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_min_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_amount_)));
          set_has_min_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_amount;
        break;
      }

      // required int32 max_amount = 4;
      case 4: {
        if (tag == 32) {
         parse_max_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_amount_)));
          set_has_max_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  return false;
#undef DO_
}

void mdDonationBundleFixedRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donation_id(), output);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_id(), output);
  }

  // required int32 min_amount = 3;
  if (has_min_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_amount(), output);
  }

  // required int32 max_amount = 4;
  if (has_max_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
}

::google::protobuf::uint8* mdDonationBundleFixedRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donation_id(), target);
  }

  // required int32 reward_id = 2;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_id(), target);
  }

  // required int32 min_amount = 3;
  if (has_min_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_amount(), target);
  }

  // required int32 max_amount = 4;
  if (has_max_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDonationBundleFixedRewardInfo)
  return target;
}

int mdDonationBundleFixedRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 donation_id = 1;
    if (has_donation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_id());
    }

    // required int32 reward_id = 2;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id());
    }

    // required int32 min_amount = 3;
    if (has_min_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_amount());
    }

    // required int32 max_amount = 4;
    if (has_max_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDonationBundleFixedRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDonationBundleFixedRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDonationBundleFixedRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDonationBundleFixedRewardInfo::MergeFrom(const mdDonationBundleFixedRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_id()) {
      set_donation_id(from.donation_id());
    }
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_min_amount()) {
      set_min_amount(from.min_amount());
    }
    if (from.has_max_amount()) {
      set_max_amount(from.max_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDonationBundleFixedRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDonationBundleFixedRewardInfo::CopyFrom(const mdDonationBundleFixedRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDonationBundleFixedRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdDonationBundleFixedRewardInfo::Swap(mdDonationBundleFixedRewardInfo* other) {
  if (other != this) {
    std::swap(donation_id_, other->donation_id_);
    std::swap(reward_id_, other->reward_id_);
    std::swap(min_amount_, other->min_amount_);
    std::swap(max_amount_, other->max_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDonationBundleFixedRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDonationBundleFixedRewardInfo_descriptor_;
  metadata.reflection = mdDonationBundleFixedRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDonationPointStepRewardInfo::kDonationIdFieldNumber;
const int mdDonationPointStepRewardInfo::kStepFieldNumber;
const int mdDonationPointStepRewardInfo::kPointFieldNumber;
const int mdDonationPointStepRewardInfo::kRewardId1FieldNumber;
const int mdDonationPointStepRewardInfo::kRewardCount1FieldNumber;
const int mdDonationPointStepRewardInfo::kRewardId2FieldNumber;
const int mdDonationPointStepRewardInfo::kRewardCount2FieldNumber;
const int mdDonationPointStepRewardInfo::kRewardId3FieldNumber;
const int mdDonationPointStepRewardInfo::kRewardCount3FieldNumber;
#endif  // !_MSC_VER

mdDonationPointStepRewardInfo::mdDonationPointStepRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
}

void mdDonationPointStepRewardInfo::InitAsDefaultInstance() {
}

mdDonationPointStepRewardInfo::mdDonationPointStepRewardInfo(const mdDonationPointStepRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
}

void mdDonationPointStepRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  donation_id_ = 0;
  step_ = 0;
  point_ = 0;
  reward_id1_ = 0;
  reward_count1_ = 0;
  reward_id2_ = 0;
  reward_count2_ = 0;
  reward_id3_ = 0;
  reward_count3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDonationPointStepRewardInfo::~mdDonationPointStepRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  SharedDtor();
}

void mdDonationPointStepRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDonationPointStepRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDonationPointStepRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDonationPointStepRewardInfo_descriptor_;
}

const mdDonationPointStepRewardInfo& mdDonationPointStepRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDonationPointStepRewardInfo* mdDonationPointStepRewardInfo::default_instance_ = NULL;

mdDonationPointStepRewardInfo* mdDonationPointStepRewardInfo::New() const {
  return new mdDonationPointStepRewardInfo;
}

void mdDonationPointStepRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDonationPointStepRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(donation_id_, reward_id3_);
  }
  reward_count3_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDonationPointStepRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 donation_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_id_)));
          set_has_donation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // required int32 step = 2;
      case 2: {
        if (tag == 16) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // required int32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_id1;
        break;
      }

      // required int32 reward_id1 = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id1_)));
          set_has_reward_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_count1;
        break;
      }

      // required int32 reward_count1 = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count1_)));
          set_has_reward_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_id2;
        break;
      }

      // required int32 reward_id2 = 6;
      case 6: {
        if (tag == 48) {
         parse_reward_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id2_)));
          set_has_reward_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reward_count2;
        break;
      }

      // required int32 reward_count2 = 7;
      case 7: {
        if (tag == 56) {
         parse_reward_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count2_)));
          set_has_reward_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_reward_id3;
        break;
      }

      // required int32 reward_id3 = 8;
      case 8: {
        if (tag == 64) {
         parse_reward_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_id3_)));
          set_has_reward_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reward_count3;
        break;
      }

      // required int32 reward_count3 = 9;
      case 9: {
        if (tag == 72) {
         parse_reward_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_count3_)));
          set_has_reward_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  return false;
#undef DO_
}

void mdDonationPointStepRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donation_id(), output);
  }

  // required int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  // required int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // required int32 reward_id1 = 4;
  if (has_reward_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_id1(), output);
  }

  // required int32 reward_count1 = 5;
  if (has_reward_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_count1(), output);
  }

  // required int32 reward_id2 = 6;
  if (has_reward_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_id2(), output);
  }

  // required int32 reward_count2 = 7;
  if (has_reward_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reward_count2(), output);
  }

  // required int32 reward_id3 = 8;
  if (has_reward_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reward_id3(), output);
  }

  // required int32 reward_count3 = 9;
  if (has_reward_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reward_count3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
}

::google::protobuf::uint8* mdDonationPointStepRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donation_id(), target);
  }

  // required int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  // required int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // required int32 reward_id1 = 4;
  if (has_reward_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_id1(), target);
  }

  // required int32 reward_count1 = 5;
  if (has_reward_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_count1(), target);
  }

  // required int32 reward_id2 = 6;
  if (has_reward_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_id2(), target);
  }

  // required int32 reward_count2 = 7;
  if (has_reward_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reward_count2(), target);
  }

  // required int32 reward_id3 = 8;
  if (has_reward_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->reward_id3(), target);
  }

  // required int32 reward_count3 = 9;
  if (has_reward_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->reward_count3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDonationPointStepRewardInfo)
  return target;
}

int mdDonationPointStepRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 donation_id = 1;
    if (has_donation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_id());
    }

    // required int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required int32 reward_id1 = 4;
    if (has_reward_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id1());
    }

    // required int32 reward_count1 = 5;
    if (has_reward_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count1());
    }

    // required int32 reward_id2 = 6;
    if (has_reward_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id2());
    }

    // required int32 reward_count2 = 7;
    if (has_reward_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count2());
    }

    // required int32 reward_id3 = 8;
    if (has_reward_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_id3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 reward_count3 = 9;
    if (has_reward_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_count3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDonationPointStepRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDonationPointStepRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDonationPointStepRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDonationPointStepRewardInfo::MergeFrom(const mdDonationPointStepRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_id()) {
      set_donation_id(from.donation_id());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_reward_id1()) {
      set_reward_id1(from.reward_id1());
    }
    if (from.has_reward_count1()) {
      set_reward_count1(from.reward_count1());
    }
    if (from.has_reward_id2()) {
      set_reward_id2(from.reward_id2());
    }
    if (from.has_reward_count2()) {
      set_reward_count2(from.reward_count2());
    }
    if (from.has_reward_id3()) {
      set_reward_id3(from.reward_id3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_count3()) {
      set_reward_count3(from.reward_count3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDonationPointStepRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDonationPointStepRewardInfo::CopyFrom(const mdDonationPointStepRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDonationPointStepRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdDonationPointStepRewardInfo::Swap(mdDonationPointStepRewardInfo* other) {
  if (other != this) {
    std::swap(donation_id_, other->donation_id_);
    std::swap(step_, other->step_);
    std::swap(point_, other->point_);
    std::swap(reward_id1_, other->reward_id1_);
    std::swap(reward_count1_, other->reward_count1_);
    std::swap(reward_id2_, other->reward_id2_);
    std::swap(reward_count2_, other->reward_count2_);
    std::swap(reward_id3_, other->reward_id3_);
    std::swap(reward_count3_, other->reward_count3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDonationPointStepRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDonationPointStepRewardInfo_descriptor_;
  metadata.reflection = mdDonationPointStepRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFairyInfo::kFairyTypeFieldNumber;
const int mdFairyInfo::kOptionIdFieldNumber;
const int mdFairyInfo::kBlessLevelFieldNumber;
const int mdFairyInfo::kOptionValueFieldNumber;
const int mdFairyInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

mdFairyInfo::mdFairyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFairyInfo)
}

void mdFairyInfo::InitAsDefaultInstance() {
}

mdFairyInfo::mdFairyInfo(const mdFairyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFairyInfo)
}

void mdFairyInfo::SharedCtor() {
  _cached_size_ = 0;
  fairy_type_ = 1;
  option_id_ = 0;
  bless_level_ = 0;
  option_value_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFairyInfo::~mdFairyInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFairyInfo)
  SharedDtor();
}

void mdFairyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFairyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFairyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFairyInfo_descriptor_;
}

const mdFairyInfo& mdFairyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFairyInfo* mdFairyInfo::default_instance_ = NULL;

mdFairyInfo* mdFairyInfo::New() const {
  return new mdFairyInfo;
}

void mdFairyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdFairyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(option_id_, level_);
    fairy_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFairyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFairyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.FairyType fairy_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FairyType_IsValid(value)) {
            set_fairy_type(static_cast< ::b2::protocol::commondata::FairyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_id;
        break;
      }

      // required int32 option_id = 2;
      case 2: {
        if (tag == 16) {
         parse_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bless_level;
        break;
      }

      // required int32 bless_level = 3;
      case 3: {
        if (tag == 24) {
         parse_bless_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_level_)));
          set_has_bless_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_option_value;
        break;
      }

      // required float option_value = 4;
      case 4: {
        if (tag == 37) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFairyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFairyInfo)
  return false;
#undef DO_
}

void mdFairyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFairyInfo)
  // required .b2.protocol.commondata.FairyType fairy_type = 1;
  if (has_fairy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fairy_type(), output);
  }

  // required int32 option_id = 2;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_id(), output);
  }

  // required int32 bless_level = 3;
  if (has_bless_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bless_level(), output);
  }

  // required float option_value = 4;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->option_value(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFairyInfo)
}

::google::protobuf::uint8* mdFairyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFairyInfo)
  // required .b2.protocol.commondata.FairyType fairy_type = 1;
  if (has_fairy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fairy_type(), target);
  }

  // required int32 option_id = 2;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_id(), target);
  }

  // required int32 bless_level = 3;
  if (has_bless_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bless_level(), target);
  }

  // required float option_value = 4;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->option_value(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFairyInfo)
  return target;
}

int mdFairyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.FairyType fairy_type = 1;
    if (has_fairy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fairy_type());
    }

    // required int32 option_id = 2;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required int32 bless_level = 3;
    if (has_bless_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_level());
    }

    // required float option_value = 4;
    if (has_option_value()) {
      total_size += 1 + 4;
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFairyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFairyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFairyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFairyInfo::MergeFrom(const mdFairyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fairy_type()) {
      set_fairy_type(from.fairy_type());
    }
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_bless_level()) {
      set_bless_level(from.bless_level());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFairyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFairyInfo::CopyFrom(const mdFairyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFairyInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdFairyInfo::Swap(mdFairyInfo* other) {
  if (other != this) {
    std::swap(fairy_type_, other->fairy_type_);
    std::swap(option_id_, other->option_id_);
    std::swap(bless_level_, other->bless_level_);
    std::swap(option_value_, other->option_value_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFairyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFairyInfo_descriptor_;
  metadata.reflection = mdFairyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFairyLevelupCost::kLevelFieldNumber;
const int mdFairyLevelupCost::kMaterialCostFieldNumber;
#endif  // !_MSC_VER

mdFairyLevelupCost::mdFairyLevelupCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFairyLevelupCost)
}

void mdFairyLevelupCost::InitAsDefaultInstance() {
}

mdFairyLevelupCost::mdFairyLevelupCost(const mdFairyLevelupCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFairyLevelupCost)
}

void mdFairyLevelupCost::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  material_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFairyLevelupCost::~mdFairyLevelupCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFairyLevelupCost)
  SharedDtor();
}

void mdFairyLevelupCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFairyLevelupCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFairyLevelupCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFairyLevelupCost_descriptor_;
}

const mdFairyLevelupCost& mdFairyLevelupCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFairyLevelupCost* mdFairyLevelupCost::default_instance_ = NULL;

mdFairyLevelupCost* mdFairyLevelupCost::New() const {
  return new mdFairyLevelupCost;
}

void mdFairyLevelupCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdFairyLevelupCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, material_cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFairyLevelupCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFairyLevelupCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_material_cost;
        break;
      }

      // required int32 material_cost = 2;
      case 2: {
        if (tag == 16) {
         parse_material_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_cost_)));
          set_has_material_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFairyLevelupCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFairyLevelupCost)
  return false;
#undef DO_
}

void mdFairyLevelupCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFairyLevelupCost)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 material_cost = 2;
  if (has_material_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->material_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFairyLevelupCost)
}

::google::protobuf::uint8* mdFairyLevelupCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFairyLevelupCost)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 material_cost = 2;
  if (has_material_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->material_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFairyLevelupCost)
  return target;
}

int mdFairyLevelupCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 material_cost = 2;
    if (has_material_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFairyLevelupCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFairyLevelupCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFairyLevelupCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFairyLevelupCost::MergeFrom(const mdFairyLevelupCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_material_cost()) {
      set_material_cost(from.material_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFairyLevelupCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFairyLevelupCost::CopyFrom(const mdFairyLevelupCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFairyLevelupCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdFairyLevelupCost::Swap(mdFairyLevelupCost* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(material_cost_, other->material_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFairyLevelupCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFairyLevelupCost_descriptor_;
  metadata.reflection = mdFairyLevelupCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFairyOpenInfo::kFairyTypeFieldNumber;
const int mdFairyOpenInfo::kStageIdFieldNumber;
#endif  // !_MSC_VER

mdFairyOpenInfo::mdFairyOpenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFairyOpenInfo)
}

void mdFairyOpenInfo::InitAsDefaultInstance() {
}

mdFairyOpenInfo::mdFairyOpenInfo(const mdFairyOpenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFairyOpenInfo)
}

void mdFairyOpenInfo::SharedCtor() {
  _cached_size_ = 0;
  fairy_type_ = 1;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFairyOpenInfo::~mdFairyOpenInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFairyOpenInfo)
  SharedDtor();
}

void mdFairyOpenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFairyOpenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFairyOpenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFairyOpenInfo_descriptor_;
}

const mdFairyOpenInfo& mdFairyOpenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFairyOpenInfo* mdFairyOpenInfo::default_instance_ = NULL;

mdFairyOpenInfo* mdFairyOpenInfo::New() const {
  return new mdFairyOpenInfo;
}

void mdFairyOpenInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    fairy_type_ = 1;
    stage_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFairyOpenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFairyOpenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.FairyType fairy_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FairyType_IsValid(value)) {
            set_fairy_type(static_cast< ::b2::protocol::commondata::FairyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stage_id;
        break;
      }

      // required int32 stage_id = 2;
      case 2: {
        if (tag == 16) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFairyOpenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFairyOpenInfo)
  return false;
#undef DO_
}

void mdFairyOpenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFairyOpenInfo)
  // required .b2.protocol.commondata.FairyType fairy_type = 1;
  if (has_fairy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fairy_type(), output);
  }

  // required int32 stage_id = 2;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFairyOpenInfo)
}

::google::protobuf::uint8* mdFairyOpenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFairyOpenInfo)
  // required .b2.protocol.commondata.FairyType fairy_type = 1;
  if (has_fairy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fairy_type(), target);
  }

  // required int32 stage_id = 2;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFairyOpenInfo)
  return target;
}

int mdFairyOpenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.FairyType fairy_type = 1;
    if (has_fairy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fairy_type());
    }

    // required int32 stage_id = 2;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFairyOpenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFairyOpenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFairyOpenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFairyOpenInfo::MergeFrom(const mdFairyOpenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fairy_type()) {
      set_fairy_type(from.fairy_type());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFairyOpenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFairyOpenInfo::CopyFrom(const mdFairyOpenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFairyOpenInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void mdFairyOpenInfo::Swap(mdFairyOpenInfo* other) {
  if (other != this) {
    std::swap(fairy_type_, other->fairy_type_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFairyOpenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFairyOpenInfo_descriptor_;
  metadata.reflection = mdFairyOpenInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemInfo::kTemplateIdFieldNumber;
const int mdTotemInfo::kGroupIdFieldNumber;
const int mdTotemInfo::kBonusIdFieldNumber;
const int mdTotemInfo::kGradeFieldNumber;
const int mdTotemInfo::kSellPriceFieldNumber;
const int mdTotemInfo::kEquipSlotFieldNumber;
const int mdTotemInfo::kRefineLimitCount1FieldNumber;
const int mdTotemInfo::kRefineLimitCount2FieldNumber;
const int mdTotemInfo::kRefineLimitCount3FieldNumber;
#endif  // !_MSC_VER

mdTotemInfo::mdTotemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemInfo)
}

void mdTotemInfo::InitAsDefaultInstance() {
}

mdTotemInfo::mdTotemInfo(const mdTotemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemInfo)
}

void mdTotemInfo::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  group_id_ = 0;
  bonus_id_ = 0;
  grade_ = 0;
  sell_price_ = 0;
  equip_slot_ = 0;
  refine_limit_count1_ = 0;
  refine_limit_count2_ = 0;
  refine_limit_count3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemInfo::~mdTotemInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemInfo)
  SharedDtor();
}

void mdTotemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemInfo_descriptor_;
}

const mdTotemInfo& mdTotemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemInfo* mdTotemInfo::default_instance_ = NULL;

mdTotemInfo* mdTotemInfo::New() const {
  return new mdTotemInfo;
}

void mdTotemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(template_id_, refine_limit_count2_);
  }
  refine_limit_count3_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bonus_id;
        break;
      }

      // required int32 bonus_id = 3;
      case 3: {
        if (tag == 24) {
         parse_bonus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_id_)));
          set_has_bonus_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grade;
        break;
      }

      // required int32 grade = 4;
      case 4: {
        if (tag == 32) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sell_price;
        break;
      }

      // required int32 sell_price = 5;
      case 5: {
        if (tag == 40) {
         parse_sell_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sell_price_)));
          set_has_sell_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_equip_slot;
        break;
      }

      // required int32 equip_slot = 6;
      case 6: {
        if (tag == 48) {
         parse_equip_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_slot_)));
          set_has_equip_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_refine_limit_count1;
        break;
      }

      // required int32 refine_limit_count1 = 7;
      case 7: {
        if (tag == 56) {
         parse_refine_limit_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_limit_count1_)));
          set_has_refine_limit_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_refine_limit_count2;
        break;
      }

      // required int32 refine_limit_count2 = 8;
      case 8: {
        if (tag == 64) {
         parse_refine_limit_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_limit_count2_)));
          set_has_refine_limit_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_refine_limit_count3;
        break;
      }

      // required int32 refine_limit_count3 = 9;
      case 9: {
        if (tag == 72) {
         parse_refine_limit_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_limit_count3_)));
          set_has_refine_limit_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemInfo)
  return false;
#undef DO_
}

void mdTotemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemInfo)
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // required int32 bonus_id = 3;
  if (has_bonus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bonus_id(), output);
  }

  // required int32 grade = 4;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grade(), output);
  }

  // required int32 sell_price = 5;
  if (has_sell_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sell_price(), output);
  }

  // required int32 equip_slot = 6;
  if (has_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->equip_slot(), output);
  }

  // required int32 refine_limit_count1 = 7;
  if (has_refine_limit_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->refine_limit_count1(), output);
  }

  // required int32 refine_limit_count2 = 8;
  if (has_refine_limit_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->refine_limit_count2(), output);
  }

  // required int32 refine_limit_count3 = 9;
  if (has_refine_limit_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->refine_limit_count3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemInfo)
}

::google::protobuf::uint8* mdTotemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemInfo)
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_id(), target);
  }

  // required int32 bonus_id = 3;
  if (has_bonus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bonus_id(), target);
  }

  // required int32 grade = 4;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grade(), target);
  }

  // required int32 sell_price = 5;
  if (has_sell_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sell_price(), target);
  }

  // required int32 equip_slot = 6;
  if (has_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->equip_slot(), target);
  }

  // required int32 refine_limit_count1 = 7;
  if (has_refine_limit_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->refine_limit_count1(), target);
  }

  // required int32 refine_limit_count2 = 8;
  if (has_refine_limit_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->refine_limit_count2(), target);
  }

  // required int32 refine_limit_count3 = 9;
  if (has_refine_limit_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->refine_limit_count3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemInfo)
  return target;
}

int mdTotemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 bonus_id = 3;
    if (has_bonus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_id());
    }

    // required int32 grade = 4;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 sell_price = 5;
    if (has_sell_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sell_price());
    }

    // required int32 equip_slot = 6;
    if (has_equip_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_slot());
    }

    // required int32 refine_limit_count1 = 7;
    if (has_refine_limit_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_limit_count1());
    }

    // required int32 refine_limit_count2 = 8;
    if (has_refine_limit_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_limit_count2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 refine_limit_count3 = 9;
    if (has_refine_limit_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_limit_count3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemInfo::MergeFrom(const mdTotemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_bonus_id()) {
      set_bonus_id(from.bonus_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_sell_price()) {
      set_sell_price(from.sell_price());
    }
    if (from.has_equip_slot()) {
      set_equip_slot(from.equip_slot());
    }
    if (from.has_refine_limit_count1()) {
      set_refine_limit_count1(from.refine_limit_count1());
    }
    if (from.has_refine_limit_count2()) {
      set_refine_limit_count2(from.refine_limit_count2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refine_limit_count3()) {
      set_refine_limit_count3(from.refine_limit_count3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemInfo::CopyFrom(const mdTotemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdTotemInfo::Swap(mdTotemInfo* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(bonus_id_, other->bonus_id_);
    std::swap(grade_, other->grade_);
    std::swap(sell_price_, other->sell_price_);
    std::swap(equip_slot_, other->equip_slot_);
    std::swap(refine_limit_count1_, other->refine_limit_count1_);
    std::swap(refine_limit_count2_, other->refine_limit_count2_);
    std::swap(refine_limit_count3_, other->refine_limit_count3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemInfo_descriptor_;
  metadata.reflection = mdTotemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSelectTotemOption::kOptionIdFieldNumber;
const int mdSelectTotemOption::kGradeFieldNumber;
const int mdSelectTotemOption::kMinMainValueFieldNumber;
const int mdSelectTotemOption::kMaxMainValueFieldNumber;
const int mdSelectTotemOption::kMinSubValueFieldNumber;
const int mdSelectTotemOption::kMaxSubValueFieldNumber;
const int mdSelectTotemOption::kDecimalPointFieldNumber;
#endif  // !_MSC_VER

mdSelectTotemOption::mdSelectTotemOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSelectTotemOption)
}

void mdSelectTotemOption::InitAsDefaultInstance() {
}

mdSelectTotemOption::mdSelectTotemOption(const mdSelectTotemOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSelectTotemOption)
}

void mdSelectTotemOption::SharedCtor() {
  _cached_size_ = 0;
  option_id_ = 0;
  grade_ = 0;
  min_main_value_ = 0;
  max_main_value_ = 0;
  min_sub_value_ = 0;
  max_sub_value_ = 0;
  decimal_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSelectTotemOption::~mdSelectTotemOption() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSelectTotemOption)
  SharedDtor();
}

void mdSelectTotemOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSelectTotemOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSelectTotemOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSelectTotemOption_descriptor_;
}

const mdSelectTotemOption& mdSelectTotemOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSelectTotemOption* mdSelectTotemOption::default_instance_ = NULL;

mdSelectTotemOption* mdSelectTotemOption::New() const {
  return new mdSelectTotemOption;
}

void mdSelectTotemOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSelectTotemOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(option_id_, decimal_point_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSelectTotemOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSelectTotemOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_min_main_value;
        break;
      }

      // required float min_main_value = 3;
      case 3: {
        if (tag == 29) {
         parse_min_main_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_main_value_)));
          set_has_min_main_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_max_main_value;
        break;
      }

      // required float max_main_value = 4;
      case 4: {
        if (tag == 37) {
         parse_max_main_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_main_value_)));
          set_has_max_main_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_min_sub_value;
        break;
      }

      // required float min_sub_value = 5;
      case 5: {
        if (tag == 45) {
         parse_min_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_sub_value_)));
          set_has_min_sub_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_max_sub_value;
        break;
      }

      // required float max_sub_value = 6;
      case 6: {
        if (tag == 53) {
         parse_max_sub_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_sub_value_)));
          set_has_max_sub_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_decimal_point;
        break;
      }

      // required int32 decimal_point = 7;
      case 7: {
        if (tag == 56) {
         parse_decimal_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decimal_point_)));
          set_has_decimal_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSelectTotemOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSelectTotemOption)
  return false;
#undef DO_
}

void mdSelectTotemOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSelectTotemOption)
  // required int32 option_id = 1;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option_id(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required float min_main_value = 3;
  if (has_min_main_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_main_value(), output);
  }

  // required float max_main_value = 4;
  if (has_max_main_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_main_value(), output);
  }

  // required float min_sub_value = 5;
  if (has_min_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->min_sub_value(), output);
  }

  // required float max_sub_value = 6;
  if (has_max_sub_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->max_sub_value(), output);
  }

  // required int32 decimal_point = 7;
  if (has_decimal_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->decimal_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSelectTotemOption)
}

::google::protobuf::uint8* mdSelectTotemOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSelectTotemOption)
  // required int32 option_id = 1;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option_id(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required float min_main_value = 3;
  if (has_min_main_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_main_value(), target);
  }

  // required float max_main_value = 4;
  if (has_max_main_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_main_value(), target);
  }

  // required float min_sub_value = 5;
  if (has_min_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->min_sub_value(), target);
  }

  // required float max_sub_value = 6;
  if (has_max_sub_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->max_sub_value(), target);
  }

  // required int32 decimal_point = 7;
  if (has_decimal_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->decimal_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSelectTotemOption)
  return target;
}

int mdSelectTotemOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 option_id = 1;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required float min_main_value = 3;
    if (has_min_main_value()) {
      total_size += 1 + 4;
    }

    // required float max_main_value = 4;
    if (has_max_main_value()) {
      total_size += 1 + 4;
    }

    // required float min_sub_value = 5;
    if (has_min_sub_value()) {
      total_size += 1 + 4;
    }

    // required float max_sub_value = 6;
    if (has_max_sub_value()) {
      total_size += 1 + 4;
    }

    // required int32 decimal_point = 7;
    if (has_decimal_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decimal_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSelectTotemOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSelectTotemOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSelectTotemOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSelectTotemOption::MergeFrom(const mdSelectTotemOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_min_main_value()) {
      set_min_main_value(from.min_main_value());
    }
    if (from.has_max_main_value()) {
      set_max_main_value(from.max_main_value());
    }
    if (from.has_min_sub_value()) {
      set_min_sub_value(from.min_sub_value());
    }
    if (from.has_max_sub_value()) {
      set_max_sub_value(from.max_sub_value());
    }
    if (from.has_decimal_point()) {
      set_decimal_point(from.decimal_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSelectTotemOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSelectTotemOption::CopyFrom(const mdSelectTotemOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSelectTotemOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdSelectTotemOption::Swap(mdSelectTotemOption* other) {
  if (other != this) {
    std::swap(option_id_, other->option_id_);
    std::swap(grade_, other->grade_);
    std::swap(min_main_value_, other->min_main_value_);
    std::swap(max_main_value_, other->max_main_value_);
    std::swap(min_sub_value_, other->min_sub_value_);
    std::swap(max_sub_value_, other->max_sub_value_);
    std::swap(decimal_point_, other->decimal_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSelectTotemOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSelectTotemOption_descriptor_;
  metadata.reflection = mdSelectTotemOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemRefineInfo::kGradeFieldNumber;
const int mdTotemRefineInfo::kRefineChanceFieldNumber;
const int mdTotemRefineInfo::kGoldCostFieldNumber;
const int mdTotemRefineInfo::kDimensionalPieceCostFieldNumber;
#endif  // !_MSC_VER

mdTotemRefineInfo::mdTotemRefineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemRefineInfo)
}

void mdTotemRefineInfo::InitAsDefaultInstance() {
}

mdTotemRefineInfo::mdTotemRefineInfo(const mdTotemRefineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemRefineInfo)
}

void mdTotemRefineInfo::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  refine_chance_ = 0;
  gold_cost_ = 0;
  dimensional_piece_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemRefineInfo::~mdTotemRefineInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemRefineInfo)
  SharedDtor();
}

void mdTotemRefineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemRefineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemRefineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemRefineInfo_descriptor_;
}

const mdTotemRefineInfo& mdTotemRefineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemRefineInfo* mdTotemRefineInfo::default_instance_ = NULL;

mdTotemRefineInfo* mdTotemRefineInfo::New() const {
  return new mdTotemRefineInfo;
}

void mdTotemRefineInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemRefineInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(grade_, dimensional_piece_cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemRefineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemRefineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_refine_chance;
        break;
      }

      // required int32 refine_chance = 2;
      case 2: {
        if (tag == 16) {
         parse_refine_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_chance_)));
          set_has_refine_chance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold_cost;
        break;
      }

      // required int32 gold_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dimensional_piece_cost;
        break;
      }

      // required int32 dimensional_piece_cost = 4;
      case 4: {
        if (tag == 32) {
         parse_dimensional_piece_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dimensional_piece_cost_)));
          set_has_dimensional_piece_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemRefineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemRefineInfo)
  return false;
#undef DO_
}

void mdTotemRefineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemRefineInfo)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 refine_chance = 2;
  if (has_refine_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->refine_chance(), output);
  }

  // required int32 gold_cost = 3;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold_cost(), output);
  }

  // required int32 dimensional_piece_cost = 4;
  if (has_dimensional_piece_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dimensional_piece_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemRefineInfo)
}

::google::protobuf::uint8* mdTotemRefineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemRefineInfo)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 refine_chance = 2;
  if (has_refine_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->refine_chance(), target);
  }

  // required int32 gold_cost = 3;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold_cost(), target);
  }

  // required int32 dimensional_piece_cost = 4;
  if (has_dimensional_piece_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dimensional_piece_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemRefineInfo)
  return target;
}

int mdTotemRefineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 refine_chance = 2;
    if (has_refine_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_chance());
    }

    // required int32 gold_cost = 3;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }

    // required int32 dimensional_piece_cost = 4;
    if (has_dimensional_piece_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dimensional_piece_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemRefineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemRefineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemRefineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemRefineInfo::MergeFrom(const mdTotemRefineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_refine_chance()) {
      set_refine_chance(from.refine_chance());
    }
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_dimensional_piece_cost()) {
      set_dimensional_piece_cost(from.dimensional_piece_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemRefineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemRefineInfo::CopyFrom(const mdTotemRefineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemRefineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdTotemRefineInfo::Swap(mdTotemRefineInfo* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(refine_chance_, other->refine_chance_);
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(dimensional_piece_cost_, other->dimensional_piece_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemRefineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemRefineInfo_descriptor_;
  metadata.reflection = mdTotemRefineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemRefineRateInfo::kGradeFieldNumber;
const int mdTotemRefineRateInfo::kBaseRateFieldNumber;
const int mdTotemRefineRateInfo::kGoldDecreaseRateFieldNumber;
const int mdTotemRefineRateInfo::kGoldIncreaseRateFieldNumber;
const int mdTotemRefineRateInfo::kPieceDecreaseRateFieldNumber;
const int mdTotemRefineRateInfo::kPieceIncreaseRateFieldNumber;
const int mdTotemRefineRateInfo::kMinRateFieldNumber;
const int mdTotemRefineRateInfo::kMaxRateFieldNumber;
#endif  // !_MSC_VER

mdTotemRefineRateInfo::mdTotemRefineRateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemRefineRateInfo)
}

void mdTotemRefineRateInfo::InitAsDefaultInstance() {
}

mdTotemRefineRateInfo::mdTotemRefineRateInfo(const mdTotemRefineRateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemRefineRateInfo)
}

void mdTotemRefineRateInfo::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  base_rate_ = 0;
  gold_decrease_rate_ = 0;
  gold_increase_rate_ = 0;
  piece_decrease_rate_ = 0;
  piece_increase_rate_ = 0;
  min_rate_ = 0;
  max_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemRefineRateInfo::~mdTotemRefineRateInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemRefineRateInfo)
  SharedDtor();
}

void mdTotemRefineRateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemRefineRateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemRefineRateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemRefineRateInfo_descriptor_;
}

const mdTotemRefineRateInfo& mdTotemRefineRateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemRefineRateInfo* mdTotemRefineRateInfo::default_instance_ = NULL;

mdTotemRefineRateInfo* mdTotemRefineRateInfo::New() const {
  return new mdTotemRefineRateInfo;
}

void mdTotemRefineRateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemRefineRateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(grade_, max_rate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemRefineRateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemRefineRateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_rate;
        break;
      }

      // required int32 base_rate = 2;
      case 2: {
        if (tag == 16) {
         parse_base_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_rate_)));
          set_has_base_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold_decrease_rate;
        break;
      }

      // required int32 gold_decrease_rate = 3;
      case 3: {
        if (tag == 24) {
         parse_gold_decrease_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_decrease_rate_)));
          set_has_gold_decrease_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gold_increase_rate;
        break;
      }

      // required int32 gold_increase_rate = 4;
      case 4: {
        if (tag == 32) {
         parse_gold_increase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_increase_rate_)));
          set_has_gold_increase_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_piece_decrease_rate;
        break;
      }

      // required int32 piece_decrease_rate = 5;
      case 5: {
        if (tag == 40) {
         parse_piece_decrease_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_decrease_rate_)));
          set_has_piece_decrease_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_piece_increase_rate;
        break;
      }

      // required int32 piece_increase_rate = 6;
      case 6: {
        if (tag == 48) {
         parse_piece_increase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_increase_rate_)));
          set_has_piece_increase_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_min_rate;
        break;
      }

      // required int32 min_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_min_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_rate_)));
          set_has_min_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_rate;
        break;
      }

      // required int32 max_rate = 8;
      case 8: {
        if (tag == 64) {
         parse_max_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_rate_)));
          set_has_max_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemRefineRateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemRefineRateInfo)
  return false;
#undef DO_
}

void mdTotemRefineRateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemRefineRateInfo)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 base_rate = 2;
  if (has_base_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->base_rate(), output);
  }

  // required int32 gold_decrease_rate = 3;
  if (has_gold_decrease_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold_decrease_rate(), output);
  }

  // required int32 gold_increase_rate = 4;
  if (has_gold_increase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gold_increase_rate(), output);
  }

  // required int32 piece_decrease_rate = 5;
  if (has_piece_decrease_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->piece_decrease_rate(), output);
  }

  // required int32 piece_increase_rate = 6;
  if (has_piece_increase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->piece_increase_rate(), output);
  }

  // required int32 min_rate = 7;
  if (has_min_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->min_rate(), output);
  }

  // required int32 max_rate = 8;
  if (has_max_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemRefineRateInfo)
}

::google::protobuf::uint8* mdTotemRefineRateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemRefineRateInfo)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 base_rate = 2;
  if (has_base_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->base_rate(), target);
  }

  // required int32 gold_decrease_rate = 3;
  if (has_gold_decrease_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold_decrease_rate(), target);
  }

  // required int32 gold_increase_rate = 4;
  if (has_gold_increase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gold_increase_rate(), target);
  }

  // required int32 piece_decrease_rate = 5;
  if (has_piece_decrease_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->piece_decrease_rate(), target);
  }

  // required int32 piece_increase_rate = 6;
  if (has_piece_increase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->piece_increase_rate(), target);
  }

  // required int32 min_rate = 7;
  if (has_min_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->min_rate(), target);
  }

  // required int32 max_rate = 8;
  if (has_max_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemRefineRateInfo)
  return target;
}

int mdTotemRefineRateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 base_rate = 2;
    if (has_base_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_rate());
    }

    // required int32 gold_decrease_rate = 3;
    if (has_gold_decrease_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_decrease_rate());
    }

    // required int32 gold_increase_rate = 4;
    if (has_gold_increase_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_increase_rate());
    }

    // required int32 piece_decrease_rate = 5;
    if (has_piece_decrease_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece_decrease_rate());
    }

    // required int32 piece_increase_rate = 6;
    if (has_piece_increase_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece_increase_rate());
    }

    // required int32 min_rate = 7;
    if (has_min_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_rate());
    }

    // required int32 max_rate = 8;
    if (has_max_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemRefineRateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemRefineRateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemRefineRateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemRefineRateInfo::MergeFrom(const mdTotemRefineRateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_base_rate()) {
      set_base_rate(from.base_rate());
    }
    if (from.has_gold_decrease_rate()) {
      set_gold_decrease_rate(from.gold_decrease_rate());
    }
    if (from.has_gold_increase_rate()) {
      set_gold_increase_rate(from.gold_increase_rate());
    }
    if (from.has_piece_decrease_rate()) {
      set_piece_decrease_rate(from.piece_decrease_rate());
    }
    if (from.has_piece_increase_rate()) {
      set_piece_increase_rate(from.piece_increase_rate());
    }
    if (from.has_min_rate()) {
      set_min_rate(from.min_rate());
    }
    if (from.has_max_rate()) {
      set_max_rate(from.max_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemRefineRateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemRefineRateInfo::CopyFrom(const mdTotemRefineRateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemRefineRateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void mdTotemRefineRateInfo::Swap(mdTotemRefineRateInfo* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(base_rate_, other->base_rate_);
    std::swap(gold_decrease_rate_, other->gold_decrease_rate_);
    std::swap(gold_increase_rate_, other->gold_increase_rate_);
    std::swap(piece_decrease_rate_, other->piece_decrease_rate_);
    std::swap(piece_increase_rate_, other->piece_increase_rate_);
    std::swap(min_rate_, other->min_rate_);
    std::swap(max_rate_, other->max_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemRefineRateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemRefineRateInfo_descriptor_;
  metadata.reflection = mdTotemRefineRateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemDismantleInfo::kRefineLevelFieldNumber;
const int mdTotemDismantleInfo::kGradeFieldNumber;
const int mdTotemDismantleInfo::kAmountFieldNumber;
#endif  // !_MSC_VER

mdTotemDismantleInfo::mdTotemDismantleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemDismantleInfo)
}

void mdTotemDismantleInfo::InitAsDefaultInstance() {
}

mdTotemDismantleInfo::mdTotemDismantleInfo(const mdTotemDismantleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemDismantleInfo)
}

void mdTotemDismantleInfo::SharedCtor() {
  _cached_size_ = 0;
  refine_level_ = 0;
  grade_ = 0;
  amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemDismantleInfo::~mdTotemDismantleInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemDismantleInfo)
  SharedDtor();
}

void mdTotemDismantleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemDismantleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemDismantleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemDismantleInfo_descriptor_;
}

const mdTotemDismantleInfo& mdTotemDismantleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemDismantleInfo* mdTotemDismantleInfo::default_instance_ = NULL;

mdTotemDismantleInfo* mdTotemDismantleInfo::New() const {
  return new mdTotemDismantleInfo;
}

void mdTotemDismantleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemDismantleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(refine_level_, amount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemDismantleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemDismantleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 refine_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_amount;
        break;
      }

      // required int32 amount = 3;
      case 3: {
        if (tag == 24) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemDismantleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemDismantleInfo)
  return false;
#undef DO_
}

void mdTotemDismantleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemDismantleInfo)
  // required int32 refine_level = 1;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refine_level(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required int32 amount = 3;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemDismantleInfo)
}

::google::protobuf::uint8* mdTotemDismantleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemDismantleInfo)
  // required int32 refine_level = 1;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refine_level(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required int32 amount = 3;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemDismantleInfo)
  return target;
}

int mdTotemDismantleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 refine_level = 1;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_level());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 amount = 3;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemDismantleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemDismantleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemDismantleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemDismantleInfo::MergeFrom(const mdTotemDismantleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemDismantleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemDismantleInfo::CopyFrom(const mdTotemDismantleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemDismantleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdTotemDismantleInfo::Swap(mdTotemDismantleInfo* other) {
  if (other != this) {
    std::swap(refine_level_, other->refine_level_);
    std::swap(grade_, other->grade_);
    std::swap(amount_, other->amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemDismantleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemDismantleInfo_descriptor_;
  metadata.reflection = mdTotemDismantleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemBonusOptionInfo::kBonusIdFieldNumber;
const int mdTotemBonusOptionInfo::kCondition1FieldNumber;
const int mdTotemBonusOptionInfo::kBonusOptionId1FieldNumber;
const int mdTotemBonusOptionInfo::kBonusValue1FieldNumber;
const int mdTotemBonusOptionInfo::kCondition2FieldNumber;
const int mdTotemBonusOptionInfo::kBonusOptionId2FieldNumber;
const int mdTotemBonusOptionInfo::kBonusValue2FieldNumber;
const int mdTotemBonusOptionInfo::kCondition3FieldNumber;
const int mdTotemBonusOptionInfo::kBonusOptionId3FieldNumber;
const int mdTotemBonusOptionInfo::kBonusValue3FieldNumber;
#endif  // !_MSC_VER

mdTotemBonusOptionInfo::mdTotemBonusOptionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemBonusOptionInfo)
}

void mdTotemBonusOptionInfo::InitAsDefaultInstance() {
}

mdTotemBonusOptionInfo::mdTotemBonusOptionInfo(const mdTotemBonusOptionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemBonusOptionInfo)
}

void mdTotemBonusOptionInfo::SharedCtor() {
  _cached_size_ = 0;
  bonus_id_ = 0;
  condition1_ = 0;
  bonus_option_id1_ = 0;
  bonus_value1_ = 0;
  condition2_ = 0;
  bonus_option_id2_ = 0;
  bonus_value2_ = 0;
  condition3_ = 0;
  bonus_option_id3_ = 0;
  bonus_value3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemBonusOptionInfo::~mdTotemBonusOptionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  SharedDtor();
}

void mdTotemBonusOptionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemBonusOptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemBonusOptionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemBonusOptionInfo_descriptor_;
}

const mdTotemBonusOptionInfo& mdTotemBonusOptionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemBonusOptionInfo* mdTotemBonusOptionInfo::default_instance_ = NULL;

mdTotemBonusOptionInfo* mdTotemBonusOptionInfo::New() const {
  return new mdTotemBonusOptionInfo;
}

void mdTotemBonusOptionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemBonusOptionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bonus_id_, condition3_);
  }
  ZR_(bonus_option_id3_, bonus_value3_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemBonusOptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bonus_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_id_)));
          set_has_bonus_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_condition1;
        break;
      }

      // required int32 condition1 = 2;
      case 2: {
        if (tag == 16) {
         parse_condition1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition1_)));
          set_has_condition1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bonus_option_id1;
        break;
      }

      // required int32 bonus_option_id1 = 3;
      case 3: {
        if (tag == 24) {
         parse_bonus_option_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_option_id1_)));
          set_has_bonus_option_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bonus_value1;
        break;
      }

      // required float bonus_value1 = 4;
      case 4: {
        if (tag == 37) {
         parse_bonus_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_value1_)));
          set_has_bonus_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_condition2;
        break;
      }

      // required int32 condition2 = 5;
      case 5: {
        if (tag == 40) {
         parse_condition2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition2_)));
          set_has_condition2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bonus_option_id2;
        break;
      }

      // required int32 bonus_option_id2 = 6;
      case 6: {
        if (tag == 48) {
         parse_bonus_option_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_option_id2_)));
          set_has_bonus_option_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_bonus_value2;
        break;
      }

      // required float bonus_value2 = 7;
      case 7: {
        if (tag == 61) {
         parse_bonus_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_value2_)));
          set_has_bonus_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_condition3;
        break;
      }

      // required int32 condition3 = 8;
      case 8: {
        if (tag == 64) {
         parse_condition3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition3_)));
          set_has_condition3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bonus_option_id3;
        break;
      }

      // required int32 bonus_option_id3 = 9;
      case 9: {
        if (tag == 72) {
         parse_bonus_option_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_option_id3_)));
          set_has_bonus_option_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_bonus_value3;
        break;
      }

      // required float bonus_value3 = 10;
      case 10: {
        if (tag == 85) {
         parse_bonus_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_value3_)));
          set_has_bonus_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  return false;
#undef DO_
}

void mdTotemBonusOptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  // required int32 bonus_id = 1;
  if (has_bonus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bonus_id(), output);
  }

  // required int32 condition1 = 2;
  if (has_condition1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->condition1(), output);
  }

  // required int32 bonus_option_id1 = 3;
  if (has_bonus_option_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bonus_option_id1(), output);
  }

  // required float bonus_value1 = 4;
  if (has_bonus_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bonus_value1(), output);
  }

  // required int32 condition2 = 5;
  if (has_condition2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition2(), output);
  }

  // required int32 bonus_option_id2 = 6;
  if (has_bonus_option_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bonus_option_id2(), output);
  }

  // required float bonus_value2 = 7;
  if (has_bonus_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bonus_value2(), output);
  }

  // required int32 condition3 = 8;
  if (has_condition3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->condition3(), output);
  }

  // required int32 bonus_option_id3 = 9;
  if (has_bonus_option_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bonus_option_id3(), output);
  }

  // required float bonus_value3 = 10;
  if (has_bonus_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bonus_value3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemBonusOptionInfo)
}

::google::protobuf::uint8* mdTotemBonusOptionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  // required int32 bonus_id = 1;
  if (has_bonus_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bonus_id(), target);
  }

  // required int32 condition1 = 2;
  if (has_condition1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->condition1(), target);
  }

  // required int32 bonus_option_id1 = 3;
  if (has_bonus_option_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bonus_option_id1(), target);
  }

  // required float bonus_value1 = 4;
  if (has_bonus_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bonus_value1(), target);
  }

  // required int32 condition2 = 5;
  if (has_condition2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition2(), target);
  }

  // required int32 bonus_option_id2 = 6;
  if (has_bonus_option_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bonus_option_id2(), target);
  }

  // required float bonus_value2 = 7;
  if (has_bonus_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bonus_value2(), target);
  }

  // required int32 condition3 = 8;
  if (has_condition3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->condition3(), target);
  }

  // required int32 bonus_option_id3 = 9;
  if (has_bonus_option_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bonus_option_id3(), target);
  }

  // required float bonus_value3 = 10;
  if (has_bonus_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->bonus_value3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemBonusOptionInfo)
  return target;
}

int mdTotemBonusOptionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bonus_id = 1;
    if (has_bonus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_id());
    }

    // required int32 condition1 = 2;
    if (has_condition1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition1());
    }

    // required int32 bonus_option_id1 = 3;
    if (has_bonus_option_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_option_id1());
    }

    // required float bonus_value1 = 4;
    if (has_bonus_value1()) {
      total_size += 1 + 4;
    }

    // required int32 condition2 = 5;
    if (has_condition2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition2());
    }

    // required int32 bonus_option_id2 = 6;
    if (has_bonus_option_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_option_id2());
    }

    // required float bonus_value2 = 7;
    if (has_bonus_value2()) {
      total_size += 1 + 4;
    }

    // required int32 condition3 = 8;
    if (has_condition3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 bonus_option_id3 = 9;
    if (has_bonus_option_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_option_id3());
    }

    // required float bonus_value3 = 10;
    if (has_bonus_value3()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemBonusOptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemBonusOptionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemBonusOptionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemBonusOptionInfo::MergeFrom(const mdTotemBonusOptionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bonus_id()) {
      set_bonus_id(from.bonus_id());
    }
    if (from.has_condition1()) {
      set_condition1(from.condition1());
    }
    if (from.has_bonus_option_id1()) {
      set_bonus_option_id1(from.bonus_option_id1());
    }
    if (from.has_bonus_value1()) {
      set_bonus_value1(from.bonus_value1());
    }
    if (from.has_condition2()) {
      set_condition2(from.condition2());
    }
    if (from.has_bonus_option_id2()) {
      set_bonus_option_id2(from.bonus_option_id2());
    }
    if (from.has_bonus_value2()) {
      set_bonus_value2(from.bonus_value2());
    }
    if (from.has_condition3()) {
      set_condition3(from.condition3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bonus_option_id3()) {
      set_bonus_option_id3(from.bonus_option_id3());
    }
    if (from.has_bonus_value3()) {
      set_bonus_value3(from.bonus_value3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemBonusOptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemBonusOptionInfo::CopyFrom(const mdTotemBonusOptionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemBonusOptionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void mdTotemBonusOptionInfo::Swap(mdTotemBonusOptionInfo* other) {
  if (other != this) {
    std::swap(bonus_id_, other->bonus_id_);
    std::swap(condition1_, other->condition1_);
    std::swap(bonus_option_id1_, other->bonus_option_id1_);
    std::swap(bonus_value1_, other->bonus_value1_);
    std::swap(condition2_, other->condition2_);
    std::swap(bonus_option_id2_, other->bonus_option_id2_);
    std::swap(bonus_value2_, other->bonus_value2_);
    std::swap(condition3_, other->condition3_);
    std::swap(bonus_option_id3_, other->bonus_option_id3_);
    std::swap(bonus_value3_, other->bonus_value3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemBonusOptionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemBonusOptionInfo_descriptor_;
  metadata.reflection = mdTotemBonusOptionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDimensionInfo::kDifficultyLevelFieldNumber;
const int mdDimensionInfo::kDifficultyScaleFieldNumber;
const int mdDimensionInfo::kFixedDropItemId1FieldNumber;
const int mdDimensionInfo::kFixedDropCount1FieldNumber;
const int mdDimensionInfo::kDropTotemCountMinFieldNumber;
const int mdDimensionInfo::kDropTotemCountMaxFieldNumber;
const int mdDimensionInfo::kRecommendPowerFieldNumber;
const int mdDimensionInfo::kRecommendAttackFieldNumber;
const int mdDimensionInfo::kRecommendDefenseFieldNumber;
#endif  // !_MSC_VER

mdDimensionInfo::mdDimensionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDimensionInfo)
}

void mdDimensionInfo::InitAsDefaultInstance() {
}

mdDimensionInfo::mdDimensionInfo(const mdDimensionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDimensionInfo)
}

void mdDimensionInfo::SharedCtor() {
  _cached_size_ = 0;
  difficulty_level_ = 0;
  difficulty_scale_ = 0;
  fixed_drop_item_id1_ = 0;
  fixed_drop_count1_ = 0;
  drop_totem_count_min_ = 0;
  drop_totem_count_max_ = 0;
  recommend_power_ = 0;
  recommend_attack_ = 0;
  recommend_defense_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDimensionInfo::~mdDimensionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDimensionInfo)
  SharedDtor();
}

void mdDimensionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDimensionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDimensionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDimensionInfo_descriptor_;
}

const mdDimensionInfo& mdDimensionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDimensionInfo* mdDimensionInfo::default_instance_ = NULL;

mdDimensionInfo* mdDimensionInfo::New() const {
  return new mdDimensionInfo;
}

void mdDimensionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDimensionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(difficulty_level_, recommend_attack_);
  }
  recommend_defense_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDimensionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDimensionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 difficulty_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_level_)));
          set_has_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_difficulty_scale;
        break;
      }

      // required int32 difficulty_scale = 2;
      case 2: {
        if (tag == 16) {
         parse_difficulty_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_scale_)));
          set_has_difficulty_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fixed_drop_item_id1;
        break;
      }

      // required int32 fixed_drop_item_id1 = 3;
      case 3: {
        if (tag == 24) {
         parse_fixed_drop_item_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_drop_item_id1_)));
          set_has_fixed_drop_item_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fixed_drop_count1;
        break;
      }

      // required int32 fixed_drop_count1 = 4;
      case 4: {
        if (tag == 32) {
         parse_fixed_drop_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_drop_count1_)));
          set_has_fixed_drop_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_drop_totem_count_min;
        break;
      }

      // required int32 drop_totem_count_min = 5;
      case 5: {
        if (tag == 40) {
         parse_drop_totem_count_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_totem_count_min_)));
          set_has_drop_totem_count_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_drop_totem_count_max;
        break;
      }

      // required int32 drop_totem_count_max = 6;
      case 6: {
        if (tag == 48) {
         parse_drop_totem_count_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_totem_count_max_)));
          set_has_drop_totem_count_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recommend_power;
        break;
      }

      // required int32 recommend_power = 7;
      case 7: {
        if (tag == 56) {
         parse_recommend_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_power_)));
          set_has_recommend_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_recommend_attack;
        break;
      }

      // required int32 recommend_attack = 8;
      case 8: {
        if (tag == 64) {
         parse_recommend_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_attack_)));
          set_has_recommend_attack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_recommend_defense;
        break;
      }

      // required int32 recommend_defense = 9;
      case 9: {
        if (tag == 72) {
         parse_recommend_defense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommend_defense_)));
          set_has_recommend_defense();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDimensionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDimensionInfo)
  return false;
#undef DO_
}

void mdDimensionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDimensionInfo)
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->difficulty_level(), output);
  }

  // required int32 difficulty_scale = 2;
  if (has_difficulty_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->difficulty_scale(), output);
  }

  // required int32 fixed_drop_item_id1 = 3;
  if (has_fixed_drop_item_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fixed_drop_item_id1(), output);
  }

  // required int32 fixed_drop_count1 = 4;
  if (has_fixed_drop_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fixed_drop_count1(), output);
  }

  // required int32 drop_totem_count_min = 5;
  if (has_drop_totem_count_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->drop_totem_count_min(), output);
  }

  // required int32 drop_totem_count_max = 6;
  if (has_drop_totem_count_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->drop_totem_count_max(), output);
  }

  // required int32 recommend_power = 7;
  if (has_recommend_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recommend_power(), output);
  }

  // required int32 recommend_attack = 8;
  if (has_recommend_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->recommend_attack(), output);
  }

  // required int32 recommend_defense = 9;
  if (has_recommend_defense()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->recommend_defense(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDimensionInfo)
}

::google::protobuf::uint8* mdDimensionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDimensionInfo)
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->difficulty_level(), target);
  }

  // required int32 difficulty_scale = 2;
  if (has_difficulty_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->difficulty_scale(), target);
  }

  // required int32 fixed_drop_item_id1 = 3;
  if (has_fixed_drop_item_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fixed_drop_item_id1(), target);
  }

  // required int32 fixed_drop_count1 = 4;
  if (has_fixed_drop_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fixed_drop_count1(), target);
  }

  // required int32 drop_totem_count_min = 5;
  if (has_drop_totem_count_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->drop_totem_count_min(), target);
  }

  // required int32 drop_totem_count_max = 6;
  if (has_drop_totem_count_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->drop_totem_count_max(), target);
  }

  // required int32 recommend_power = 7;
  if (has_recommend_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recommend_power(), target);
  }

  // required int32 recommend_attack = 8;
  if (has_recommend_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->recommend_attack(), target);
  }

  // required int32 recommend_defense = 9;
  if (has_recommend_defense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->recommend_defense(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDimensionInfo)
  return target;
}

int mdDimensionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 difficulty_level = 1;
    if (has_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_level());
    }

    // required int32 difficulty_scale = 2;
    if (has_difficulty_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_scale());
    }

    // required int32 fixed_drop_item_id1 = 3;
    if (has_fixed_drop_item_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_drop_item_id1());
    }

    // required int32 fixed_drop_count1 = 4;
    if (has_fixed_drop_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_drop_count1());
    }

    // required int32 drop_totem_count_min = 5;
    if (has_drop_totem_count_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_totem_count_min());
    }

    // required int32 drop_totem_count_max = 6;
    if (has_drop_totem_count_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_totem_count_max());
    }

    // required int32 recommend_power = 7;
    if (has_recommend_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_power());
    }

    // required int32 recommend_attack = 8;
    if (has_recommend_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_attack());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 recommend_defense = 9;
    if (has_recommend_defense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommend_defense());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDimensionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDimensionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDimensionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDimensionInfo::MergeFrom(const mdDimensionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_difficulty_level()) {
      set_difficulty_level(from.difficulty_level());
    }
    if (from.has_difficulty_scale()) {
      set_difficulty_scale(from.difficulty_scale());
    }
    if (from.has_fixed_drop_item_id1()) {
      set_fixed_drop_item_id1(from.fixed_drop_item_id1());
    }
    if (from.has_fixed_drop_count1()) {
      set_fixed_drop_count1(from.fixed_drop_count1());
    }
    if (from.has_drop_totem_count_min()) {
      set_drop_totem_count_min(from.drop_totem_count_min());
    }
    if (from.has_drop_totem_count_max()) {
      set_drop_totem_count_max(from.drop_totem_count_max());
    }
    if (from.has_recommend_power()) {
      set_recommend_power(from.recommend_power());
    }
    if (from.has_recommend_attack()) {
      set_recommend_attack(from.recommend_attack());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_recommend_defense()) {
      set_recommend_defense(from.recommend_defense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDimensionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDimensionInfo::CopyFrom(const mdDimensionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDimensionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void mdDimensionInfo::Swap(mdDimensionInfo* other) {
  if (other != this) {
    std::swap(difficulty_level_, other->difficulty_level_);
    std::swap(difficulty_scale_, other->difficulty_scale_);
    std::swap(fixed_drop_item_id1_, other->fixed_drop_item_id1_);
    std::swap(fixed_drop_count1_, other->fixed_drop_count1_);
    std::swap(drop_totem_count_min_, other->drop_totem_count_min_);
    std::swap(drop_totem_count_max_, other->drop_totem_count_max_);
    std::swap(recommend_power_, other->recommend_power_);
    std::swap(recommend_attack_, other->recommend_attack_);
    std::swap(recommend_defense_, other->recommend_defense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDimensionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDimensionInfo_descriptor_;
  metadata.reflection = mdDimensionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemDropGradeRate::kDifficultyLevelFieldNumber;
const int mdTotemDropGradeRate::kNormalFieldNumber;
const int mdTotemDropGradeRate::kMagicFieldNumber;
const int mdTotemDropGradeRate::kRareFieldNumber;
const int mdTotemDropGradeRate::kHeroFieldNumber;
const int mdTotemDropGradeRate::kLegendFieldNumber;
const int mdTotemDropGradeRate::kArtifactFieldNumber;
#endif  // !_MSC_VER

mdTotemDropGradeRate::mdTotemDropGradeRate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemDropGradeRate)
}

void mdTotemDropGradeRate::InitAsDefaultInstance() {
}

mdTotemDropGradeRate::mdTotemDropGradeRate(const mdTotemDropGradeRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemDropGradeRate)
}

void mdTotemDropGradeRate::SharedCtor() {
  _cached_size_ = 0;
  difficulty_level_ = 0;
  normal_ = 0;
  magic_ = 0;
  rare_ = 0;
  hero_ = 0;
  legend_ = 0;
  artifact_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemDropGradeRate::~mdTotemDropGradeRate() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemDropGradeRate)
  SharedDtor();
}

void mdTotemDropGradeRate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemDropGradeRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemDropGradeRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemDropGradeRate_descriptor_;
}

const mdTotemDropGradeRate& mdTotemDropGradeRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemDropGradeRate* mdTotemDropGradeRate::default_instance_ = NULL;

mdTotemDropGradeRate* mdTotemDropGradeRate::New() const {
  return new mdTotemDropGradeRate;
}

void mdTotemDropGradeRate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemDropGradeRate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(difficulty_level_, artifact_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemDropGradeRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemDropGradeRate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 difficulty_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_level_)));
          set_has_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_normal;
        break;
      }

      // required int32 normal = 2;
      case 2: {
        if (tag == 16) {
         parse_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_)));
          set_has_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_magic;
        break;
      }

      // required int32 magic = 3;
      case 3: {
        if (tag == 24) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rare;
        break;
      }

      // required int32 rare = 4;
      case 4: {
        if (tag == 32) {
         parse_rare:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rare_)));
          set_has_rare();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hero;
        break;
      }

      // required int32 hero = 5;
      case 5: {
        if (tag == 40) {
         parse_hero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_)));
          set_has_hero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_legend;
        break;
      }

      // required int32 legend = 6;
      case 6: {
        if (tag == 48) {
         parse_legend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &legend_)));
          set_has_legend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_artifact;
        break;
      }

      // required int32 artifact = 7;
      case 7: {
        if (tag == 56) {
         parse_artifact:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &artifact_)));
          set_has_artifact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemDropGradeRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemDropGradeRate)
  return false;
#undef DO_
}

void mdTotemDropGradeRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemDropGradeRate)
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->difficulty_level(), output);
  }

  // required int32 normal = 2;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->normal(), output);
  }

  // required int32 magic = 3;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->magic(), output);
  }

  // required int32 rare = 4;
  if (has_rare()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rare(), output);
  }

  // required int32 hero = 5;
  if (has_hero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hero(), output);
  }

  // required int32 legend = 6;
  if (has_legend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->legend(), output);
  }

  // required int32 artifact = 7;
  if (has_artifact()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->artifact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemDropGradeRate)
}

::google::protobuf::uint8* mdTotemDropGradeRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemDropGradeRate)
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->difficulty_level(), target);
  }

  // required int32 normal = 2;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->normal(), target);
  }

  // required int32 magic = 3;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->magic(), target);
  }

  // required int32 rare = 4;
  if (has_rare()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rare(), target);
  }

  // required int32 hero = 5;
  if (has_hero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hero(), target);
  }

  // required int32 legend = 6;
  if (has_legend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->legend(), target);
  }

  // required int32 artifact = 7;
  if (has_artifact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->artifact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemDropGradeRate)
  return target;
}

int mdTotemDropGradeRate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 difficulty_level = 1;
    if (has_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_level());
    }

    // required int32 normal = 2;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal());
    }

    // required int32 magic = 3;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magic());
    }

    // required int32 rare = 4;
    if (has_rare()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rare());
    }

    // required int32 hero = 5;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero());
    }

    // required int32 legend = 6;
    if (has_legend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->legend());
    }

    // required int32 artifact = 7;
    if (has_artifact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->artifact());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemDropGradeRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemDropGradeRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemDropGradeRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemDropGradeRate::MergeFrom(const mdTotemDropGradeRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_difficulty_level()) {
      set_difficulty_level(from.difficulty_level());
    }
    if (from.has_normal()) {
      set_normal(from.normal());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_rare()) {
      set_rare(from.rare());
    }
    if (from.has_hero()) {
      set_hero(from.hero());
    }
    if (from.has_legend()) {
      set_legend(from.legend());
    }
    if (from.has_artifact()) {
      set_artifact(from.artifact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemDropGradeRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemDropGradeRate::CopyFrom(const mdTotemDropGradeRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemDropGradeRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdTotemDropGradeRate::Swap(mdTotemDropGradeRate* other) {
  if (other != this) {
    std::swap(difficulty_level_, other->difficulty_level_);
    std::swap(normal_, other->normal_);
    std::swap(magic_, other->magic_);
    std::swap(rare_, other->rare_);
    std::swap(hero_, other->hero_);
    std::swap(legend_, other->legend_);
    std::swap(artifact_, other->artifact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemDropGradeRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemDropGradeRate_descriptor_;
  metadata.reflection = mdTotemDropGradeRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemDropGroupRate::kDifficultyLevelFieldNumber;
const int mdTotemDropGroupRate::kGroupIdFieldNumber;
const int mdTotemDropGroupRate::kRateFieldNumber;
#endif  // !_MSC_VER

mdTotemDropGroupRate::mdTotemDropGroupRate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemDropGroupRate)
}

void mdTotemDropGroupRate::InitAsDefaultInstance() {
}

mdTotemDropGroupRate::mdTotemDropGroupRate(const mdTotemDropGroupRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemDropGroupRate)
}

void mdTotemDropGroupRate::SharedCtor() {
  _cached_size_ = 0;
  difficulty_level_ = 0;
  group_id_ = 0;
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemDropGroupRate::~mdTotemDropGroupRate() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemDropGroupRate)
  SharedDtor();
}

void mdTotemDropGroupRate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemDropGroupRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemDropGroupRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemDropGroupRate_descriptor_;
}

const mdTotemDropGroupRate& mdTotemDropGroupRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemDropGroupRate* mdTotemDropGroupRate::default_instance_ = NULL;

mdTotemDropGroupRate* mdTotemDropGroupRate::New() const {
  return new mdTotemDropGroupRate;
}

void mdTotemDropGroupRate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemDropGroupRate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(difficulty_level_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemDropGroupRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemDropGroupRate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 difficulty_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_level_)));
          set_has_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 2;
      case 2: {
        if (tag == 16) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // required int32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemDropGroupRate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemDropGroupRate)
  return false;
#undef DO_
}

void mdTotemDropGroupRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemDropGroupRate)
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->difficulty_level(), output);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // required int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemDropGroupRate)
}

::google::protobuf::uint8* mdTotemDropGroupRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemDropGroupRate)
  // required int32 difficulty_level = 1;
  if (has_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->difficulty_level(), target);
  }

  // required int32 group_id = 2;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group_id(), target);
  }

  // required int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemDropGroupRate)
  return target;
}

int mdTotemDropGroupRate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 difficulty_level = 1;
    if (has_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty_level());
    }

    // required int32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemDropGroupRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemDropGroupRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemDropGroupRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemDropGroupRate::MergeFrom(const mdTotemDropGroupRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_difficulty_level()) {
      set_difficulty_level(from.difficulty_level());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemDropGroupRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemDropGroupRate::CopyFrom(const mdTotemDropGroupRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemDropGroupRate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdTotemDropGroupRate::Swap(mdTotemDropGroupRate* other) {
  if (other != this) {
    std::swap(difficulty_level_, other->difficulty_level_);
    std::swap(group_id_, other->group_id_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemDropGroupRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemDropGroupRate_descriptor_;
  metadata.reflection = mdTotemDropGroupRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdDimensionWeekReward::kIndexFieldNumber;
const int mdDimensionWeekReward::kRankingMinFieldNumber;
const int mdDimensionWeekReward::kRankingMaxFieldNumber;
const int mdDimensionWeekReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

mdDimensionWeekReward::mdDimensionWeekReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdDimensionWeekReward)
}

void mdDimensionWeekReward::InitAsDefaultInstance() {
}

mdDimensionWeekReward::mdDimensionWeekReward(const mdDimensionWeekReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdDimensionWeekReward)
}

void mdDimensionWeekReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ranking_min_ = 0;
  ranking_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdDimensionWeekReward::~mdDimensionWeekReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdDimensionWeekReward)
  SharedDtor();
}

void mdDimensionWeekReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdDimensionWeekReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdDimensionWeekReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdDimensionWeekReward_descriptor_;
}

const mdDimensionWeekReward& mdDimensionWeekReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdDimensionWeekReward* mdDimensionWeekReward::default_instance_ = NULL;

mdDimensionWeekReward* mdDimensionWeekReward::New() const {
  return new mdDimensionWeekReward;
}

void mdDimensionWeekReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdDimensionWeekReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, ranking_min_);
    ranking_max_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdDimensionWeekReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdDimensionWeekReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking_min;
        break;
      }

      // required int32 ranking_min = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_min_)));
          set_has_ranking_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ranking_max;
        break;
      }

      // required int32 ranking_max = 3;
      case 3: {
        if (tag == 24) {
         parse_ranking_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_max_)));
          set_has_ranking_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.RawReward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdDimensionWeekReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdDimensionWeekReward)
  return false;
#undef DO_
}

void mdDimensionWeekReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdDimensionWeekReward)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 ranking_min = 2;
  if (has_ranking_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking_min(), output);
  }

  // required int32 ranking_max = 3;
  if (has_ranking_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking_max(), output);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdDimensionWeekReward)
}

::google::protobuf::uint8* mdDimensionWeekReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdDimensionWeekReward)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 ranking_min = 2;
  if (has_ranking_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking_min(), target);
  }

  // required int32 ranking_max = 3;
  if (has_ranking_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking_max(), target);
  }

  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdDimensionWeekReward)
  return target;
}

int mdDimensionWeekReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 ranking_min = 2;
    if (has_ranking_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_min());
    }

    // required int32 ranking_max = 3;
    if (has_ranking_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_max());
    }

  }
  // repeated .b2.protocol.commondata.RawReward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdDimensionWeekReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdDimensionWeekReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdDimensionWeekReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdDimensionWeekReward::MergeFrom(const mdDimensionWeekReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_ranking_min()) {
      set_ranking_min(from.ranking_min());
    }
    if (from.has_ranking_max()) {
      set_ranking_max(from.ranking_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdDimensionWeekReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdDimensionWeekReward::CopyFrom(const mdDimensionWeekReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdDimensionWeekReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void mdDimensionWeekReward::Swap(mdDimensionWeekReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(ranking_min_, other->ranking_min_);
    std::swap(ranking_max_, other->ranking_max_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdDimensionWeekReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdDimensionWeekReward_descriptor_;
  metadata.reflection = mdDimensionWeekReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdTotemPrefixLotteryInfo::kIdFieldNumber;
const int mdTotemPrefixLotteryInfo::kBasePrefixFieldNumber;
const int mdTotemPrefixLotteryInfo::kGradeFieldNumber;
#endif  // !_MSC_VER

mdTotemPrefixLotteryInfo::mdTotemPrefixLotteryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
}

void mdTotemPrefixLotteryInfo::InitAsDefaultInstance() {
}

mdTotemPrefixLotteryInfo::mdTotemPrefixLotteryInfo(const mdTotemPrefixLotteryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
}

void mdTotemPrefixLotteryInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  base_prefix_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdTotemPrefixLotteryInfo::~mdTotemPrefixLotteryInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  SharedDtor();
}

void mdTotemPrefixLotteryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdTotemPrefixLotteryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdTotemPrefixLotteryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdTotemPrefixLotteryInfo_descriptor_;
}

const mdTotemPrefixLotteryInfo& mdTotemPrefixLotteryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdTotemPrefixLotteryInfo* mdTotemPrefixLotteryInfo::default_instance_ = NULL;

mdTotemPrefixLotteryInfo* mdTotemPrefixLotteryInfo::New() const {
  return new mdTotemPrefixLotteryInfo;
}

void mdTotemPrefixLotteryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdTotemPrefixLotteryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, grade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdTotemPrefixLotteryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_prefix;
        break;
      }

      // required int32 base_prefix = 2;
      case 2: {
        if (tag == 16) {
         parse_base_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_prefix_)));
          set_has_base_prefix();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // required int32 grade = 3;
      case 3: {
        if (tag == 24) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  return false;
#undef DO_
}

void mdTotemPrefixLotteryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 base_prefix = 2;
  if (has_base_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->base_prefix(), output);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
}

::google::protobuf::uint8* mdTotemPrefixLotteryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 base_prefix = 2;
  if (has_base_prefix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->base_prefix(), target);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdTotemPrefixLotteryInfo)
  return target;
}

int mdTotemPrefixLotteryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 base_prefix = 2;
    if (has_base_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_prefix());
    }

    // required int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdTotemPrefixLotteryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdTotemPrefixLotteryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdTotemPrefixLotteryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdTotemPrefixLotteryInfo::MergeFrom(const mdTotemPrefixLotteryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_base_prefix()) {
      set_base_prefix(from.base_prefix());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdTotemPrefixLotteryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdTotemPrefixLotteryInfo::CopyFrom(const mdTotemPrefixLotteryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdTotemPrefixLotteryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void mdTotemPrefixLotteryInfo::Swap(mdTotemPrefixLotteryInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(base_prefix_, other->base_prefix_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdTotemPrefixLotteryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdTotemPrefixLotteryInfo_descriptor_;
  metadata.reflection = mdTotemPrefixLotteryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdExchangeSystemInfo::kIdFieldNumber;
const int mdExchangeSystemInfo::kTemplateIdFieldNumber;
const int mdExchangeSystemInfo::kRequestCountFieldNumber;
const int mdExchangeSystemInfo::kExchangeTemplateIdFieldNumber;
const int mdExchangeSystemInfo::kResultCountFieldNumber;
#endif  // !_MSC_VER

mdExchangeSystemInfo::mdExchangeSystemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdExchangeSystemInfo)
}

void mdExchangeSystemInfo::InitAsDefaultInstance() {
}

mdExchangeSystemInfo::mdExchangeSystemInfo(const mdExchangeSystemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdExchangeSystemInfo)
}

void mdExchangeSystemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  template_id_ = 0;
  request_count_ = 0;
  exchange_template_id_ = 0;
  result_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdExchangeSystemInfo::~mdExchangeSystemInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdExchangeSystemInfo)
  SharedDtor();
}

void mdExchangeSystemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdExchangeSystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdExchangeSystemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdExchangeSystemInfo_descriptor_;
}

const mdExchangeSystemInfo& mdExchangeSystemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdExchangeSystemInfo* mdExchangeSystemInfo::default_instance_ = NULL;

mdExchangeSystemInfo* mdExchangeSystemInfo::New() const {
  return new mdExchangeSystemInfo;
}

void mdExchangeSystemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdExchangeSystemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, result_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdExchangeSystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdExchangeSystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_count;
        break;
      }

      // required int32 request_count = 3;
      case 3: {
        if (tag == 24) {
         parse_request_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_count_)));
          set_has_request_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exchange_template_id;
        break;
      }

      // required int32 exchange_template_id = 4;
      case 4: {
        if (tag == 32) {
         parse_exchange_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_template_id_)));
          set_has_exchange_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result_count;
        break;
      }

      // required int32 result_count = 5;
      case 5: {
        if (tag == 40) {
         parse_result_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_count_)));
          set_has_result_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdExchangeSystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdExchangeSystemInfo)
  return false;
#undef DO_
}

void mdExchangeSystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdExchangeSystemInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // required int32 request_count = 3;
  if (has_request_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_count(), output);
  }

  // required int32 exchange_template_id = 4;
  if (has_exchange_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exchange_template_id(), output);
  }

  // required int32 result_count = 5;
  if (has_result_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->result_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdExchangeSystemInfo)
}

::google::protobuf::uint8* mdExchangeSystemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdExchangeSystemInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // required int32 request_count = 3;
  if (has_request_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_count(), target);
  }

  // required int32 exchange_template_id = 4;
  if (has_exchange_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exchange_template_id(), target);
  }

  // required int32 result_count = 5;
  if (has_result_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->result_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdExchangeSystemInfo)
  return target;
}

int mdExchangeSystemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 request_count = 3;
    if (has_request_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_count());
    }

    // required int32 exchange_template_id = 4;
    if (has_exchange_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_template_id());
    }

    // required int32 result_count = 5;
    if (has_result_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdExchangeSystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdExchangeSystemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdExchangeSystemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdExchangeSystemInfo::MergeFrom(const mdExchangeSystemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_request_count()) {
      set_request_count(from.request_count());
    }
    if (from.has_exchange_template_id()) {
      set_exchange_template_id(from.exchange_template_id());
    }
    if (from.has_result_count()) {
      set_result_count(from.result_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdExchangeSystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdExchangeSystemInfo::CopyFrom(const mdExchangeSystemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdExchangeSystemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdExchangeSystemInfo::Swap(mdExchangeSystemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(template_id_, other->template_id_);
    std::swap(request_count_, other->request_count_);
    std::swap(exchange_template_id_, other->exchange_template_id_);
    std::swap(result_count_, other->result_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdExchangeSystemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdExchangeSystemInfo_descriptor_;
  metadata.reflection = mdExchangeSystemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdExchangeSystemCost::kExchangeIdFieldNumber;
const int mdExchangeSystemCost::kCountFieldNumber;
const int mdExchangeSystemCost::kGoldCostFieldNumber;
const int mdExchangeSystemCost::kGemCostFieldNumber;
#endif  // !_MSC_VER

mdExchangeSystemCost::mdExchangeSystemCost()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdExchangeSystemCost)
}

void mdExchangeSystemCost::InitAsDefaultInstance() {
}

mdExchangeSystemCost::mdExchangeSystemCost(const mdExchangeSystemCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdExchangeSystemCost)
}

void mdExchangeSystemCost::SharedCtor() {
  _cached_size_ = 0;
  exchange_id_ = 0;
  count_ = 0;
  gold_cost_ = 0;
  gem_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdExchangeSystemCost::~mdExchangeSystemCost() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdExchangeSystemCost)
  SharedDtor();
}

void mdExchangeSystemCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdExchangeSystemCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdExchangeSystemCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdExchangeSystemCost_descriptor_;
}

const mdExchangeSystemCost& mdExchangeSystemCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdExchangeSystemCost* mdExchangeSystemCost::default_instance_ = NULL;

mdExchangeSystemCost* mdExchangeSystemCost::New() const {
  return new mdExchangeSystemCost;
}

void mdExchangeSystemCost::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdExchangeSystemCost*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchange_id_, gem_cost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdExchangeSystemCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdExchangeSystemCost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exchange_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_id_)));
          set_has_exchange_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold_cost;
        break;
      }

      // required int32 gold_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gem_cost;
        break;
      }

      // required int32 gem_cost = 4;
      case 4: {
        if (tag == 32) {
         parse_gem_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_cost_)));
          set_has_gem_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdExchangeSystemCost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdExchangeSystemCost)
  return false;
#undef DO_
}

void mdExchangeSystemCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdExchangeSystemCost)
  // required int32 exchange_id = 1;
  if (has_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exchange_id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 gold_cost = 3;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold_cost(), output);
  }

  // required int32 gem_cost = 4;
  if (has_gem_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gem_cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdExchangeSystemCost)
}

::google::protobuf::uint8* mdExchangeSystemCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdExchangeSystemCost)
  // required int32 exchange_id = 1;
  if (has_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exchange_id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 gold_cost = 3;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold_cost(), target);
  }

  // required int32 gem_cost = 4;
  if (has_gem_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gem_cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdExchangeSystemCost)
  return target;
}

int mdExchangeSystemCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exchange_id = 1;
    if (has_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 gold_cost = 3;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }

    // required int32 gem_cost = 4;
    if (has_gem_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdExchangeSystemCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdExchangeSystemCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdExchangeSystemCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdExchangeSystemCost::MergeFrom(const mdExchangeSystemCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchange_id()) {
      set_exchange_id(from.exchange_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_gem_cost()) {
      set_gem_cost(from.gem_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdExchangeSystemCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdExchangeSystemCost::CopyFrom(const mdExchangeSystemCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdExchangeSystemCost::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdExchangeSystemCost::Swap(mdExchangeSystemCost* other) {
  if (other != this) {
    std::swap(exchange_id_, other->exchange_id_);
    std::swap(count_, other->count_);
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(gem_cost_, other->gem_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdExchangeSystemCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdExchangeSystemCost_descriptor_;
  metadata.reflection = mdExchangeSystemCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdQualityTransRateInfo::kTemplateIdFieldNumber;
const int mdQualityTransRateInfo::kEquipCategoryFieldNumber;
const int mdQualityTransRateInfo::kQualityFieldNumber;
const int mdQualityTransRateInfo::kTransRateFieldNumber;
const int mdQualityTransRateInfo::kTransCondQualityFieldNumber;
#endif  // !_MSC_VER

mdQualityTransRateInfo::mdQualityTransRateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdQualityTransRateInfo)
}

void mdQualityTransRateInfo::InitAsDefaultInstance() {
}

mdQualityTransRateInfo::mdQualityTransRateInfo(const mdQualityTransRateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdQualityTransRateInfo)
}

void mdQualityTransRateInfo::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  equip_category_ = 0;
  quality_ = 0;
  trans_rate_ = 0;
  trans_cond_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdQualityTransRateInfo::~mdQualityTransRateInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdQualityTransRateInfo)
  SharedDtor();
}

void mdQualityTransRateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdQualityTransRateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdQualityTransRateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdQualityTransRateInfo_descriptor_;
}

const mdQualityTransRateInfo& mdQualityTransRateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdQualityTransRateInfo* mdQualityTransRateInfo::default_instance_ = NULL;

mdQualityTransRateInfo* mdQualityTransRateInfo::New() const {
  return new mdQualityTransRateInfo;
}

void mdQualityTransRateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdQualityTransRateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(template_id_, trans_cond_quality_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdQualityTransRateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdQualityTransRateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_equip_category;
        break;
      }

      // required .b2.protocol.commondata.EquipCategory equip_category = 2;
      case 2: {
        if (tag == 16) {
         parse_equip_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required int32 quality = 3;
      case 3: {
        if (tag == 24) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trans_rate;
        break;
      }

      // required int32 trans_rate = 4;
      case 4: {
        if (tag == 32) {
         parse_trans_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_rate_)));
          set_has_trans_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trans_cond_quality;
        break;
      }

      // required int32 trans_cond_quality = 5;
      case 5: {
        if (tag == 40) {
         parse_trans_cond_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_cond_quality_)));
          set_has_trans_cond_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdQualityTransRateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdQualityTransRateInfo)
  return false;
#undef DO_
}

void mdQualityTransRateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdQualityTransRateInfo)
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 2;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->equip_category(), output);
  }

  // required int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // required int32 trans_rate = 4;
  if (has_trans_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trans_rate(), output);
  }

  // required int32 trans_cond_quality = 5;
  if (has_trans_cond_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->trans_cond_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdQualityTransRateInfo)
}

::google::protobuf::uint8* mdQualityTransRateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdQualityTransRateInfo)
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 2;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->equip_category(), target);
  }

  // required int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // required int32 trans_rate = 4;
  if (has_trans_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trans_rate(), target);
  }

  // required int32 trans_cond_quality = 5;
  if (has_trans_cond_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->trans_cond_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdQualityTransRateInfo)
  return target;
}

int mdQualityTransRateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required .b2.protocol.commondata.EquipCategory equip_category = 2;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

    // required int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 trans_rate = 4;
    if (has_trans_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_rate());
    }

    // required int32 trans_cond_quality = 5;
    if (has_trans_cond_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_cond_quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdQualityTransRateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdQualityTransRateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdQualityTransRateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdQualityTransRateInfo::MergeFrom(const mdQualityTransRateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_trans_rate()) {
      set_trans_rate(from.trans_rate());
    }
    if (from.has_trans_cond_quality()) {
      set_trans_cond_quality(from.trans_cond_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdQualityTransRateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdQualityTransRateInfo::CopyFrom(const mdQualityTransRateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdQualityTransRateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void mdQualityTransRateInfo::Swap(mdQualityTransRateInfo* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(equip_category_, other->equip_category_);
    std::swap(quality_, other->quality_);
    std::swap(trans_rate_, other->trans_rate_);
    std::swap(trans_cond_quality_, other->trans_cond_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdQualityTransRateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdQualityTransRateInfo_descriptor_;
  metadata.reflection = mdQualityTransRateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdLotteryShopRateQualityInfo::kEquipCategoryFieldNumber;
const int mdLotteryShopRateQualityInfo::kQualityFieldNumber;
const int mdLotteryShopRateQualityInfo::kRateFieldNumber;
const int mdLotteryShopRateQualityInfo::kQualityIncLevelFieldNumber;
#endif  // !_MSC_VER

mdLotteryShopRateQualityInfo::mdLotteryShopRateQualityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
}

void mdLotteryShopRateQualityInfo::InitAsDefaultInstance() {
}

mdLotteryShopRateQualityInfo::mdLotteryShopRateQualityInfo(const mdLotteryShopRateQualityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
}

void mdLotteryShopRateQualityInfo::SharedCtor() {
  _cached_size_ = 0;
  equip_category_ = 0;
  quality_ = 0;
  rate_ = 0;
  quality_inc_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdLotteryShopRateQualityInfo::~mdLotteryShopRateQualityInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  SharedDtor();
}

void mdLotteryShopRateQualityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdLotteryShopRateQualityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdLotteryShopRateQualityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdLotteryShopRateQualityInfo_descriptor_;
}

const mdLotteryShopRateQualityInfo& mdLotteryShopRateQualityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdLotteryShopRateQualityInfo* mdLotteryShopRateQualityInfo::default_instance_ = NULL;

mdLotteryShopRateQualityInfo* mdLotteryShopRateQualityInfo::New() const {
  return new mdLotteryShopRateQualityInfo;
}

void mdLotteryShopRateQualityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdLotteryShopRateQualityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(equip_category_, rate_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdLotteryShopRateQualityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.EquipCategory equip_category = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // required int32 quality = 2;
      case 2: {
        if (tag == 16) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rate;
        break;
      }

      // required int32 rate = 3;
      case 3: {
        if (tag == 24) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_quality_inc_level;
        break;
      }

      // required double quality_inc_level = 4;
      case 4: {
        if (tag == 33) {
         parse_quality_inc_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_inc_level_)));
          set_has_quality_inc_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  return false;
#undef DO_
}

void mdLotteryShopRateQualityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  // required .b2.protocol.commondata.EquipCategory equip_category = 1;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->equip_category(), output);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // required int32 rate = 3;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rate(), output);
  }

  // required double quality_inc_level = 4;
  if (has_quality_inc_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->quality_inc_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
}

::google::protobuf::uint8* mdLotteryShopRateQualityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  // required .b2.protocol.commondata.EquipCategory equip_category = 1;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->equip_category(), target);
  }

  // required int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // required int32 rate = 3;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rate(), target);
  }

  // required double quality_inc_level = 4;
  if (has_quality_inc_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->quality_inc_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdLotteryShopRateQualityInfo)
  return target;
}

int mdLotteryShopRateQualityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.EquipCategory equip_category = 1;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

    // required int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 rate = 3;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

    // required double quality_inc_level = 4;
    if (has_quality_inc_level()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdLotteryShopRateQualityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdLotteryShopRateQualityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdLotteryShopRateQualityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdLotteryShopRateQualityInfo::MergeFrom(const mdLotteryShopRateQualityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_quality_inc_level()) {
      set_quality_inc_level(from.quality_inc_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdLotteryShopRateQualityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdLotteryShopRateQualityInfo::CopyFrom(const mdLotteryShopRateQualityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdLotteryShopRateQualityInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdLotteryShopRateQualityInfo::Swap(mdLotteryShopRateQualityInfo* other) {
  if (other != this) {
    std::swap(equip_category_, other->equip_category_);
    std::swap(quality_, other->quality_);
    std::swap(rate_, other->rate_);
    std::swap(quality_inc_level_, other->quality_inc_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdLotteryShopRateQualityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdLotteryShopRateQualityInfo_descriptor_;
  metadata.reflection = mdLotteryShopRateQualityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFactoryInfo::kIdFieldNumber;
const int mdFactoryInfo::kFactoryTypeFieldNumber;
const int mdFactoryInfo::kFactoryTabFieldNumber;
const int mdFactoryInfo::kGroupIdFieldNumber;
const int mdFactoryInfo::kGroupSortFieldNumber;
const int mdFactoryInfo::kItemSortFieldNumber;
const int mdFactoryInfo::kLimitIdFieldNumber;
const int mdFactoryInfo::kCharacterTypeFieldNumber;
const int mdFactoryInfo::kGoldCostFieldNumber;
const int mdFactoryInfo::kGemCostFieldNumber;
const int mdFactoryInfo::kDarkCrystalCostFieldNumber;
const int mdFactoryInfo::kSuccessRateFieldNumber;
const int mdFactoryInfo::kHugeSuccessRateFieldNumber;
const int mdFactoryInfo::kFailRateFieldNumber;
const int mdFactoryInfo::kHugeSuccessAddItemTemplateIdFieldNumber;
const int mdFactoryInfo::kHugeSuccessAddItemCountFieldNumber;
const int mdFactoryInfo::kFailAddItemTemplateIdFieldNumber;
const int mdFactoryInfo::kFailAddItemCountFieldNumber;
const int mdFactoryInfo::kResultItemTemplateIdFieldNumber;
const int mdFactoryInfo::kResultItemCountFieldNumber;
const int mdFactoryInfo::kMainMaterialTemplateIdFieldNumber;
const int mdFactoryInfo::kMainMaterialCondReinforceFieldNumber;
const int mdFactoryInfo::kMainMaterialCondLevelFieldNumber;
const int mdFactoryInfo::kMainMaterialCountFieldNumber;
const int mdFactoryInfo::kMainMaterialFailRefundRateFieldNumber;
const int mdFactoryInfo::kMaterialTemplateId1FieldNumber;
const int mdFactoryInfo::kMaterialCount1FieldNumber;
const int mdFactoryInfo::kMaterialFailRefundRate1FieldNumber;
const int mdFactoryInfo::kMaterialTemplateId2FieldNumber;
const int mdFactoryInfo::kMaterialCount2FieldNumber;
const int mdFactoryInfo::kMaterialFailRefundRate2FieldNumber;
const int mdFactoryInfo::kMaterialTemplateId3FieldNumber;
const int mdFactoryInfo::kMaterialCount3FieldNumber;
const int mdFactoryInfo::kMaterialFailRefundRate3FieldNumber;
const int mdFactoryInfo::kMaterialTemplateId4FieldNumber;
const int mdFactoryInfo::kMaterialCount4FieldNumber;
const int mdFactoryInfo::kMaterialFailRefundRate4FieldNumber;
const int mdFactoryInfo::kVisibleTypeFieldNumber;
#endif  // !_MSC_VER

mdFactoryInfo::mdFactoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFactoryInfo)
}

void mdFactoryInfo::InitAsDefaultInstance() {
}

mdFactoryInfo::mdFactoryInfo(const mdFactoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFactoryInfo)
}

void mdFactoryInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  factory_type_ = 0;
  factory_tab_ = 0;
  group_id_ = 0;
  group_sort_ = 0;
  item_sort_ = 0;
  limit_id_ = 0;
  character_type_ = 0;
  gold_cost_ = 0;
  gem_cost_ = 0;
  dark_crystal_cost_ = 0;
  success_rate_ = 0;
  huge_success_rate_ = 0;
  fail_rate_ = 0;
  huge_success_add_item_template_id_ = 0;
  huge_success_add_item_count_ = 0;
  fail_add_item_template_id_ = 0;
  fail_add_item_count_ = 0;
  result_item_template_id_ = 0;
  result_item_count_ = 0;
  main_material_template_id_ = 0;
  main_material_cond_reinforce_ = 0;
  main_material_cond_level_ = 0;
  main_material_count_ = 0;
  main_material_fail_refund_rate_ = 0;
  material_template_id1_ = 0;
  material_count1_ = 0;
  material_fail_refund_rate1_ = 0;
  material_template_id2_ = 0;
  material_count2_ = 0;
  material_fail_refund_rate2_ = 0;
  material_template_id3_ = 0;
  material_count3_ = 0;
  material_fail_refund_rate3_ = 0;
  material_template_id4_ = 0;
  material_count4_ = 0;
  material_fail_refund_rate4_ = 0;
  visible_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFactoryInfo::~mdFactoryInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFactoryInfo)
  SharedDtor();
}

void mdFactoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFactoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFactoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFactoryInfo_descriptor_;
}

const mdFactoryInfo& mdFactoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFactoryInfo* mdFactoryInfo::default_instance_ = NULL;

mdFactoryInfo* mdFactoryInfo::New() const {
  return new mdFactoryInfo;
}

void mdFactoryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdFactoryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, character_type_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(gold_cost_, huge_success_add_item_count_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(fail_add_item_template_id_, main_material_count_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(main_material_fail_refund_rate_, material_template_id3_);
  }
  if (_has_bits_[32 / 32] & 63) {
    ZR_(material_count3_, material_fail_refund_rate4_);
    visible_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFactoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFactoryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_factory_type;
        break;
      }

      // required int32 factory_type = 2;
      case 2: {
        if (tag == 16) {
         parse_factory_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factory_type_)));
          set_has_factory_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_factory_tab;
        break;
      }

      // required int32 factory_tab = 3;
      case 3: {
        if (tag == 24) {
         parse_factory_tab:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factory_tab_)));
          set_has_factory_tab();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // required int32 group_id = 4;
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_group_sort;
        break;
      }

      // required int32 group_sort = 5;
      case 5: {
        if (tag == 40) {
         parse_group_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_sort_)));
          set_has_group_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_sort;
        break;
      }

      // required int32 item_sort = 6;
      case 6: {
        if (tag == 48) {
         parse_item_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_sort_)));
          set_has_item_sort();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_limit_id;
        break;
      }

      // required int32 limit_id = 7;
      case 7: {
        if (tag == 56) {
         parse_limit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_id_)));
          set_has_limit_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_character_type;
        break;
      }

      // required int32 character_type = 8;
      case 8: {
        if (tag == 64) {
         parse_character_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_type_)));
          set_has_character_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_gold_cost;
        break;
      }

      // required int32 gold_cost = 9;
      case 9: {
        if (tag == 72) {
         parse_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_cost_)));
          set_has_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_gem_cost;
        break;
      }

      // required int32 gem_cost = 10;
      case 10: {
        if (tag == 80) {
         parse_gem_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_cost_)));
          set_has_gem_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dark_crystal_cost;
        break;
      }

      // required int32 dark_crystal_cost = 11;
      case 11: {
        if (tag == 88) {
         parse_dark_crystal_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dark_crystal_cost_)));
          set_has_dark_crystal_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_success_rate;
        break;
      }

      // required int32 success_rate = 12;
      case 12: {
        if (tag == 96) {
         parse_success_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_rate_)));
          set_has_success_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_huge_success_rate;
        break;
      }

      // required int32 huge_success_rate = 13;
      case 13: {
        if (tag == 104) {
         parse_huge_success_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huge_success_rate_)));
          set_has_huge_success_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_fail_rate;
        break;
      }

      // required int32 fail_rate = 14;
      case 14: {
        if (tag == 112) {
         parse_fail_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_rate_)));
          set_has_fail_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_huge_success_add_item_template_id;
        break;
      }

      // required int32 huge_success_add_item_template_id = 15;
      case 15: {
        if (tag == 120) {
         parse_huge_success_add_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huge_success_add_item_template_id_)));
          set_has_huge_success_add_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_huge_success_add_item_count;
        break;
      }

      // required int32 huge_success_add_item_count = 16;
      case 16: {
        if (tag == 128) {
         parse_huge_success_add_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huge_success_add_item_count_)));
          set_has_huge_success_add_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fail_add_item_template_id;
        break;
      }

      // required int32 fail_add_item_template_id = 17;
      case 17: {
        if (tag == 136) {
         parse_fail_add_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_add_item_template_id_)));
          set_has_fail_add_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_fail_add_item_count;
        break;
      }

      // required int32 fail_add_item_count = 18;
      case 18: {
        if (tag == 144) {
         parse_fail_add_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fail_add_item_count_)));
          set_has_fail_add_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_result_item_template_id;
        break;
      }

      // required int32 result_item_template_id = 19;
      case 19: {
        if (tag == 152) {
         parse_result_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_item_template_id_)));
          set_has_result_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_result_item_count;
        break;
      }

      // required int32 result_item_count = 20;
      case 20: {
        if (tag == 160) {
         parse_result_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_item_count_)));
          set_has_result_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_main_material_template_id;
        break;
      }

      // required int32 main_material_template_id = 21;
      case 21: {
        if (tag == 168) {
         parse_main_material_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_material_template_id_)));
          set_has_main_material_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_main_material_cond_reinforce;
        break;
      }

      // required int32 main_material_cond_reinforce = 22;
      case 22: {
        if (tag == 176) {
         parse_main_material_cond_reinforce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_material_cond_reinforce_)));
          set_has_main_material_cond_reinforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_main_material_cond_level;
        break;
      }

      // required int32 main_material_cond_level = 23;
      case 23: {
        if (tag == 184) {
         parse_main_material_cond_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_material_cond_level_)));
          set_has_main_material_cond_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_main_material_count;
        break;
      }

      // required int32 main_material_count = 24;
      case 24: {
        if (tag == 192) {
         parse_main_material_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_material_count_)));
          set_has_main_material_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_main_material_fail_refund_rate;
        break;
      }

      // required int32 main_material_fail_refund_rate = 25;
      case 25: {
        if (tag == 200) {
         parse_main_material_fail_refund_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_material_fail_refund_rate_)));
          set_has_main_material_fail_refund_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_material_template_id1;
        break;
      }

      // required int32 material_template_id1 = 26;
      case 26: {
        if (tag == 208) {
         parse_material_template_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_template_id1_)));
          set_has_material_template_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_material_count1;
        break;
      }

      // required int32 material_count1 = 27;
      case 27: {
        if (tag == 216) {
         parse_material_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_count1_)));
          set_has_material_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_material_fail_refund_rate1;
        break;
      }

      // required int32 material_fail_refund_rate1 = 28;
      case 28: {
        if (tag == 224) {
         parse_material_fail_refund_rate1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_fail_refund_rate1_)));
          set_has_material_fail_refund_rate1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_material_template_id2;
        break;
      }

      // required int32 material_template_id2 = 29;
      case 29: {
        if (tag == 232) {
         parse_material_template_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_template_id2_)));
          set_has_material_template_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_material_count2;
        break;
      }

      // required int32 material_count2 = 30;
      case 30: {
        if (tag == 240) {
         parse_material_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_count2_)));
          set_has_material_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_material_fail_refund_rate2;
        break;
      }

      // required int32 material_fail_refund_rate2 = 31;
      case 31: {
        if (tag == 248) {
         parse_material_fail_refund_rate2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_fail_refund_rate2_)));
          set_has_material_fail_refund_rate2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_material_template_id3;
        break;
      }

      // required int32 material_template_id3 = 32;
      case 32: {
        if (tag == 256) {
         parse_material_template_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_template_id3_)));
          set_has_material_template_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_material_count3;
        break;
      }

      // required int32 material_count3 = 33;
      case 33: {
        if (tag == 264) {
         parse_material_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_count3_)));
          set_has_material_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_material_fail_refund_rate3;
        break;
      }

      // required int32 material_fail_refund_rate3 = 34;
      case 34: {
        if (tag == 272) {
         parse_material_fail_refund_rate3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_fail_refund_rate3_)));
          set_has_material_fail_refund_rate3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_material_template_id4;
        break;
      }

      // required int32 material_template_id4 = 35;
      case 35: {
        if (tag == 280) {
         parse_material_template_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_template_id4_)));
          set_has_material_template_id4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_material_count4;
        break;
      }

      // required int32 material_count4 = 36;
      case 36: {
        if (tag == 288) {
         parse_material_count4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_count4_)));
          set_has_material_count4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_material_fail_refund_rate4;
        break;
      }

      // required int32 material_fail_refund_rate4 = 37;
      case 37: {
        if (tag == 296) {
         parse_material_fail_refund_rate4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_fail_refund_rate4_)));
          set_has_material_fail_refund_rate4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_visible_type;
        break;
      }

      // required .b2.protocol.commondata.FactoryVisibleType visible_type = 38;
      case 38: {
        if (tag == 304) {
         parse_visible_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FactoryVisibleType_IsValid(value)) {
            set_visible_type(static_cast< ::b2::protocol::commondata::FactoryVisibleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(38, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFactoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFactoryInfo)
  return false;
#undef DO_
}

void mdFactoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFactoryInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 factory_type = 2;
  if (has_factory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->factory_type(), output);
  }

  // required int32 factory_tab = 3;
  if (has_factory_tab()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->factory_tab(), output);
  }

  // required int32 group_id = 4;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->group_id(), output);
  }

  // required int32 group_sort = 5;
  if (has_group_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group_sort(), output);
  }

  // required int32 item_sort = 6;
  if (has_item_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_sort(), output);
  }

  // required int32 limit_id = 7;
  if (has_limit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->limit_id(), output);
  }

  // required int32 character_type = 8;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->character_type(), output);
  }

  // required int32 gold_cost = 9;
  if (has_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gold_cost(), output);
  }

  // required int32 gem_cost = 10;
  if (has_gem_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->gem_cost(), output);
  }

  // required int32 dark_crystal_cost = 11;
  if (has_dark_crystal_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dark_crystal_cost(), output);
  }

  // required int32 success_rate = 12;
  if (has_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->success_rate(), output);
  }

  // required int32 huge_success_rate = 13;
  if (has_huge_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->huge_success_rate(), output);
  }

  // required int32 fail_rate = 14;
  if (has_fail_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fail_rate(), output);
  }

  // required int32 huge_success_add_item_template_id = 15;
  if (has_huge_success_add_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->huge_success_add_item_template_id(), output);
  }

  // required int32 huge_success_add_item_count = 16;
  if (has_huge_success_add_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->huge_success_add_item_count(), output);
  }

  // required int32 fail_add_item_template_id = 17;
  if (has_fail_add_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->fail_add_item_template_id(), output);
  }

  // required int32 fail_add_item_count = 18;
  if (has_fail_add_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->fail_add_item_count(), output);
  }

  // required int32 result_item_template_id = 19;
  if (has_result_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->result_item_template_id(), output);
  }

  // required int32 result_item_count = 20;
  if (has_result_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->result_item_count(), output);
  }

  // required int32 main_material_template_id = 21;
  if (has_main_material_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->main_material_template_id(), output);
  }

  // required int32 main_material_cond_reinforce = 22;
  if (has_main_material_cond_reinforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->main_material_cond_reinforce(), output);
  }

  // required int32 main_material_cond_level = 23;
  if (has_main_material_cond_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->main_material_cond_level(), output);
  }

  // required int32 main_material_count = 24;
  if (has_main_material_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->main_material_count(), output);
  }

  // required int32 main_material_fail_refund_rate = 25;
  if (has_main_material_fail_refund_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->main_material_fail_refund_rate(), output);
  }

  // required int32 material_template_id1 = 26;
  if (has_material_template_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->material_template_id1(), output);
  }

  // required int32 material_count1 = 27;
  if (has_material_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->material_count1(), output);
  }

  // required int32 material_fail_refund_rate1 = 28;
  if (has_material_fail_refund_rate1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->material_fail_refund_rate1(), output);
  }

  // required int32 material_template_id2 = 29;
  if (has_material_template_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->material_template_id2(), output);
  }

  // required int32 material_count2 = 30;
  if (has_material_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->material_count2(), output);
  }

  // required int32 material_fail_refund_rate2 = 31;
  if (has_material_fail_refund_rate2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->material_fail_refund_rate2(), output);
  }

  // required int32 material_template_id3 = 32;
  if (has_material_template_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->material_template_id3(), output);
  }

  // required int32 material_count3 = 33;
  if (has_material_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->material_count3(), output);
  }

  // required int32 material_fail_refund_rate3 = 34;
  if (has_material_fail_refund_rate3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->material_fail_refund_rate3(), output);
  }

  // required int32 material_template_id4 = 35;
  if (has_material_template_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->material_template_id4(), output);
  }

  // required int32 material_count4 = 36;
  if (has_material_count4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->material_count4(), output);
  }

  // required int32 material_fail_refund_rate4 = 37;
  if (has_material_fail_refund_rate4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->material_fail_refund_rate4(), output);
  }

  // required .b2.protocol.commondata.FactoryVisibleType visible_type = 38;
  if (has_visible_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      38, this->visible_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFactoryInfo)
}

::google::protobuf::uint8* mdFactoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFactoryInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 factory_type = 2;
  if (has_factory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->factory_type(), target);
  }

  // required int32 factory_tab = 3;
  if (has_factory_tab()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->factory_tab(), target);
  }

  // required int32 group_id = 4;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->group_id(), target);
  }

  // required int32 group_sort = 5;
  if (has_group_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group_sort(), target);
  }

  // required int32 item_sort = 6;
  if (has_item_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_sort(), target);
  }

  // required int32 limit_id = 7;
  if (has_limit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->limit_id(), target);
  }

  // required int32 character_type = 8;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->character_type(), target);
  }

  // required int32 gold_cost = 9;
  if (has_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gold_cost(), target);
  }

  // required int32 gem_cost = 10;
  if (has_gem_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->gem_cost(), target);
  }

  // required int32 dark_crystal_cost = 11;
  if (has_dark_crystal_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dark_crystal_cost(), target);
  }

  // required int32 success_rate = 12;
  if (has_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->success_rate(), target);
  }

  // required int32 huge_success_rate = 13;
  if (has_huge_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->huge_success_rate(), target);
  }

  // required int32 fail_rate = 14;
  if (has_fail_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->fail_rate(), target);
  }

  // required int32 huge_success_add_item_template_id = 15;
  if (has_huge_success_add_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->huge_success_add_item_template_id(), target);
  }

  // required int32 huge_success_add_item_count = 16;
  if (has_huge_success_add_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->huge_success_add_item_count(), target);
  }

  // required int32 fail_add_item_template_id = 17;
  if (has_fail_add_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->fail_add_item_template_id(), target);
  }

  // required int32 fail_add_item_count = 18;
  if (has_fail_add_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->fail_add_item_count(), target);
  }

  // required int32 result_item_template_id = 19;
  if (has_result_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->result_item_template_id(), target);
  }

  // required int32 result_item_count = 20;
  if (has_result_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->result_item_count(), target);
  }

  // required int32 main_material_template_id = 21;
  if (has_main_material_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->main_material_template_id(), target);
  }

  // required int32 main_material_cond_reinforce = 22;
  if (has_main_material_cond_reinforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->main_material_cond_reinforce(), target);
  }

  // required int32 main_material_cond_level = 23;
  if (has_main_material_cond_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->main_material_cond_level(), target);
  }

  // required int32 main_material_count = 24;
  if (has_main_material_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->main_material_count(), target);
  }

  // required int32 main_material_fail_refund_rate = 25;
  if (has_main_material_fail_refund_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->main_material_fail_refund_rate(), target);
  }

  // required int32 material_template_id1 = 26;
  if (has_material_template_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->material_template_id1(), target);
  }

  // required int32 material_count1 = 27;
  if (has_material_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->material_count1(), target);
  }

  // required int32 material_fail_refund_rate1 = 28;
  if (has_material_fail_refund_rate1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->material_fail_refund_rate1(), target);
  }

  // required int32 material_template_id2 = 29;
  if (has_material_template_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->material_template_id2(), target);
  }

  // required int32 material_count2 = 30;
  if (has_material_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->material_count2(), target);
  }

  // required int32 material_fail_refund_rate2 = 31;
  if (has_material_fail_refund_rate2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->material_fail_refund_rate2(), target);
  }

  // required int32 material_template_id3 = 32;
  if (has_material_template_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->material_template_id3(), target);
  }

  // required int32 material_count3 = 33;
  if (has_material_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->material_count3(), target);
  }

  // required int32 material_fail_refund_rate3 = 34;
  if (has_material_fail_refund_rate3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->material_fail_refund_rate3(), target);
  }

  // required int32 material_template_id4 = 35;
  if (has_material_template_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->material_template_id4(), target);
  }

  // required int32 material_count4 = 36;
  if (has_material_count4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->material_count4(), target);
  }

  // required int32 material_fail_refund_rate4 = 37;
  if (has_material_fail_refund_rate4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->material_fail_refund_rate4(), target);
  }

  // required .b2.protocol.commondata.FactoryVisibleType visible_type = 38;
  if (has_visible_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      38, this->visible_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFactoryInfo)
  return target;
}

int mdFactoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 factory_type = 2;
    if (has_factory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factory_type());
    }

    // required int32 factory_tab = 3;
    if (has_factory_tab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factory_tab());
    }

    // required int32 group_id = 4;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // required int32 group_sort = 5;
    if (has_group_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_sort());
    }

    // required int32 item_sort = 6;
    if (has_item_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_sort());
    }

    // required int32 limit_id = 7;
    if (has_limit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_id());
    }

    // required int32 character_type = 8;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 gold_cost = 9;
    if (has_gold_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_cost());
    }

    // required int32 gem_cost = 10;
    if (has_gem_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_cost());
    }

    // required int32 dark_crystal_cost = 11;
    if (has_dark_crystal_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dark_crystal_cost());
    }

    // required int32 success_rate = 12;
    if (has_success_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success_rate());
    }

    // required int32 huge_success_rate = 13;
    if (has_huge_success_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huge_success_rate());
    }

    // required int32 fail_rate = 14;
    if (has_fail_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_rate());
    }

    // required int32 huge_success_add_item_template_id = 15;
    if (has_huge_success_add_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huge_success_add_item_template_id());
    }

    // required int32 huge_success_add_item_count = 16;
    if (has_huge_success_add_item_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huge_success_add_item_count());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 fail_add_item_template_id = 17;
    if (has_fail_add_item_template_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_add_item_template_id());
    }

    // required int32 fail_add_item_count = 18;
    if (has_fail_add_item_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fail_add_item_count());
    }

    // required int32 result_item_template_id = 19;
    if (has_result_item_template_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_item_template_id());
    }

    // required int32 result_item_count = 20;
    if (has_result_item_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_item_count());
    }

    // required int32 main_material_template_id = 21;
    if (has_main_material_template_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_material_template_id());
    }

    // required int32 main_material_cond_reinforce = 22;
    if (has_main_material_cond_reinforce()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_material_cond_reinforce());
    }

    // required int32 main_material_cond_level = 23;
    if (has_main_material_cond_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_material_cond_level());
    }

    // required int32 main_material_count = 24;
    if (has_main_material_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_material_count());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 main_material_fail_refund_rate = 25;
    if (has_main_material_fail_refund_rate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_material_fail_refund_rate());
    }

    // required int32 material_template_id1 = 26;
    if (has_material_template_id1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_template_id1());
    }

    // required int32 material_count1 = 27;
    if (has_material_count1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_count1());
    }

    // required int32 material_fail_refund_rate1 = 28;
    if (has_material_fail_refund_rate1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_fail_refund_rate1());
    }

    // required int32 material_template_id2 = 29;
    if (has_material_template_id2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_template_id2());
    }

    // required int32 material_count2 = 30;
    if (has_material_count2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_count2());
    }

    // required int32 material_fail_refund_rate2 = 31;
    if (has_material_fail_refund_rate2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_fail_refund_rate2());
    }

    // required int32 material_template_id3 = 32;
    if (has_material_template_id3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_template_id3());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 material_count3 = 33;
    if (has_material_count3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_count3());
    }

    // required int32 material_fail_refund_rate3 = 34;
    if (has_material_fail_refund_rate3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_fail_refund_rate3());
    }

    // required int32 material_template_id4 = 35;
    if (has_material_template_id4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_template_id4());
    }

    // required int32 material_count4 = 36;
    if (has_material_count4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_count4());
    }

    // required int32 material_fail_refund_rate4 = 37;
    if (has_material_fail_refund_rate4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material_fail_refund_rate4());
    }

    // required .b2.protocol.commondata.FactoryVisibleType visible_type = 38;
    if (has_visible_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visible_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFactoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFactoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFactoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFactoryInfo::MergeFrom(const mdFactoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_factory_type()) {
      set_factory_type(from.factory_type());
    }
    if (from.has_factory_tab()) {
      set_factory_tab(from.factory_tab());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_sort()) {
      set_group_sort(from.group_sort());
    }
    if (from.has_item_sort()) {
      set_item_sort(from.item_sort());
    }
    if (from.has_limit_id()) {
      set_limit_id(from.limit_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gold_cost()) {
      set_gold_cost(from.gold_cost());
    }
    if (from.has_gem_cost()) {
      set_gem_cost(from.gem_cost());
    }
    if (from.has_dark_crystal_cost()) {
      set_dark_crystal_cost(from.dark_crystal_cost());
    }
    if (from.has_success_rate()) {
      set_success_rate(from.success_rate());
    }
    if (from.has_huge_success_rate()) {
      set_huge_success_rate(from.huge_success_rate());
    }
    if (from.has_fail_rate()) {
      set_fail_rate(from.fail_rate());
    }
    if (from.has_huge_success_add_item_template_id()) {
      set_huge_success_add_item_template_id(from.huge_success_add_item_template_id());
    }
    if (from.has_huge_success_add_item_count()) {
      set_huge_success_add_item_count(from.huge_success_add_item_count());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fail_add_item_template_id()) {
      set_fail_add_item_template_id(from.fail_add_item_template_id());
    }
    if (from.has_fail_add_item_count()) {
      set_fail_add_item_count(from.fail_add_item_count());
    }
    if (from.has_result_item_template_id()) {
      set_result_item_template_id(from.result_item_template_id());
    }
    if (from.has_result_item_count()) {
      set_result_item_count(from.result_item_count());
    }
    if (from.has_main_material_template_id()) {
      set_main_material_template_id(from.main_material_template_id());
    }
    if (from.has_main_material_cond_reinforce()) {
      set_main_material_cond_reinforce(from.main_material_cond_reinforce());
    }
    if (from.has_main_material_cond_level()) {
      set_main_material_cond_level(from.main_material_cond_level());
    }
    if (from.has_main_material_count()) {
      set_main_material_count(from.main_material_count());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_main_material_fail_refund_rate()) {
      set_main_material_fail_refund_rate(from.main_material_fail_refund_rate());
    }
    if (from.has_material_template_id1()) {
      set_material_template_id1(from.material_template_id1());
    }
    if (from.has_material_count1()) {
      set_material_count1(from.material_count1());
    }
    if (from.has_material_fail_refund_rate1()) {
      set_material_fail_refund_rate1(from.material_fail_refund_rate1());
    }
    if (from.has_material_template_id2()) {
      set_material_template_id2(from.material_template_id2());
    }
    if (from.has_material_count2()) {
      set_material_count2(from.material_count2());
    }
    if (from.has_material_fail_refund_rate2()) {
      set_material_fail_refund_rate2(from.material_fail_refund_rate2());
    }
    if (from.has_material_template_id3()) {
      set_material_template_id3(from.material_template_id3());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_material_count3()) {
      set_material_count3(from.material_count3());
    }
    if (from.has_material_fail_refund_rate3()) {
      set_material_fail_refund_rate3(from.material_fail_refund_rate3());
    }
    if (from.has_material_template_id4()) {
      set_material_template_id4(from.material_template_id4());
    }
    if (from.has_material_count4()) {
      set_material_count4(from.material_count4());
    }
    if (from.has_material_fail_refund_rate4()) {
      set_material_fail_refund_rate4(from.material_fail_refund_rate4());
    }
    if (from.has_visible_type()) {
      set_visible_type(from.visible_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFactoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFactoryInfo::CopyFrom(const mdFactoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFactoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void mdFactoryInfo::Swap(mdFactoryInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(factory_type_, other->factory_type_);
    std::swap(factory_tab_, other->factory_tab_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_sort_, other->group_sort_);
    std::swap(item_sort_, other->item_sort_);
    std::swap(limit_id_, other->limit_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(gold_cost_, other->gold_cost_);
    std::swap(gem_cost_, other->gem_cost_);
    std::swap(dark_crystal_cost_, other->dark_crystal_cost_);
    std::swap(success_rate_, other->success_rate_);
    std::swap(huge_success_rate_, other->huge_success_rate_);
    std::swap(fail_rate_, other->fail_rate_);
    std::swap(huge_success_add_item_template_id_, other->huge_success_add_item_template_id_);
    std::swap(huge_success_add_item_count_, other->huge_success_add_item_count_);
    std::swap(fail_add_item_template_id_, other->fail_add_item_template_id_);
    std::swap(fail_add_item_count_, other->fail_add_item_count_);
    std::swap(result_item_template_id_, other->result_item_template_id_);
    std::swap(result_item_count_, other->result_item_count_);
    std::swap(main_material_template_id_, other->main_material_template_id_);
    std::swap(main_material_cond_reinforce_, other->main_material_cond_reinforce_);
    std::swap(main_material_cond_level_, other->main_material_cond_level_);
    std::swap(main_material_count_, other->main_material_count_);
    std::swap(main_material_fail_refund_rate_, other->main_material_fail_refund_rate_);
    std::swap(material_template_id1_, other->material_template_id1_);
    std::swap(material_count1_, other->material_count1_);
    std::swap(material_fail_refund_rate1_, other->material_fail_refund_rate1_);
    std::swap(material_template_id2_, other->material_template_id2_);
    std::swap(material_count2_, other->material_count2_);
    std::swap(material_fail_refund_rate2_, other->material_fail_refund_rate2_);
    std::swap(material_template_id3_, other->material_template_id3_);
    std::swap(material_count3_, other->material_count3_);
    std::swap(material_fail_refund_rate3_, other->material_fail_refund_rate3_);
    std::swap(material_template_id4_, other->material_template_id4_);
    std::swap(material_count4_, other->material_count4_);
    std::swap(material_fail_refund_rate4_, other->material_fail_refund_rate4_);
    std::swap(visible_type_, other->visible_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFactoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFactoryInfo_descriptor_;
  metadata.reflection = mdFactoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFactoryMaterialTransInfo::kFactoryIdFieldNumber;
const int mdFactoryMaterialTransInfo::kTransMainMaterialTemplateIdFieldNumber;
const int mdFactoryMaterialTransInfo::kTransMainMaterialCountFieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialTemplateId1FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialCount1FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialTemplateId2FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialCount2FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialTemplateId3FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialCount3FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialTemplateId4FieldNumber;
const int mdFactoryMaterialTransInfo::kTransMaterialCount4FieldNumber;
#endif  // !_MSC_VER

mdFactoryMaterialTransInfo::mdFactoryMaterialTransInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
}

void mdFactoryMaterialTransInfo::InitAsDefaultInstance() {
}

mdFactoryMaterialTransInfo::mdFactoryMaterialTransInfo(const mdFactoryMaterialTransInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
}

void mdFactoryMaterialTransInfo::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = 0;
  trans_main_material_template_id_ = 0;
  trans_main_material_count_ = 0;
  trans_material_template_id1_ = 0;
  trans_material_count1_ = 0;
  trans_material_template_id2_ = 0;
  trans_material_count2_ = 0;
  trans_material_template_id3_ = 0;
  trans_material_count3_ = 0;
  trans_material_template_id4_ = 0;
  trans_material_count4_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFactoryMaterialTransInfo::~mdFactoryMaterialTransInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  SharedDtor();
}

void mdFactoryMaterialTransInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFactoryMaterialTransInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFactoryMaterialTransInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFactoryMaterialTransInfo_descriptor_;
}

const mdFactoryMaterialTransInfo& mdFactoryMaterialTransInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFactoryMaterialTransInfo* mdFactoryMaterialTransInfo::default_instance_ = NULL;

mdFactoryMaterialTransInfo* mdFactoryMaterialTransInfo::New() const {
  return new mdFactoryMaterialTransInfo;
}

void mdFactoryMaterialTransInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdFactoryMaterialTransInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(factory_id_, trans_material_template_id3_);
  }
  ZR_(trans_material_count3_, trans_material_count4_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFactoryMaterialTransInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 factory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trans_main_material_template_id;
        break;
      }

      // required int32 trans_main_material_template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_trans_main_material_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_main_material_template_id_)));
          set_has_trans_main_material_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_trans_main_material_count;
        break;
      }

      // required int32 trans_main_material_count = 3;
      case 3: {
        if (tag == 24) {
         parse_trans_main_material_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_main_material_count_)));
          set_has_trans_main_material_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trans_material_template_id1;
        break;
      }

      // required int32 trans_material_template_id1 = 4;
      case 4: {
        if (tag == 32) {
         parse_trans_material_template_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_template_id1_)));
          set_has_trans_material_template_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trans_material_count1;
        break;
      }

      // required int32 trans_material_count1 = 5;
      case 5: {
        if (tag == 40) {
         parse_trans_material_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_count1_)));
          set_has_trans_material_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_trans_material_template_id2;
        break;
      }

      // required int32 trans_material_template_id2 = 6;
      case 6: {
        if (tag == 48) {
         parse_trans_material_template_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_template_id2_)));
          set_has_trans_material_template_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_trans_material_count2;
        break;
      }

      // required int32 trans_material_count2 = 7;
      case 7: {
        if (tag == 56) {
         parse_trans_material_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_count2_)));
          set_has_trans_material_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_trans_material_template_id3;
        break;
      }

      // required int32 trans_material_template_id3 = 8;
      case 8: {
        if (tag == 64) {
         parse_trans_material_template_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_template_id3_)));
          set_has_trans_material_template_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_trans_material_count3;
        break;
      }

      // required int32 trans_material_count3 = 9;
      case 9: {
        if (tag == 72) {
         parse_trans_material_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_count3_)));
          set_has_trans_material_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_trans_material_template_id4;
        break;
      }

      // required int32 trans_material_template_id4 = 10;
      case 10: {
        if (tag == 80) {
         parse_trans_material_template_id4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_template_id4_)));
          set_has_trans_material_template_id4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_trans_material_count4;
        break;
      }

      // required int32 trans_material_count4 = 11;
      case 11: {
        if (tag == 88) {
         parse_trans_material_count4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_material_count4_)));
          set_has_trans_material_count4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  return false;
#undef DO_
}

void mdFactoryMaterialTransInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  // required int32 factory_id = 1;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factory_id(), output);
  }

  // required int32 trans_main_material_template_id = 2;
  if (has_trans_main_material_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trans_main_material_template_id(), output);
  }

  // required int32 trans_main_material_count = 3;
  if (has_trans_main_material_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->trans_main_material_count(), output);
  }

  // required int32 trans_material_template_id1 = 4;
  if (has_trans_material_template_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->trans_material_template_id1(), output);
  }

  // required int32 trans_material_count1 = 5;
  if (has_trans_material_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->trans_material_count1(), output);
  }

  // required int32 trans_material_template_id2 = 6;
  if (has_trans_material_template_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trans_material_template_id2(), output);
  }

  // required int32 trans_material_count2 = 7;
  if (has_trans_material_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->trans_material_count2(), output);
  }

  // required int32 trans_material_template_id3 = 8;
  if (has_trans_material_template_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->trans_material_template_id3(), output);
  }

  // required int32 trans_material_count3 = 9;
  if (has_trans_material_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->trans_material_count3(), output);
  }

  // required int32 trans_material_template_id4 = 10;
  if (has_trans_material_template_id4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->trans_material_template_id4(), output);
  }

  // required int32 trans_material_count4 = 11;
  if (has_trans_material_count4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->trans_material_count4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
}

::google::protobuf::uint8* mdFactoryMaterialTransInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  // required int32 factory_id = 1;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factory_id(), target);
  }

  // required int32 trans_main_material_template_id = 2;
  if (has_trans_main_material_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trans_main_material_template_id(), target);
  }

  // required int32 trans_main_material_count = 3;
  if (has_trans_main_material_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->trans_main_material_count(), target);
  }

  // required int32 trans_material_template_id1 = 4;
  if (has_trans_material_template_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->trans_material_template_id1(), target);
  }

  // required int32 trans_material_count1 = 5;
  if (has_trans_material_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->trans_material_count1(), target);
  }

  // required int32 trans_material_template_id2 = 6;
  if (has_trans_material_template_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trans_material_template_id2(), target);
  }

  // required int32 trans_material_count2 = 7;
  if (has_trans_material_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->trans_material_count2(), target);
  }

  // required int32 trans_material_template_id3 = 8;
  if (has_trans_material_template_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->trans_material_template_id3(), target);
  }

  // required int32 trans_material_count3 = 9;
  if (has_trans_material_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->trans_material_count3(), target);
  }

  // required int32 trans_material_template_id4 = 10;
  if (has_trans_material_template_id4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->trans_material_template_id4(), target);
  }

  // required int32 trans_material_count4 = 11;
  if (has_trans_material_count4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->trans_material_count4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFactoryMaterialTransInfo)
  return target;
}

int mdFactoryMaterialTransInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 factory_id = 1;
    if (has_factory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factory_id());
    }

    // required int32 trans_main_material_template_id = 2;
    if (has_trans_main_material_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_main_material_template_id());
    }

    // required int32 trans_main_material_count = 3;
    if (has_trans_main_material_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_main_material_count());
    }

    // required int32 trans_material_template_id1 = 4;
    if (has_trans_material_template_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_template_id1());
    }

    // required int32 trans_material_count1 = 5;
    if (has_trans_material_count1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_count1());
    }

    // required int32 trans_material_template_id2 = 6;
    if (has_trans_material_template_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_template_id2());
    }

    // required int32 trans_material_count2 = 7;
    if (has_trans_material_count2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_count2());
    }

    // required int32 trans_material_template_id3 = 8;
    if (has_trans_material_template_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_template_id3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 trans_material_count3 = 9;
    if (has_trans_material_count3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_count3());
    }

    // required int32 trans_material_template_id4 = 10;
    if (has_trans_material_template_id4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_template_id4());
    }

    // required int32 trans_material_count4 = 11;
    if (has_trans_material_count4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans_material_count4());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFactoryMaterialTransInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFactoryMaterialTransInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFactoryMaterialTransInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFactoryMaterialTransInfo::MergeFrom(const mdFactoryMaterialTransInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
    if (from.has_trans_main_material_template_id()) {
      set_trans_main_material_template_id(from.trans_main_material_template_id());
    }
    if (from.has_trans_main_material_count()) {
      set_trans_main_material_count(from.trans_main_material_count());
    }
    if (from.has_trans_material_template_id1()) {
      set_trans_material_template_id1(from.trans_material_template_id1());
    }
    if (from.has_trans_material_count1()) {
      set_trans_material_count1(from.trans_material_count1());
    }
    if (from.has_trans_material_template_id2()) {
      set_trans_material_template_id2(from.trans_material_template_id2());
    }
    if (from.has_trans_material_count2()) {
      set_trans_material_count2(from.trans_material_count2());
    }
    if (from.has_trans_material_template_id3()) {
      set_trans_material_template_id3(from.trans_material_template_id3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_trans_material_count3()) {
      set_trans_material_count3(from.trans_material_count3());
    }
    if (from.has_trans_material_template_id4()) {
      set_trans_material_template_id4(from.trans_material_template_id4());
    }
    if (from.has_trans_material_count4()) {
      set_trans_material_count4(from.trans_material_count4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFactoryMaterialTransInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFactoryMaterialTransInfo::CopyFrom(const mdFactoryMaterialTransInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFactoryMaterialTransInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void mdFactoryMaterialTransInfo::Swap(mdFactoryMaterialTransInfo* other) {
  if (other != this) {
    std::swap(factory_id_, other->factory_id_);
    std::swap(trans_main_material_template_id_, other->trans_main_material_template_id_);
    std::swap(trans_main_material_count_, other->trans_main_material_count_);
    std::swap(trans_material_template_id1_, other->trans_material_template_id1_);
    std::swap(trans_material_count1_, other->trans_material_count1_);
    std::swap(trans_material_template_id2_, other->trans_material_template_id2_);
    std::swap(trans_material_count2_, other->trans_material_count2_);
    std::swap(trans_material_template_id3_, other->trans_material_template_id3_);
    std::swap(trans_material_count3_, other->trans_material_count3_);
    std::swap(trans_material_template_id4_, other->trans_material_template_id4_);
    std::swap(trans_material_count4_, other->trans_material_count4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFactoryMaterialTransInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFactoryMaterialTransInfo_descriptor_;
  metadata.reflection = mdFactoryMaterialTransInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdFactoryLimitInfo::kIdFieldNumber;
const int mdFactoryLimitInfo::kLimitTypeFieldNumber;
const int mdFactoryLimitInfo::kLimitCountFieldNumber;
const int mdFactoryLimitInfo::kLimitTimeTypeFieldNumber;
#endif  // !_MSC_VER

mdFactoryLimitInfo::mdFactoryLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdFactoryLimitInfo)
}

void mdFactoryLimitInfo::InitAsDefaultInstance() {
}

mdFactoryLimitInfo::mdFactoryLimitInfo(const mdFactoryLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdFactoryLimitInfo)
}

void mdFactoryLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  limit_type_ = 1;
  limit_count_ = 0;
  limit_time_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdFactoryLimitInfo::~mdFactoryLimitInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdFactoryLimitInfo)
  SharedDtor();
}

void mdFactoryLimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdFactoryLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdFactoryLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdFactoryLimitInfo_descriptor_;
}

const mdFactoryLimitInfo& mdFactoryLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdFactoryLimitInfo* mdFactoryLimitInfo::default_instance_ = NULL;

mdFactoryLimitInfo* mdFactoryLimitInfo::New() const {
  return new mdFactoryLimitInfo;
}

void mdFactoryLimitInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    limit_type_ = 1;
    limit_count_ = 0;
    limit_time_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdFactoryLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdFactoryLimitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit_type;
        break;
      }

      // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
      case 2: {
        if (tag == 16) {
         parse_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FactoryLimitType_IsValid(value)) {
            set_limit_type(static_cast< ::b2::protocol::commondata::FactoryLimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit_count;
        break;
      }

      // required int32 limit_count = 3;
      case 3: {
        if (tag == 24) {
         parse_limit_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_count_)));
          set_has_limit_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit_time_type;
        break;
      }

      // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 4;
      case 4: {
        if (tag == 32) {
         parse_limit_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FactoryLimitTimeType_IsValid(value)) {
            set_limit_time_type(static_cast< ::b2::protocol::commondata::FactoryLimitTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdFactoryLimitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdFactoryLimitInfo)
  return false;
#undef DO_
}

void mdFactoryLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdFactoryLimitInfo)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->limit_type(), output);
  }

  // required int32 limit_count = 3;
  if (has_limit_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit_count(), output);
  }

  // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 4;
  if (has_limit_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->limit_time_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdFactoryLimitInfo)
}

::google::protobuf::uint8* mdFactoryLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdFactoryLimitInfo)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->limit_type(), target);
  }

  // required int32 limit_count = 3;
  if (has_limit_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit_count(), target);
  }

  // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 4;
  if (has_limit_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->limit_time_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdFactoryLimitInfo)
  return target;
}

int mdFactoryLimitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->limit_type());
    }

    // required int32 limit_count = 3;
    if (has_limit_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_count());
    }

    // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 4;
    if (has_limit_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->limit_time_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdFactoryLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdFactoryLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdFactoryLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdFactoryLimitInfo::MergeFrom(const mdFactoryLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_limit_count()) {
      set_limit_count(from.limit_count());
    }
    if (from.has_limit_time_type()) {
      set_limit_time_type(from.limit_time_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdFactoryLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdFactoryLimitInfo::CopyFrom(const mdFactoryLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdFactoryLimitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdFactoryLimitInfo::Swap(mdFactoryLimitInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(limit_count_, other->limit_count_);
    std::swap(limit_time_type_, other->limit_time_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdFactoryLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdFactoryLimitInfo_descriptor_;
  metadata.reflection = mdFactoryLimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSealBoxInfo::kSealBoxTemplateIdFieldNumber;
const int mdSealBoxInfo::kRewardSlot1FieldNumber;
const int mdSealBoxInfo::kRewardSlot2FieldNumber;
const int mdSealBoxInfo::kRewardSlot3FieldNumber;
const int mdSealBoxInfo::kRewardSlot4FieldNumber;
const int mdSealBoxInfo::kRewardSlot5FieldNumber;
const int mdSealBoxInfo::kIsRateVisibleFieldNumber;
#endif  // !_MSC_VER

mdSealBoxInfo::mdSealBoxInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSealBoxInfo)
}

void mdSealBoxInfo::InitAsDefaultInstance() {
}

mdSealBoxInfo::mdSealBoxInfo(const mdSealBoxInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSealBoxInfo)
}

void mdSealBoxInfo::SharedCtor() {
  _cached_size_ = 0;
  seal_box_template_id_ = 0;
  reward_slot1_ = 0;
  reward_slot2_ = 0;
  reward_slot3_ = 0;
  reward_slot4_ = 0;
  reward_slot5_ = 0;
  is_rate_visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSealBoxInfo::~mdSealBoxInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSealBoxInfo)
  SharedDtor();
}

void mdSealBoxInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSealBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSealBoxInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSealBoxInfo_descriptor_;
}

const mdSealBoxInfo& mdSealBoxInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSealBoxInfo* mdSealBoxInfo::default_instance_ = NULL;

mdSealBoxInfo* mdSealBoxInfo::New() const {
  return new mdSealBoxInfo;
}

void mdSealBoxInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSealBoxInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(seal_box_template_id_, is_rate_visible_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSealBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSealBoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seal_box_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_box_template_id_)));
          set_has_seal_box_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_slot1;
        break;
      }

      // required int32 reward_slot1 = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_slot1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_slot1_)));
          set_has_reward_slot1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_slot2;
        break;
      }

      // required int32 reward_slot2 = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_slot2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_slot2_)));
          set_has_reward_slot2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_slot3;
        break;
      }

      // required int32 reward_slot3 = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_slot3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_slot3_)));
          set_has_reward_slot3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reward_slot4;
        break;
      }

      // required int32 reward_slot4 = 5;
      case 5: {
        if (tag == 40) {
         parse_reward_slot4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_slot4_)));
          set_has_reward_slot4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_reward_slot5;
        break;
      }

      // required int32 reward_slot5 = 6;
      case 6: {
        if (tag == 48) {
         parse_reward_slot5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_slot5_)));
          set_has_reward_slot5();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_rate_visible;
        break;
      }

      // required bool is_rate_visible = 7;
      case 7: {
        if (tag == 56) {
         parse_is_rate_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rate_visible_)));
          set_has_is_rate_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSealBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSealBoxInfo)
  return false;
#undef DO_
}

void mdSealBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSealBoxInfo)
  // required int32 seal_box_template_id = 1;
  if (has_seal_box_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seal_box_template_id(), output);
  }

  // required int32 reward_slot1 = 2;
  if (has_reward_slot1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward_slot1(), output);
  }

  // required int32 reward_slot2 = 3;
  if (has_reward_slot2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_slot2(), output);
  }

  // required int32 reward_slot3 = 4;
  if (has_reward_slot3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward_slot3(), output);
  }

  // required int32 reward_slot4 = 5;
  if (has_reward_slot4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_slot4(), output);
  }

  // required int32 reward_slot5 = 6;
  if (has_reward_slot5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reward_slot5(), output);
  }

  // required bool is_rate_visible = 7;
  if (has_is_rate_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_rate_visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSealBoxInfo)
}

::google::protobuf::uint8* mdSealBoxInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSealBoxInfo)
  // required int32 seal_box_template_id = 1;
  if (has_seal_box_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seal_box_template_id(), target);
  }

  // required int32 reward_slot1 = 2;
  if (has_reward_slot1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward_slot1(), target);
  }

  // required int32 reward_slot2 = 3;
  if (has_reward_slot2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_slot2(), target);
  }

  // required int32 reward_slot3 = 4;
  if (has_reward_slot3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward_slot3(), target);
  }

  // required int32 reward_slot4 = 5;
  if (has_reward_slot4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_slot4(), target);
  }

  // required int32 reward_slot5 = 6;
  if (has_reward_slot5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reward_slot5(), target);
  }

  // required bool is_rate_visible = 7;
  if (has_is_rate_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_rate_visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSealBoxInfo)
  return target;
}

int mdSealBoxInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seal_box_template_id = 1;
    if (has_seal_box_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_box_template_id());
    }

    // required int32 reward_slot1 = 2;
    if (has_reward_slot1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_slot1());
    }

    // required int32 reward_slot2 = 3;
    if (has_reward_slot2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_slot2());
    }

    // required int32 reward_slot3 = 4;
    if (has_reward_slot3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_slot3());
    }

    // required int32 reward_slot4 = 5;
    if (has_reward_slot4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_slot4());
    }

    // required int32 reward_slot5 = 6;
    if (has_reward_slot5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_slot5());
    }

    // required bool is_rate_visible = 7;
    if (has_is_rate_visible()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSealBoxInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSealBoxInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSealBoxInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSealBoxInfo::MergeFrom(const mdSealBoxInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seal_box_template_id()) {
      set_seal_box_template_id(from.seal_box_template_id());
    }
    if (from.has_reward_slot1()) {
      set_reward_slot1(from.reward_slot1());
    }
    if (from.has_reward_slot2()) {
      set_reward_slot2(from.reward_slot2());
    }
    if (from.has_reward_slot3()) {
      set_reward_slot3(from.reward_slot3());
    }
    if (from.has_reward_slot4()) {
      set_reward_slot4(from.reward_slot4());
    }
    if (from.has_reward_slot5()) {
      set_reward_slot5(from.reward_slot5());
    }
    if (from.has_is_rate_visible()) {
      set_is_rate_visible(from.is_rate_visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSealBoxInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSealBoxInfo::CopyFrom(const mdSealBoxInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSealBoxInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void mdSealBoxInfo::Swap(mdSealBoxInfo* other) {
  if (other != this) {
    std::swap(seal_box_template_id_, other->seal_box_template_id_);
    std::swap(reward_slot1_, other->reward_slot1_);
    std::swap(reward_slot2_, other->reward_slot2_);
    std::swap(reward_slot3_, other->reward_slot3_);
    std::swap(reward_slot4_, other->reward_slot4_);
    std::swap(reward_slot5_, other->reward_slot5_);
    std::swap(is_rate_visible_, other->is_rate_visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSealBoxInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSealBoxInfo_descriptor_;
  metadata.reflection = mdSealBoxInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSealBoxRewardInfo::kSealBoxRewardIdFieldNumber;
const int mdSealBoxRewardInfo::kMinFixedCountFieldNumber;
const int mdSealBoxRewardInfo::kMaxFixedCountFieldNumber;
const int mdSealBoxRewardInfo::kIsRecycleFieldNumber;
#endif  // !_MSC_VER

mdSealBoxRewardInfo::mdSealBoxRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSealBoxRewardInfo)
}

void mdSealBoxRewardInfo::InitAsDefaultInstance() {
}

mdSealBoxRewardInfo::mdSealBoxRewardInfo(const mdSealBoxRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSealBoxRewardInfo)
}

void mdSealBoxRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  seal_box_reward_id_ = 0;
  min_fixed_count_ = 0;
  max_fixed_count_ = 0;
  is_recycle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSealBoxRewardInfo::~mdSealBoxRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSealBoxRewardInfo)
  SharedDtor();
}

void mdSealBoxRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSealBoxRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSealBoxRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSealBoxRewardInfo_descriptor_;
}

const mdSealBoxRewardInfo& mdSealBoxRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSealBoxRewardInfo* mdSealBoxRewardInfo::default_instance_ = NULL;

mdSealBoxRewardInfo* mdSealBoxRewardInfo::New() const {
  return new mdSealBoxRewardInfo;
}

void mdSealBoxRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSealBoxRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seal_box_reward_id_, is_recycle_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSealBoxRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSealBoxRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seal_box_reward_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_box_reward_id_)));
          set_has_seal_box_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_fixed_count;
        break;
      }

      // required int32 min_fixed_count = 2;
      case 2: {
        if (tag == 16) {
         parse_min_fixed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_fixed_count_)));
          set_has_min_fixed_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_fixed_count;
        break;
      }

      // required int32 max_fixed_count = 3;
      case 3: {
        if (tag == 24) {
         parse_max_fixed_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_fixed_count_)));
          set_has_max_fixed_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_recycle;
        break;
      }

      // required bool is_recycle = 4;
      case 4: {
        if (tag == 32) {
         parse_is_recycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_recycle_)));
          set_has_is_recycle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSealBoxRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSealBoxRewardInfo)
  return false;
#undef DO_
}

void mdSealBoxRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSealBoxRewardInfo)
  // required int32 seal_box_reward_id = 1;
  if (has_seal_box_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seal_box_reward_id(), output);
  }

  // required int32 min_fixed_count = 2;
  if (has_min_fixed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_fixed_count(), output);
  }

  // required int32 max_fixed_count = 3;
  if (has_max_fixed_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_fixed_count(), output);
  }

  // required bool is_recycle = 4;
  if (has_is_recycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_recycle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSealBoxRewardInfo)
}

::google::protobuf::uint8* mdSealBoxRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSealBoxRewardInfo)
  // required int32 seal_box_reward_id = 1;
  if (has_seal_box_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seal_box_reward_id(), target);
  }

  // required int32 min_fixed_count = 2;
  if (has_min_fixed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_fixed_count(), target);
  }

  // required int32 max_fixed_count = 3;
  if (has_max_fixed_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_fixed_count(), target);
  }

  // required bool is_recycle = 4;
  if (has_is_recycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_recycle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSealBoxRewardInfo)
  return target;
}

int mdSealBoxRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seal_box_reward_id = 1;
    if (has_seal_box_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_box_reward_id());
    }

    // required int32 min_fixed_count = 2;
    if (has_min_fixed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_fixed_count());
    }

    // required int32 max_fixed_count = 3;
    if (has_max_fixed_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_fixed_count());
    }

    // required bool is_recycle = 4;
    if (has_is_recycle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSealBoxRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSealBoxRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSealBoxRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSealBoxRewardInfo::MergeFrom(const mdSealBoxRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seal_box_reward_id()) {
      set_seal_box_reward_id(from.seal_box_reward_id());
    }
    if (from.has_min_fixed_count()) {
      set_min_fixed_count(from.min_fixed_count());
    }
    if (from.has_max_fixed_count()) {
      set_max_fixed_count(from.max_fixed_count());
    }
    if (from.has_is_recycle()) {
      set_is_recycle(from.is_recycle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSealBoxRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSealBoxRewardInfo::CopyFrom(const mdSealBoxRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSealBoxRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void mdSealBoxRewardInfo::Swap(mdSealBoxRewardInfo* other) {
  if (other != this) {
    std::swap(seal_box_reward_id_, other->seal_box_reward_id_);
    std::swap(min_fixed_count_, other->min_fixed_count_);
    std::swap(max_fixed_count_, other->max_fixed_count_);
    std::swap(is_recycle_, other->is_recycle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSealBoxRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSealBoxRewardInfo_descriptor_;
  metadata.reflection = mdSealBoxRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int mdSealBoxRewardRateInfo::kSealBoxRewardIdFieldNumber;
const int mdSealBoxRewardRateInfo::kRewardTypeFieldNumber;
const int mdSealBoxRewardRateInfo::kTemplateIdFieldNumber;
const int mdSealBoxRewardRateInfo::kMinAmountFieldNumber;
const int mdSealBoxRewardRateInfo::kMaxAmountFieldNumber;
const int mdSealBoxRewardRateInfo::kGradeFieldNumber;
const int mdSealBoxRewardRateInfo::kGroupIdFieldNumber;
const int mdSealBoxRewardRateInfo::kEquipCategoryFieldNumber;
const int mdSealBoxRewardRateInfo::kEquipPositionFieldNumber;
const int mdSealBoxRewardRateInfo::kQualityFieldNumber;
const int mdSealBoxRewardRateInfo::kEnhanceLevelFieldNumber;
const int mdSealBoxRewardRateInfo::kSurpassCountFieldNumber;
const int mdSealBoxRewardRateInfo::kRewardRateFieldNumber;
const int mdSealBoxRewardRateInfo::kIsFixedRewardFieldNumber;
const int mdSealBoxRewardRateInfo::kFixedRewardRateFieldNumber;
const int mdSealBoxRewardRateInfo::kEffectGradeFieldNumber;
#endif  // !_MSC_VER

mdSealBoxRewardRateInfo::mdSealBoxRewardRateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
}

void mdSealBoxRewardRateInfo::InitAsDefaultInstance() {
}

mdSealBoxRewardRateInfo::mdSealBoxRewardRateInfo(const mdSealBoxRewardRateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
}

void mdSealBoxRewardRateInfo::SharedCtor() {
  _cached_size_ = 0;
  seal_box_reward_id_ = 0;
  reward_type_ = 1;
  template_id_ = 0;
  min_amount_ = 0;
  max_amount_ = 0;
  grade_ = 0;
  group_id_ = 1;
  equip_category_ = 0;
  equip_position_ = 0;
  quality_ = 0;
  enhance_level_ = 0;
  surpass_count_ = 0;
  reward_rate_ = 0;
  is_fixed_reward_ = false;
  fixed_reward_rate_ = 0;
  effect_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

mdSealBoxRewardRateInfo::~mdSealBoxRewardRateInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  SharedDtor();
}

void mdSealBoxRewardRateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void mdSealBoxRewardRateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* mdSealBoxRewardRateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return mdSealBoxRewardRateInfo_descriptor_;
}

const mdSealBoxRewardRateInfo& mdSealBoxRewardRateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MasterData_2eproto();
  return *default_instance_;
}

mdSealBoxRewardRateInfo* mdSealBoxRewardRateInfo::default_instance_ = NULL;

mdSealBoxRewardRateInfo* mdSealBoxRewardRateInfo::New() const {
  return new mdSealBoxRewardRateInfo;
}

void mdSealBoxRewardRateInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<mdSealBoxRewardRateInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(template_id_, grade_);
    seal_box_reward_id_ = 0;
    reward_type_ = 1;
    group_id_ = 1;
    equip_category_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(equip_position_, effect_grade_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool mdSealBoxRewardRateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seal_box_reward_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_box_reward_id_)));
          set_has_seal_box_reward_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // required .b2.protocol.commondata.RewardType reward_type = 2;
      case 2: {
        if (tag == 16) {
         parse_reward_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::RewardType_IsValid(value)) {
            set_reward_type(static_cast< ::b2::protocol::commondata::RewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 3;
      case 3: {
        if (tag == 24) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_min_amount;
        break;
      }

      // required int32 min_amount = 4;
      case 4: {
        if (tag == 32) {
         parse_min_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_amount_)));
          set_has_min_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_amount;
        break;
      }

      // required int32 max_amount = 5;
      case 5: {
        if (tag == 40) {
         parse_max_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_amount_)));
          set_has_max_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }

      // required int32 grade = 6;
      case 6: {
        if (tag == 48) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_group_id;
        break;
      }

      // required .b2.protocol.commondata.GroupPrefix group_id = 7;
      case 7: {
        if (tag == 56) {
         parse_group_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GroupPrefix_IsValid(value)) {
            set_group_id(static_cast< ::b2::protocol::commondata::GroupPrefix >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_equip_category;
        break;
      }

      // required .b2.protocol.commondata.EquipCategory equip_category = 8;
      case 8: {
        if (tag == 64) {
         parse_equip_category:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipCategory_IsValid(value)) {
            set_equip_category(static_cast< ::b2::protocol::commondata::EquipCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_equip_position;
        break;
      }

      // required .b2.protocol.commondata.EquipPosition equip_position = 9;
      case 9: {
        if (tag == 72) {
         parse_equip_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipPosition_IsValid(value)) {
            set_equip_position(static_cast< ::b2::protocol::commondata::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quality;
        break;
      }

      // required int32 quality = 10;
      case 10: {
        if (tag == 80) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 11;
      case 11: {
        if (tag == 88) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_surpass_count;
        break;
      }

      // required int32 surpass_count = 12;
      case 12: {
        if (tag == 96) {
         parse_surpass_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surpass_count_)));
          set_has_surpass_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_reward_rate;
        break;
      }

      // required int32 reward_rate = 13;
      case 13: {
        if (tag == 104) {
         parse_reward_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_rate_)));
          set_has_reward_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_fixed_reward;
        break;
      }

      // required bool is_fixed_reward = 14;
      case 14: {
        if (tag == 112) {
         parse_is_fixed_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fixed_reward_)));
          set_has_is_fixed_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_fixed_reward_rate;
        break;
      }

      // required int32 fixed_reward_rate = 15;
      case 15: {
        if (tag == 120) {
         parse_fixed_reward_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_reward_rate_)));
          set_has_fixed_reward_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_effect_grade;
        break;
      }

      // required int32 effect_grade = 16;
      case 16: {
        if (tag == 128) {
         parse_effect_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_grade_)));
          set_has_effect_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  return false;
#undef DO_
}

void mdSealBoxRewardRateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  // required int32 seal_box_reward_id = 1;
  if (has_seal_box_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seal_box_reward_id(), output);
  }

  // required .b2.protocol.commondata.RewardType reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reward_type(), output);
  }

  // required int32 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->template_id(), output);
  }

  // required int32 min_amount = 4;
  if (has_min_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->min_amount(), output);
  }

  // required int32 max_amount = 5;
  if (has_max_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_amount(), output);
  }

  // required int32 grade = 6;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->grade(), output);
  }

  // required .b2.protocol.commondata.GroupPrefix group_id = 7;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->group_id(), output);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 8;
  if (has_equip_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->equip_category(), output);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 9;
  if (has_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->equip_position(), output);
  }

  // required int32 quality = 10;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->quality(), output);
  }

  // required int32 enhance_level = 11;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->enhance_level(), output);
  }

  // required int32 surpass_count = 12;
  if (has_surpass_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->surpass_count(), output);
  }

  // required int32 reward_rate = 13;
  if (has_reward_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->reward_rate(), output);
  }

  // required bool is_fixed_reward = 14;
  if (has_is_fixed_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_fixed_reward(), output);
  }

  // required int32 fixed_reward_rate = 15;
  if (has_fixed_reward_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fixed_reward_rate(), output);
  }

  // required int32 effect_grade = 16;
  if (has_effect_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->effect_grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
}

::google::protobuf::uint8* mdSealBoxRewardRateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  // required int32 seal_box_reward_id = 1;
  if (has_seal_box_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seal_box_reward_id(), target);
  }

  // required .b2.protocol.commondata.RewardType reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reward_type(), target);
  }

  // required int32 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->template_id(), target);
  }

  // required int32 min_amount = 4;
  if (has_min_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->min_amount(), target);
  }

  // required int32 max_amount = 5;
  if (has_max_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_amount(), target);
  }

  // required int32 grade = 6;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->grade(), target);
  }

  // required .b2.protocol.commondata.GroupPrefix group_id = 7;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->group_id(), target);
  }

  // required .b2.protocol.commondata.EquipCategory equip_category = 8;
  if (has_equip_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->equip_category(), target);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 9;
  if (has_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->equip_position(), target);
  }

  // required int32 quality = 10;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->quality(), target);
  }

  // required int32 enhance_level = 11;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->enhance_level(), target);
  }

  // required int32 surpass_count = 12;
  if (has_surpass_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->surpass_count(), target);
  }

  // required int32 reward_rate = 13;
  if (has_reward_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->reward_rate(), target);
  }

  // required bool is_fixed_reward = 14;
  if (has_is_fixed_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_fixed_reward(), target);
  }

  // required int32 fixed_reward_rate = 15;
  if (has_fixed_reward_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->fixed_reward_rate(), target);
  }

  // required int32 effect_grade = 16;
  if (has_effect_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->effect_grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.masterdata.mdSealBoxRewardRateInfo)
  return target;
}

int mdSealBoxRewardRateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seal_box_reward_id = 1;
    if (has_seal_box_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_box_reward_id());
    }

    // required .b2.protocol.commondata.RewardType reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // required int32 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 min_amount = 4;
    if (has_min_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_amount());
    }

    // required int32 max_amount = 5;
    if (has_max_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_amount());
    }

    // required int32 grade = 6;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required .b2.protocol.commondata.GroupPrefix group_id = 7;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_id());
    }

    // required .b2.protocol.commondata.EquipCategory equip_category = 8;
    if (has_equip_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_category());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .b2.protocol.commondata.EquipPosition equip_position = 9;
    if (has_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_position());
    }

    // required int32 quality = 10;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 enhance_level = 11;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 surpass_count = 12;
    if (has_surpass_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surpass_count());
    }

    // required int32 reward_rate = 13;
    if (has_reward_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_rate());
    }

    // required bool is_fixed_reward = 14;
    if (has_is_fixed_reward()) {
      total_size += 1 + 1;
    }

    // required int32 fixed_reward_rate = 15;
    if (has_fixed_reward_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_reward_rate());
    }

    // required int32 effect_grade = 16;
    if (has_effect_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void mdSealBoxRewardRateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const mdSealBoxRewardRateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const mdSealBoxRewardRateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void mdSealBoxRewardRateInfo::MergeFrom(const mdSealBoxRewardRateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seal_box_reward_id()) {
      set_seal_box_reward_id(from.seal_box_reward_id());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_min_amount()) {
      set_min_amount(from.min_amount());
    }
    if (from.has_max_amount()) {
      set_max_amount(from.max_amount());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_equip_category()) {
      set_equip_category(from.equip_category());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_equip_position()) {
      set_equip_position(from.equip_position());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_surpass_count()) {
      set_surpass_count(from.surpass_count());
    }
    if (from.has_reward_rate()) {
      set_reward_rate(from.reward_rate());
    }
    if (from.has_is_fixed_reward()) {
      set_is_fixed_reward(from.is_fixed_reward());
    }
    if (from.has_fixed_reward_rate()) {
      set_fixed_reward_rate(from.fixed_reward_rate());
    }
    if (from.has_effect_grade()) {
      set_effect_grade(from.effect_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void mdSealBoxRewardRateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mdSealBoxRewardRateInfo::CopyFrom(const mdSealBoxRewardRateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mdSealBoxRewardRateInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void mdSealBoxRewardRateInfo::Swap(mdSealBoxRewardRateInfo* other) {
  if (other != this) {
    std::swap(seal_box_reward_id_, other->seal_box_reward_id_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(template_id_, other->template_id_);
    std::swap(min_amount_, other->min_amount_);
    std::swap(max_amount_, other->max_amount_);
    std::swap(grade_, other->grade_);
    std::swap(group_id_, other->group_id_);
    std::swap(equip_category_, other->equip_category_);
    std::swap(equip_position_, other->equip_position_);
    std::swap(quality_, other->quality_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(surpass_count_, other->surpass_count_);
    std::swap(reward_rate_, other->reward_rate_);
    std::swap(is_fixed_reward_, other->is_fixed_reward_);
    std::swap(fixed_reward_rate_, other->fixed_reward_rate_);
    std::swap(effect_grade_, other->effect_grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata mdSealBoxRewardRateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = mdSealBoxRewardRateInfo_descriptor_;
  metadata.reflection = mdSealBoxRewardRateInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterdata
}  // namespace protocol
}  // namespace b2

// @@protoc_insertion_point(global_scope)
