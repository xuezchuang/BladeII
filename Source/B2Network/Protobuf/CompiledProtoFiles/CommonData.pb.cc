// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommonData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#pragma warning(disable:4125)

namespace b2 {
namespace protocol {
namespace commondata {

namespace {

const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* Version_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Version_reflection_ = NULL;
const ::google::protobuf::Descriptor* Protocol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Protocol_reflection_ = NULL;
const ::google::protobuf::Descriptor* Credential_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Credential_reflection_ = NULL;
const ::google::protobuf::Descriptor* Endpoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Endpoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountBlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountBlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalAccount_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalAccount_STATUS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WorldAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightAccount_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PresetNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PresetNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* Character_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Character_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Character_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LightCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightCharacter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LightCharacter_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CharacterSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Friend_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInviteRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInviteRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Item_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Item_CharacterType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SealSlotState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SealSlotState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Costume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Costume_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Costume_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Costume_CharacterType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Totem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Totem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Totem_CharacterType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TotemSubOptionDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotemSubOptionDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotemRefineState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotemRefineState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TotemRefineState_Refinestatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Inventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Inventory_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InventoryCountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InventoryCountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemPreset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemPreset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Aether_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Aether_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Aether_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Aether_TIER_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Aether_CharacterType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Aether_SetOptionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CharacterSetOptionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterSetOptionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillQuickSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillQuickSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_reflection_ = NULL;
const ::google::protobuf::Descriptor* RawReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardRandomCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardRandomCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestInfo_QuestSlotType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionInfo_MissionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MissionInfo_MissionStateType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MissionCompletePointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionCompletePointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Guild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Guild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Guild_JoinOption_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Guild_InviteState_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuildRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildMember_Rank_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberCandidate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberCandidate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFormation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleFormation_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BattleFormation_BuffType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BattleFormationBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleFormationBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleEntry_SlotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleEntry_SlotData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildBattleEntry_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildBattleResult_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildBattleState_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMercenary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMercenary_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchMaking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchMaking_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchMaking_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchMaking_STATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Invitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invitation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Invitation_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchInfo_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MatchStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ranking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ranking_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRanker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRanker_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchRanker_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchRanker_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DimensionRankingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DimensionRankingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* DimensionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DimensionStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Room_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Room_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Room_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Room_ACCESS_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RoomLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomLocation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamBattleEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamBattleEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchOpenPeriodInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchOpenPeriodInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DropData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DropData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* FairyStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FairyStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relic_reflection_ = NULL;
const ::google::protobuf::Descriptor* RollingBanner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RollingBanner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_PeriodicPackageState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_PeriodicPackageState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_FlatRatePackageBonusState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_FlatRatePackageBonusState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_LevelUpPackageMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_LevelUpPackageMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_ReachLevelPackageMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_ReachLevelPackageMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_BuyResultInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_BuyResultInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_DrawPriceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_MileageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_BuyPriceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_ProductType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_MarkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_ShopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Shop_RestrictType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MagicShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopProduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopProduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopMileage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopMileage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopBuyManage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopBuyManage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopProductMark_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopProductMark_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketPurchaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketPurchaseInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MarketPurchaseInfo_STATE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CollectionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectionSetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionSetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaidRankingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaidRankingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventAttendanceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventAttendanceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginnerAttendanceStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginnerAttendanceStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DuelRewardBoxStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DuelRewardBoxStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MatchResult_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UnitySkillMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitySkillMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitySkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitySkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitySkillAwakenMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitySkillAwakenMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentsModeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentsModeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContentsOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContentsOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssaultBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssaultBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomCharacter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCharacter_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointShopEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointShopEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointShopEventRewardHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointShopEventRewardHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* GemPurchaseEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GemPurchaseEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelUpEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelUpEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeasonMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeasonMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeasonMissionEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeasonMissionEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageClearEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageClearEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockChatUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockChatUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* TenLotteryEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TenLotteryEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallOfFame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallOfFame_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallOfFameUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallOfFameUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallOfFameReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallOfFameReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* HallOfFamePraise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HallOfFamePraise_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpendGemEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpendGemEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TenLotterySavingsStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TenLotterySavingsStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiceEventMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiceEventMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* DiceEventStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DiceEventStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonationPointRewardState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonationPointRewardState_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonationPresent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonationPresent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DonationJobState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DonationJobState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DonationJobState_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FactoryLimitStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactoryLimitStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactoryPeriodicStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactoryPeriodicStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactoryResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactoryResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsealBoxReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsealBoxReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldLocation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldLocation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FriendInviteRewardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemQuality_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SealSlotOpenPriceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SealPriceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TotemEquipSlot_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GroupPrefix_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MainQuestType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RewardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RewardPushType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StageBuffOptionFlags_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StageRepeatMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StageDifficulty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StageClearProperty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailAttachType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailPresentAttachType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailSourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailSenderType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DayOfWeek_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AttributeChange_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ModeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LotteryGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectionItemState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CollectionCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RaidType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DailyAttendanceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DuelMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RewardBoxGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemGetRouteType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UnitySkillEventType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentsModeState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContentsMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EventCategory_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HotTimeBuffType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportModeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DiceEventCellType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DonationConsumableType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DonationCostType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FairyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TotemGrade_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TotemBasePrefix_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TotemRefinePrefix_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TotemRefineCostType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ExchangePriceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FactoryResultType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FactoryLimitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FactoryLimitTimeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FactoryVisibleType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CommonData_2eproto() {
  protobuf_AddDesc_CommonData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CommonData.proto");
  GOOGLE_CHECK(file != NULL);
  Result_descriptor_ = file->message_type(0);
  static const int Result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, error_code_),
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  Version_descriptor_ = file->message_type(1);
  static const int Version_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, major_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, minor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, revision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, changelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, build_num_),
  };
  Version_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Version_descriptor_,
      Version::default_instance_,
      Version_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Version, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Version));
  Protocol_descriptor_ = file->message_type(2);
  static const int Protocol_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, master_data_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, common_data_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, session_message_hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, channel_message_hash_),
  };
  Protocol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Protocol_descriptor_,
      Protocol::default_instance_,
      Protocol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Protocol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Protocol));
  Credential_descriptor_ = file->message_type(3);
  static const int Credential_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, platform_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, platform_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, lang_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, push_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, ad_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, access_token_),
  };
  Credential_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Credential_descriptor_,
      Credential::default_instance_,
      Credential_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Credential, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Credential));
  Endpoint_descriptor_ = file->message_type(4);
  static const int Endpoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, port_),
  };
  Endpoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Endpoint_descriptor_,
      Endpoint::default_instance_,
      Endpoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Endpoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Endpoint));
  AccountBlockInfo_descriptor_ = file->message_type(5);
  static const int AccountBlockInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, block_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, block_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, block_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, end_time_),
  };
  AccountBlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountBlockInfo_descriptor_,
      AccountBlockInfo::default_instance_,
      AccountBlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountBlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountBlockInfo));
  GlobalAccount_descriptor_ = file->message_type(6);
  static const int GlobalAccount_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAccount, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAccount, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAccount, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAccount, status_),
  };
  GlobalAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalAccount_descriptor_,
      GlobalAccount::default_instance_,
      GlobalAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalAccount));
  GlobalAccount_TYPE_descriptor_ = GlobalAccount_descriptor_->enum_type(0);
  GlobalAccount_STATUS_descriptor_ = GlobalAccount_descriptor_->enum_type(1);
  WorldAccount_descriptor_ = file->message_type(7);
  static const int WorldAccount_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, blade_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, blade_point_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, blade_point_charge_lefttime_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, inventory_aether_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, inventory_consumable_slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, dark_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, stage_boost_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, shop_ten_lottery_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, fame_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, social_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, last_play_stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, last_clear_stage_id_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, last_clear_stage_id_hard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, last_clear_stage_id_very_hard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, last_clear_stage_id_hell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, attendance_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, attendance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, nextattendance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, pvp_match_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, pvp_match_star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, assault_match_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, assault_match_star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, daily_play_time_in_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, daily_play_time_reward_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, daily_play_time_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, rest_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, next_fairy_gift_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, leave_guild_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, kicked_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, gold_buff_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, exp_buff_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, gold_buff_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, exp_buff_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, stage_auto_clear_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, exchange_count_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, exchange_count_gem_),
  };
  WorldAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldAccount_descriptor_,
      WorldAccount::default_instance_,
      WorldAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldAccount));
  LightAccount_descriptor_ = file->message_type(8);
  static const int LightAccount_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, blade_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, dark_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, social_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, stage_boost_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, shop_ten_lottery_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, fame_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, stage_auto_clear_ticket_),
  };
  LightAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightAccount_descriptor_,
      LightAccount::default_instance_,
      LightAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightAccount));
  AccountInfo_descriptor_ = file->message_type(9);
  static const int AccountInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, characters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, equip_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, equip_costumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, equip_totems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, mount_aethers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, relics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, wing_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, guild_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, item_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, unity_skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, fairies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, pvp_match_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, pvp_match_star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, assault_match_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, assault_match_star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, character_presets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, guild_id_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  PresetNum_descriptor_ = file->message_type(10);
  static const int PresetNum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetNum, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetNum, item_preset_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetNum, skill_preset_num_),
  };
  PresetNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PresetNum_descriptor_,
      PresetNum::default_instance_,
      PresetNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PresetNum));
  Character_descriptor_ = file->message_type(11);
  static const int Character_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, style_face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, style_hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, style_skin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, exp_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, skill_point_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, inventory_item_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, inventory_item_slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, rank_node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, rank_node_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, wing_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, wing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, wing_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, helmet_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, aether_offense_set_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, aether_defense_set_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, remain_skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, skill_quick_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, unity_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, unity_skill_awaken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, total_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, costume_weapon_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, costume_hat_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, costume_armor_visible_),
  };
  Character_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Character_descriptor_,
      Character::default_instance_,
      Character_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Character, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Character));
  Character_TYPE_descriptor_ = Character_descriptor_->enum_type(0);
  LightCharacter_descriptor_ = file->message_type(12);
  static const int LightCharacter_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, exp_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, changed_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, remain_skill_point_),
  };
  LightCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LightCharacter_descriptor_,
      LightCharacter::default_instance_,
      LightCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LightCharacter));
  LightCharacter_TYPE_descriptor_ = LightCharacter_descriptor_->enum_type(0);
  CharacterSummary_descriptor_ = file->message_type(13);
  static const int CharacterSummary_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, character_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, is_online_),
  };
  CharacterSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterSummary_descriptor_,
      CharacterSummary::default_instance_,
      CharacterSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterSummary));
  User_descriptor_ = file->message_type(14);
  static const int User_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, character_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, mark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, mark_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, mark_bg_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, mark_bg_color_),
  };
  User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(User));
  Friend_descriptor_ = file->message_type(15);
  static const int Friend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, last_social_point_send_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, raid_penalty_remove_time_),
  };
  Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Friend_descriptor_,
      Friend::default_instance_,
      Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Friend));
  FriendInviteRewardInfo_descriptor_ = file->message_type(16);
  static const int FriendInviteRewardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, platform_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, invite_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, joiner_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, invite_reward_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, joiner_reward_mask_),
  };
  FriendInviteRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInviteRewardInfo_descriptor_,
      FriendInviteRewardInfo::default_instance_,
      FriendInviteRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInviteRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInviteRewardInfo));
  Item_descriptor_ = file->message_type(17);
  static const int Item_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, random_option_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, random_option_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, random_option_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, random_option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, random_option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, random_option_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, surpass_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, md_main_attribute_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, open_seal_slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, seal_slot_states_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Item_TYPE_descriptor_ = Item_descriptor_->enum_type(0);
  Item_CharacterType_descriptor_ = Item_descriptor_->enum_type(1);
  SealSlotState_descriptor_ = file->message_type(18);
  static const int SealSlotState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealSlotState, seal_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealSlotState, opened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealSlotState, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealSlotState, option_value_),
  };
  SealSlotState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SealSlotState_descriptor_,
      SealSlotState::default_instance_,
      SealSlotState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealSlotState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SealSlotState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SealSlotState));
  Costume_descriptor_ = file->message_type(19);
  static const int Costume_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, inventory_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, random_option_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, random_option_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, random_option_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, random_option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, random_option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, random_option_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, surpass_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, md_main_attribute_value_),
  };
  Costume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Costume_descriptor_,
      Costume::default_instance_,
      Costume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Costume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Costume));
  Costume_TYPE_descriptor_ = Costume_descriptor_->enum_type(0);
  Costume_CharacterType_descriptor_ = Costume_descriptor_->enum_type(1);
  Totem_descriptor_ = file->message_type(20);
  static const int Totem_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, equip_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, main_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, main_option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, sub_option_details_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, refine_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, refine_try_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, gold_success_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, piece_success_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, is_new_),
  };
  Totem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Totem_descriptor_,
      Totem::default_instance_,
      Totem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Totem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Totem));
  Totem_CharacterType_descriptor_ = Totem_descriptor_->enum_type(0);
  TotemSubOptionDetail_descriptor_ = file->message_type(21);
  static const int TotemSubOptionDetail_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemSubOptionDetail, option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemSubOptionDetail, option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemSubOptionDetail, refine_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemSubOptionDetail, refine_states_),
  };
  TotemSubOptionDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotemSubOptionDetail_descriptor_,
      TotemSubOptionDetail::default_instance_,
      TotemSubOptionDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemSubOptionDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemSubOptionDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotemSubOptionDetail));
  TotemRefineState_descriptor_ = file->message_type(22);
  static const int TotemRefineState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemRefineState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemRefineState, status_),
  };
  TotemRefineState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotemRefineState_descriptor_,
      TotemRefineState::default_instance_,
      TotemRefineState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemRefineState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotemRefineState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotemRefineState));
  TotemRefineState_Refinestatus_descriptor_ = TotemRefineState_descriptor_->enum_type(0);
  Inventory_descriptor_ = file->message_type(23);
  static const int Inventory_offsets_[1] = {
  };
  Inventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inventory_descriptor_,
      Inventory::default_instance_,
      Inventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inventory));
  Inventory_TYPE_descriptor_ = Inventory_descriptor_->enum_type(0);
  InventoryCountInfo_descriptor_ = file->message_type(24);
  static const int InventoryCountInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryCountInfo, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryCountInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryCountInfo, max_count_),
  };
  InventoryCountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InventoryCountInfo_descriptor_,
      InventoryCountInfo::default_instance_,
      InventoryCountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryCountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryCountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InventoryCountInfo));
  ItemPreset_descriptor_ = file->message_type(25);
  static const int ItemPreset_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, preset_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, equip_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, item_id_),
  };
  ItemPreset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemPreset_descriptor_,
      ItemPreset::default_instance_,
      ItemPreset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemPreset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemPreset));
  Aether_descriptor_ = file->message_type(26);
  static const int Aether_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, tier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, main_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, main_option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_id3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_enhance_count1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_enhance_count2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, sub_option_enhance_count3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, locked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, is_new_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, calc_main_option_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, calc_sub_option_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, calc_sub_option_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, calc_sub_option_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, calc_tier_),
  };
  Aether_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Aether_descriptor_,
      Aether::default_instance_,
      Aether_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aether, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Aether));
  Aether_TYPE_descriptor_ = Aether_descriptor_->enum_type(0);
  Aether_TIER_descriptor_ = Aether_descriptor_->enum_type(1);
  Aether_CharacterType_descriptor_ = Aether_descriptor_->enum_type(2);
  Aether_SetOptionType_descriptor_ = Aether_descriptor_->enum_type(3);
  CharacterSetOptionInfo_descriptor_ = file->message_type(27);
  static const int CharacterSetOptionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSetOptionInfo, selected_offense_set_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSetOptionInfo, selected_defense_set_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSetOptionInfo, defense_set_option_ids_),
  };
  CharacterSetOptionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterSetOptionInfo_descriptor_,
      CharacterSetOptionInfo::default_instance_,
      CharacterSetOptionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSetOptionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterSetOptionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterSetOptionInfo));
  SkillQuickSlot_descriptor_ = file->message_type(28);
  static const int SkillQuickSlot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, left_skill_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, skill_total_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, using_skill_id_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, using_skill_id_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, using_skill_id_3_),
  };
  SkillQuickSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillQuickSlot_descriptor_,
      SkillQuickSlot::default_instance_,
      SkillQuickSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillQuickSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillQuickSlot));
  Skill_descriptor_ = file->message_type(29);
  static const int Skill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, skill_level_),
  };
  Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_descriptor_,
      Skill::default_instance_,
      Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill));
  RawReward_descriptor_ = file->message_type(30);
  static const int RawReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawReward, count_),
  };
  RawReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawReward_descriptor_,
      RawReward::default_instance_,
      RawReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawReward));
  Reward_descriptor_ = file->message_type(31);
  static const int Reward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, raw_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, totem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, aether_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, light_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, light_characters_),
  };
  Reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Reward_descriptor_,
      Reward::default_instance_,
      Reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Reward));
  RewardRandomCount_descriptor_ = file->message_type(32);
  static const int RewardRandomCount_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRandomCount, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRandomCount, min_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRandomCount, max_count_),
  };
  RewardRandomCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardRandomCount_descriptor_,
      RewardRandomCount::default_instance_,
      RewardRandomCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRandomCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardRandomCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardRandomCount));
  QuestInfo_descriptor_ = file->message_type(33);
  static const int QuestInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, progress_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, state_),
  };
  QuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestInfo_descriptor_,
      QuestInfo::default_instance_,
      QuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestInfo));
  QuestInfo_QuestSlotType_descriptor_ = QuestInfo_descriptor_->enum_type(0);
  MissionInfo_descriptor_ = file->message_type(34);
  static const int MissionInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, mission_state_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, progress_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, completed_step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, rewarded_step_),
  };
  MissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionInfo_descriptor_,
      MissionInfo::default_instance_,
      MissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionInfo));
  MissionInfo_MissionType_descriptor_ = MissionInfo_descriptor_->enum_type(0);
  MissionInfo_MissionStateType_descriptor_ = MissionInfo_descriptor_->enum_type(1);
  MissionCompletePointInfo_descriptor_ = file->message_type(35);
  static const int MissionCompletePointInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCompletePointInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCompletePointInfo, completepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCompletePointInfo, reward_indexs_),
  };
  MissionCompletePointInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionCompletePointInfo_descriptor_,
      MissionCompletePointInfo::default_instance_,
      MissionCompletePointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCompletePointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionCompletePointInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionCompletePointInfo));
  Guild_descriptor_ = file->message_type(36);
  static const int Guild_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, master_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, master_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, max_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, join_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, mark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, mark_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, mark_bg_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, mark_bg_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, cur_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, master_elected_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, season_obtain_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, season_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, season_ranking_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, members_avg_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, total_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, join_guild_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, turn_obtain_medal_),
  };
  Guild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Guild_descriptor_,
      Guild::default_instance_,
      Guild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Guild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Guild));
  Guild_JoinOption_descriptor_ = Guild_descriptor_->enum_type(0);
  Guild_InviteState_descriptor_ = Guild_descriptor_->enum_type(1);
  GuildRanking_descriptor_ = file->message_type(37);
  static const int GuildRanking_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, total_obtain_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, total_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, members_avg_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, mark_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, mark_bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, mark_bg_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, gm_nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, max_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, cur_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, exp_),
  };
  GuildRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRanking_descriptor_,
      GuildRanking::default_instance_,
      GuildRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRanking));
  GuildMember_descriptor_ = file->message_type(38);
  static const int GuildMember_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, character_summary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, total_support_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, today_support_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, total_donation_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, today_donation_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, raid_penalty_remove_time_),
  };
  GuildMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMember_descriptor_,
      GuildMember::default_instance_,
      GuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMember));
  GuildMember_Rank_descriptor_ = GuildMember_descriptor_->enum_type(0);
  GuildMemberCandidate_descriptor_ = file->message_type(39);
  static const int GuildMemberCandidate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberCandidate, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberCandidate, invite_state_),
  };
  GuildMemberCandidate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberCandidate_descriptor_,
      GuildMemberCandidate::default_instance_,
      GuildMemberCandidate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberCandidate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberCandidate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberCandidate));
  BattleFormation_descriptor_ = file->message_type(40);
  static const int BattleFormation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, formation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, formation_level_),
  };
  BattleFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFormation_descriptor_,
      BattleFormation::default_instance_,
      BattleFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFormation));
  BattleFormation_TYPE_descriptor_ = BattleFormation_descriptor_->enum_type(0);
  BattleFormation_BuffType_descriptor_ = BattleFormation_descriptor_->enum_type(1);
  BattleFormationBuff_descriptor_ = file->message_type(41);
  static const int BattleFormationBuff_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, buff_type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, buff_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, buff_type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, buff_value2_),
  };
  BattleFormationBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleFormationBuff_descriptor_,
      BattleFormationBuff::default_instance_,
      BattleFormationBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleFormationBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleFormationBuff));
  GuildBattleEntry_descriptor_ = file->message_type(42);
  static const int GuildBattleEntry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry, slots_),
  };
  GuildBattleEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleEntry_descriptor_,
      GuildBattleEntry::default_instance_,
      GuildBattleEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleEntry));
  GuildBattleEntry_SlotData_descriptor_ = GuildBattleEntry_descriptor_->nested_type(0);
  static const int GuildBattleEntry_SlotData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry_SlotData, slot_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry_SlotData, entry_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry_SlotData, entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry_SlotData, level_),
  };
  GuildBattleEntry_SlotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleEntry_SlotData_descriptor_,
      GuildBattleEntry_SlotData::default_instance_,
      GuildBattleEntry_SlotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry_SlotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleEntry_SlotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleEntry_SlotData));
  GuildBattleEntry_TYPE_descriptor_ = GuildBattleEntry_descriptor_->enum_type(0);
  GuildBattleResult_descriptor_ = file->message_type(43);
  static const int GuildBattleResult_offsets_[1] = {
  };
  GuildBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleResult_descriptor_,
      GuildBattleResult::default_instance_,
      GuildBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleResult));
  GuildBattleResult_TYPE_descriptor_ = GuildBattleResult_descriptor_->enum_type(0);
  GuildBattleState_descriptor_ = file->message_type(44);
  static const int GuildBattleState_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, season_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, current_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, end_time_),
  };
  GuildBattleState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleState_descriptor_,
      GuildBattleState::default_instance_,
      GuildBattleState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleState));
  GuildBattleState_TYPE_descriptor_ = GuildBattleState_descriptor_->enum_type(0);
  GuildBattleHistory_descriptor_ = file->message_type(45);
  static const int GuildBattleHistory_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, obtain_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, medal_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, battle_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, attack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_obtain_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_mark_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_mark_bg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_mark_bg_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_medal_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, target_attack_count_),
  };
  GuildBattleHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleHistory_descriptor_,
      GuildBattleHistory::default_instance_,
      GuildBattleHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleHistory));
  GuildBattleRecord_descriptor_ = file->message_type(46);
  static const int GuildBattleRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, draw_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, lose_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, total_obtain_medal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, ranking_total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, season_id_),
  };
  GuildBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBattleRecord_descriptor_,
      GuildBattleRecord::default_instance_,
      GuildBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBattleRecord));
  GuildSkill_descriptor_ = file->message_type(47);
  static const int GuildSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, buff_end_time_),
  };
  GuildSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSkill_descriptor_,
      GuildSkill::default_instance_,
      GuildSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSkill));
  GuildInfo_descriptor_ = file->message_type(48);
  static const int GuildInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, mark_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, mark_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, mark_bg_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, mark_bg_color_),
  };
  GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfo_descriptor_,
      GuildInfo::default_instance_,
      GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfo));
  GuildMercenary_descriptor_ = file->message_type(49);
  static const int GuildMercenary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMercenary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMercenary, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMercenary, exp_),
  };
  GuildMercenary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMercenary_descriptor_,
      GuildMercenary::default_instance_,
      GuildMercenary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMercenary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMercenary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMercenary));
  MatchMaking_descriptor_ = file->message_type(50);
  static const int MatchMaking_offsets_[1] = {
  };
  MatchMaking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchMaking_descriptor_,
      MatchMaking::default_instance_,
      MatchMaking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchMaking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchMaking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchMaking));
  MatchMaking_TYPE_descriptor_ = MatchMaking_descriptor_->enum_type(0);
  MatchMaking_STATE_descriptor_ = MatchMaking_descriptor_->enum_type(1);
  Invitation_descriptor_ = file->message_type(51);
  static const int Invitation_offsets_[1] = {
  };
  Invitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invitation_descriptor_,
      Invitation::default_instance_,
      Invitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invitation));
  Invitation_TYPE_descriptor_ = Invitation_descriptor_->enum_type(0);
  MatchInfo_descriptor_ = file->message_type(52);
  static const int MatchInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, match_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, opponent_type_),
  };
  MatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchInfo_descriptor_,
      MatchInfo::default_instance_,
      MatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchInfo));
  MatchInfo_TYPE_descriptor_ = MatchInfo_descriptor_->enum_type(0);
  MatchStatus_descriptor_ = file->message_type(53);
  static const int MatchStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStatus, battle_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStatus, battle_star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStatus, continue_win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStatus, continue_win_max_),
  };
  MatchStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchStatus_descriptor_,
      MatchStatus::default_instance_,
      MatchStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchStatus));
  Ranking_descriptor_ = file->message_type(54);
  static const int Ranking_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, total_ranker_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, pvp_replay_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, replay_size_compressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, replay_size_uncompressed_),
  };
  Ranking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ranking_descriptor_,
      Ranking::default_instance_,
      Ranking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ranking));
  MatchRanker_descriptor_ = file->message_type(55);
  static const int MatchRanker_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, battle_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, battle_star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, best_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, clear_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, total_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, pvp_replay_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, replay_size_compressed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, replay_size_uncompressed_),
  };
  MatchRanker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRanker_descriptor_,
      MatchRanker::default_instance_,
      MatchRanker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRanker));
  MatchRanker_Entry_descriptor_ = MatchRanker_descriptor_->nested_type(0);
  static const int MatchRanker_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker_Entry, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker_Entry, level_),
  };
  MatchRanker_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchRanker_Entry_descriptor_,
      MatchRanker_Entry::default_instance_,
      MatchRanker_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchRanker_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchRanker_Entry));
  RankingReward_descriptor_ = file->message_type(56);
  static const int RankingReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, star_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, ranker_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, initial_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, rewards_),
  };
  RankingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankingReward_descriptor_,
      RankingReward::default_instance_,
      RankingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankingReward));
  DimensionRankingReward_descriptor_ = file->message_type(57);
  static const int DimensionRankingReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, best_difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, best_clear_time_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, ranker_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, rewards_),
  };
  DimensionRankingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DimensionRankingReward_descriptor_,
      DimensionRankingReward::default_instance_,
      DimensionRankingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionRankingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DimensionRankingReward));
  DimensionStatus_descriptor_ = file->message_type(58);
  static const int DimensionStatus_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, best_difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, best_clear_time_millis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, best_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, best_character_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, best_total_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, best_record_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, top_difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, last_difficulty_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, last_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, daily_clear_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, daily_clear_count_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, daily_count_init_time_),
  };
  DimensionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DimensionStatus_descriptor_,
      DimensionStatus::default_instance_,
      DimensionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DimensionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DimensionStatus));
  Room_descriptor_ = file->message_type(59);
  static const int Room_offsets_[1] = {
  };
  Room_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Room_descriptor_,
      Room::default_instance_,
      Room_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Room, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Room));
  Room_TYPE_descriptor_ = Room_descriptor_->enum_type(0);
  Room_ACCESS_descriptor_ = Room_descriptor_->enum_type(1);
  RoomLocation_descriptor_ = file->message_type(60);
  static const int RoomLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLocation, channel_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLocation, room_id_),
  };
  RoomLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomLocation_descriptor_,
      RoomLocation::default_instance_,
      RoomLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomLocation));
  TeamBattleEntry_descriptor_ = file->message_type(61);
  static const int TeamBattleEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamBattleEntry, formation_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamBattleEntry, character_slot_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamBattleEntry, character_slot_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamBattleEntry, character_slot_3_),
  };
  TeamBattleEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamBattleEntry_descriptor_,
      TeamBattleEntry::default_instance_,
      TeamBattleEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamBattleEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamBattleEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamBattleEntry));
  MatchOpenPeriodInfo_descriptor_ = file->message_type(62);
  static const int MatchOpenPeriodInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, day_of_week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, begin_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, begin_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, end_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, end_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, raid_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, assault_type_),
  };
  MatchOpenPeriodInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchOpenPeriodInfo_descriptor_,
      MatchOpenPeriodInfo::default_instance_,
      MatchOpenPeriodInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchOpenPeriodInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchOpenPeriodInfo));
  KillMonsterInfo_descriptor_ = file->message_type(63);
  static const int KillMonsterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterInfo, monster_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterInfo, monster_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterInfo, kill_count_),
  };
  KillMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillMonsterInfo_descriptor_,
      KillMonsterInfo::default_instance_,
      KillMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillMonsterInfo));
  DropData_descriptor_ = file->message_type(64);
  static const int DropData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropData, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropData, count_),
  };
  DropData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DropData_descriptor_,
      DropData::default_instance_,
      DropData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DropData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DropData));
  MailItemInfo_descriptor_ = file->message_type(65);
  static const int MailItemInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, item_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, totem_),
  };
  MailItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailItemInfo_descriptor_,
      MailItemInfo::default_instance_,
      MailItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailItemInfo));
  WingOption_descriptor_ = file->message_type(66);
  static const int WingOption_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingOption, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingOption, option_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingOption, level_),
  };
  WingOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingOption_descriptor_,
      WingOption::default_instance_,
      WingOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingOption));
  FairyStatus_descriptor_ = file->message_type(67);
  static const int FairyStatus_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, fairy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, enhance_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, activated_bless_option_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, bless_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, option_value_),
  };
  FairyStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FairyStatus_descriptor_,
      FairyStatus::default_instance_,
      FairyStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FairyStatus));
  Relic_descriptor_ = file->message_type(68);
  static const int Relic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relic, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relic, relic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relic, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relic, enhance_level_),
  };
  Relic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relic_descriptor_,
      Relic::default_instance_,
      Relic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relic));
  RollingBanner_descriptor_ = file->message_type(69);
  static const int RollingBanner_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, sub_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, banner_img_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, banner_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, web_url_),
  };
  RollingBanner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RollingBanner_descriptor_,
      RollingBanner::default_instance_,
      RollingBanner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RollingBanner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RollingBanner));
  ConfigData_descriptor_ = file->message_type(70);
  static const int ConfigData_offsets_[62] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, skill_point_buy_price_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_skill_point_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, skill_point_reset_price_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, need_cash_for_extend_inventory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, increase_inventory_slot_per_buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_inventory_slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_friend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_send_ask_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_receive_ask_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, cooltime_for_send_social_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_delete_friend_count_for_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_social_point_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, add_social_point_for_send_to_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, add_social_point_for_receive_from_friend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, stage_buff_rate_for_increase_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, stage_buff_rate_for_increase_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, stage_buff_rate_for_boost_game_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_set_up_gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, default_max_guild_member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_invite_guild_count_for_account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, invite_guild_expire_period_by_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_raid_count_per_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, update_guild_gold_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_master_logout_limit_period_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_battle_time_limit_sec_client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, hero_tower_sweep_reward_count_per_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, assault_resurrection_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, pvp_match_point_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, pvp_match_point_charge_period_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, team_match_point_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, team_match_point_charge_period_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, item_random_option_change_cost_dark_crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, item_preset_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, skill_quick_slot_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, assault_mvp_point_to_open_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, duel_reward_challenge_max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_support_cool_time_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_support_max_count_for_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, rest_max_time_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, rest_time_second_per_one_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_mercenary_donation_max_count_for_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_rejoin_wait_time_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, character_level_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, match_continuous_win_count_for_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, hero_tower_free_ticket_count_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, counter_dungeon_daily_enter_count_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_chat_block_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, min_floor_for_hero_tower_ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, raid_guild_bonus_count_member_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, raid_guild_bonus_count_member_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, raid_guild_bonus_count_member_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, show_review_inducement_popup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_open_stage_difficulty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, item_random_option_change_cost_cash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, event_dice_free_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, event_dice_point_per_one_dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, max_costume_inventory_slot_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, guild_master_change_period_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, exchange_item_count_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, exchange_item_count_gem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, lobby_style_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, advanced_rank_level_),
  };
  ConfigData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigData_descriptor_,
      ConfigData::default_instance_,
      ConfigData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigData));
  Shop_descriptor_ = file->message_type(71);
  static const int Shop_offsets_[1] = {
  };
  Shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_descriptor_,
      Shop::default_instance_,
      Shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop));
  Shop_PeriodicPackageState_descriptor_ = Shop_descriptor_->nested_type(0);
  static const int Shop_PeriodicPackageState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_PeriodicPackageState, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_PeriodicPackageState, end_pay_time_),
  };
  Shop_PeriodicPackageState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_PeriodicPackageState_descriptor_,
      Shop_PeriodicPackageState::default_instance_,
      Shop_PeriodicPackageState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_PeriodicPackageState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_PeriodicPackageState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_PeriodicPackageState));
  Shop_FlatRatePackageBonusState_descriptor_ = Shop_descriptor_->nested_type(1);
  static const int Shop_FlatRatePackageBonusState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_FlatRatePackageBonusState, current_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_FlatRatePackageBonusState, weekly_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_FlatRatePackageBonusState, monthly_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_FlatRatePackageBonusState, reward_state_),
  };
  Shop_FlatRatePackageBonusState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_FlatRatePackageBonusState_descriptor_,
      Shop_FlatRatePackageBonusState::default_instance_,
      Shop_FlatRatePackageBonusState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_FlatRatePackageBonusState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_FlatRatePackageBonusState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_FlatRatePackageBonusState));
  Shop_LevelUpPackageMission_descriptor_ = Shop_descriptor_->nested_type(2);
  static const int Shop_LevelUpPackageMission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_LevelUpPackageMission, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_LevelUpPackageMission, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_LevelUpPackageMission, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_LevelUpPackageMission, state_),
  };
  Shop_LevelUpPackageMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_LevelUpPackageMission_descriptor_,
      Shop_LevelUpPackageMission::default_instance_,
      Shop_LevelUpPackageMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_LevelUpPackageMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_LevelUpPackageMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_LevelUpPackageMission));
  Shop_ReachLevelPackageMission_descriptor_ = Shop_descriptor_->nested_type(3);
  static const int Shop_ReachLevelPackageMission_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, package_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, expire_time_),
  };
  Shop_ReachLevelPackageMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_ReachLevelPackageMission_descriptor_,
      Shop_ReachLevelPackageMission::default_instance_,
      Shop_ReachLevelPackageMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_ReachLevelPackageMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_ReachLevelPackageMission));
  Shop_BuyResultInfo_descriptor_ = Shop_descriptor_->nested_type(4);
  static const int Shop_BuyResultInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, add_products_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, shop_buy_manages_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, buy_product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, periodic_package_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, flat_rate_package_bonus_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, level_up_package_missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, reach_level_package_mission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, mileage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, current_mileage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, costumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, totems_),
  };
  Shop_BuyResultInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_BuyResultInfo_descriptor_,
      Shop_BuyResultInfo::default_instance_,
      Shop_BuyResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop_BuyResultInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop_BuyResultInfo));
  Shop_DrawPriceType_descriptor_ = Shop_descriptor_->enum_type(0);
  Shop_MileageType_descriptor_ = Shop_descriptor_->enum_type(1);
  Shop_BuyPriceType_descriptor_ = Shop_descriptor_->enum_type(2);
  Shop_ProductType_descriptor_ = Shop_descriptor_->enum_type(3);
  Shop_MarkType_descriptor_ = Shop_descriptor_->enum_type(4);
  Shop_ShopType_descriptor_ = Shop_descriptor_->enum_type(5);
  Shop_RestrictType_descriptor_ = Shop_descriptor_->enum_type(6);
  MagicShop_descriptor_ = file->message_type(72);
  static const int MagicShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicShop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicShop, is_purchased_),
  };
  MagicShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MagicShop_descriptor_,
      MagicShop::default_instance_,
      MagicShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MagicShop));
  ShopLottery_descriptor_ = file->message_type(73);
  static const int ShopLottery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopLottery, draw_price_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopLottery, is_continuous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopLottery, next_free_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopLottery, lottery_count_),
  };
  ShopLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopLottery_descriptor_,
      ShopLottery::default_instance_,
      ShopLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopLottery));
  ShopProduct_descriptor_ = file->message_type(74);
  static const int ShopProduct_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProduct, product_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProduct, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProduct, product_count_),
  };
  ShopProduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopProduct_descriptor_,
      ShopProduct::default_instance_,
      ShopProduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopProduct));
  ShopMileage_descriptor_ = file->message_type(75);
  static const int ShopMileage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMileage, shop_mileage_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMileage, mileage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMileage, reward_index_),
  };
  ShopMileage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopMileage_descriptor_,
      ShopMileage::default_instance_,
      ShopMileage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMileage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopMileage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopMileage));
  ShopBuyManage_descriptor_ = file->message_type(76);
  static const int ShopBuyManage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyManage, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyManage, buy_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyManage, updated_time_),
  };
  ShopBuyManage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopBuyManage_descriptor_,
      ShopBuyManage::default_instance_,
      ShopBuyManage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyManage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyManage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopBuyManage));
  ShopProductMark_descriptor_ = file->message_type(77);
  static const int ShopProductMark_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProductMark, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProductMark, mark_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProductMark, sales_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProductMark, sales_end_time_),
  };
  ShopProductMark_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopProductMark_descriptor_,
      ShopProductMark::default_instance_,
      ShopProductMark_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProductMark, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopProductMark, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopProductMark));
  MarketPurchaseInfo_descriptor_ = file->message_type(78);
  static const int MarketPurchaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, market_product_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, developer_payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, purchase_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, bonus_increase_rate_),
  };
  MarketPurchaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketPurchaseInfo_descriptor_,
      MarketPurchaseInfo::default_instance_,
      MarketPurchaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketPurchaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketPurchaseInfo));
  MarketPurchaseInfo_STATE_descriptor_ = MarketPurchaseInfo_descriptor_->enum_type(0);
  CollectionItem_descriptor_ = file->message_type(79);
  static const int CollectionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionItem, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionItem, collect_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionItem, is_new_item_),
  };
  CollectionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectionItem_descriptor_,
      CollectionItem::default_instance_,
      CollectionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectionItem));
  CollectionSetItem_descriptor_ = file->message_type(80);
  static const int CollectionSetItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionSetItem, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionSetItem, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionSetItem, character_type_),
  };
  CollectionSetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectionSetItem_descriptor_,
      CollectionSetItem::default_instance_,
      CollectionSetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionSetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionSetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectionSetItem));
  RaidRankingReward_descriptor_ = file->message_type(81);
  static const int RaidRankingReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidRankingReward, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidRankingReward, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidRankingReward, item_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidRankingReward, is_bonus_),
  };
  RaidRankingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaidRankingReward_descriptor_,
      RaidRankingReward::default_instance_,
      RaidRankingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidRankingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaidRankingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaidRankingReward));
  EventAttendanceStatus_descriptor_ = file->message_type(82);
  static const int EventAttendanceStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAttendanceStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAttendanceStatus, attendance_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAttendanceStatus, last_attendance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAttendanceStatus, next_attendance_time_),
  };
  EventAttendanceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventAttendanceStatus_descriptor_,
      EventAttendanceStatus::default_instance_,
      EventAttendanceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAttendanceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventAttendanceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventAttendanceStatus));
  BeginnerAttendanceStatus_descriptor_ = file->message_type(83);
  static const int BeginnerAttendanceStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, attendance_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, last_attendance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, next_attendance_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, total_attendance_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, finish_time_),
  };
  BeginnerAttendanceStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginnerAttendanceStatus_descriptor_,
      BeginnerAttendanceStatus::default_instance_,
      BeginnerAttendanceStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginnerAttendanceStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginnerAttendanceStatus));
  DuelRewardBoxStatus_descriptor_ = file->message_type(84);
  static const int DuelRewardBoxStatus_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, is_reward_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, box_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, upgrade_win_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, defeat_count_),
  };
  DuelRewardBoxStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DuelRewardBoxStatus_descriptor_,
      DuelRewardBoxStatus::default_instance_,
      DuelRewardBoxStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DuelRewardBoxStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DuelRewardBoxStatus));
  MatchResult_descriptor_ = file->message_type(85);
  static const int MatchResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResult, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResult, match_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResult, result_),
  };
  MatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchResult_descriptor_,
      MatchResult::default_instance_,
      MatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchResult));
  MatchResult_TYPE_descriptor_ = MatchResult_descriptor_->enum_type(0);
  UnitySkillMission_descriptor_ = file->message_type(86);
  static const int UnitySkillMission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillMission, main_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillMission, unity_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillMission, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillMission, state_),
  };
  UnitySkillMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitySkillMission_descriptor_,
      UnitySkillMission::default_instance_,
      UnitySkillMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitySkillMission));
  UnitySkill_descriptor_ = file->message_type(87);
  static const int UnitySkill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkill, main_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkill, unity_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkill, step_),
  };
  UnitySkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitySkill_descriptor_,
      UnitySkill::default_instance_,
      UnitySkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitySkill));
  UnitySkillAwakenMission_descriptor_ = file->message_type(88);
  static const int UnitySkillAwakenMission_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillAwakenMission, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillAwakenMission, mission_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillAwakenMission, try_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillAwakenMission, completed_),
  };
  UnitySkillAwakenMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnitySkillAwakenMission_descriptor_,
      UnitySkillAwakenMission::default_instance_,
      UnitySkillAwakenMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillAwakenMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitySkillAwakenMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitySkillAwakenMission));
  ContentsModeInfo_descriptor_ = file->message_type(89);
  static const int ContentsModeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsModeInfo, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsModeInfo, state_),
  };
  ContentsModeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentsModeInfo_descriptor_,
      ContentsModeInfo::default_instance_,
      ContentsModeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsModeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsModeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentsModeInfo));
  ContentsOpen_descriptor_ = file->message_type(90);
  static const int ContentsOpen_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsOpen, mode_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsOpen, opened_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsOpen, stage_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsOpen, tutorial_id_),
  };
  ContentsOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContentsOpen_descriptor_,
      ContentsOpen::default_instance_,
      ContentsOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContentsOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContentsOpen));
  CharacterPower_descriptor_ = file->message_type(91);
  static const int CharacterPower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPower, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPower, total_power_),
  };
  CharacterPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterPower_descriptor_,
      CharacterPower::default_instance_,
      CharacterPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterPower));
  AssaultBattleInfo_descriptor_ = file->message_type(92);
  static const int AssaultBattleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssaultBattleInfo, kill_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssaultBattleInfo, death_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssaultBattleInfo, damage_),
  };
  AssaultBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssaultBattleInfo_descriptor_,
      AssaultBattleInfo::default_instance_,
      AssaultBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssaultBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssaultBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssaultBattleInfo));
  RoomCharacter_descriptor_ = file->message_type(93);
  static const int RoomCharacter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCharacter, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCharacter, character_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCharacter, character_level_),
  };
  RoomCharacter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomCharacter_descriptor_,
      RoomCharacter::default_instance_,
      RoomCharacter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCharacter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCharacter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomCharacter));
  AdminMessage_descriptor_ = file->message_type(94);
  static const int AdminMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminMessage, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminMessage, display_time_),
  };
  AdminMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminMessage_descriptor_,
      AdminMessage::default_instance_,
      AdminMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminMessage));
  PointEventStatus_descriptor_ = file->message_type(95);
  static const int PointEventStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointEventStatus, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointEventStatus, reward_state_value_),
  };
  PointEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointEventStatus_descriptor_,
      PointEventStatus::default_instance_,
      PointEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointEventStatus));
  PointShopEventStatus_descriptor_ = file->message_type(96);
  static const int PointShopEventStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventStatus, point_),
  };
  PointShopEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointShopEventStatus_descriptor_,
      PointShopEventStatus::default_instance_,
      PointShopEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointShopEventStatus));
  PointShopEventRewardHistory_descriptor_ = file->message_type(97);
  static const int PointShopEventRewardHistory_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventRewardHistory, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventRewardHistory, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventRewardHistory, total_reward_count_),
  };
  PointShopEventRewardHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointShopEventRewardHistory_descriptor_,
      PointShopEventRewardHistory::default_instance_,
      PointShopEventRewardHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventRewardHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointShopEventRewardHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointShopEventRewardHistory));
  GemPurchaseEventStatus_descriptor_ = file->message_type(98);
  static const int GemPurchaseEventStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemPurchaseEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemPurchaseEventStatus, gem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemPurchaseEventStatus, reward_state_value_),
  };
  GemPurchaseEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GemPurchaseEventStatus_descriptor_,
      GemPurchaseEventStatus::default_instance_,
      GemPurchaseEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemPurchaseEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GemPurchaseEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GemPurchaseEventStatus));
  LevelUpEventInfo_descriptor_ = file->message_type(99);
  static const int LevelUpEventInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpEventInfo, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpEventInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpEventInfo, state_),
  };
  LevelUpEventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelUpEventInfo_descriptor_,
      LevelUpEventInfo::default_instance_,
      LevelUpEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpEventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelUpEventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelUpEventInfo));
  SeasonMissionInfo_descriptor_ = file->message_type(100);
  static const int SeasonMissionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, progress_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, state_),
  };
  SeasonMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeasonMissionInfo_descriptor_,
      SeasonMissionInfo::default_instance_,
      SeasonMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeasonMissionInfo));
  SeasonMissionEventStatus_descriptor_ = file->message_type(101);
  static const int SeasonMissionEventStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionEventStatus, attendance_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionEventStatus, next_attendance_time_),
  };
  SeasonMissionEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeasonMissionEventStatus_descriptor_,
      SeasonMissionEventStatus::default_instance_,
      SeasonMissionEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonMissionEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeasonMissionEventStatus));
  StageClearEventStatus_descriptor_ = file->message_type(102);
  static const int StageClearEventStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageClearEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageClearEventStatus, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageClearEventStatus, state_),
  };
  StageClearEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageClearEventStatus_descriptor_,
      StageClearEventStatus::default_instance_,
      StageClearEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageClearEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageClearEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageClearEventStatus));
  BlockChatUser_descriptor_ = file->message_type(103);
  static const int BlockChatUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChatUser, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChatUser, nickname_),
  };
  BlockChatUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockChatUser_descriptor_,
      BlockChatUser::default_instance_,
      BlockChatUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChatUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockChatUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockChatUser));
  TenLotteryEventStatus_descriptor_ = file->message_type(104);
  static const int TenLotteryEventStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotteryEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotteryEventStatus, lottery_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotteryEventStatus, rewarded_indexs_),
  };
  TenLotteryEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TenLotteryEventStatus_descriptor_,
      TenLotteryEventStatus::default_instance_,
      TenLotteryEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotteryEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotteryEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TenLotteryEventStatus));
  HallOfFame_descriptor_ = file->message_type(105);
  static const int HallOfFame_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, praised_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, match_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, match_start_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, mvp_count_),
  };
  HallOfFame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallOfFame_descriptor_,
      HallOfFame::default_instance_,
      HallOfFame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallOfFame));
  HallOfFameUser_descriptor_ = file->message_type(106);
  static const int HallOfFameUser_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, equip_items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, equip_costumes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, equip_totems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, wing_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, wing_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, wing_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, helmet_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, costume_weapon_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, costume_hat_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, costume_armor_visible_),
  };
  HallOfFameUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallOfFameUser_descriptor_,
      HallOfFameUser::default_instance_,
      HallOfFameUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallOfFameUser));
  HallOfFameReward_descriptor_ = file->message_type(107);
  static const int HallOfFameReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameReward, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameReward, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameReward, rewards_),
  };
  HallOfFameReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallOfFameReward_descriptor_,
      HallOfFameReward::default_instance_,
      HallOfFameReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFameReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallOfFameReward));
  HallOfFamePraise_descriptor_ = file->message_type(108);
  static const int HallOfFamePraise_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFamePraise, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFamePraise, praise_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFamePraise, max_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFamePraise, target_account_id_),
  };
  HallOfFamePraise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HallOfFamePraise_descriptor_,
      HallOfFamePraise::default_instance_,
      HallOfFamePraise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFamePraise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HallOfFamePraise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HallOfFamePraise));
  SpendGemEventStatus_descriptor_ = file->message_type(109);
  static const int SpendGemEventStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpendGemEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpendGemEventStatus, spend_gem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpendGemEventStatus, reward_state_value_),
  };
  SpendGemEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpendGemEventStatus_descriptor_,
      SpendGemEventStatus::default_instance_,
      SpendGemEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpendGemEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpendGemEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpendGemEventStatus));
  TenLotterySavingsStatus_descriptor_ = file->message_type(110);
  static const int TenLotterySavingsStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotterySavingsStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotterySavingsStatus, current_point_),
  };
  TenLotterySavingsStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TenLotterySavingsStatus_descriptor_,
      TenLotterySavingsStatus::default_instance_,
      TenLotterySavingsStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotterySavingsStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TenLotterySavingsStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TenLotterySavingsStatus));
  DiceEventMission_descriptor_ = file->message_type(111);
  static const int DiceEventMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventMission, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventMission, progress_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventMission, state_),
  };
  DiceEventMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiceEventMission_descriptor_,
      DiceEventMission::default_instance_,
      DiceEventMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiceEventMission));
  DiceEventStatus_descriptor_ = file->message_type(112);
  static const int DiceEventStatus_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, free_dice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, missions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, finish_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, buy_point_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, roll_dice_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, mileage_reward_value_),
  };
  DiceEventStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DiceEventStatus_descriptor_,
      DiceEventStatus::default_instance_,
      DiceEventStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiceEventStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DiceEventStatus));
  DonationPointRewardState_descriptor_ = file->message_type(113);
  static const int DonationPointRewardState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPointRewardState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPointRewardState, rewarded_),
  };
  DonationPointRewardState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonationPointRewardState_descriptor_,
      DonationPointRewardState::default_instance_,
      DonationPointRewardState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPointRewardState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPointRewardState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonationPointRewardState));
  DonationPresent_descriptor_ = file->message_type(114);
  static const int DonationPresent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPresent, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPresent, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPresent, donation_consumable_type_),
  };
  DonationPresent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonationPresent_descriptor_,
      DonationPresent::default_instance_,
      DonationPresent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPresent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationPresent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonationPresent));
  DonationJobState_descriptor_ = file->message_type(115);
  static const int DonationJobState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationJobState, donation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationJobState, current_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationJobState, completed_),
  };
  DonationJobState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DonationJobState_descriptor_,
      DonationJobState::default_instance_,
      DonationJobState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationJobState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DonationJobState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DonationJobState));
  DonationJobState_TYPE_descriptor_ = DonationJobState_descriptor_->enum_type(0);
  FactoryLimitStatus_descriptor_ = file->message_type(116);
  static const int FactoryLimitStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryLimitStatus, limit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryLimitStatus, limit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryLimitStatus, limit_time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryLimitStatus, left_count_),
  };
  FactoryLimitStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactoryLimitStatus_descriptor_,
      FactoryLimitStatus::default_instance_,
      FactoryLimitStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryLimitStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryLimitStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactoryLimitStatus));
  FactoryPeriodicStatus_descriptor_ = file->message_type(117);
  static const int FactoryPeriodicStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryPeriodicStatus, factory_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryPeriodicStatus, preview_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryPeriodicStatus, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryPeriodicStatus, end_time_),
  };
  FactoryPeriodicStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactoryPeriodicStatus_descriptor_,
      FactoryPeriodicStatus::default_instance_,
      FactoryPeriodicStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryPeriodicStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryPeriodicStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactoryPeriodicStatus));
  FactoryResult_descriptor_ = file->message_type(118);
  static const int FactoryResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryResult, factory_result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryResult, make_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryResult, bonus_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryResult, refund_item_),
  };
  FactoryResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactoryResult_descriptor_,
      FactoryResult::default_instance_,
      FactoryResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactoryResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactoryResult));
  UnsealBoxReward_descriptor_ = file->message_type(119);
  static const int UnsealBoxReward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, effect_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, totem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, aether_),
  };
  UnsealBoxReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsealBoxReward_descriptor_,
      UnsealBoxReward::default_instance_,
      UnsealBoxReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsealBoxReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsealBoxReward));
  WorldLocation_descriptor_ = file->message_type(120);
  static const int WorldLocation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLocation, channel_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLocation, world_id_),
  };
  WorldLocation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldLocation_descriptor_,
      WorldLocation::default_instance_,
      WorldLocation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLocation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLocation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldLocation));
  StatusCode_descriptor_ = file->enum_type(0);
  FriendInviteRewardType_descriptor_ = file->enum_type(1);
  ItemQuality_descriptor_ = file->enum_type(2);
  SealSlotOpenPriceType_descriptor_ = file->enum_type(3);
  SealPriceType_descriptor_ = file->enum_type(4);
  TotemEquipSlot_descriptor_ = file->enum_type(5);
  EquipPosition_descriptor_ = file->enum_type(6);
  GroupPrefix_descriptor_ = file->enum_type(7);
  QuestType_descriptor_ = file->enum_type(8);
  MainQuestType_descriptor_ = file->enum_type(9);
  RewardType_descriptor_ = file->enum_type(10);
  RewardPushType_descriptor_ = file->enum_type(11);
  StageBuffOptionFlags_descriptor_ = file->enum_type(12);
  StageRepeatMode_descriptor_ = file->enum_type(13);
  StageDifficulty_descriptor_ = file->enum_type(14);
  StageClearProperty_descriptor_ = file->enum_type(15);
  MailCategory_descriptor_ = file->enum_type(16);
  MailAttachType_descriptor_ = file->enum_type(17);
  MailPresentAttachType_descriptor_ = file->enum_type(18);
  MailSourceType_descriptor_ = file->enum_type(19);
  MailSenderType_descriptor_ = file->enum_type(20);
  DayOfWeek_descriptor_ = file->enum_type(21);
  AttributeChange_descriptor_ = file->enum_type(22);
  ModeType_descriptor_ = file->enum_type(23);
  EquipCategory_descriptor_ = file->enum_type(24);
  LotteryGrade_descriptor_ = file->enum_type(25);
  CollectionItemState_descriptor_ = file->enum_type(26);
  CollectionCategory_descriptor_ = file->enum_type(27);
  RaidType_descriptor_ = file->enum_type(28);
  DailyAttendanceType_descriptor_ = file->enum_type(29);
  DuelMode_descriptor_ = file->enum_type(30);
  RewardBoxGrade_descriptor_ = file->enum_type(31);
  ItemGetRouteType_descriptor_ = file->enum_type(32);
  UnitySkillEventType_descriptor_ = file->enum_type(33);
  ContentsModeState_descriptor_ = file->enum_type(34);
  ContentsMode_descriptor_ = file->enum_type(35);
  EventCategory_descriptor_ = file->enum_type(36);
  HotTimeBuffType_descriptor_ = file->enum_type(37);
  ReportModeType_descriptor_ = file->enum_type(38);
  DiceEventCellType_descriptor_ = file->enum_type(39);
  DonationConsumableType_descriptor_ = file->enum_type(40);
  DonationCostType_descriptor_ = file->enum_type(41);
  FairyType_descriptor_ = file->enum_type(42);
  TotemGrade_descriptor_ = file->enum_type(43);
  TotemBasePrefix_descriptor_ = file->enum_type(44);
  TotemRefinePrefix_descriptor_ = file->enum_type(45);
  TotemRefineCostType_descriptor_ = file->enum_type(46);
  ExchangePriceType_descriptor_ = file->enum_type(47);
  FactoryResultType_descriptor_ = file->enum_type(48);
  FactoryLimitType_descriptor_ = file->enum_type(49);
  FactoryLimitTimeType_descriptor_ = file->enum_type(50);
  FactoryVisibleType_descriptor_ = file->enum_type(51);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CommonData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Version_descriptor_, &Version::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Protocol_descriptor_, &Protocol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Credential_descriptor_, &Credential::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Endpoint_descriptor_, &Endpoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountBlockInfo_descriptor_, &AccountBlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalAccount_descriptor_, &GlobalAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldAccount_descriptor_, &WorldAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightAccount_descriptor_, &LightAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PresetNum_descriptor_, &PresetNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Character_descriptor_, &Character::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LightCharacter_descriptor_, &LightCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterSummary_descriptor_, &CharacterSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Friend_descriptor_, &Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInviteRewardInfo_descriptor_, &FriendInviteRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SealSlotState_descriptor_, &SealSlotState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Costume_descriptor_, &Costume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Totem_descriptor_, &Totem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotemSubOptionDetail_descriptor_, &TotemSubOptionDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotemRefineState_descriptor_, &TotemRefineState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inventory_descriptor_, &Inventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InventoryCountInfo_descriptor_, &InventoryCountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemPreset_descriptor_, &ItemPreset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Aether_descriptor_, &Aether::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterSetOptionInfo_descriptor_, &CharacterSetOptionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillQuickSlot_descriptor_, &SkillQuickSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_descriptor_, &Skill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawReward_descriptor_, &RawReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Reward_descriptor_, &Reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardRandomCount_descriptor_, &RewardRandomCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestInfo_descriptor_, &QuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionInfo_descriptor_, &MissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionCompletePointInfo_descriptor_, &MissionCompletePointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Guild_descriptor_, &Guild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRanking_descriptor_, &GuildRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMember_descriptor_, &GuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberCandidate_descriptor_, &GuildMemberCandidate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFormation_descriptor_, &BattleFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleFormationBuff_descriptor_, &BattleFormationBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleEntry_descriptor_, &GuildBattleEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleEntry_SlotData_descriptor_, &GuildBattleEntry_SlotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleResult_descriptor_, &GuildBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleState_descriptor_, &GuildBattleState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleHistory_descriptor_, &GuildBattleHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBattleRecord_descriptor_, &GuildBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSkill_descriptor_, &GuildSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfo_descriptor_, &GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMercenary_descriptor_, &GuildMercenary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchMaking_descriptor_, &MatchMaking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invitation_descriptor_, &Invitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchInfo_descriptor_, &MatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchStatus_descriptor_, &MatchStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ranking_descriptor_, &Ranking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRanker_descriptor_, &MatchRanker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchRanker_Entry_descriptor_, &MatchRanker_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankingReward_descriptor_, &RankingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DimensionRankingReward_descriptor_, &DimensionRankingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DimensionStatus_descriptor_, &DimensionStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Room_descriptor_, &Room::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomLocation_descriptor_, &RoomLocation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamBattleEntry_descriptor_, &TeamBattleEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchOpenPeriodInfo_descriptor_, &MatchOpenPeriodInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillMonsterInfo_descriptor_, &KillMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DropData_descriptor_, &DropData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailItemInfo_descriptor_, &MailItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingOption_descriptor_, &WingOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FairyStatus_descriptor_, &FairyStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relic_descriptor_, &Relic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RollingBanner_descriptor_, &RollingBanner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigData_descriptor_, &ConfigData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_descriptor_, &Shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_PeriodicPackageState_descriptor_, &Shop_PeriodicPackageState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_FlatRatePackageBonusState_descriptor_, &Shop_FlatRatePackageBonusState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_LevelUpPackageMission_descriptor_, &Shop_LevelUpPackageMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_ReachLevelPackageMission_descriptor_, &Shop_ReachLevelPackageMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_BuyResultInfo_descriptor_, &Shop_BuyResultInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MagicShop_descriptor_, &MagicShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopLottery_descriptor_, &ShopLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopProduct_descriptor_, &ShopProduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopMileage_descriptor_, &ShopMileage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopBuyManage_descriptor_, &ShopBuyManage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopProductMark_descriptor_, &ShopProductMark::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketPurchaseInfo_descriptor_, &MarketPurchaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectionItem_descriptor_, &CollectionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectionSetItem_descriptor_, &CollectionSetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaidRankingReward_descriptor_, &RaidRankingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventAttendanceStatus_descriptor_, &EventAttendanceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginnerAttendanceStatus_descriptor_, &BeginnerAttendanceStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DuelRewardBoxStatus_descriptor_, &DuelRewardBoxStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchResult_descriptor_, &MatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitySkillMission_descriptor_, &UnitySkillMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitySkill_descriptor_, &UnitySkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitySkillAwakenMission_descriptor_, &UnitySkillAwakenMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentsModeInfo_descriptor_, &ContentsModeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContentsOpen_descriptor_, &ContentsOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterPower_descriptor_, &CharacterPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssaultBattleInfo_descriptor_, &AssaultBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomCharacter_descriptor_, &RoomCharacter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminMessage_descriptor_, &AdminMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointEventStatus_descriptor_, &PointEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointShopEventStatus_descriptor_, &PointShopEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointShopEventRewardHistory_descriptor_, &PointShopEventRewardHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GemPurchaseEventStatus_descriptor_, &GemPurchaseEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelUpEventInfo_descriptor_, &LevelUpEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeasonMissionInfo_descriptor_, &SeasonMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeasonMissionEventStatus_descriptor_, &SeasonMissionEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageClearEventStatus_descriptor_, &StageClearEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockChatUser_descriptor_, &BlockChatUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TenLotteryEventStatus_descriptor_, &TenLotteryEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallOfFame_descriptor_, &HallOfFame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallOfFameUser_descriptor_, &HallOfFameUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallOfFameReward_descriptor_, &HallOfFameReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HallOfFamePraise_descriptor_, &HallOfFamePraise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpendGemEventStatus_descriptor_, &SpendGemEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TenLotterySavingsStatus_descriptor_, &TenLotterySavingsStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiceEventMission_descriptor_, &DiceEventMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DiceEventStatus_descriptor_, &DiceEventStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonationPointRewardState_descriptor_, &DonationPointRewardState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonationPresent_descriptor_, &DonationPresent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DonationJobState_descriptor_, &DonationJobState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactoryLimitStatus_descriptor_, &FactoryLimitStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactoryPeriodicStatus_descriptor_, &FactoryPeriodicStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactoryResult_descriptor_, &FactoryResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsealBoxReward_descriptor_, &UnsealBoxReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldLocation_descriptor_, &WorldLocation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CommonData_2eproto() {
  delete Result::default_instance_;
  delete Result_reflection_;
  delete Version::default_instance_;
  delete Version_reflection_;
  delete Protocol::default_instance_;
  delete Protocol_reflection_;
  delete Credential::default_instance_;
  delete Credential_reflection_;
  delete Endpoint::default_instance_;
  delete Endpoint_reflection_;
  delete AccountBlockInfo::default_instance_;
  delete AccountBlockInfo_reflection_;
  delete GlobalAccount::default_instance_;
  delete GlobalAccount_reflection_;
  delete WorldAccount::default_instance_;
  delete WorldAccount_reflection_;
  delete LightAccount::default_instance_;
  delete LightAccount_reflection_;
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete PresetNum::default_instance_;
  delete PresetNum_reflection_;
  delete Character::default_instance_;
  delete Character_reflection_;
  delete LightCharacter::default_instance_;
  delete LightCharacter_reflection_;
  delete CharacterSummary::default_instance_;
  delete CharacterSummary_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete Friend::default_instance_;
  delete Friend_reflection_;
  delete FriendInviteRewardInfo::default_instance_;
  delete FriendInviteRewardInfo_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete SealSlotState::default_instance_;
  delete SealSlotState_reflection_;
  delete Costume::default_instance_;
  delete Costume_reflection_;
  delete Totem::default_instance_;
  delete Totem_reflection_;
  delete TotemSubOptionDetail::default_instance_;
  delete TotemSubOptionDetail_reflection_;
  delete TotemRefineState::default_instance_;
  delete TotemRefineState_reflection_;
  delete Inventory::default_instance_;
  delete Inventory_reflection_;
  delete InventoryCountInfo::default_instance_;
  delete InventoryCountInfo_reflection_;
  delete ItemPreset::default_instance_;
  delete ItemPreset_reflection_;
  delete Aether::default_instance_;
  delete Aether_reflection_;
  delete CharacterSetOptionInfo::default_instance_;
  delete CharacterSetOptionInfo_reflection_;
  delete SkillQuickSlot::default_instance_;
  delete SkillQuickSlot_reflection_;
  delete Skill::default_instance_;
  delete Skill_reflection_;
  delete RawReward::default_instance_;
  delete RawReward_reflection_;
  delete Reward::default_instance_;
  delete Reward_reflection_;
  delete RewardRandomCount::default_instance_;
  delete RewardRandomCount_reflection_;
  delete QuestInfo::default_instance_;
  delete QuestInfo_reflection_;
  delete MissionInfo::default_instance_;
  delete MissionInfo_reflection_;
  delete MissionCompletePointInfo::default_instance_;
  delete MissionCompletePointInfo_reflection_;
  delete Guild::default_instance_;
  delete Guild_reflection_;
  delete GuildRanking::default_instance_;
  delete GuildRanking_reflection_;
  delete GuildMember::default_instance_;
  delete GuildMember_reflection_;
  delete GuildMemberCandidate::default_instance_;
  delete GuildMemberCandidate_reflection_;
  delete BattleFormation::default_instance_;
  delete BattleFormation_reflection_;
  delete BattleFormationBuff::default_instance_;
  delete BattleFormationBuff_reflection_;
  delete GuildBattleEntry::default_instance_;
  delete GuildBattleEntry_reflection_;
  delete GuildBattleEntry_SlotData::default_instance_;
  delete GuildBattleEntry_SlotData_reflection_;
  delete GuildBattleResult::default_instance_;
  delete GuildBattleResult_reflection_;
  delete GuildBattleState::default_instance_;
  delete GuildBattleState_reflection_;
  delete GuildBattleHistory::default_instance_;
  delete GuildBattleHistory_reflection_;
  delete GuildBattleRecord::default_instance_;
  delete GuildBattleRecord_reflection_;
  delete GuildSkill::default_instance_;
  delete GuildSkill_reflection_;
  delete GuildInfo::default_instance_;
  delete GuildInfo_reflection_;
  delete GuildMercenary::default_instance_;
  delete GuildMercenary_reflection_;
  delete MatchMaking::default_instance_;
  delete MatchMaking_reflection_;
  delete Invitation::default_instance_;
  delete Invitation_reflection_;
  delete MatchInfo::default_instance_;
  delete MatchInfo_reflection_;
  delete MatchStatus::default_instance_;
  delete MatchStatus_reflection_;
  delete Ranking::default_instance_;
  delete Ranking_reflection_;
  delete MatchRanker::default_instance_;
  delete MatchRanker_reflection_;
  delete MatchRanker_Entry::default_instance_;
  delete MatchRanker_Entry_reflection_;
  delete RankingReward::default_instance_;
  delete RankingReward_reflection_;
  delete DimensionRankingReward::default_instance_;
  delete DimensionRankingReward_reflection_;
  delete DimensionStatus::default_instance_;
  delete DimensionStatus_reflection_;
  delete Room::default_instance_;
  delete Room_reflection_;
  delete RoomLocation::default_instance_;
  delete RoomLocation_reflection_;
  delete TeamBattleEntry::default_instance_;
  delete TeamBattleEntry_reflection_;
  delete MatchOpenPeriodInfo::default_instance_;
  delete MatchOpenPeriodInfo_reflection_;
  delete KillMonsterInfo::default_instance_;
  delete KillMonsterInfo_reflection_;
  delete DropData::default_instance_;
  delete DropData_reflection_;
  delete MailItemInfo::default_instance_;
  delete MailItemInfo_reflection_;
  delete WingOption::default_instance_;
  delete WingOption_reflection_;
  delete FairyStatus::default_instance_;
  delete FairyStatus_reflection_;
  delete Relic::default_instance_;
  delete Relic_reflection_;
  delete RollingBanner::default_instance_;
  delete RollingBanner_reflection_;
  delete ConfigData::default_instance_;
  delete ConfigData_reflection_;
  delete Shop::default_instance_;
  delete Shop_reflection_;
  delete Shop_PeriodicPackageState::default_instance_;
  delete Shop_PeriodicPackageState_reflection_;
  delete Shop_FlatRatePackageBonusState::default_instance_;
  delete Shop_FlatRatePackageBonusState_reflection_;
  delete Shop_LevelUpPackageMission::default_instance_;
  delete Shop_LevelUpPackageMission_reflection_;
  delete Shop_ReachLevelPackageMission::default_instance_;
  delete Shop_ReachLevelPackageMission_reflection_;
  delete Shop_BuyResultInfo::default_instance_;
  delete Shop_BuyResultInfo_reflection_;
  delete MagicShop::default_instance_;
  delete MagicShop_reflection_;
  delete ShopLottery::default_instance_;
  delete ShopLottery_reflection_;
  delete ShopProduct::default_instance_;
  delete ShopProduct_reflection_;
  delete ShopMileage::default_instance_;
  delete ShopMileage_reflection_;
  delete ShopBuyManage::default_instance_;
  delete ShopBuyManage_reflection_;
  delete ShopProductMark::default_instance_;
  delete ShopProductMark_reflection_;
  delete MarketPurchaseInfo::default_instance_;
  delete MarketPurchaseInfo_reflection_;
  delete CollectionItem::default_instance_;
  delete CollectionItem_reflection_;
  delete CollectionSetItem::default_instance_;
  delete CollectionSetItem_reflection_;
  delete RaidRankingReward::default_instance_;
  delete RaidRankingReward_reflection_;
  delete EventAttendanceStatus::default_instance_;
  delete EventAttendanceStatus_reflection_;
  delete BeginnerAttendanceStatus::default_instance_;
  delete BeginnerAttendanceStatus_reflection_;
  delete DuelRewardBoxStatus::default_instance_;
  delete DuelRewardBoxStatus_reflection_;
  delete MatchResult::default_instance_;
  delete MatchResult_reflection_;
  delete UnitySkillMission::default_instance_;
  delete UnitySkillMission_reflection_;
  delete UnitySkill::default_instance_;
  delete UnitySkill_reflection_;
  delete UnitySkillAwakenMission::default_instance_;
  delete UnitySkillAwakenMission_reflection_;
  delete ContentsModeInfo::default_instance_;
  delete ContentsModeInfo_reflection_;
  delete ContentsOpen::default_instance_;
  delete ContentsOpen_reflection_;
  delete CharacterPower::default_instance_;
  delete CharacterPower_reflection_;
  delete AssaultBattleInfo::default_instance_;
  delete AssaultBattleInfo_reflection_;
  delete RoomCharacter::default_instance_;
  delete RoomCharacter_reflection_;
  delete AdminMessage::default_instance_;
  delete AdminMessage_reflection_;
  delete PointEventStatus::default_instance_;
  delete PointEventStatus_reflection_;
  delete PointShopEventStatus::default_instance_;
  delete PointShopEventStatus_reflection_;
  delete PointShopEventRewardHistory::default_instance_;
  delete PointShopEventRewardHistory_reflection_;
  delete GemPurchaseEventStatus::default_instance_;
  delete GemPurchaseEventStatus_reflection_;
  delete LevelUpEventInfo::default_instance_;
  delete LevelUpEventInfo_reflection_;
  delete SeasonMissionInfo::default_instance_;
  delete SeasonMissionInfo_reflection_;
  delete SeasonMissionEventStatus::default_instance_;
  delete SeasonMissionEventStatus_reflection_;
  delete StageClearEventStatus::default_instance_;
  delete StageClearEventStatus_reflection_;
  delete BlockChatUser::default_instance_;
  delete BlockChatUser_reflection_;
  delete TenLotteryEventStatus::default_instance_;
  delete TenLotteryEventStatus_reflection_;
  delete HallOfFame::default_instance_;
  delete HallOfFame_reflection_;
  delete HallOfFameUser::default_instance_;
  delete HallOfFameUser_reflection_;
  delete HallOfFameReward::default_instance_;
  delete HallOfFameReward_reflection_;
  delete HallOfFamePraise::default_instance_;
  delete HallOfFamePraise_reflection_;
  delete SpendGemEventStatus::default_instance_;
  delete SpendGemEventStatus_reflection_;
  delete TenLotterySavingsStatus::default_instance_;
  delete TenLotterySavingsStatus_reflection_;
  delete DiceEventMission::default_instance_;
  delete DiceEventMission_reflection_;
  delete DiceEventStatus::default_instance_;
  delete DiceEventStatus_reflection_;
  delete DonationPointRewardState::default_instance_;
  delete DonationPointRewardState_reflection_;
  delete DonationPresent::default_instance_;
  delete DonationPresent_reflection_;
  delete DonationJobState::default_instance_;
  delete DonationJobState_reflection_;
  delete FactoryLimitStatus::default_instance_;
  delete FactoryLimitStatus_reflection_;
  delete FactoryPeriodicStatus::default_instance_;
  delete FactoryPeriodicStatus_reflection_;
  delete FactoryResult::default_instance_;
  delete FactoryResult_reflection_;
  delete UnsealBoxReward::default_instance_;
  delete UnsealBoxReward_reflection_;
  delete WorldLocation::default_instance_;
  delete WorldLocation_reflection_;
}

void protobuf_AddDesc_CommonData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  static const char descriptor[] = {
      "\n\020CommonData.proto\022\026b2.protocol.commonda"
      "ta\"\034\n\006Result\022\022\n\nerror_code\030\001 \002(\005\"`\n\007Vers"
      "ion\022\r\n\005major\030\001 \002(\005\022\r\n\005minor\030\002 \002(\005\022\020\n\010rev"
      "ision\030\003 \002(\005\022\022\n\nchangelist\030\004 \002(\005\022\021\n\tbuild"
      "_num\030\005 \002(\005\"z\n\010Protocol\022\030\n\020master_data_ha"
      "sh\030\001 \002(\t\022\030\n\020common_data_hash\030\002 \002(\t\022\034\n\024se"
      "ssion_message_hash\030\n \002(\t\022\034\n\024channel_mess"
      "age_hash\030\013 \002(\t\"\301\001\n\nCredential\022\025\n\rplatfor"
      "m_type\030\001 \002(\005\022\024\n\014platform_uid\030\002 \002(\t\022\017\n\007os"
      "_type\030\003 \002(\005\022\023\n\013market_type\030\004 \002(\005\022\024\n\014coun"
      "try_code\030\005 \002(\t\022\021\n\tlang_code\030\006 \002(\t\022\022\n\npus"
      "h_token\030\007 \001(\t\022\r\n\005ad_id\030\n \001(\t\022\024\n\014access_t"
      "oken\030\013 \001(\t\"&\n\010Endpoint\022\014\n\004host\030\001 \002(\t\022\014\n\004"
      "port\030\002 \002(\005\"y\n\020AccountBlockInfo\022\022\n\nblock_"
      "type\030\001 \002(\005\022\024\n\014block_reason\030\002 \002(\005\022\025\n\rbloc"
      "k_message\030\003 \002(\005\022\022\n\nstart_time\030\004 \002(\003\022\020\n\010e"
      "nd_time\030\005 \002(\003\"\265\002\n\rGlobalAccount\022\022\n\naccou"
      "nt_id\030\001 \002(\003\022\020\n\010nickname\030\002 \001(\t\0228\n\004type\030\003 "
      "\001(\0162*.b2.protocol.commondata.GlobalAccou"
      "nt.TYPE\022<\n\006status\030\004 \001(\0162,.b2.protocol.co"
      "mmondata.GlobalAccount.STATUS\"6\n\004TYPE\022\n\n"
      "\006NORMAL\020\000\022\007\n\003BOT\020\t\022\006\n\002QA\020\n\022\006\n\002GM\020\024\022\t\n\005AD"
      "MIN\020\036\"N\n\006STATUS\022\021\n\rSTATUS_NORMAL\020\000\022\032\n\026ST"
      "ATUS_WITHDRAWAL_WAIT\020b\022\025\n\021STATUS_WITHDRA"
      "WAL\020c\"\262\t\n\014WorldAccount\022\014\n\004name\030\001 \002(\t\022\022\n\n"
      "account_id\030\002 \001(\003\022\014\n\004cash\030\n \001(\005\022\r\n\005money\030"
      "\013 \001(\005\022\023\n\013blade_point\030\014 \001(\005\022\027\n\017blade_poin"
      "t_max\030\r \001(\005\022*\n\"blade_point_charge_leftti"
      "me_second\030\016 \001(\005\022\"\n\032inventory_aether_buy_"
      "count\030\017 \001(\005\022\'\n\037inventory_consumable_slot"
      "_count\030\020 \001(\005\022\024\n\014dark_crystal\030\021 \001(\005\022\032\n\022st"
      "age_boost_ticket\030\022 \001(\005\022\037\n\027shop_ten_lotte"
      "ry_ticket\030\023 \001(\005\022\022\n\nfame_point\030\024 \001(\005\022\024\n\014s"
      "ocial_point\030\025 \001(\005\022\032\n\022last_play_stage_id\030"
      "\026 \001(\005\022\"\n\032last_clear_stage_id_normal\030\027 \001("
      "\005\022 \n\030last_clear_stage_id_hard\030\030 \001(\005\022%\n\035l"
      "ast_clear_stage_id_very_hard\030\031 \001(\005\022 \n\030la"
      "st_clear_stage_id_hell\030\032 \001(\005\022\026\n\016attendan"
      "ce_day\030\033 \001(\005\022D\n\017attendance_type\030\034 \001(\0162+."
      "b2.protocol.commondata.DailyAttendanceTy"
      "pe\022\033\n\023nextAttendance_time\030\035 \001(\003\022\027\n\017pvp_m"
      "atch_grade\030\036 \001(\005\022\034\n\024pvp_match_star_count"
      "\030\037 \001(\005\022\033\n\023assault_match_grade\030  \001(\005\022 \n\030a"
      "ssault_match_star_count\030! \001(\005\022\036\n\026daily_p"
      "lay_time_in_sec\030( \001(\005\022$\n\034daily_play_time"
      "_reward_index\030) \001(\005\022#\n\033daily_play_time_u"
      "pdate_time\030* \001(\003\022\021\n\trest_time\030+ \001(\003\022\034\n\024n"
      "ext_fairy_gift_time\030, \001(\003\022\030\n\020leave_guild"
      "_time\0302 \001(\003\022\020\n\010guild_id\0303 \001(\003\022\027\n\017kicked_"
      "guild_id\0304 \001(\003\022\032\n\022gold_buff_end_time\030< \001"
      "(\003\022\031\n\021exp_buff_end_time\030= \001(\003\022\030\n\020gold_bu"
      "ff_ticket\030> \001(\003\022\027\n\017exp_buff_ticket\030\? \001(\003"
      "\022\037\n\027stage_auto_clear_ticket\030F \001(\005\022\033\n\023exc"
      "hange_count_gold\030G \001(\005\022\032\n\022exchange_count"
      "_gem\030H \001(\005\"\362\001\n\014LightAccount\022\022\n\naccount_i"
      "d\030\001 \001(\003\022\014\n\004cash\030\005 \001(\005\022\r\n\005money\030\006 \001(\005\022\023\n\013"
      "blade_point\030\007 \001(\005\022\024\n\014dark_crystal\030\010 \001(\005\022"
      "\024\n\014social_point\030\t \001(\005\022\032\n\022stage_boost_tic"
      "ket\030\n \001(\005\022\037\n\027shop_ten_lottery_ticket\030\013 \001"
      "(\005\022\022\n\nfame_point\030\014 \001(\005\022\037\n\027stage_auto_cle"
      "ar_ticket\030\r \001(\005\"\325\006\n\013AccountInfo\022\020\n\010nickn"
      "ame\030\001 \002(\t\0225\n\ncharacters\030\002 \003(\0132!.b2.proto"
      "col.commondata.Character\0221\n\013equip_items\030"
      "\003 \003(\0132\034.b2.protocol.commondata.Item\0227\n\016e"
      "quip_costumes\030\004 \003(\0132\037.b2.protocol.common"
      "data.Costume\0223\n\014equip_totems\030\005 \003(\0132\035.b2."
      "protocol.commondata.Totem\0225\n\rmount_aethe"
      "rs\030\006 \003(\0132\036.b2.protocol.commondata.Aether"
      "\022-\n\006relics\030\007 \003(\0132\035.b2.protocol.commondat"
      "a.Relic\0228\n\014wing_options\030\010 \003(\0132\".b2.proto"
      "col.commondata.WingOption\0228\n\014guild_skill"
      "s\030\t \003(\0132\".b2.protocol.commondata.GuildSk"
      "ill\0228\n\014item_presets\030\n \003(\0132\".b2.protocol."
      "commondata.ItemPreset\0228\n\014unity_skills\030\013 "
      "\003(\0132\".b2.protocol.commondata.UnitySkill\022"
      "4\n\007fairies\030\014 \003(\0132#.b2.protocol.commondat"
      "a.FairyStatus\022\027\n\017pvp_match_grade\030\024 \001(\005\022\034"
      "\n\024pvp_match_star_count\030\025 \001(\005\022\033\n\023assault_"
      "match_grade\030\026 \001(\005\022 \n\030assault_match_star_"
      "count\030\027 \001(\005\022<\n\021character_presets\030\036 \003(\0132!"
      ".b2.protocol.commondata.PresetNum\022\022\n\nacc"
      "ount_id\030( \002(\003\022\020\n\010guild_id\0302 \002(\003\"~\n\tPrese"
      "tNum\022>\n\016character_type\030\001 \002(\0162&.b2.protoc"
      "ol.commondata.Character.TYPE\022\027\n\017item_pre"
      "set_num\030\002 \001(\005\022\030\n\020skill_preset_num\030\003 \001(\005\""
      "\366\006\n\tCharacter\022>\n\016character_type\030\001 \002(\0162&."
      "b2.protocol.commondata.Character.TYPE\022\022\n"
      "\nstyle_face\030\002 \001(\005\022\022\n\nstyle_hair\030\003 \001(\005\022\022\n"
      "\nstyle_skin\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\013\n\003exp\030"
      "\006 \001(\003\022\017\n\007exp_max\030\007 \001(\003\022\035\n\025skill_point_bu"
      "y_count\030\t \001(\005\022 \n\030inventory_item_buy_coun"
      "t\030\n \001(\005\022!\n\031inventory_item_slot_count\030\013 \001"
      "(\005\022\014\n\004rank\030\014 \001(\005\022\014\n\004name\030\r \001(\t\022\027\n\017rank_n"
      "ode_index\030\016 \001(\005\022\027\n\017rank_node_state\030\017 \001(\010"
      "\022\022\n\nwing_grade\030\020 \001(\005\022\022\n\nwing_Level\030\021 \001(\005"
      "\022\024\n\014wing_visible\030\022 \001(\010\022\026\n\016helmet_visible"
      "\030\023 \001(\010\022$\n\034aether_offense_set_option_id\030\024"
      " \001(\005\022$\n\034aether_defense_set_option_id\030\025 \001"
      "(\005\022\032\n\022remain_skill_point\030\030 \001(\005\022A\n\021skill_"
      "quick_slots\030\031 \003(\0132&.b2.protocol.commonda"
      "ta.SkillQuickSlot\022-\n\006skills\030\032 \003(\0132\035.b2.p"
      "rotocol.commondata.Skill\022\023\n\013unity_skill\030"
      "\033 \001(\010\022\032\n\022unity_skill_awaken\030\034 \001(\010\022\023\n\013tot"
      "al_power\030\035 \001(\005\022\036\n\026costume_weapon_visible"
      "\030\037 \001(\010\022\033\n\023costume_hat_visible\030  \001(\010\022\035\n\025c"
      "ostume_armor_visible\030! \001(\010\"<\n\004TYPE\022\r\n\tGL"
      "ADIATOR\020\001\022\014\n\010ASSASSIN\020\002\022\n\n\006WIZARD\020\003\022\013\n\007F"
      "IGHTER\020\004\"\363\001\n\016LightCharacter\022C\n\016character"
      "_type\030\001 \002(\0162+.b2.protocol.commondata.Lig"
      "htCharacter.TYPE\022\r\n\005level\030\002 \001(\005\022\013\n\003exp\030\003"
      " \001(\003\022\017\n\007exp_max\030\004 \001(\003\022\025\n\rchanged_level\030\005"
      " \001(\010\022\032\n\022remain_skill_point\030\006 \001(\005\"<\n\004TYPE"
      "\022\r\n\tGLADIATOR\020\001\022\014\n\010ASSASSIN\020\002\022\n\n\006WIZARD\020"
      "\003\022\013\n\007FIGHTER\020\004\"\267\001\n\020CharacterSummary\022\022\n\na"
      "ccount_id\030\001 \002(\003\022\024\n\014account_name\030\002 \002(\t\022>\n"
      "\016character_type\030\003 \002(\0162&.b2.protocol.comm"
      "ondata.Character.TYPE\022\027\n\017character_level"
      "\030\004 \002(\005\022\r\n\005power\030\005 \002(\005\022\021\n\tis_online\030\007 \001(\010"
      "\"\317\001\n\004User\022C\n\021character_summary\030\001 \002(\0132(.b"
      "2.protocol.commondata.CharacterSummary\022\030"
      "\n\020last_logout_time\030\002 \002(\003\022\022\n\nguild_name\030\013"
      " \001(\t\022\022\n\nmark_index\030\014 \001(\005\022\022\n\nmark_color\030\r"
      " \001(\005\022\025\n\rmark_bg_index\030\016 \001(\005\022\025\n\rmark_bg_c"
      "olor\030\017 \001(\005\"\213\001\n\006Friend\022*\n\004user\030\001 \002(\0132\034.b2"
      ".protocol.commondata.User\022#\n\033last_social"
      "_point_send_time\030\002 \002(\003\022\016\n\006is_new\030\003 \001(\010\022 "
      "\n\030raid_penalty_remove_time\030\004 \001(\003\"\223\001\n\026Fri"
      "endInviteRewardInfo\022\025\n\rplatform_type\030\001 \002"
      "(\005\022\024\n\014invite_count\030\002 \002(\005\022\024\n\014joiner_count"
      "\030\003 \002(\005\022\032\n\022invite_reward_mask\030\004 \002(\005\022\032\n\022jo"
      "iner_reward_mask\030\005 \002(\005\"\350\n\n\004Item\022\n\n\002id\030\001 "
      "\002(\003\022\023\n\013template_id\030\002 \002(\005\022B\n\016character_ty"
      "pe\030\003 \002(\0162*.b2.protocol.commondata.Item.C"
      "haracterType\022>\n\016inventory_type\030\004 \002(\0162&.b"
      "2.protocol.commondata.Inventory.TYPE\022=\n\016"
      "equip_position\030\005 \002(\0162%.b2.protocol.commo"
      "ndata.EquipPosition\022\016\n\006amount\030\006 \002(\005\022\r\n\005g"
      "rade\030\007 \002(\005\0224\n\007quality\030\010 \002(\0162#.b2.protoco"
      "l.commondata.ItemQuality\022\031\n\021random_optio"
      "n_id1\030\t \002(\005\022\031\n\021random_option_id2\030\n \002(\005\022\031"
      "\n\021random_option_id3\030\013 \002(\005\022\034\n\024random_opti"
      "on_value1\030\014 \002(\002\022\034\n\024random_option_value2\030"
      "\r \002(\002\022\034\n\024random_option_value3\030\016 \002(\002\022\r\n\005l"
      "evel\030\017 \002(\005\022\013\n\003exp\030\020 \002(\002\022\025\n\renhance_level"
      "\030\021 \002(\005\022\025\n\rsurpass_count\030\022 \002(\005\022\016\n\006locked\030"
      "\023 \002(\010\022\r\n\005power\030\024 \002(\002\022\016\n\006is_new\030\025 \002(\010\022\037\n\027"
      "md_main_attribute_value\030\026 \002(\002\022\034\n\024open_se"
      "al_slot_count\030\036 \002(\005\022\?\n\020seal_slot_states\030"
      "\037 \003(\0132%.b2.protocol.commondata.SealSlotS"
      "tate\"\257\004\n\004TYPE\022\n\n\006WEAPON\020\001\022\007\n\003HAT\020\002\022\t\n\005AR"
      "MOR\020\003\022\t\n\005GLOVE\020\004\022\t\n\005SHOES\020\005\022\010\n\004BELT\020\006\022\010\n"
      "\004NECK\020\007\022\010\n\004RING\020\010\022\014\n\010MATERIAL\020\t\022\t\n\005GOODS"
      "\020\n\022\021\n\rUPGRADE_STONE\020\013\022\022\n\016ENHANCE_SCROLL\020"
      "\014\022\032\n\026BLESSED_ENHANCE_SCROLL\020\r\022\025\n\021PROTECT"
      "ION_SCROLL\020\016\022\016\n\nBOSS_PIECE\020\017\022\022\n\016WEAPON_E"
      "SSENCE\020\020\022\021\n\rARMOR_ESSENCE\020\021\022\025\n\021ACCESSORY"
      "_ESSENCE\020\022\022\030\n\024RANK_PROMOTION_POINT\020\023\022\016\n\n"
      "HERO_PIECE\020\024\022\020\n\014AETHER_PIECE\020\025\022\026\n\022DISMAN"
      "TLE_MATERIAL\020\026\022\025\n\021DIMENSIONAL_PIECE\020\027\022\034\n"
      "\030COSTUME_ENHANCE_MATERIAL\020\030\022\030\n\024WEAPON_SU"
      "RPASS_ANVIL\020\031\022\027\n\023ARMOR_SURPASS_ANVIL\020\032\022\033"
      "\n\027ACCESSORY_SURPASS_ANVIL\020\033\022\014\n\010SEAL_BOX\020"
      "\034\022!\n\035ADVANCED_RANK_PROMOTION_POINT\020\035\022\010\n\004"
      "GOLD\020d\"Q\n\rCharacterType\022\n\n\006COMMON\020\000\022\r\n\tG"
      "LADIATOR\020\001\022\014\n\010ASSASSIN\020\002\022\n\n\006WIZARD\020\003\022\013\n\007"
      "FIGHTER\020\004\"[\n\rSealSlotState\022\021\n\tseal_slot\030"
      "\001 \002(\005\022\016\n\006opened\030\002 \002(\010\022\021\n\toption_id\030\003 \002(\005"
      "\022\024\n\014option_value\030\004 \002(\002\"\224\006\n\007Costume\022\n\n\002id"
      "\030\001 \002(\003\022\023\n\013template_id\030\002 \002(\005\022E\n\016character"
      "_type\030\003 \002(\0162-.b2.protocol.commondata.Cos"
      "tume.CharacterType\022>\n\016inventory_type\030\004 \002"
      "(\0162&.b2.protocol.commondata.Inventory.TY"
      "PE\022=\n\016equip_position\030\005 \002(\0162%.b2.protocol"
      ".commondata.EquipPosition\022\016\n\006amount\030\006 \002("
      "\005\022\r\n\005grade\030\007 \002(\005\0224\n\007quality\030\010 \002(\0162#.b2.p"
      "rotocol.commondata.ItemQuality\022\031\n\021random"
      "_option_id1\030\t \002(\005\022\031\n\021random_option_id2\030\n"
      " \002(\005\022\031\n\021random_option_id3\030\013 \002(\005\022\034\n\024rando"
      "m_option_value1\030\014 \002(\002\022\034\n\024random_option_v"
      "alue2\030\r \002(\002\022\034\n\024random_option_value3\030\016 \002("
      "\002\022\r\n\005level\030\017 \002(\005\022\013\n\003exp\030\020 \002(\002\022\025\n\renhance"
      "_level\030\021 \002(\005\022\025\n\rsurpass_count\030\022 \002(\005\022\016\n\006l"
      "ocked\030\023 \002(\010\022\r\n\005power\030\024 \002(\002\022\016\n\006is_new\030\025 \002"
      "(\010\022\037\n\027md_main_attribute_value\030\026 \002(\002\"A\n\004T"
      "YPE\022\023\n\016COSTUME_WEAPON\020\311\001\022\020\n\013COSTUME_HAT\020"
      "\312\001\022\022\n\rCOSTUME_ARMOR\020\313\001\"E\n\rCharacterType\022"
      "\r\n\tGLADIATOR\020\001\022\014\n\010ASSASSIN\020\002\022\n\n\006WIZARD\020\003"
      "\022\013\n\007FIGHTER\020\004\"\300\004\n\005Totem\022\n\n\002id\030\001 \002(\003\022\023\n\013t"
      "emplate_id\030\002 \002(\005\022C\n\016character_type\030\003 \002(\016"
      "2+.b2.protocol.commondata.Totem.Characte"
      "rType\022:\n\nequip_slot\030\004 \002(\0162&.b2.protocol."
      "commondata.TotemEquipSlot\0221\n\005grade\030\005 \002(\016"
      "2\".b2.protocol.commondata.TotemGrade\022\026\n\016"
      "main_option_id\030\006 \002(\005\022\031\n\021main_option_valu"
      "e\030\007 \002(\002\022H\n\022sub_option_details\030\010 \003(\0132,.b2"
      ".protocol.commondata.TotemSubOptionDetai"
      "l\022\024\n\014refine_level\030\t \002(\005\022\030\n\020refine_try_co"
      "unt\030\n \002(\005\022\031\n\021gold_success_rate\030\013 \002(\005\022\032\n\022"
      "piece_success_rate\030\014 \002(\005\022\016\n\006locked\030\r \002(\010"
      "\022\r\n\005power\030\016 \002(\002\022\016\n\006is_new\030\017 \002(\010\"O\n\rChara"
      "cterType\022\010\n\004NONE\020\000\022\r\n\tGLADIATOR\020\001\022\014\n\010ASS"
      "ASSIN\020\002\022\n\n\006WIZARD\020\003\022\013\n\007FIGHTER\020\004\"\226\001\n\024Tot"
      "emSubOptionDetail\022\021\n\toption_id\030\001 \002(\005\022\024\n\014"
      "option_value\030\002 \002(\002\022\024\n\014refine_count\030\003 \002(\005"
      "\022\?\n\rrefine_states\030\004 \003(\0132(.b2.protocol.co"
      "mmondata.TotemRefineState\"\231\001\n\020TotemRefin"
      "eState\022\r\n\005index\030\001 \002(\005\022E\n\006status\030\002 \002(\01625."
      "b2.protocol.commondata.TotemRefineState."
      "Refinestatus\"/\n\014Refinestatus\022\010\n\004NONE\020\000\022\013"
      "\n\007SUCCESS\020\001\022\010\n\004FAIL\020\002\"}\n\tInventory\"p\n\004TY"
      "PE\022\n\n\006WEAPON\020\002\022\t\n\005ARMOR\020\003\022\r\n\tACCESSORY\020\004"
      "\022\010\n\004WING\020\005\022\023\n\016COSTUME_WEAPON\020\312\001\022\022\n\rCOSTU"
      "ME_ARMOR\020\313\001\022\017\n\nCONSUMABLE\020\351\007\"v\n\022Inventor"
      "yCountInfo\022>\n\016character_type\030\001 \002(\0162&.b2."
      "protocol.commondata.Character.TYPE\022\r\n\005co"
      "unt\030\003 \002(\005\022\021\n\tmax_count\030\004 \002(\005\"\303\001\n\nItemPre"
      "set\022\022\n\naccount_id\030\001 \002(\003\022>\n\016character_typ"
      "e\030\002 \002(\0162&.b2.protocol.commondata.Charact"
      "er.TYPE\022\021\n\tpreset_id\030\003 \002(\005\022=\n\016equip_posi"
      "tion\030\004 \002(\0162%.b2.protocol.commondata.Equi"
      "pPosition\022\017\n\007item_id\030\005 \002(\003\"\271\n\n\006Aether\022\n\n"
      "\002id\030\001 \002(\003\0221\n\004type\030\002 \002(\0162#.b2.protocol.co"
      "mmondata.Aether.TYPE\022\014\n\004slot\030\003 \002(\005\022D\n\016ch"
      "aracter_type\030\004 \002(\0162,.b2.protocol.commond"
      "ata.Aether.CharacterType\022\r\n\005level\030\005 \002(\005\022"
      "\r\n\005grade\030\006 \002(\005\0221\n\004tier\030\007 \002(\0162#.b2.protoc"
      "ol.commondata.Aether.TIER\022\026\n\016main_option"
      "_id\030\010 \002(\005\022\031\n\021main_option_value\030\t \002(\002\022\026\n\016"
      "sub_option_id1\030\n \002(\005\022\026\n\016sub_option_id2\030\013"
      " \002(\005\022\026\n\016sub_option_id3\030\014 \002(\005\022\031\n\021sub_opti"
      "on_value1\030\r \002(\002\022\031\n\021sub_option_value2\030\016 \002"
      "(\002\022\031\n\021sub_option_value3\030\017 \002(\002\022!\n\031sub_opt"
      "ion_enhance_count1\030\020 \002(\005\022!\n\031sub_option_e"
      "nhance_count2\030\021 \002(\005\022!\n\031sub_option_enhanc"
      "e_count3\030\022 \002(\005\022\016\n\006locked\030\024 \002(\010\022\016\n\006is_new"
      "\030\025 \002(\010\022\036\n\026calc_main_option_value\030\036 \002(\002\022\036"
      "\n\026calc_sub_option_value1\030\037 \002(\002\022\036\n\026calc_s"
      "ub_option_value2\030  \002(\002\022\036\n\026calc_sub_optio"
      "n_value3\030! \002(\002\0226\n\tcalc_tier\030\" \002(\0162#.b2.p"
      "rotocol.commondata.Aether.TIER\"\260\001\n\004TYPE\022"
      "\007\n\003ALL\020\000\022\020\n\014THUNDERSTORM\020\001\022\013\n\007DESTROY\020\002\022"
      "\013\n\007INSIGHT\020\003\022\010\n\004RAGE\020\004\022\013\n\007DESPAIR\020\005\022\r\n\tR"
      "ESTRAINT\020\006\022\n\n\006RESIST\020\007\022\013\n\007REVENGE\020\010\022\013\n\007P"
      "ROTECT\020\t\022\013\n\007PASSION\020\n\022\014\n\010OBLIVION\020\013\022\014\n\010F"
      "REEZING\020\014\"I\n\004TIER\022\010\n\004SEAL\020\001\022\016\n\nANTI_DEVI"
      "L\020\002\022\025\n\021EXTERMINATE_DEVIL\020\003\022\020\n\014ETERNAL_LI"
      "FE\020\004\"S\n\rCharacterType\022\014\n\010NOT_USED\020\000\022\r\n\tG"
      "LADIATOR\020\001\022\014\n\010ASSASSIN\020\002\022\n\n\006WIZARD\020\003\022\013\n\007"
      "FIGHTER\020\004\"\352\001\n\rSetOptionType\022\023\n\016THUNDER_D"
      "AMAGE\020\351\007\022\017\n\nIMMOBILIZE\020\352\007\022\013\n\006SHIELD\020\353\007\022\017"
      "\n\nFIRE_RANGE\020\354\007\022\022\n\rMETEOR_DAMAGE\020\355\007\022\023\n\016S"
      "KILL_COOLTIME\020\356\007\022\017\n\nSKILL_GAGE\020\357\007\022\t\n\004STU"
      "N\020\360\007\022\020\n\013SUPER_ARMOR\020\361\007\022\023\n\016DAMAGE_REFLECT"
      "\020\362\007\022\026\n\021PROHIBIT_BEHAVIOR\020\363\007\022\021\n\014FREEZE_RA"
      "NGE\020\364\007\"\210\001\n\026CharacterSetOptionInfo\022&\n\036sel"
      "ected_offense_set_option_id\030\001 \001(\005\022&\n\036sel"
      "ected_defense_set_option_id\030\002 \001(\005\022\036\n\026def"
      "ense_set_option_ids\030\003 \003(\005\"\241\001\n\016SkillQuick"
      "Slot\022\014\n\004slot\030\001 \002(\005\022\030\n\020left_skill_point\030\002"
      " \002(\005\022\031\n\021skill_total_power\030\003 \002(\002\022\030\n\020using"
      "_skill_id_1\030\n \002(\005\022\030\n\020using_skill_id_2\030\013 "
      "\002(\005\022\030\n\020using_skill_id_3\030\014 \002(\005\".\n\005Skill\022\020"
      "\n\010skill_id\030\001 \002(\005\022\023\n\013skill_level\030\002 \002(\005\"&\n"
      "\tRawReward\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \002(\005\"\372\002"
      "\n\006Reward\0225\n\nraw_reward\030\001 \002(\0132!.b2.protoc"
      "ol.commondata.RawReward\022*\n\004item\030\005 \001(\0132\034."
      "b2.protocol.commondata.Item\0220\n\007costume\030\006"
      " \001(\0132\037.b2.protocol.commondata.Costume\022,\n"
      "\005totem\030\007 \001(\0132\035.b2.protocol.commondata.To"
      "tem\022.\n\006aether\030\010 \001(\0132\036.b2.protocol.common"
      "data.Aether\022;\n\rlight_account\030\t \001(\0132$.b2."
      "protocol.commondata.LightAccount\022@\n\020ligh"
      "t_characters\030\n \003(\0132&.b2.protocol.commond"
      "ata.LightCharacter\"E\n\021RewardRandomCount\022"
      "\n\n\002id\030\001 \002(\005\022\021\n\tmin_count\030\002 \002(\005\022\021\n\tmax_co"
      "unt\030\003 \002(\005\"\207\002\n\tQuestInfo\022=\n\004slot\030\001 \002(\0162/."
      "b2.protocol.commondata.QuestInfo.QuestSl"
      "otType\022/\n\004type\030\002 \002(\0162!.b2.protocol.commo"
      "ndata.QuestType\022\020\n\010quest_id\030\003 \002(\005\022\026\n\016pro"
      "gress_count\030\004 \002(\005\022\r\n\005state\030\005 \002(\005\"Q\n\rQues"
      "tSlotType\022\017\n\013QUEST_MAIN1\020\001\022\017\n\013QUEST_MAIN"
      "2\020\002\022\016\n\nQUEST_SUB1\020\n\022\016\n\nQUEST_SUB2\020\013\"\215\003\n\013"
      "MissionInfo\022E\n\014mission_type\030\001 \002(\0162/.b2.p"
      "rotocol.commondata.MissionInfo.MissionTy"
      "pe\022P\n\022mission_state_type\030\002 \002(\01624.b2.prot"
      "ocol.commondata.MissionInfo.MissionState"
      "Type\022\022\n\nmission_id\030\003 \002(\005\022\026\n\016progress_cou"
      "nt\030\004 \002(\003\022\026\n\016completed_step\030\005 \001(\005\022\025\n\rrewa"
      "rded_step\030\006 \001(\005\"K\n\013MissionType\022\t\n\005DAILY\020"
      "\001\022\n\n\006WEEKLY\020\002\022\013\n\007MONTHLY\020\003\022\n\n\006SERIAL\020\004\022\014"
      "\n\010FEATURED\020\005\"=\n\020MissionStateType\022\014\n\010PROG"
      "RESS\020\001\022\r\n\tCOMPLETED\020\002\022\014\n\010REWARDED\020\003\"\217\001\n\030"
      "MissionCompletePointInfo\022E\n\014mission_type"
      "\030\001 \002(\0162/.b2.protocol.commondata.MissionI"
      "nfo.MissionType\022\025\n\rcompletePoint\030\002 \002(\005\022\025"
      "\n\rreward_indexs\030\003 \003(\005\"\276\005\n\005Guild\022\020\n\010guild"
      "_id\030\001 \002(\003\022\022\n\nguild_name\030\002 \002(\t\022\031\n\021master_"
      "account_id\030\003 \002(\003\022\023\n\013master_name\030\004 \002(\t\022\030\n"
      "\020max_member_count\030\005 \002(\005\022\016\n\006notice\030\006 \002(\t\022"
      "\r\n\005level\030\007 \002(\005\022\013\n\003exp\030\010 \002(\005\022=\n\013join_opti"
      "on\030\n \002(\0162(.b2.protocol.commondata.Guild."
      "JoinOption\022\022\n\nmark_index\030\013 \002(\005\022\022\n\nmark_c"
      "olor\030\014 \002(\005\022\025\n\rmark_bg_index\030\r \002(\005\022\025\n\rmar"
      "k_bg_color\030\016 \002(\005\022\030\n\020cur_member_count\030\017 \002"
      "(\005\022\023\n\013create_time\030\020 \002(\003\022\033\n\023master_electe"
      "d_time\030\021 \001(\003\022\033\n\023season_obtain_medal\030\024 \002("
      "\005\022\026\n\016season_ranking\030\025 \002(\005\022\034\n\024season_rank"
      "ing_total\030\026 \002(\005\022\031\n\021members_avg_power\030\027 \002"
      "(\005\022\024\n\014total_result\030\030 \002(\005\022\031\n\021join_guild_b"
      "attle\030\036 \001(\010\022\031\n\021turn_obtain_medal\030\037 \001(\005\"%"
      "\n\nJoinOption\022\n\n\006PUBLIC\020\001\022\013\n\007PRIVATE\020\002\"W\n"
      "\013InviteState\022\010\n\004NONE\020\000\022\020\n\014JOINED_GUILD\020\001"
      "\022\013\n\007INVITED\020\002\022\020\n\014NON_INVITING\020\003\022\r\n\tINVIT"
      "ABLE\020\004\"\326\002\n\014GuildRanking\022\017\n\007ranking\030\001 \002(\005"
      "\022\020\n\010guild_id\030\002 \002(\003\022\022\n\nguild_name\030\003 \002(\t\022\032"
      "\n\022total_obtain_medal\030\004 \002(\005\022\024\n\014total_resu"
      "lt\030\005 \002(\005\022\031\n\021members_avg_power\030\006 \002(\005\022\023\n\013c"
      "reate_time\030\007 \002(\003\022\014\n\004mark\030\n \002(\005\022\022\n\nmark_c"
      "olor\030\013 \002(\005\022\017\n\007mark_bg\030\014 \002(\005\022\025\n\rmark_bg_c"
      "olor\030\r \002(\005\022\023\n\013gm_nickname\030\016 \002(\t\022\030\n\020max_m"
      "ember_count\030\017 \002(\005\022\030\n\020cur_member_count\030\020 "
      "\002(\005\022\r\n\005level\030\021 \002(\005\022\013\n\003exp\030\022 \002(\005\"\224\003\n\013Guil"
      "dMember\022\020\n\010guild_id\030\001 \002(\003\022\024\n\014contributio"
      "n\030\002 \002(\005\0226\n\004rank\030\003 \002(\0162(.b2.protocol.comm"
      "ondata.GuildMember.Rank\022C\n\021character_sum"
      "mary\030\004 \002(\0132(.b2.protocol.commondata.Char"
      "acterSummary\022\030\n\020last_logout_time\030\005 \002(\003\022\033"
      "\n\023total_support_count\030\n \002(\005\022\033\n\023today_sup"
      "port_count\030\013 \002(\005\022\034\n\024total_donation_count"
      "\030\014 \002(\005\022\034\n\024today_donation_count\030\r \002(\005\022 \n\030"
      "raid_penalty_remove_time\030\016 \002(\003\".\n\004Rank\022\n"
      "\n\006MASTER\020\001\022\016\n\nSUB_MASTER\020\002\022\n\n\006NORMAL\020c\"k"
      "\n\024GuildMemberCandidate\022\022\n\naccount_id\030\001 \002"
      "(\003\022\?\n\014invite_state\030\002 \002(\0162).b2.protocol.c"
      "ommondata.Guild.InviteState\"\330\001\n\017BattleFo"
      "rmation\022D\n\016formation_type\030\001 \002(\0162,.b2.pro"
      "tocol.commondata.BattleFormation.TYPE\022\027\n"
      "\017formation_level\030\002 \002(\005\"0\n\004TYPE\022\n\n\006NORMAL"
      "\020\001\022\r\n\tOFFENSIVE\020\002\022\r\n\tDEFENSIVE\020\003\"4\n\010Buff"
      "Type\022\010\n\004NONE\020\000\022\016\n\nINC_ATTACK\020\001\022\016\n\nDEC_DA"
      "MAGE\020\002\"\327\001\n\023BattleFormationBuff\022\n\n\002id\030\001 \002"
      "(\005\022D\n\nbuff_type1\030\n \002(\01620.b2.protocol.com"
      "mondata.BattleFormation.BuffType\022\023\n\013buff"
      "_value1\030\013 \002(\002\022D\n\nbuff_type2\030\014 \002(\01620.b2.p"
      "rotocol.commondata.BattleFormation.BuffT"
      "ype\022\023\n\013buff_value2\030\r \002(\002\"\377\001\n\020GuildBattle"
      "Entry\022@\n\005slots\030\003 \003(\01321.b2.protocol.commo"
      "ndata.GuildBattleEntry.SlotData\032\202\001\n\010Slot"
      "Data\022\020\n\010slot_num\030\001 \002(\005\022\022\n\nentry_code\030\002 \002"
      "(\005\022A\n\nentry_type\030\n \001(\0162-.b2.protocol.com"
      "mondata.GuildBattleEntry.TYPE\022\r\n\005level\030\013"
      " \001(\005\"$\n\004TYPE\022\r\n\tCHARACTER\020\001\022\r\n\tMERCENARY"
      "\020\002\";\n\021GuildBattleResult\"&\n\004TYPE\022\010\n\004LOSE\020"
      "\001\022\t\n\004DRAW\020\350\007\022\t\n\003WIN\020\300\204=\"\261\002\n\020GuildBattleS"
      "tate\022\021\n\tseason_id\030\001 \002(\005\022\014\n\004turn\030\002 \002(\005\022D\n"
      "\rcurrent_state\030\003 \002(\0162-.b2.protocol.commo"
      "ndata.GuildBattleState.TYPE\022\022\n\nbegin_tim"
      "e\030\004 \002(\003\022\020\n\010end_time\030\005 \002(\003\"\217\001\n\004TYPE\022\010\n\004NO"
      "NE\020\000\022\010\n\004INIT\020\001\022\014\n\010INITDONE\020\002\022\t\n\005READY\020\003\022"
      "\014\n\010MATCHING\020\004\022\020\n\014MATCHINGDONE\020\005\022\n\n\006BATTL"
      "E\020\006\022\016\n\nSETTLEMENT\020\007\022\022\n\016SETTLEMENTDONE\020\010\022"
      "\n\n\006RESULT\020\t\"\335\003\n\022GuildBattleHistory\022\024\n\014ob"
      "tain_medal\030\001 \002(\005\022\031\n\021medal_total_count\030\002 "
      "\002(\005\022>\n\006result\030\003 \002(\0162..b2.protocol.common"
      "data.GuildBattleResult.TYPE\022\027\n\017battle_en"
      "d_time\030\004 \002(\003\022\024\n\014member_count\030\005 \002(\005\022\024\n\014at"
      "tack_count\030\006 \002(\005\022\027\n\017target_guild_id\030\013 \002("
      "\003\022\031\n\021target_guild_name\030\014 \002(\t\022\033\n\023target_o"
      "btain_medal\030\r \002(\005\022\023\n\013target_mark\030\016 \002(\005\022\031"
      "\n\021target_mark_color\030\017 \002(\005\022\026\n\016target_mark"
      "_bg\030\020 \002(\005\022\034\n\024target_mark_bg_color\030\021 \002(\005\022"
      " \n\030target_medal_total_count\030\022 \002(\005\022\033\n\023tar"
      "get_member_count\030\023 \002(\005\022\033\n\023target_attack_"
      "count\030\024 \002(\005\"\253\001\n\021GuildBattleRecord\022\021\n\twin"
      "_count\030\001 \002(\005\022\022\n\ndraw_count\030\002 \002(\005\022\022\n\nlose"
      "_count\030\003 \002(\005\022\032\n\022total_obtain_medal\030\013 \002(\005"
      "\022\017\n\007ranking\030\014 \002(\005\022\033\n\023ranking_total_count"
      "\030\r \002(\005\022\021\n\tseason_id\030\025 \002(\005\"O\n\nGuildSkill\022"
      "\n\n\002id\030\001 \002(\005\022\r\n\005level\030\002 \002(\005\022\017\n\007enabled\030\003 "
      "\002(\010\022\025\n\rbuff_end_time\030\n \001(\003\"\207\001\n\tGuildInfo"
      "\022\020\n\010guild_id\030\001 \001(\003\022\022\n\nguild_name\030\002 \002(\t\022\022"
      "\n\nmark_index\030\003 \002(\005\022\022\n\nmark_color\030\004 \002(\005\022\025"
      "\n\rmark_bg_index\030\005 \002(\005\022\025\n\rmark_bg_color\030\006"
      " \002(\005\"8\n\016GuildMercenary\022\n\n\002id\030\001 \002(\005\022\r\n\005le"
      "vel\030\002 \002(\005\022\013\n\003exp\030\003 \002(\005\"\210\001\n\013MatchMaking\"G"
      "\n\004TYPE\022\014\n\010PVP_RANK\020\001\022\020\n\014PVP_FRIENDLY\020\002\022\r"
      "\n\tRAID_RANK\020\n\022\020\n\014ASSAULT_RANK\020\024\"0\n\005STATE"
      "\022\013\n\007WAITING\020\001\022\014\n\010ARRANGED\020\002\022\014\n\010CANCELED\020"
      "\003\"$\n\nInvitation\"\026\n\004TYPE\022\016\n\nPVP_INVITE\020\001\""
      "\310\001\n\tMatchInfo\022\023\n\013match_token\030\001 \002(\t\022=\n\rop"
      "ponent_type\030\002 \002(\0162&.b2.protocol.commonda"
      "ta.MatchInfo.TYPE\"g\n\004TYPE\022\006\n\002AI\020\001\022\n\n\006PLA"
      "YER\020\002\022\010\n\004TEAM\020\003\022\010\n\004RAID\020\004\022\013\n\007ASSAULT\020\005\022\r"
      "\n\tHEROTOWER\020\006\022\014\n\010DONATION\020\007\022\r\n\tDIMENSION"
      "\020\010\"n\n\013MatchStatus\022\024\n\014battle_grade\030\001 \001(\005\022"
      "\031\n\021battle_star_count\030\002 \001(\005\022\024\n\014continue_w"
      "in\030\003 \001(\005\022\030\n\020continue_win_max\030\004 \001(\005\"\244\001\n\007R"
      "anking\022\022\n\naccount_id\030\001 \002(\003\022\017\n\007ranking\030\013 "
      "\002(\005\022\032\n\022total_ranker_count\030\014 \002(\005\022\026\n\016pvp_r"
      "eplay_url\030\024 \001(\t\022\036\n\026replay_size_compresse"
      "d\030\025 \001(\005\022 \n\030replay_size_uncompressed\030\026 \001("
      "\005\"\236\003\n\013MatchRanker\022\022\n\naccount_id\030\001 \002(\003\022\020\n"
      "\010nickname\030\002 \002(\t\022\024\n\014battle_grade\030\003 \001(\005\022\031\n"
      "\021battle_star_count\030\004 \001(\005\022\022\n\nbest_floor\030\005"
      " \001(\005\022\022\n\nclear_time\030\006 \001(\005\022\023\n\013total_power\030"
      "\007 \002(\005\022\r\n\005point\030\010 \001(\005\022:\n\007entries\030\t \003(\0132)."
      "b2.protocol.commondata.MatchRanker.Entry"
      "\022\026\n\016pvp_replay_url\030\n \001(\t\022\036\n\026replay_size_"
      "compressed\030\013 \001(\005\022 \n\030replay_size_uncompre"
      "ssed\030\014 \001(\005\032V\n\005Entry\022>\n\016character_type\030\001 "
      "\002(\0162&.b2.protocol.commondata.Character.T"
      "YPE\022\r\n\005level\030\002 \002(\005\"\241\001\n\rRankingReward\022\r\n\005"
      "grade\030\001 \002(\005\022\022\n\nstar_count\030\002 \002(\005\022\017\n\007ranki"
      "ng\030\003 \002(\005\022\024\n\014ranker_count\030\004 \002(\005\022\025\n\rinitia"
      "l_grade\030\005 \002(\005\022/\n\007rewards\030\n \003(\0132\036.b2.prot"
      "ocol.commondata.Reward\"\257\001\n\026DimensionRank"
      "ingReward\022\035\n\025best_difficulty_level\030\001 \002(\005"
      "\022\036\n\026best_clear_time_millis\030\002 \002(\005\022\017\n\007rank"
      "ing\030\003 \002(\005\022\024\n\014ranker_count\030\004 \002(\005\022/\n\007rewar"
      "ds\030\n \003(\0132\036.b2.protocol.commondata.Reward"
      "\"\302\003\n\017DimensionStatus\022\035\n\025best_difficulty_"
      "level\030\001 \002(\005\022\036\n\026best_clear_time_millis\030\002 "
      "\001(\005\022C\n\023best_character_type\030\003 \001(\0162&.b2.pr"
      "otocol.commondata.Character.TYPE\022\034\n\024best"
      "_character_level\030\004 \001(\005\022\030\n\020best_total_pow"
      "er\030\005 \001(\005\022\030\n\020best_record_time\030\006 \001(\003\022\034\n\024to"
      "p_difficulty_level\030\007 \002(\005\022\035\n\025last_difficu"
      "lty_level\030\010 \001(\005\022C\n\023last_character_type\030\t"
      " \001(\0162&.b2.protocol.commondata.Character."
      "TYPE\022\031\n\021daily_clear_count\030\n \002(\005\022\035\n\025daily"
      "_clear_count_max\030\013 \002(\005\022\035\n\025daily_count_in"
      "it_time\030\014 \002(\003\"Q\n\004Room\"&\n\004TYPE\022\007\n\003PVP\020\000\022\010"
      "\n\004RAID\020\001\022\013\n\007ASSAULT\020\002\"!\n\006ACCESS\022\n\n\006PUBLI"
      "C\020\000\022\013\n\007PRIVATE\020\001\"[\n\014RoomLocation\022:\n\020chan"
      "nel_endpoint\030\001 \002(\0132 .b2.protocol.commond"
      "ata.Endpoint\022\017\n\007room_id\030\002 \002(\t\"\235\002\n\017TeamBa"
      "ttleEntry\022D\n\016formation_type\030\001 \002(\0162,.b2.p"
      "rotocol.commondata.BattleFormation.TYPE\022"
      "@\n\020character_slot_1\030\n \002(\0162&.b2.protocol."
      "commondata.Character.TYPE\022@\n\020character_s"
      "lot_2\030\013 \002(\0162&.b2.protocol.commondata.Cha"
      "racter.TYPE\022@\n\020character_slot_3\030\014 \002(\0162&."
      "b2.protocol.commondata.Character.TYPE\"\235\001"
      "\n\023MatchOpenPeriodInfo\022\023\n\013day_of_week\030\001 \002"
      "(\005\022\022\n\nbegin_hour\030\002 \002(\005\022\021\n\tbegin_min\030\003 \002("
      "\005\022\020\n\010end_hour\030\004 \002(\005\022\017\n\007end_min\030\005 \002(\005\022\021\n\t"
      "raid_type\030\006 \001(\005\022\024\n\014assault_type\030\007 \001(\005\"P\n"
      "\017KillMonsterInfo\022\022\n\nmonster_id\030\001 \002(\005\022\025\n\r"
      "monster_grade\030\002 \002(\005\022\022\n\nkill_count\030\003 \002(\005\""
      ".\n\010DropData\022\023\n\013template_id\030\001 \002(\005\022\r\n\005coun"
      "t\030\002 \002(\005\"\215\002\n\014MailItemInfo\022\030\n\020item_templat"
      "e_id\030\001 \002(\005\022\023\n\013item_amount\030\002 \002(\005\022B\n\016chara"
      "cter_type\030\003 \001(\0162*.b2.protocol.commondata"
      ".Item.CharacterType\022*\n\004item\030\004 \001(\0132\034.b2.p"
      "rotocol.commondata.Item\0220\n\007costume\030\005 \001(\013"
      "2\037.b2.protocol.commondata.Costume\022,\n\005tot"
      "em\030\006 \001(\0132\035.b2.protocol.commondata.Totem\""
      "q\n\nWingOption\022>\n\016character_type\030\001 \002(\0162&."
      "b2.protocol.commondata.Character.TYPE\022\024\n"
      "\014option_index\030\002 \002(\005\022\r\n\005level\030\003 \002(\005\"\270\001\n\013F"
      "airyStatus\0225\n\nfairy_type\030\001 \002(\0162!.b2.prot"
      "ocol.commondata.FairyType\022\r\n\005level\030\002 \002(\005"
      "\022\025\n\renhance_point\030\003 \002(\005\022!\n\031activated_ble"
      "ss_option_id\030\005 \002(\005\022\023\n\013bless_level\030\006 \002(\005\022"
      "\024\n\014option_value\030\007 \002(\002\"\177\n\005Relic\022>\n\016charac"
      "ter_type\030\001 \002(\0162&.b2.protocol.commondata."
      "Character.TYPE\022\020\n\010relic_id\030\002 \002(\005\022\r\n\005grad"
      "e\030\003 \002(\005\022\025\n\renhance_level\030\004 \002(\005\"\243\001\n\rRolli"
      "ngBanner\022\n\n\002id\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022\020\n\010su"
      "b_type\030\003 \002(\005\022\026\n\016banner_img_url\030\004 \002(\t\022\022\n\n"
      "start_time\030\005 \002(\003\022\020\n\010end_time\030\006 \002(\003\022\027\n\017ba"
      "nner_duration\030\007 \002(\005\022\017\n\007web_url\030\010 \002(\t\"\346\022\n"
      "\nConfigData\022!\n\031skill_point_buy_price_gem"
      "\030\001 \001(\005\022!\n\031max_skill_point_buy_count\030\002 \001("
      "\005\022#\n\033skill_point_reset_price_gem\030\003 \001(\005\022&"
      "\n\036need_cash_for_extend_inventory\030\004 \001(\005\022-"
      "\n%increase_inventory_slot_per_buy_count\030"
      "\005 \001(\005\022 \n\030max_inventory_slot_count\030\006 \001(\005\022"
      "\030\n\020max_friend_count\030\007 \001(\005\022\033\n\023max_send_as"
      "k_friend\030\010 \001(\005\022\036\n\026max_receive_ask_friend"
      "\030\t \001(\005\022&\n\036cooltime_for_send_social_point"
      "\030\n \001(\005\022\'\n\037max_delete_friend_count_for_da"
      "y\030\013 \001(\005\022\036\n\026max_social_point_value\030\014 \001(\005\022"
      "+\n#add_social_point_for_send_to_friend\030\r"
      " \001(\005\0220\n(add_social_point_for_receive_fro"
      "m_friend\030\016 \001(\005\022(\n stage_buff_rate_for_in"
      "crease_exp\030\017 \001(\002\022)\n!stage_buff_rate_for_"
      "increase_gold\030\020 \001(\002\022,\n$stage_buff_rate_f"
      "or_boost_game_speed\030\021 \001(\002\022\036\n\026guild_set_u"
      "p_gold_cost\030\022 \001(\005\022&\n\036default_max_guild_m"
      "ember_count\030\023 \001(\005\022*\n\"max_invite_guild_co"
      "unt_for_account\030\024 \001(\005\022)\n!invite_guild_ex"
      "pire_period_by_day\030\025 \001(\005\022\036\n\026max_raid_cou"
      "nt_per_day\030\026 \001(\005\022\036\n\026update_guild_gold_co"
      "st\030\027 \001(\005\022,\n$guild_master_logout_limit_pe"
      "riod_day\030\030 \001(\005\022*\n\"guild_battle_time_limi"
      "t_sec_client\030\031 \001(\005\022/\n\'hero_tower_sweep_r"
      "eward_count_per_floor\030\032 \001(\005\022&\n\036assault_r"
      "esurrection_max_count\030\033 \001(\005\022\033\n\023pvp_match"
      "_point_max\030\035 \001(\005\022,\n$pvp_match_point_char"
      "ge_period_second\030\036 \001(\005\022\034\n\024team_match_poi"
      "nt_max\030\037 \001(\005\022-\n%team_match_point_charge_"
      "period_second\030  \001(\005\0223\n+item_random_optio"
      "n_change_cost_dark_crystal\030! \001(\005\022\035\n\025item"
      "_preset_max_count\030\" \001(\005\022\"\n\032skill_quick_s"
      "lot_max_count\030# \001(\005\022(\n assault_mvp_point"
      "_to_open_reward\030$ \001(\005\022\'\n\037duel_reward_cha"
      "llenge_max_count\030% \001(\005\022$\n\034guild_support_"
      "cool_time_hour\030& \001(\005\022\'\n\037guild_support_ma"
      "x_count_for_day\030\' \001(\005\022\034\n\024rest_max_time_s"
      "econd\030( \001(\005\022&\n\036rest_time_second_per_one_"
      "point\030) \001(\005\0222\n*guild_mercenary_donation_"
      "max_count_for_day\030* \001(\005\022\"\n\032guild_rejoin_"
      "wait_time_min\030+ \001(\005\022\033\n\023character_level_m"
      "ax\030, \001(\005\022,\n$match_continuous_win_count_f"
      "or_bonus\030- \001(\005\022(\n hero_tower_free_ticket"
      "_count_max\030. \001(\005\022-\n%counter_dungeon_dail"
      "y_enter_count_max\030/ \001(\005\022\034\n\024max_chat_bloc"
      "k_count\0300 \001(\005\022(\n min_floor_for_hero_towe"
      "r_ranking\0301 \001(\005\022\'\n\037raid_guild_bonus_coun"
      "t_member_2\0302 \001(\005\022\'\n\037raid_guild_bonus_cou"
      "nt_member_3\0303 \001(\005\022\'\n\037raid_guild_bonus_co"
      "unt_member_4\0304 \001(\005\022$\n\034show_review_induce"
      "ment_popup\0305 \001(\005\022!\n\031max_open_stage_diffi"
      "culty\0306 \001(\005\022+\n#item_random_option_change"
      "_cost_cash\0307 \001(\005\022\035\n\025event_dice_free_coun"
      "t\0308 \001(\005\022%\n\035event_dice_point_per_one_dice"
      "\0309 \001(\005\022(\n max_costume_inventory_slot_cou"
      "nt\030: \001(\005\022&\n\036guild_master_change_period_d"
      "ay\030; \001(\005\022 \n\030exchange_item_count_gold\030< \001"
      "(\005\022\037\n\027exchange_item_count_gem\030= \001(\005\022\023\n\013l"
      "obby_style\030> \001(\005\022\033\n\023advanced_rank_level\030"
      "\? \001(\005\"\311\022\n\004Shop\032@\n\024PeriodicPackageState\022\022"
      "\n\npackage_id\030\001 \002(\005\022\024\n\014end_pay_time\030\002 \002(\003"
      "\032u\n\031FlatRatePackageBonusState\022\025\n\rcurrent"
      "_index\030\001 \002(\005\022\024\n\014weekly_state\030\002 \002(\010\022\025\n\rmo"
      "nthly_state\030\003 \002(\010\022\024\n\014reward_state\030\004 \002(\010\032"
      "\211\001\n\025LevelUpPackageMission\022\022\n\npackage_id\030"
      "\001 \002(\005\022>\n\016character_type\030\002 \002(\0162&.b2.proto"
      "col.commondata.Character.TYPE\022\r\n\005level\030\003"
      " \002(\005\022\r\n\005state\030\004 \002(\005\032\241\001\n\030ReachLevelPackag"
      "eMission\022\022\n\npackage_id\030\001 \002(\005\022>\n\016characte"
      "r_type\030\002 \002(\0162&.b2.protocol.commondata.Ch"
      "aracter.TYPE\022\r\n\005level\030\003 \002(\005\022\r\n\005state\030\004 \002"
      "(\005\022\023\n\013expire_time\030\005 \002(\003\032\357\005\n\rBuyResultInf"
      "o\0229\n\014add_products\030\001 \003(\0132#.b2.protocol.co"
      "mmondata.ShopProduct\022\?\n\020shop_buy_manages"
      "\030\002 \003(\0132%.b2.protocol.commondata.ShopBuyM"
      "anage\022B\n\020buy_product_type\030\003 \001(\0162(.b2.pro"
      "tocol.commondata.Shop.ProductType\022Q\n\026per"
      "iodic_package_state\030\004 \001(\01321.b2.protocol."
      "commondata.Shop.PeriodicPackageState\022]\n\035"
      "flat_rate_package_bonus_state\030\005 \001(\01326.b2"
      ".protocol.commondata.Shop.FlatRatePackag"
      "eBonusState\022U\n\031level_up_package_missions"
      "\030\006 \003(\01322.b2.protocol.commondata.Shop.Lev"
      "elUpPackageMission\022Z\n\033reach_level_packag"
      "e_mission\030\007 \001(\01325.b2.protocol.commondata"
      ".Shop.ReachLevelPackageMission\022>\n\014mileag"
      "e_type\030\014 \001(\0162(.b2.protocol.commondata.Sh"
      "op.MileageType\022\027\n\017current_mileage\030\r \001(\005\022"
      "1\n\010costumes\030\024 \003(\0132\037.b2.protocol.commonda"
      "ta.Costume\022-\n\006totems\030\036 \003(\0132\035.b2.protocol"
      ".commondata.Totem\"Q\n\rDrawPriceType\022\014\n\010DR"
      "AW_GEM\020\001\022\025\n\021DRAW_SOCIAL_POINT\020\002\022\033\n\027SHOP_"
      "TEN_LOTTERY_TICKET\020\003\"\215\001\n\013MileageType\022\023\n\017"
      "MILEAGE_LOTTERY\020\001\022\027\n\023MILEAGE_BLADE_POINT"
      "\020\002\022\017\n\013MILEAGE_GEM\020\003\022\020\n\014MILEAGE_GOLD\020\004\022\030\n"
      "\024MILEAGE_DARK_CRYSTAL\020\005\022\023\n\017MILEAGE_PACKA"
      "GE\020\006\"_\n\014BuyPriceType\022\007\n\003GEM\020\001\022\020\n\014SOCIAL_"
      "POINT\020\002\022\020\n\014DARK_CRYSTAL\020\003\022\010\n\004CASH\020\004\022\010\n\004G"
      "OLD\020\005\022\016\n\nFAME_POINT\020\006\"\223\004\n\013ProductType\022\020\n"
      "\014PRODUCT_NONE\020\000\022\027\n\023PRODUCT_BLADE_POINT\020\001"
      "\022\017\n\013PRODUCT_GEM\020\002\022\020\n\014PRODUCT_GOLD\020\003\022\020\n\014P"
      "RODUCT_ITEM\020\004\022\033\n\027PRODUCT_GENERAL_LOTTERY"
      "\020\005\022\035\n\031PRODUCT_SELECTIVE_LOTTERY\020\006\022\023\n\017PRO"
      "DUCT_PACKAGE\020\007\022\030\n\024PRODUCT_DARK_CRYSTAL\020\010"
      "\022\034\n\030PRODUCT_GOLD_BUFF_TICKET\020\t\022\033\n\027PRODUC"
      "T_EXP_BUFF_TICKET\020\n\022\036\n\032PRODUCT_STAGE_BOO"
      "ST_TICKET\020\013\022#\n\037PRODUCT_SHOP_TEN_LOTTERY_"
      "TICKET\020\014\022$\n PRODUCT_SELECTIVE_AETHER_LOT"
      "TERY\020\r\022$\n PRODUCT_PREFIX_SELECTIVE_LOTTE"
      "RY\020\016\022#\n\037PRODUCT_STAGE_AUTO_CLEAR_TICKET\020"
      "\017\022\023\n\017PRODUCT_COSTUME\020\020\022\021\n\rPRODUCT_TOTEM\020"
      "\021\022 \n\034PRODUCT_TOTEM_PREFIX_LOTTERY\020\022\"U\n\010M"
      "arkType\022\r\n\tMARK_NONE\020\000\022\014\n\010MARK_NEW\020\001\022\014\n\010"
      "MARK_HOT\020\002\022\014\n\010MARK_HIT\020\003\022\020\n\014MARK_LIMITED"
      "\020\004\"X\n\010ShopType\022\020\n\014SHOP_PACKAGE\020\001\022\025\n\021SHOP"
      "_DARK_CRYSTAL\020\002\022\016\n\nSHOP_GOODS\020\003\022\023\n\017SHOP_"
      "FAME_POINT\020\004\"[\n\014RestrictType\022\r\n\tSHOP_NON"
      "E\020\000\022\014\n\010SHOP_DAY\020\001\022\r\n\tSHOP_WEEK\020\002\022\016\n\nSHOP"
      "_MONTH\020\003\022\017\n\013SHOP_NUMBER\020\004\"-\n\tMagicShop\022\n"
      "\n\002id\030\001 \002(\005\022\024\n\014is_purchased\030\004 \002(\010\"\230\001\n\013Sho"
      "pLottery\022C\n\017draw_price_type\030\001 \002(\0162*.b2.p"
      "rotocol.commondata.Shop.DrawPriceType\022\025\n"
      "\ris_continuous\030\002 \002(\010\022\026\n\016next_free_time\030\003"
      " \002(\003\022\025\n\rlottery_count\030\004 \002(\005\"x\n\013ShopProdu"
      "ct\022>\n\014product_type\030\001 \002(\0162(.b2.protocol.c"
      "ommondata.Shop.ProductType\022\022\n\nproduct_id"
      "\030\002 \002(\005\022\025\n\rproduct_count\030\003 \002(\005\"y\n\013ShopMil"
      "eage\022C\n\021shop_mileage_type\030\001 \002(\0162(.b2.pro"
      "tocol.commondata.Shop.MileageType\022\017\n\007mil"
      "eage\030\002 \002(\005\022\024\n\014reward_index\030\003 \002(\005\"L\n\rShop"
      "BuyManage\022\022\n\nproduct_id\030\001 \002(\005\022\021\n\tbuy_cou"
      "nt\030\002 \002(\005\022\024\n\014updated_time\030\003 \002(\003\"\221\001\n\017ShopP"
      "roductMark\022\022\n\nproduct_id\030\001 \002(\005\0228\n\tmark_t"
      "ype\030\002 \002(\0162%.b2.protocol.commondata.Shop."
      "MarkType\022\030\n\020sales_start_time\030\n \001(\003\022\026\n\016sa"
      "les_end_time\030\013 \001(\003\"\373\001\n\022MarketPurchaseInf"
      "o\022\022\n\nproduct_id\030\001 \002(\005\022\031\n\021market_product_"
      "id\030\002 \002(\t\022\031\n\021developer_payload\030\003 \002(\t\022H\n\016p"
      "urchase_state\030\004 \002(\01620.b2.protocol.common"
      "data.MarketPurchaseInfo.STATE\022\033\n\023bonus_i"
      "ncrease_rate\030\005 \002(\005\"4\n\005STATE\022\016\n\nREGISTERE"
      "D\020\001\022\014\n\010VERIFIED\020\002\022\r\n\tCOMPLETED\020\003\"\203\001\n\016Col"
      "lectionItem\022\030\n\020item_template_id\030\001 \002(\005\022B\n"
      "\rcollect_state\030\002 \002(\0162+.b2.protocol.commo"
      "ndata.CollectionItemState\022\023\n\013is_new_item"
      "\030\003 \002(\010\"\231\001\n\021CollectionSetItem\0225\n\010group_id"
      "\030\001 \002(\0162#.b2.protocol.commondata.GroupPre"
      "fix\022\r\n\005grade\030\002 \002(\005\022>\n\016character_type\030\003 \002"
      "(\0162&.b2.protocol.commondata.Character.TY"
      "PE\"d\n\021RaidRankingReward\022\017\n\007ranking\030\001 \002(\005"
      "\022\030\n\020item_template_id\030\002 \002(\005\022\022\n\nitem_count"
      "\030\003 \002(\005\022\020\n\010is_bonus\030\004 \002(\010\"}\n\025EventAttenda"
      "nceStatus\022\020\n\010event_id\030\001 \002(\005\022\026\n\016attendanc"
      "e_day\030\002 \002(\005\022\034\n\024last_attendance_time\030\003 \002("
      "\003\022\034\n\024next_attendance_time\030\004 \002(\003\"\242\001\n\030Begi"
      "nnerAttendanceStatus\022\026\n\016attendance_day\030\001"
      " \002(\005\022\034\n\024last_attendance_time\030\002 \002(\003\022\034\n\024ne"
      "xt_attendance_time\030\003 \002(\003\022\035\n\025total_attend"
      "ance_days\030\005 \002(\005\022\023\n\013finish_time\030\006 \002(\003\"\255\001\n"
      "\023DuelRewardBoxStatus\022\027\n\017is_reward_state\030"
      "\001 \002(\010\0229\n\tbox_grade\030\002 \002(\0162&.b2.protocol.c"
      "ommondata.RewardBoxGrade\022\021\n\twin_count\030\003 "
      "\002(\005\022\031\n\021upgrade_win_count\030\004 \002(\005\022\024\n\014defeat"
      "_count\030\005 \002(\005\"\225\001\n\013MatchResult\022\022\n\naccount_"
      "id\030\001 \002(\003\022\023\n\013match_token\030\002 \002(\t\0228\n\006result\030"
      "\003 \002(\0162(.b2.protocol.commondata.MatchResu"
      "lt.TYPE\"#\n\004TYPE\022\007\n\003WIN\020\000\022\010\n\004LOSE\020\001\022\010\n\004DR"
      "AW\020\002\"\361\001\n\021UnitySkillMission\022C\n\023main_chara"
      "cter_type\030\001 \002(\0162&.b2.protocol.commondata"
      ".Character.TYPE\022D\n\024unity_character_type\030"
      "\002 \002(\0162&.b2.protocol.commondata.Character"
      ".TYPE\022\014\n\004step\030\003 \002(\005\022C\n\005state\030\004 \002(\01624.b2."
      "protocol.commondata.MissionInfo.MissionS"
      "tateType\"\245\001\n\nUnitySkill\022C\n\023main_characte"
      "r_type\030\001 \002(\0162&.b2.protocol.commondata.Ch"
      "aracter.TYPE\022D\n\024unity_character_type\030\002 \002"
      "(\0162&.b2.protocol.commondata.Character.TY"
      "PE\022\014\n\004step\030\003 \002(\005\"\223\001\n\027UnitySkillAwakenMis"
      "sion\022>\n\016character_type\030\001 \002(\0162&.b2.protoc"
      "ol.commondata.Character.TYPE\022\022\n\nmission_"
      "id\030\002 \002(\005\022\021\n\ttry_count\030\003 \002(\005\022\021\n\tcompleted"
      "\030\004 \002(\010\"\200\001\n\020ContentsModeInfo\0222\n\004mode\030\001 \002("
      "\0162$.b2.protocol.commondata.ContentsMode\022"
      "8\n\005state\030\002 \002(\0162).b2.protocol.commondata."
      "ContentsModeState\"V\n\014ContentsOpen\022\017\n\007mod"
      "e_id\030\001 \002(\005\022\016\n\006opened\030\002 \002(\010\022\020\n\010stage_id\030\003"
      " \002(\005\022\023\n\013tutorial_id\030\004 \002(\005\"e\n\016CharacterPo"
      "wer\022>\n\016character_type\030\001 \002(\0162&.b2.protoco"
      "l.commondata.Character.TYPE\022\023\n\013total_pow"
      "er\030\002 \002(\005\"L\n\021AssaultBattleInfo\022\022\n\nkill_co"
      "unt\030\001 \001(\005\022\023\n\013death_count\030\002 \001(\005\022\016\n\006damage"
      "\030\003 \001(\005\"\201\001\n\rRoomCharacter\022>\n\016character_ty"
      "pe\030\001 \001(\0162&.b2.protocol.commondata.Charac"
      "ter.TYPE\022\027\n\017character_power\030\002 \001(\005\022\027\n\017cha"
      "racter_level\030\003 \001(\005\"5\n\014AdminMessage\022\017\n\007me"
      "ssage\030\001 \002(\t\022\024\n\014display_time\030\002 \002(\005\"O\n\020Poi"
      "ntEventStatus\022\020\n\010event_id\030\001 \002(\005\022\r\n\005point"
      "\030\002 \002(\005\022\032\n\022reward_state_value\030\003 \002(\005\"7\n\024Po"
      "intShopEventStatus\022\020\n\010event_id\030\001 \002(\005\022\r\n\005"
      "point\030\002 \002(\005\"Z\n\033PointShopEventRewardHisto"
      "ry\022\020\n\010event_id\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\032\n\022t"
      "otal_reward_count\030\003 \002(\005\"Y\n\026GemPurchaseEv"
      "entStatus\022\020\n\010event_id\030\001 \002(\005\022\021\n\tgem_count"
      "\030\002 \002(\005\022\032\n\022reward_state_value\030\003 \002(\005\"B\n\020Le"
      "velUpEventInfo\022\020\n\010event_id\030\001 \002(\005\022\r\n\005inde"
      "x\030\002 \002(\005\022\r\n\005state\030\003 \002(\005\"\236\001\n\021SeasonMission"
      "Info\022\020\n\010event_id\030\001 \002(\005\022\013\n\003day\030\002 \002(\005\022\r\n\005i"
      "ndex\030\003 \002(\005\022\026\n\016progress_count\030\004 \002(\005\022C\n\005st"
      "ate\030\005 \002(\01624.b2.protocol.commondata.Missi"
      "onInfo.MissionStateType\"b\n\030SeasonMission"
      "EventStatus\022\020\n\010event_id\030\001 \002(\005\022\026\n\016attenda"
      "nce_day\030\002 \002(\005\022\034\n\024next_attendance_time\030\003 "
      "\002(\003\"G\n\025StageClearEventStatus\022\020\n\010event_id"
      "\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\r\n\005state\030\003 \002(\005\"5\n\r"
      "BlockChatUser\022\022\n\naccount_id\030\001 \002(\003\022\020\n\010nic"
      "kname\030\002 \002(\t\"Y\n\025TenLotteryEventStatus\022\020\n\010"
      "event_id\030\001 \002(\005\022\025\n\rlottery_count\030\002 \002(\005\022\027\n"
      "\017rewarded_indexs\030\003 \003(\005\"\277\001\n\nHallOfFame\0222\n"
      "\004mode\030\001 \002(\0162$.b2.protocol.commondata.Con"
      "tentsMode\022\017\n\007ranking\030\002 \002(\005\022\022\n\naccount_id"
      "\030\003 \002(\003\022\025\n\rpraised_count\030\004 \002(\005\022\023\n\013match_g"
      "rade\030\n \002(\005\022\031\n\021match_start_count\030\013 \002(\005\022\021\n"
      "\tmvp_count\030\014 \002(\005\"\217\003\n\016HallOfFameUser\022*\n\004u"
      "ser\030\001 \002(\0132\034.b2.protocol.commondata.User\022"
      "1\n\013equip_items\030\003 \003(\0132\034.b2.protocol.commo"
      "ndata.Item\0227\n\016equip_costumes\030\004 \003(\0132\037.b2."
      "protocol.commondata.Costume\0223\n\014equip_tot"
      "ems\030\005 \003(\0132\035.b2.protocol.commondata.Totem"
      "\022\022\n\nwing_grade\030\n \001(\005\022\022\n\nwing_Level\030\013 \001(\005"
      "\022\024\n\014wing_visible\030\014 \001(\010\022\026\n\016helmet_visible"
      "\030\r \001(\010\022\036\n\026costume_weapon_visible\030\016 \001(\010\022\033"
      "\n\023costume_hat_visible\030\017 \001(\010\022\035\n\025costume_a"
      "rmor_visible\030\020 \001(\010\"\210\001\n\020HallOfFameReward\022"
      "2\n\004mode\030\001 \002(\0162$.b2.protocol.commondata.C"
      "ontentsMode\022\017\n\007ranking\030\002 \002(\005\022/\n\007rewards\030"
      "\003 \003(\0132\036.b2.protocol.commondata.Reward\"\212\001"
      "\n\020HallOfFamePraise\0222\n\004mode\030\001 \002(\0162$.b2.pr"
      "otocol.commondata.ContentsMode\022\024\n\014praise"
      "_count\030\002 \002(\005\022\021\n\tmax_count\030\003 \002(\005\022\031\n\021targe"
      "t_account_id\030\004 \002(\003\"\\\n\023SpendGemEventStatu"
      "s\022\020\n\010event_id\030\001 \002(\005\022\027\n\017spend_gem_count\030\002"
      " \002(\005\022\032\n\022reward_state_value\030\003 \002(\005\"B\n\027TenL"
      "otterySavingsStatus\022\020\n\010event_id\030\001 \002(\005\022\025\n"
      "\rcurrent_point\030\002 \002(\005\"M\n\020DiceEventMission"
      "\022\022\n\nevent_type\030\001 \002(\005\022\026\n\016progress_count\030\002"
      " \002(\005\022\r\n\005state\030\003 \002(\005\"\371\001\n\017DiceEventStatus\022"
      "\020\n\010event_id\030\001 \002(\005\022\r\n\005point\030\002 \002(\005\022\021\n\tfree"
      "_dice\030\003 \002(\005\022\020\n\010position\030\004 \002(\005\022:\n\010mission"
      "s\030\005 \003(\0132(.b2.protocol.commondata.DiceEve"
      "ntMission\022\024\n\014finish_count\030\006 \002(\005\022\027\n\017buy_p"
      "oint_count\030\007 \002(\005\022\027\n\017roll_dice_count\030\010 \002("
      "\005\022\034\n\024mileage_reward_value\030\t \002(\005\";\n\030Donat"
      "ionPointRewardState\022\r\n\005index\030\001 \002(\005\022\020\n\010re"
      "warded\030\002 \002(\010\"\215\001\n\017DonationPresent\022\030\n\020item"
      "_template_id\030\001 \002(\005\022\016\n\006amount\030\002 \002(\005\022P\n\030do"
      "nation_consumable_type\030\003 \002(\0162..b2.protoc"
      "ol.commondata.DonationConsumableType\"\252\001\n"
      "\020DonationJobState\022\023\n\013donation_id\030\001 \002(\005\022D"
      "\n\rcurrent_state\030\002 \002(\0162-.b2.protocol.comm"
      "ondata.DonationJobState.TYPE\022\021\n\tcomplete"
      "d\030\003 \002(\010\"(\n\004TYPE\022\t\n\005START\020\001\022\007\n\003END\020\002\022\014\n\010R"
      "EWARDED\020\003\"\277\001\n\022FactoryLimitStatus\022\020\n\010limi"
      "t_id\030\001 \002(\005\022<\n\nlimit_type\030\002 \002(\0162(.b2.prot"
      "ocol.commondata.FactoryLimitType\022E\n\017limi"
      "t_time_type\030\003 \002(\0162,.b2.protocol.commonda"
      "ta.FactoryLimitTimeType\022\022\n\nleft_count\030\004 "
      "\002(\005\"g\n\025FactoryPeriodicStatus\022\022\n\nfactory_"
      "id\030\001 \002(\005\022\024\n\014preview_time\030\002 \002(\003\022\022\n\nstart_"
      "time\030\003 \002(\003\022\020\n\010end_time\030\004 \002(\003\"\355\001\n\rFactory"
      "Result\022F\n\023factory_result_type\030\001 \002(\0162).b2"
      ".protocol.commondata.FactoryResultType\022/"
      "\n\tmake_item\030\002 \001(\0132\034.b2.protocol.commonda"
      "ta.Item\0220\n\nbonus_item\030\003 \001(\0132\034.b2.protoco"
      "l.commondata.Item\0221\n\013refund_item\030\004 \003(\0132\034"
      ".b2.protocol.commondata.Item\"\217\002\n\017UnsealB"
      "oxReward\0227\n\013reward_type\030\001 \002(\0162\".b2.proto"
      "col.commondata.RewardType\022\016\n\006amount\030\002 \001("
      "\005\022\023\n\013template_id\030\003 \001(\003\022\024\n\014effect_grade\030\004"
      " \001(\005\022*\n\004item\030\005 \001(\0132\034.b2.protocol.commond"
      "ata.Item\022,\n\005totem\030\006 \001(\0132\035.b2.protocol.co"
      "mmondata.Totem\022.\n\006aether\030\007 \001(\0132\036.b2.prot"
      "ocol.commondata.Aether\"]\n\rWorldLocation\022"
      ":\n\020channel_endpoint\030\001 \002(\0132 .b2.protocol."
      "commondata.Endpoint\022\020\n\010world_id\030\002 \002(\t*9\n"
      "\nStatusCode\022\023\n\017UNAUTHENTICATED\020\001\022\026\n\022DUPL"
      "ICATED_SIGN_IN\020\002*<\n\026FriendInviteRewardTy"
      "pe\022\020\n\014INVITE_COUNT\020\001\022\020\n\014JOINER_COUNT\020\002*G"
      "\n\013ItemQuality\022\n\n\006COMMON\020\001\022\014\n\010UNCOMMON\020\002\022"
      "\010\n\004RARE\020\003\022\010\n\004EPIC\020\004\022\n\n\006LEGEND\020\005*2\n\025SealS"
      "lotOpenPriceType\022\013\n\007SOP_GEM\020\001\022\014\n\010SOP_GOL"
      "D\020\002*(\n\rSealPriceType\022\n\n\006SP_GEM\020\001\022\013\n\007SP_G"
      "OLD\020\002*S\n\016TotemEquipSlot\022\016\n\nTOTEM_NONE\020\000\022"
      "\r\n\tTOTEM_TOP\020\001\022\020\n\014TOTEM_MIDDLE\020\002\022\020\n\014TOTE"
      "M_BOTTOM\020\003*\262\001\n\rEquipPosition\022\010\n\004NONE\020\000\022\n"
      "\n\006WEAPON\020\001\022\007\n\003HAT\020\002\022\t\n\005ARMOR\020\003\022\t\n\005GLOVE\020"
      "\004\022\t\n\005SHOES\020\005\022\010\n\004BELT\020\006\022\010\n\004NECK\020\007\022\010\n\004RING"
      "\020\010\022\010\n\004WING\020\t\022\023\n\016COSTUME_WEAPON\020\311\001\022\020\n\013COS"
      "TUME_HAT\020\312\001\022\022\n\rCOSTUME_ARMOR\020\313\001*\335\001\n\013Grou"
      "pPrefix\022\n\n\006SACRED\020\001\022\n\n\006MYSTIC\020\002\022\t\n\005STEEL"
      "\020\003\022\n\n\006SILENT\020\004\022\n\n\006GROWTH\020\005\022\010\n\004DUEL\020\006\022\n\n\006"
      "HEAVEN\020\007\022\013\n\007ETERNAL\020\010\022\010\n\004COLD\020\n\022\013\n\007CORRU"
      "PT\020\013\022\007\n\003SUN\020\014\022\t\n\005BEACH\020\r\022\t\n\005STUDY\020\016\022\r\n\tC"
      "HRISTMAS\020\017\022\014\n\010NEW_YEAR\020\020\022\r\n\tHALLOWEEN\020\021\022"
      "\016\n\tNON_EQUIP\020\217N* \n\tQuestType\022\010\n\004MAIN\020\001\022\t"
      "\n\005DAILY\020\002*8\n\rMainQuestType\022\023\n\017MAIN_QUEST"
      "_MAIN\020\001\022\022\n\016MAIN_QUEST_SUB\020\002*\351\005\n\nRewardTy"
      "pe\022\017\n\013REWARD_GOLD\020\001\022\016\n\nREWARD_GEM\020\002\022\026\n\022R"
      "EWARD_BLADE_POINT\020\003\022\017\n\013REWARD_ITEM\020\004\022\032\n\026"
      "REWARD_GENERAL_LOTTERY\020\005\022\034\n\030REWARD_SELEC"
      "TIVE_LOTTERY\020\006\022\026\n\022REWARD_BUFF_TICKET\020\007\022\025"
      "\n\021REWARD_HERO_PIECE\020\010\022!\n\035REWARD_SELECTIV"
      "E_ITEM_LOTTERY\020\t\022\037\n\033REWARD_RANK_PROMOTIO"
      "N_POINT\020\n\022\016\n\nREWARD_EXP\020\013\022\027\n\023REWARD_DARK"
      "_CRYSTAL\020\014\022\027\n\023REWARD_SOCIAL_POINT\020\r\022\036\n\032R"
      "EWARD_FIXED_GRADE_LOTTERY\020\016\022\035\n\031REWARD_ST"
      "AGE_BOOST_TICKET\020\017\022$\n REWARD_HOT_TIME_GO"
      "LD_BUFF_TICKET\020\020\022#\n\037REWARD_HOT_TIME_EXP_"
      "BUFF_TICKET\020\021\022\"\n\036REWARD_SHOP_TEN_LOTTERY"
      "_TICKET\020\022\022\025\n\021REWARD_FAME_POINT\020\023\022#\n\037REWA"
      "RD_SELECTIVE_AETHER_LOTTERY\020\024\022#\n\037REWARD_"
      "PREFIX_SELECTIVE_LOTTERY\020\025\022\"\n\036REWARD_STA"
      "GE_AUTO_CLEAR_TICKET\020\026\022\022\n\016REWARD_COSTUME"
      "\020\027\022\020\n\014REWARD_TOTEM\020\030\022\037\n\033REWARD_TOTEM_PRE"
      "FIX_LOTTERY\020\031\022(\n$REWARD_ADVANCED_RANK_PR"
      "OMOTION_POINT\020\032*>\n\016RewardPushType\022\024\n\020REW"
      "ARD_PUSH_MAIL\020\001\022\026\n\022REWARD_PUSH_DIRECT\020\002*"
      "a\n\024StageBuffOptionFlags\022\020\n\014INCREASE_EXP\020"
      "\001\022\021\n\rINCREASE_GOLD\020\002\022\016\n\nAUTO_SKILL\020\004\022\024\n\020"
      "BOOST_GAME_SPEED\020\010*G\n\017StageRepeatMode\022\016\n"
      "\nSRM_NORMAL\020\000\022\020\n\014SRM_REPEATED\020\001\022\022\n\016SRM_C"
      "ONTINUOUS\020\002*@\n\017StageDifficulty\022\n\n\006NORMAL"
      "\020\001\022\010\n\004HARD\020\002\022\r\n\tVERY_HARD\020\003\022\010\n\004HELL\020\004*R\n"
      "\022StageClearProperty\022\021\n\rCLEAR_DEFAULT\020\000\022\021"
      "\n\rCLEAR_IN_TIME\020\001\022\026\n\022CLEAR_ALL_SURVIVAL\020"
      "\002*K\n\014MailCategory\022\013\n\007PRESENT\020\001\022\017\n\013BLADE_"
      "POINT\020\002\022\020\n\014SOCIAL_POINT\020\003\022\013\n\007LOTTERY\020\004*\237"
      "\005\n\016MailAttachType\022\017\n\013ATTACH_GOLD\020\001\022\016\n\nAT"
      "TACH_GEM\020\002\022\017\n\013ATTACH_ITEM\020\003\022\026\n\022ATTACH_BL"
      "ADE_POINT\020\004\022\027\n\023ATTACH_SOCIAL_POINT\020\005\022\032\n\026"
      "ATTACH_GENERAL_LOTTERY\020\006\022\034\n\030ATTACH_SELEC"
      "TIVE_LOTTERY\020\007\022!\n\035ATTACH_SELECTIVE_ITEM_"
      "LOTTERY\020\010\022\025\n\021ATTACH_HERO_PIECE\020\t\022\037\n\033ATTA"
      "CH_RANK_PROMOTION_POINT\020\n\022\027\n\023ATTACH_DARK"
      "_CRYSTAL\020\013\022\036\n\032ATTACH_FIXED_GRADE_LOTTERY"
      "\020\014\022\035\n\031ATTACH_STAGE_BOOST_TICKET\020\r\022$\n ATT"
      "ACH_HOT_TIME_GOLD_BUFF_TICKET\020\016\022#\n\037ATTAC"
      "H_HOT_TIME_EXP_BUFF_TICKET\020\017\022\"\n\036ATTACH_S"
      "HOP_TEN_LOTTERY_TICKET\020\020\022\025\n\021ATTACH_FAME_"
      "POINT\020\021\022#\n\037ATTACH_SELECTIVE_AETHER_LOTTE"
      "RY\020\022\022#\n\037ATTACH_PREFIX_SELECTIVE_LOTTERY\020"
      "\023\022\"\n\036ATTACH_STAGE_AUTO_CLEAR_TICKET\020\024\022\037\n"
      "\033ATTACH_TOTEM_PREFIX_LOTTERY\020\025\022(\n$ATTACH"
      "_ADVANCED_RANK_PROMOTION_POINT\020\026*\263\002\n\025Mai"
      "lPresentAttachType\022\t\n\005MONEY\020\001\022\007\n\003GEM\020\002\022\010"
      "\n\004ITEM\020\003\022\016\n\nHERO_PIECE\020\004\022\030\n\024RANK_PROMOTI"
      "ON_POINT\020\005\022\020\n\014DARK_CRYSTAL\020\006\022\026\n\022STAGE_BO"
      "OST_TICKET\020\007\022\035\n\031HOT_TIME_GOLD_BUFF_TICKE"
      "T\020\010\022\034\n\030HOT_TIME_EXP_BUFF_TICKET\020\t\022\033\n\027SHO"
      "P_TEN_LOTTERY_TICKET\020\n\022\016\n\nFAME_POINT\020\013\022\033"
      "\n\027STAGE_AUTO_CLEAR_TICKET\020\014\022!\n\035ADVANCED_"
      "RANK_PROMOTION_POINT\020\r*\305\n\n\016MailSourceTyp"
      "e\022\017\n\013SOURCE_NONE\020\000\022\016\n\nATTENDANCE\020\001\022\r\n\tPL"
      "AY_TIME\020\002\022\024\n\020EVENT_ATTENDANCE\020\003\022\021\n\rDAILY"
      "_MISSION\020\004\022\022\n\016WEEKLY_MISSION\020\005\022\023\n\017MONTHL"
      "Y_MISSION\020\006\022\022\n\016SERIAL_MISSION\020\007\022!\n\035MISSI"
      "ON_COMPLETE_POINT_REWARD\020\010\022\017\n\013DAILY_QUES"
      "T\020\t\022\016\n\nMAIN_QUEST\020\n\022\r\n\tSUB_QUEST\020\013\022\016\n\nPV"
      "P_RESULT\020\014\022\022\n\016PVP_REWARD_BOX\020\r\022\017\n\013PVP_RA"
      "NKING\020\016\022\027\n\023COUNTER_DUNGEON_WIN\020\017\022\032\n\026COUN"
      "TER_DUNGEON_WEEKLY\020\020\022\025\n\021TEAM_MATCH_RESUL"
      "T\020\021\022\031\n\025TEAM_MATCH_REWARD_BOX\020\022\022\026\n\022TEAM_M"
      "ATCH_RANKING\020\023\022\016\n\nHERO_TOWER\020\024\022\017\n\013SOURCE"
      "_RAID\020\025\022\014\n\010TUTORIAL\020\026\022\022\n\016ASSAULT_RESULT\020"
      "\027\022\026\n\022ASSAULT_REWARD_BOX\020\030\022\023\n\017ASSAULT_RAN"
      "KING\020\031\022\017\n\013ASSAULT_MVP\020\032\022\020\n\014GUILD_BATTLE\020"
      "\033\022\024\n\020GUILD_REWARD_BOX\020\034\022\021\n\rGUILD_SUPPORT"
      "\020\035\022\n\n\006FRIEND\020\036\022\013\n\007COLLECT\020\037\022\r\n\tACT_CLEAR"
      "\020 \022\014\n\010BUY_SHOP\020!\022\025\n\021SHOP_DRAW_MILEAGE\020\"\022"
      "\024\n\020SHOP_BUY_MILEAGE\020#\022\010\n\004PUSH\020$\022\017\n\013MAINT"
      "ENANCE\020%\022\t\n\005EVENT\020&\022\t\n\005ADMIN\020\'\022\017\n\013UNITY_"
      "SKILL\020(\022\024\n\020HERO_TOWER_SWEEP\020)\022\010\n\004REST\020*\022"
      "\n\n\006COUPON\020+\022\r\n\tPROMOTION\020,\022\027\n\023KAKAO_FRIE"
      "ND_INVITE\020-\022\r\n\tSHOP_CASH\020.\022\016\n\nSHOP_EVENT"
      "\020/\022\020\n\014SHOP_PACKAGE\0200\022 \n\034SHOP_FLAT_RATE_P"
      "ACKAGE_BONUS\0201\022\031\n\025SHOP_LEVEL_UP_PACKAGE\020"
      "2\022 \n\034SHOP_REACH_LEVEL_PACKAGE_BUY\0203\022%\n!S"
      "HOP_REACH_LEVEL_PACKAGE_COMPLETE\0204\022\035\n\031SH"
      "OP_PACKAGE_PERIOD_BONUS\0205\022\026\n\022FAME_PRAISE"
      "_REWARD\0206\022\036\n\032FAME_RAISED_RANKING_REWARD\020"
      "7\022\026\n\022FAME_RANKER_REWARD\0208\022\022\n\016BUY_MAGIC_S"
      "HOP\0209\022\027\n\023BEGINNER_ATTENDANCE\020:\022\021\n\rMAKE_D"
      "ONATION\020;\022\031\n\025DONATION_POINT_REWARD\020<\022\032\n\026"
      "DONATION_POINT_RANKING\020=\022\025\n\021DIMENSION_RA"
      "NKING\020>\022\016\n\nFAIRY_GIFT\020\?\022\013\n\007WELCOME\020@\022\020\n\014"
      "GUILD_REFUND\020A*\262\001\n\016MailSenderType\022\017\n\013SEN"
      "DER_ARIN\020\001\022\017\n\013SENDER_HUNT\020\002\022\020\n\014SENDER_GA"
      "IUS\020\003\022\020\n\014SENDER_BELLA\020\004\022\020\n\014SENDER_LUCHI\020"
      "\005\022\021\n\rSENDER_RAMIEL\020\006\022\020\n\014SENDER_ADMIN\020\007\022\021"
      "\n\rSENDER_GRATIA\020\010\022\020\n\014SENDER_BROKK\020\t*g\n\tD"
      "ayOfWeek\022\n\n\006SUNDAY\020\001\022\n\n\006MONDAY\020\002\022\013\n\007TUES"
      "DAY\020\003\022\r\n\tWEDNESDAY\020\004\022\014\n\010THURSDAY\020\005\022\n\n\006FR"
      "IDAY\020\006\022\014\n\010SATURDAY\020\007*B\n\017AttributeChange\022"
      "\016\n\nINC_ATTACK\020\001\022\017\n\013INC_DEFENCE\020\002\022\016\n\nINC_"
      "HEALTH\020\003*\037\n\010ModeType\022\t\n\005STAGE\020\001\022\010\n\004RAID\020"
      "\002*\251\002\n\rEquipCategory\022\016\n\nEQUIP_NONE\020\000\022\020\n\014E"
      "QUIP_WEAPON\020\001\022\017\n\013EQUIP_ARMOR\020\002\022\023\n\017EQUIP_"
      "ACCESSORY\020\003\022\022\n\016ESSENCE_WEAPON\020\020\022\021\n\rESSEN"
      "CE_ARMOR\020\021\022\025\n\021ESSENCE_ACCESSORY\020\022\022\030\n\024WEA"
      "PON_SURPASS_ANVIL\020\031\022\027\n\023ARMOR_SURPASS_ANV"
      "IL\020\032\022\033\n\027ACCESSORY_SURPASS_ANVIL\020\033\022\026\n\021EC_"
      "COSTUME_WEAPON\020\311\001\022\023\n\016EC_COSTUME_HAT\020\312\001\022\025"
      "\n\020EC_COSTUME_ARMOR\020\313\001*\316\001\n\014LotteryGrade\022\022"
      "\n\016LOTTERY_NORMAL\020\001\022\023\n\017LOTTERY_SPECIAL\020\002\022"
      "\023\n\017LOTTERY_PREMIUM\020\003\022\025\n\021LOTTERY_SIGNATUR"
      "E\020\004\022\024\n\020LOTTERY_PLATINUM\020\005\022\022\n\016LOTTERY_ANV"
      "IL1\020\006\022\022\n\016LOTTERY_ANVIL2\020\007\022\022\n\016LOTTERY_ANV"
      "IL3\020\010\022\027\n\023LOTTERY_SIGNATURE_1\020\t*@\n\023Collec"
      "tionItemState\022\r\n\tCOLLECTED\020\001\022\014\n\010ENHANCED"
      "\020\002\022\014\n\010REWARDED\020\003*\204\001\n\022CollectionCategory\022"
      "\022\n\016COLLECTION_SET\020\001\022\025\n\021COLLECTION_WEAPON"
      "\020\002\022\024\n\020COLLECTION_ARMOR\020\003\022\030\n\024COLLECTION_A"
      "CCESSORY\020\004\022\023\n\017COLLECTION_WING\020\005*\"\n\010RaidT"
      "ype\022\n\n\006HARANG\020\001\022\n\n\006SARGON\020\002*_\n\023DailyAtte"
      "ndanceType\022\026\n\022ATTENDANCE_GENERAL\020\001\022\027\n\023AT"
      "TENDANCE_RETURNED\020\002\022\027\n\023ATTENDANCE_BEGINN"
      "ER\020\003*\\\n\010DuelMode\022\022\n\016DUEL_MODE_NONE\020\000\022\021\n\r"
      "DUEL_MODE_PVP\020\001\022\022\n\016DUEL_MODE_TEAM\020\002\022\025\n\021D"
      "UEL_MODE_ASSAULT\020\003*\260\001\n\016RewardBoxGrade\022\023\n"
      "\017REWARD_BOX_NONE\020\000\022\025\n\021REWARD_BOX_BRONZE\020"
      "\001\022\025\n\021REWARD_BOX_SILVER\020\002\022\023\n\017REWARD_BOX_G"
      "OLD\020\003\022\027\n\023REWARD_BOX_PLATINUM\020\004\022\026\n\022REWARD"
      "_BOX_DIAMOND\020\005\022\025\n\021REWARD_BOX_MASTER\020\006*\310\002"
      "\n\020ItemGetRouteType\022\022\n\016ROUTE_BUY_SHOP\020\001\022\021"
      "\n\rROUTE_LOTTERY\020\002\022\026\n\022ROUTE_UPGRADE_ITEM\020"
      "\003\022\026\n\022ROUTE_COMPOSE_ITEM\020\004\022\032\n\026ROUTE_DISMA"
      "NTLE_AETHER\020\005\022\030\n\024ROUTE_DISMANTLE_ITEM\020\006\022"
      "\027\n\023ROUTE_MAKE_DONATION\020\007\022\031\n\025ROUTE_DISMAN"
      "TLE_TOTEM\020\010\022\033\n\027ROUTE_DISMANTLE_COSTUME\020\t"
      "\022\026\n\022ROUTE_FACTORY_MAKE\020\n\022\031\n\025ROUTE_FACTOR"
      "Y_UPGRADE\020\013\022\024\n\020ROUTE_UNSEAL_BOX\020\014\022\r\n\tROU"
      "TE_ETC\020c*\\\n\023UnitySkillEventType\022\024\n\020UNITY"
      "_EQUIP_ITEM\020\001\022\030\n\024UNITY_EQUIP_ITEM_ALL\020\002\022"
      "\025\n\021UNITY_REACH_LEVEL\020\003*\230\001\n\021ContentsModeS"
      "tate\022\014\n\010CMS_NONE\020\000\022\013\n\007CMS_RUN\020\001\022\023\n\017CMS_B"
      "LOCK_ENTER\020\002\022\023\n\017CMS_MODE_FINISH\020\003\022\024\n\020CMS"
      "_SETTLE_BEGIN\020\004\022\022\n\016CMS_SETTLE_END\020\005\022\024\n\020C"
      "MS_SYSTEM_CHECK\020c*\217\002\n\014ContentsMode\022\014\n\010CM"
      "_STAGE\020\001\022\017\n\013CM_PVP_DUEL\020\002\022\017\n\013CM_PVP_TEAM"
      "\020\003\022\016\n\nCM_ASSAULT\020\004\022\014\n\010CM_GUILD\020\005\022\021\n\rCM_H"
      "ERO_TOWER\020\006\022\013\n\007CM_RAID\020\007\022\020\n\014CM_PROMOTION"
      "\020\010\022\016\n\nCM_COUNTER\020\t\022\r\n\tCM_FRIEND\020\n\022\020\n\014CM_"
      "INVENTORY\020\013\022\016\n\nCM_MISSION\020\014\022\013\n\007CM_SHOP\020\r"
      "\022\017\n\013CM_DONATION\020\016\022\020\n\014CM_DIMENSION\020\017\022\016\n\nC"
      "M_COSTUME\020\020*\316\001\n\rEventCategory\022\020\n\014POINT_R"
      "EWARD\020\001\022\021\n\rHOT_TIME_BUFF\020\002\022\014\n\010LEVEL_UP\020\003"
      "\022\022\n\016SEASON_MISSION\020\004\022\017\n\013STAGE_CLEAR\020\005\022\016\n"
      "\nPOINT_SHOP\020\006\022\020\n\014GEM_PURCHASE\020\007\022\020\n\014SHOP_"
      "LOTTERY\020\010\022\r\n\tSPEND_GEM\020\t\022\030\n\024SHOP_LOTTERY"
      "_SAVINGS\020\n\022\010\n\004DICE\020\013*$\n\017HotTimeBuffType\022"
      "\010\n\004GOLD\020\001\022\007\n\003EXP\020\002*V\n\016ReportModeType\022\016\n\n"
      "REPORT_PVP\020\001\022\022\n\016REPORT_ASSAULT\020\002\022\017\n\013REPO"
      "RT_RAID\020\003\022\017\n\013REPORT_CHAT\020\004*5\n\021DiceEventC"
      "ellType\022\t\n\005START\020\001\022\n\n\006REWARD\020\002\022\t\n\005TIMES\020"
      "\003*\327\005\n\026DonationConsumableType\022\n\n\006CT_GEM\020\001"
      "\022\022\n\016CT_BLADE_POINT\020\002\022\033\n\027CT_RANK_PROMOTIO"
      "N_POINT\020\003\022\021\n\rCT_HERO_PIECE\020\004\022\024\n\020CT_MAGIC"
      "_CRYSTAL\020\013\022\021\n\rCT_TEARS_WIND\020\014\022\030\n\024CT_FEAT"
      "HER_ARCHANGEL\020\r\022\033\n\027CT_WEAPON_UPGRADE_STO"
      "NE\020\025\022\032\n\026CT_ARMOR_UPGRADE_STONE\020\026\022\036\n\032CT_A"
      "CCESSORY_UPGRADE_STONE\020\027\022\034\n\030CT_WEAPON_EN"
      "HANCE_SCROLL\020\030\022\033\n\027CT_ARMOR_ENHANCE_SCROL"
      "L\020\031\022\037\n\033CT_ACCESSORY_ENHANCE_SCROLL\020\032\022$\n "
      "CT_BLESSED_WEAPON_ENHANCE_SCROLL\020\033\022#\n\037CT"
      "_BLESSED_ARMOR_ENHANCE_SCROLL\020\034\022\'\n#CT_BL"
      "ESSED_ACCESSORY_ENHANCE_SCROLL\020\035\022\030\n\024CT_R"
      "AMIEL_PROTECTION\020\036\022\023\n\017CT_AETHER_PIECE\020\037\022"
      "\025\n\021CT_CALIGULA_PIECE\020 \022\023\n\017CT_LILLIS_PIEC"
      "E\020!\022\026\n\022CT_BEELZEBUB_PIECE\020\"\022\023\n\017CT_AZRAEL"
      "_PIECE\020#\022\024\n\020CT_NIDHOGG_PIECE\020$\022\027\n\023CT_APO"
      "CALYPSE_PIECE\020%\022\021\n\rCT_LIGHT_LAMP\020)\022$\n CT"
      "_ADVANCED_RANK_PROMOTION_POINT\020*\022\021\n\014CT_U"
      "NDEFINED\020\217N*+\n\020DonationCostType\022\n\n\006DC_GE"
      "M\020\001\022\013\n\007DC_GOLD\020\002*)\n\tFairyType\022\t\n\005NIECE\020\001"
      "\022\010\n\004PANG\020\002\022\007\n\003RIO\020\003*`\n\nTotemGrade\022\r\n\tTG_"
      "NORMAL\020\001\022\014\n\010TG_MAGIC\020\002\022\013\n\007TG_RARE\020\003\022\013\n\007T"
      "G_HERO\020\004\022\r\n\tTG_LEGEND\020\005\022\014\n\010TG_RELIC\020\006*E\n"
      "\017TotemBasePrefix\022\020\n\014TBP_VALOROUS\020\001\022\016\n\nTB"
      "P_PATRON\020\002\022\020\n\014TBP_VIGOROUS\020\003*U\n\021TotemRef"
      "inePrefix\022\017\n\013TRP_ECLIPSE\020\001\022\017\n\013TRP_SHININ"
      "G\020\002\022\016\n\nTRP_STRONG\020\003\022\016\n\nTRP_SACRED\020\004*>\n\023T"
      "otemRefineCostType\022\014\n\010TRC_GOLD\020\001\022\031\n\025TRC_"
      "DIMENSIONAL_PIECE\020\002*,\n\021ExchangePriceType"
      "\022\n\n\006EC_GEM\020\001\022\013\n\007EC_GOLD\020\002*E\n\021FactoryResu"
      "ltType\022\013\n\007FR_FAIL\020\001\022\016\n\nFR_SUCCESS\020\002\022\023\n\017F"
      "R_HUGE_SUCCESS\020\003*.\n\020FactoryLimitType\022\n\n\006"
      "FL_TRY\020\001\022\016\n\nFL_SUCCESS\020\002*\\\n\024FactoryLimit"
      "TimeType\022\014\n\010FLT_ONCE\020\001\022\013\n\007FLT_DAY\020\002\022\014\n\010F"
      "LT_WEEK\020\003\022\r\n\tFLT_MONTH\020\004\022\014\n\010FLT_NONE\020\005*>"
      "\n\022FactoryVisibleType\022\014\n\010FV_CLOSE\020\001\022\013\n\007FV"
      "_OPEN\020\002\022\r\n\tFV_PERIOD\020\003B\025\n\023com.a2q.b2.pro"
      "tocol"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 38925);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommonData.proto", &protobuf_RegisterTypes);
  Result::default_instance_ = new Result();
  Version::default_instance_ = new Version();
  Protocol::default_instance_ = new Protocol();
  Credential::default_instance_ = new Credential();
  Endpoint::default_instance_ = new Endpoint();
  AccountBlockInfo::default_instance_ = new AccountBlockInfo();
  GlobalAccount::default_instance_ = new GlobalAccount();
  WorldAccount::default_instance_ = new WorldAccount();
  LightAccount::default_instance_ = new LightAccount();
  AccountInfo::default_instance_ = new AccountInfo();
  PresetNum::default_instance_ = new PresetNum();
  Character::default_instance_ = new Character();
  LightCharacter::default_instance_ = new LightCharacter();
  CharacterSummary::default_instance_ = new CharacterSummary();
  User::default_instance_ = new User();
  Friend::default_instance_ = new Friend();
  FriendInviteRewardInfo::default_instance_ = new FriendInviteRewardInfo();
  Item::default_instance_ = new Item();
  SealSlotState::default_instance_ = new SealSlotState();
  Costume::default_instance_ = new Costume();
  Totem::default_instance_ = new Totem();
  TotemSubOptionDetail::default_instance_ = new TotemSubOptionDetail();
  TotemRefineState::default_instance_ = new TotemRefineState();
  Inventory::default_instance_ = new Inventory();
  InventoryCountInfo::default_instance_ = new InventoryCountInfo();
  ItemPreset::default_instance_ = new ItemPreset();
  Aether::default_instance_ = new Aether();
  CharacterSetOptionInfo::default_instance_ = new CharacterSetOptionInfo();
  SkillQuickSlot::default_instance_ = new SkillQuickSlot();
  Skill::default_instance_ = new Skill();
  RawReward::default_instance_ = new RawReward();
  Reward::default_instance_ = new Reward();
  RewardRandomCount::default_instance_ = new RewardRandomCount();
  QuestInfo::default_instance_ = new QuestInfo();
  MissionInfo::default_instance_ = new MissionInfo();
  MissionCompletePointInfo::default_instance_ = new MissionCompletePointInfo();
  Guild::default_instance_ = new Guild();
  GuildRanking::default_instance_ = new GuildRanking();
  GuildMember::default_instance_ = new GuildMember();
  GuildMemberCandidate::default_instance_ = new GuildMemberCandidate();
  BattleFormation::default_instance_ = new BattleFormation();
  BattleFormationBuff::default_instance_ = new BattleFormationBuff();
  GuildBattleEntry::default_instance_ = new GuildBattleEntry();
  GuildBattleEntry_SlotData::default_instance_ = new GuildBattleEntry_SlotData();
  GuildBattleResult::default_instance_ = new GuildBattleResult();
  GuildBattleState::default_instance_ = new GuildBattleState();
  GuildBattleHistory::default_instance_ = new GuildBattleHistory();
  GuildBattleRecord::default_instance_ = new GuildBattleRecord();
  GuildSkill::default_instance_ = new GuildSkill();
  GuildInfo::default_instance_ = new GuildInfo();
  GuildMercenary::default_instance_ = new GuildMercenary();
  MatchMaking::default_instance_ = new MatchMaking();
  Invitation::default_instance_ = new Invitation();
  MatchInfo::default_instance_ = new MatchInfo();
  MatchStatus::default_instance_ = new MatchStatus();
  Ranking::default_instance_ = new Ranking();
  MatchRanker::default_instance_ = new MatchRanker();
  MatchRanker_Entry::default_instance_ = new MatchRanker_Entry();
  RankingReward::default_instance_ = new RankingReward();
  DimensionRankingReward::default_instance_ = new DimensionRankingReward();
  DimensionStatus::default_instance_ = new DimensionStatus();
  Room::default_instance_ = new Room();
  RoomLocation::default_instance_ = new RoomLocation();
  TeamBattleEntry::default_instance_ = new TeamBattleEntry();
  MatchOpenPeriodInfo::default_instance_ = new MatchOpenPeriodInfo();
  KillMonsterInfo::default_instance_ = new KillMonsterInfo();
  DropData::default_instance_ = new DropData();
  MailItemInfo::default_instance_ = new MailItemInfo();
  WingOption::default_instance_ = new WingOption();
  FairyStatus::default_instance_ = new FairyStatus();
  Relic::default_instance_ = new Relic();
  RollingBanner::default_instance_ = new RollingBanner();
  ConfigData::default_instance_ = new ConfigData();
  Shop::default_instance_ = new Shop();
  Shop_PeriodicPackageState::default_instance_ = new Shop_PeriodicPackageState();
  Shop_FlatRatePackageBonusState::default_instance_ = new Shop_FlatRatePackageBonusState();
  Shop_LevelUpPackageMission::default_instance_ = new Shop_LevelUpPackageMission();
  Shop_ReachLevelPackageMission::default_instance_ = new Shop_ReachLevelPackageMission();
  Shop_BuyResultInfo::default_instance_ = new Shop_BuyResultInfo();
  MagicShop::default_instance_ = new MagicShop();
  ShopLottery::default_instance_ = new ShopLottery();
  ShopProduct::default_instance_ = new ShopProduct();
  ShopMileage::default_instance_ = new ShopMileage();
  ShopBuyManage::default_instance_ = new ShopBuyManage();
  ShopProductMark::default_instance_ = new ShopProductMark();
  MarketPurchaseInfo::default_instance_ = new MarketPurchaseInfo();
  CollectionItem::default_instance_ = new CollectionItem();
  CollectionSetItem::default_instance_ = new CollectionSetItem();
  RaidRankingReward::default_instance_ = new RaidRankingReward();
  EventAttendanceStatus::default_instance_ = new EventAttendanceStatus();
  BeginnerAttendanceStatus::default_instance_ = new BeginnerAttendanceStatus();
  DuelRewardBoxStatus::default_instance_ = new DuelRewardBoxStatus();
  MatchResult::default_instance_ = new MatchResult();
  UnitySkillMission::default_instance_ = new UnitySkillMission();
  UnitySkill::default_instance_ = new UnitySkill();
  UnitySkillAwakenMission::default_instance_ = new UnitySkillAwakenMission();
  ContentsModeInfo::default_instance_ = new ContentsModeInfo();
  ContentsOpen::default_instance_ = new ContentsOpen();
  CharacterPower::default_instance_ = new CharacterPower();
  AssaultBattleInfo::default_instance_ = new AssaultBattleInfo();
  RoomCharacter::default_instance_ = new RoomCharacter();
  AdminMessage::default_instance_ = new AdminMessage();
  PointEventStatus::default_instance_ = new PointEventStatus();
  PointShopEventStatus::default_instance_ = new PointShopEventStatus();
  PointShopEventRewardHistory::default_instance_ = new PointShopEventRewardHistory();
  GemPurchaseEventStatus::default_instance_ = new GemPurchaseEventStatus();
  LevelUpEventInfo::default_instance_ = new LevelUpEventInfo();
  SeasonMissionInfo::default_instance_ = new SeasonMissionInfo();
  SeasonMissionEventStatus::default_instance_ = new SeasonMissionEventStatus();
  StageClearEventStatus::default_instance_ = new StageClearEventStatus();
  BlockChatUser::default_instance_ = new BlockChatUser();
  TenLotteryEventStatus::default_instance_ = new TenLotteryEventStatus();
  HallOfFame::default_instance_ = new HallOfFame();
  HallOfFameUser::default_instance_ = new HallOfFameUser();
  HallOfFameReward::default_instance_ = new HallOfFameReward();
  HallOfFamePraise::default_instance_ = new HallOfFamePraise();
  SpendGemEventStatus::default_instance_ = new SpendGemEventStatus();
  TenLotterySavingsStatus::default_instance_ = new TenLotterySavingsStatus();
  DiceEventMission::default_instance_ = new DiceEventMission();
  DiceEventStatus::default_instance_ = new DiceEventStatus();
  DonationPointRewardState::default_instance_ = new DonationPointRewardState();
  DonationPresent::default_instance_ = new DonationPresent();
  DonationJobState::default_instance_ = new DonationJobState();
  FactoryLimitStatus::default_instance_ = new FactoryLimitStatus();
  FactoryPeriodicStatus::default_instance_ = new FactoryPeriodicStatus();
  FactoryResult::default_instance_ = new FactoryResult();
  UnsealBoxReward::default_instance_ = new UnsealBoxReward();
  WorldLocation::default_instance_ = new WorldLocation();
  Result::default_instance_->InitAsDefaultInstance();
  Version::default_instance_->InitAsDefaultInstance();
  Protocol::default_instance_->InitAsDefaultInstance();
  Credential::default_instance_->InitAsDefaultInstance();
  Endpoint::default_instance_->InitAsDefaultInstance();
  AccountBlockInfo::default_instance_->InitAsDefaultInstance();
  GlobalAccount::default_instance_->InitAsDefaultInstance();
  WorldAccount::default_instance_->InitAsDefaultInstance();
  LightAccount::default_instance_->InitAsDefaultInstance();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  PresetNum::default_instance_->InitAsDefaultInstance();
  Character::default_instance_->InitAsDefaultInstance();
  LightCharacter::default_instance_->InitAsDefaultInstance();
  CharacterSummary::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  Friend::default_instance_->InitAsDefaultInstance();
  FriendInviteRewardInfo::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  SealSlotState::default_instance_->InitAsDefaultInstance();
  Costume::default_instance_->InitAsDefaultInstance();
  Totem::default_instance_->InitAsDefaultInstance();
  TotemSubOptionDetail::default_instance_->InitAsDefaultInstance();
  TotemRefineState::default_instance_->InitAsDefaultInstance();
  Inventory::default_instance_->InitAsDefaultInstance();
  InventoryCountInfo::default_instance_->InitAsDefaultInstance();
  ItemPreset::default_instance_->InitAsDefaultInstance();
  Aether::default_instance_->InitAsDefaultInstance();
  CharacterSetOptionInfo::default_instance_->InitAsDefaultInstance();
  SkillQuickSlot::default_instance_->InitAsDefaultInstance();
  Skill::default_instance_->InitAsDefaultInstance();
  RawReward::default_instance_->InitAsDefaultInstance();
  Reward::default_instance_->InitAsDefaultInstance();
  RewardRandomCount::default_instance_->InitAsDefaultInstance();
  QuestInfo::default_instance_->InitAsDefaultInstance();
  MissionInfo::default_instance_->InitAsDefaultInstance();
  MissionCompletePointInfo::default_instance_->InitAsDefaultInstance();
  Guild::default_instance_->InitAsDefaultInstance();
  GuildRanking::default_instance_->InitAsDefaultInstance();
  GuildMember::default_instance_->InitAsDefaultInstance();
  GuildMemberCandidate::default_instance_->InitAsDefaultInstance();
  BattleFormation::default_instance_->InitAsDefaultInstance();
  BattleFormationBuff::default_instance_->InitAsDefaultInstance();
  GuildBattleEntry::default_instance_->InitAsDefaultInstance();
  GuildBattleEntry_SlotData::default_instance_->InitAsDefaultInstance();
  GuildBattleResult::default_instance_->InitAsDefaultInstance();
  GuildBattleState::default_instance_->InitAsDefaultInstance();
  GuildBattleHistory::default_instance_->InitAsDefaultInstance();
  GuildBattleRecord::default_instance_->InitAsDefaultInstance();
  GuildSkill::default_instance_->InitAsDefaultInstance();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  GuildMercenary::default_instance_->InitAsDefaultInstance();
  MatchMaking::default_instance_->InitAsDefaultInstance();
  Invitation::default_instance_->InitAsDefaultInstance();
  MatchInfo::default_instance_->InitAsDefaultInstance();
  MatchStatus::default_instance_->InitAsDefaultInstance();
  Ranking::default_instance_->InitAsDefaultInstance();
  MatchRanker::default_instance_->InitAsDefaultInstance();
  MatchRanker_Entry::default_instance_->InitAsDefaultInstance();
  RankingReward::default_instance_->InitAsDefaultInstance();
  DimensionRankingReward::default_instance_->InitAsDefaultInstance();
  DimensionStatus::default_instance_->InitAsDefaultInstance();
  Room::default_instance_->InitAsDefaultInstance();
  RoomLocation::default_instance_->InitAsDefaultInstance();
  TeamBattleEntry::default_instance_->InitAsDefaultInstance();
  MatchOpenPeriodInfo::default_instance_->InitAsDefaultInstance();
  KillMonsterInfo::default_instance_->InitAsDefaultInstance();
  DropData::default_instance_->InitAsDefaultInstance();
  MailItemInfo::default_instance_->InitAsDefaultInstance();
  WingOption::default_instance_->InitAsDefaultInstance();
  FairyStatus::default_instance_->InitAsDefaultInstance();
  Relic::default_instance_->InitAsDefaultInstance();
  RollingBanner::default_instance_->InitAsDefaultInstance();
  ConfigData::default_instance_->InitAsDefaultInstance();
  Shop::default_instance_->InitAsDefaultInstance();
  Shop_PeriodicPackageState::default_instance_->InitAsDefaultInstance();
  Shop_FlatRatePackageBonusState::default_instance_->InitAsDefaultInstance();
  Shop_LevelUpPackageMission::default_instance_->InitAsDefaultInstance();
  Shop_ReachLevelPackageMission::default_instance_->InitAsDefaultInstance();
  Shop_BuyResultInfo::default_instance_->InitAsDefaultInstance();
  MagicShop::default_instance_->InitAsDefaultInstance();
  ShopLottery::default_instance_->InitAsDefaultInstance();
  ShopProduct::default_instance_->InitAsDefaultInstance();
  ShopMileage::default_instance_->InitAsDefaultInstance();
  ShopBuyManage::default_instance_->InitAsDefaultInstance();
  ShopProductMark::default_instance_->InitAsDefaultInstance();
  MarketPurchaseInfo::default_instance_->InitAsDefaultInstance();
  CollectionItem::default_instance_->InitAsDefaultInstance();
  CollectionSetItem::default_instance_->InitAsDefaultInstance();
  RaidRankingReward::default_instance_->InitAsDefaultInstance();
  EventAttendanceStatus::default_instance_->InitAsDefaultInstance();
  BeginnerAttendanceStatus::default_instance_->InitAsDefaultInstance();
  DuelRewardBoxStatus::default_instance_->InitAsDefaultInstance();
  MatchResult::default_instance_->InitAsDefaultInstance();
  UnitySkillMission::default_instance_->InitAsDefaultInstance();
  UnitySkill::default_instance_->InitAsDefaultInstance();
  UnitySkillAwakenMission::default_instance_->InitAsDefaultInstance();
  ContentsModeInfo::default_instance_->InitAsDefaultInstance();
  ContentsOpen::default_instance_->InitAsDefaultInstance();
  CharacterPower::default_instance_->InitAsDefaultInstance();
  AssaultBattleInfo::default_instance_->InitAsDefaultInstance();
  RoomCharacter::default_instance_->InitAsDefaultInstance();
  AdminMessage::default_instance_->InitAsDefaultInstance();
  PointEventStatus::default_instance_->InitAsDefaultInstance();
  PointShopEventStatus::default_instance_->InitAsDefaultInstance();
  PointShopEventRewardHistory::default_instance_->InitAsDefaultInstance();
  GemPurchaseEventStatus::default_instance_->InitAsDefaultInstance();
  LevelUpEventInfo::default_instance_->InitAsDefaultInstance();
  SeasonMissionInfo::default_instance_->InitAsDefaultInstance();
  SeasonMissionEventStatus::default_instance_->InitAsDefaultInstance();
  StageClearEventStatus::default_instance_->InitAsDefaultInstance();
  BlockChatUser::default_instance_->InitAsDefaultInstance();
  TenLotteryEventStatus::default_instance_->InitAsDefaultInstance();
  HallOfFame::default_instance_->InitAsDefaultInstance();
  HallOfFameUser::default_instance_->InitAsDefaultInstance();
  HallOfFameReward::default_instance_->InitAsDefaultInstance();
  HallOfFamePraise::default_instance_->InitAsDefaultInstance();
  SpendGemEventStatus::default_instance_->InitAsDefaultInstance();
  TenLotterySavingsStatus::default_instance_->InitAsDefaultInstance();
  DiceEventMission::default_instance_->InitAsDefaultInstance();
  DiceEventStatus::default_instance_->InitAsDefaultInstance();
  DonationPointRewardState::default_instance_->InitAsDefaultInstance();
  DonationPresent::default_instance_->InitAsDefaultInstance();
  DonationJobState::default_instance_->InitAsDefaultInstance();
  FactoryLimitStatus::default_instance_->InitAsDefaultInstance();
  FactoryPeriodicStatus::default_instance_->InitAsDefaultInstance();
  FactoryResult::default_instance_->InitAsDefaultInstance();
  UnsealBoxReward::default_instance_->InitAsDefaultInstance();
  WorldLocation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CommonData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CommonData_2eproto {
  StaticDescriptorInitializer_CommonData_2eproto() {
    protobuf_AddDesc_CommonData_2eproto();
  }
} static_descriptor_initializer_CommonData_2eproto_;
const ::google::protobuf::EnumDescriptor* StatusCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusCode_descriptor_;
}
bool StatusCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FriendInviteRewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInviteRewardType_descriptor_;
}
bool FriendInviteRewardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemQuality_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemQuality_descriptor_;
}
bool ItemQuality_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SealSlotOpenPriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealSlotOpenPriceType_descriptor_;
}
bool SealSlotOpenPriceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SealPriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealPriceType_descriptor_;
}
bool SealPriceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TotemEquipSlot_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemEquipSlot_descriptor_;
}
bool TotemEquipSlot_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipPosition_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPosition_descriptor_;
}
bool EquipPosition_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 201:
    case 202:
    case 203:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GroupPrefix_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupPrefix_descriptor_;
}
bool GroupPrefix_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestType_descriptor_;
}
bool QuestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MainQuestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainQuestType_descriptor_;
}
bool MainQuestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardType_descriptor_;
}
bool RewardType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RewardPushType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardPushType_descriptor_;
}
bool RewardPushType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StageBuffOptionFlags_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageBuffOptionFlags_descriptor_;
}
bool StageBuffOptionFlags_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StageRepeatMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageRepeatMode_descriptor_;
}
bool StageRepeatMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StageDifficulty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageDifficulty_descriptor_;
}
bool StageDifficulty_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StageClearProperty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageClearProperty_descriptor_;
}
bool StageClearProperty_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailCategory_descriptor_;
}
bool MailCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailAttachType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAttachType_descriptor_;
}
bool MailAttachType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailPresentAttachType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailPresentAttachType_descriptor_;
}
bool MailPresentAttachType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailSourceType_descriptor_;
}
bool MailSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailSenderType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailSenderType_descriptor_;
}
bool MailSenderType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DayOfWeek_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayOfWeek_descriptor_;
}
bool DayOfWeek_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AttributeChange_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttributeChange_descriptor_;
}
bool AttributeChange_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModeType_descriptor_;
}
bool ModeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EquipCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipCategory_descriptor_;
}
bool EquipCategory_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 16:
    case 17:
    case 18:
    case 25:
    case 26:
    case 27:
    case 201:
    case 202:
    case 203:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LotteryGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryGrade_descriptor_;
}
bool LotteryGrade_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CollectionItemState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionItemState_descriptor_;
}
bool CollectionItemState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CollectionCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionCategory_descriptor_;
}
bool CollectionCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RaidType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidType_descriptor_;
}
bool RaidType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DailyAttendanceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyAttendanceType_descriptor_;
}
bool DailyAttendanceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DuelMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuelMode_descriptor_;
}
bool DuelMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RewardBoxGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardBoxGrade_descriptor_;
}
bool RewardBoxGrade_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemGetRouteType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemGetRouteType_descriptor_;
}
bool ItemGetRouteType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UnitySkillEventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitySkillEventType_descriptor_;
}
bool UnitySkillEventType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContentsModeState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentsModeState_descriptor_;
}
bool ContentsModeState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContentsMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentsMode_descriptor_;
}
bool ContentsMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EventCategory_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventCategory_descriptor_;
}
bool EventCategory_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HotTimeBuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotTimeBuffType_descriptor_;
}
bool HotTimeBuffType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReportModeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportModeType_descriptor_;
}
bool ReportModeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DiceEventCellType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiceEventCellType_descriptor_;
}
bool DiceEventCellType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DonationConsumableType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationConsumableType_descriptor_;
}
bool DonationConsumableType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 11:
    case 12:
    case 13:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 41:
    case 42:
    case 9999:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DonationCostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationCostType_descriptor_;
}
bool DonationCostType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FairyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FairyType_descriptor_;
}
bool FairyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TotemGrade_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemGrade_descriptor_;
}
bool TotemGrade_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TotemBasePrefix_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemBasePrefix_descriptor_;
}
bool TotemBasePrefix_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TotemRefinePrefix_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemRefinePrefix_descriptor_;
}
bool TotemRefinePrefix_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TotemRefineCostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemRefineCostType_descriptor_;
}
bool TotemRefineCostType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ExchangePriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangePriceType_descriptor_;
}
bool ExchangePriceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FactoryResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryResultType_descriptor_;
}
bool FactoryResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FactoryLimitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryLimitType_descriptor_;
}
bool FactoryLimitType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FactoryLimitTimeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryLimitTimeType_descriptor_;
}
bool FactoryLimitTimeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FactoryVisibleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryVisibleType_descriptor_;
}
bool FactoryVisibleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Result::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Result)
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Result)
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Result)
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Version::kMajorFieldNumber;
const int Version::kMinorFieldNumber;
const int Version::kRevisionFieldNumber;
const int Version::kChangelistFieldNumber;
const int Version::kBuildNumFieldNumber;
#endif  // !_MSC_VER

Version::Version()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Version)
}

void Version::InitAsDefaultInstance() {
}

Version::Version(const Version& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Version)
}

void Version::SharedCtor() {
  _cached_size_ = 0;
  major_ = 0;
  minor_ = 0;
  revision_ = 0;
  changelist_ = 0;
  build_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Version)
  SharedDtor();
}

void Version::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Version::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Version::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Version_descriptor_;
}

const Version& Version::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Version* Version::default_instance_ = NULL;

Version* Version::New() const {
  return new Version;
}

void Version::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Version*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(major_, build_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Version::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Version)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 major = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &major_)));
          set_has_major();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minor;
        break;
      }

      // required int32 minor = 2;
      case 2: {
        if (tag == 16) {
         parse_minor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minor_)));
          set_has_minor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_revision;
        break;
      }

      // required int32 revision = 3;
      case 3: {
        if (tag == 24) {
         parse_revision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revision_)));
          set_has_revision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_changelist;
        break;
      }

      // required int32 changelist = 4;
      case 4: {
        if (tag == 32) {
         parse_changelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changelist_)));
          set_has_changelist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_build_num;
        break;
      }

      // required int32 build_num = 5;
      case 5: {
        if (tag == 40) {
         parse_build_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &build_num_)));
          set_has_build_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Version)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Version)
  return false;
#undef DO_
}

void Version::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Version)
  // required int32 major = 1;
  if (has_major()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->major(), output);
  }

  // required int32 minor = 2;
  if (has_minor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minor(), output);
  }

  // required int32 revision = 3;
  if (has_revision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->revision(), output);
  }

  // required int32 changelist = 4;
  if (has_changelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->changelist(), output);
  }

  // required int32 build_num = 5;
  if (has_build_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->build_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Version)
}

::google::protobuf::uint8* Version::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Version)
  // required int32 major = 1;
  if (has_major()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->major(), target);
  }

  // required int32 minor = 2;
  if (has_minor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minor(), target);
  }

  // required int32 revision = 3;
  if (has_revision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->revision(), target);
  }

  // required int32 changelist = 4;
  if (has_changelist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->changelist(), target);
  }

  // required int32 build_num = 5;
  if (has_build_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->build_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Version)
  return target;
}

int Version::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 major = 1;
    if (has_major()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->major());
    }

    // required int32 minor = 2;
    if (has_minor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minor());
    }

    // required int32 revision = 3;
    if (has_revision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revision());
    }

    // required int32 changelist = 4;
    if (has_changelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changelist());
    }

    // required int32 build_num = 5;
    if (has_build_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->build_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Version::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Version* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Version*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_major()) {
      set_major(from.major());
    }
    if (from.has_minor()) {
      set_minor(from.minor());
    }
    if (from.has_revision()) {
      set_revision(from.revision());
    }
    if (from.has_changelist()) {
      set_changelist(from.changelist());
    }
    if (from.has_build_num()) {
      set_build_num(from.build_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Version::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Version::Swap(Version* other) {
  if (other != this) {
    std::swap(major_, other->major_);
    std::swap(minor_, other->minor_);
    std::swap(revision_, other->revision_);
    std::swap(changelist_, other->changelist_);
    std::swap(build_num_, other->build_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Version::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Version_descriptor_;
  metadata.reflection = Version_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Protocol::kMasterDataHashFieldNumber;
const int Protocol::kCommonDataHashFieldNumber;
const int Protocol::kSessionMessageHashFieldNumber;
const int Protocol::kChannelMessageHashFieldNumber;
#endif  // !_MSC_VER

Protocol::Protocol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Protocol)
}

void Protocol::InitAsDefaultInstance() {
}

Protocol::Protocol(const Protocol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Protocol)
}

void Protocol::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  master_data_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  common_data_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  session_message_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_message_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Protocol::~Protocol() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Protocol)
  SharedDtor();
}

void Protocol::SharedDtor() {
  if (master_data_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_data_hash_;
  }
  if (common_data_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete common_data_hash_;
  }
  if (session_message_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_message_hash_;
  }
  if (channel_message_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_message_hash_;
  }
  if (this != default_instance_) {
  }
}

void Protocol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Protocol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Protocol_descriptor_;
}

const Protocol& Protocol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Protocol* Protocol::default_instance_ = NULL;

Protocol* Protocol::New() const {
  return new Protocol;
}

void Protocol::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_master_data_hash()) {
      if (master_data_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_data_hash_->clear();
      }
    }
    if (has_common_data_hash()) {
      if (common_data_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        common_data_hash_->clear();
      }
    }
    if (has_session_message_hash()) {
      if (session_message_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_message_hash_->clear();
      }
    }
    if (has_channel_message_hash()) {
      if (channel_message_hash_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_message_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Protocol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Protocol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string master_data_hash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_data_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_data_hash().data(), this->master_data_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_data_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_common_data_hash;
        break;
      }

      // required string common_data_hash = 2;
      case 2: {
        if (tag == 18) {
         parse_common_data_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_common_data_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->common_data_hash().data(), this->common_data_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "common_data_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_session_message_hash;
        break;
      }

      // required string session_message_hash = 10;
      case 10: {
        if (tag == 82) {
         parse_session_message_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_message_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_message_hash().data(), this->session_message_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_message_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_channel_message_hash;
        break;
      }

      // required string channel_message_hash = 11;
      case 11: {
        if (tag == 90) {
         parse_channel_message_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_message_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_message_hash().data(), this->channel_message_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_message_hash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Protocol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Protocol)
  return false;
#undef DO_
}

void Protocol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Protocol)
  // required string master_data_hash = 1;
  if (has_master_data_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_data_hash().data(), this->master_data_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_data_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_data_hash(), output);
  }

  // required string common_data_hash = 2;
  if (has_common_data_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->common_data_hash().data(), this->common_data_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common_data_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->common_data_hash(), output);
  }

  // required string session_message_hash = 10;
  if (has_session_message_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_message_hash().data(), this->session_message_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_message_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->session_message_hash(), output);
  }

  // required string channel_message_hash = 11;
  if (has_channel_message_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_message_hash().data(), this->channel_message_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_message_hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->channel_message_hash(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Protocol)
}

::google::protobuf::uint8* Protocol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Protocol)
  // required string master_data_hash = 1;
  if (has_master_data_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_data_hash().data(), this->master_data_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_data_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_data_hash(), target);
  }

  // required string common_data_hash = 2;
  if (has_common_data_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->common_data_hash().data(), this->common_data_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "common_data_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->common_data_hash(), target);
  }

  // required string session_message_hash = 10;
  if (has_session_message_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_message_hash().data(), this->session_message_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_message_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->session_message_hash(), target);
  }

  // required string channel_message_hash = 11;
  if (has_channel_message_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_message_hash().data(), this->channel_message_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_message_hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->channel_message_hash(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Protocol)
  return target;
}

int Protocol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string master_data_hash = 1;
    if (has_master_data_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_data_hash());
    }

    // required string common_data_hash = 2;
    if (has_common_data_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->common_data_hash());
    }

    // required string session_message_hash = 10;
    if (has_session_message_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_message_hash());
    }

    // required string channel_message_hash = 11;
    if (has_channel_message_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_message_hash());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Protocol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Protocol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Protocol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Protocol::MergeFrom(const Protocol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_data_hash()) {
      set_master_data_hash(from.master_data_hash());
    }
    if (from.has_common_data_hash()) {
      set_common_data_hash(from.common_data_hash());
    }
    if (from.has_session_message_hash()) {
      set_session_message_hash(from.session_message_hash());
    }
    if (from.has_channel_message_hash()) {
      set_channel_message_hash(from.channel_message_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Protocol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Protocol::CopyFrom(const Protocol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protocol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Protocol::Swap(Protocol* other) {
  if (other != this) {
    std::swap(master_data_hash_, other->master_data_hash_);
    std::swap(common_data_hash_, other->common_data_hash_);
    std::swap(session_message_hash_, other->session_message_hash_);
    std::swap(channel_message_hash_, other->channel_message_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Protocol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Protocol_descriptor_;
  metadata.reflection = Protocol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Credential::kPlatformTypeFieldNumber;
const int Credential::kPlatformUidFieldNumber;
const int Credential::kOsTypeFieldNumber;
const int Credential::kMarketTypeFieldNumber;
const int Credential::kCountryCodeFieldNumber;
const int Credential::kLangCodeFieldNumber;
const int Credential::kPushTokenFieldNumber;
const int Credential::kAdIdFieldNumber;
const int Credential::kAccessTokenFieldNumber;
#endif  // !_MSC_VER

Credential::Credential()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Credential)
}

void Credential::InitAsDefaultInstance() {
}

Credential::Credential(const Credential& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Credential)
}

void Credential::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  platform_type_ = 0;
  platform_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_type_ = 0;
  market_type_ = 0;
  country_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ad_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Credential::~Credential() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Credential)
  SharedDtor();
}

void Credential::SharedDtor() {
  if (platform_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete platform_uid_;
  }
  if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_code_;
  }
  if (lang_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lang_code_;
  }
  if (push_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete push_token_;
  }
  if (ad_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ad_id_;
  }
  if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete access_token_;
  }
  if (this != default_instance_) {
  }
}

void Credential::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Credential::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Credential_descriptor_;
}

const Credential& Credential::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Credential* Credential::default_instance_ = NULL;

Credential* Credential::New() const {
  return new Credential;
}

void Credential::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Credential*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(platform_type_, os_type_);
    if (has_platform_uid()) {
      if (platform_uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        platform_uid_->clear();
      }
    }
    market_type_ = 0;
    if (has_country_code()) {
      if (country_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_code_->clear();
      }
    }
    if (has_lang_code()) {
      if (lang_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lang_code_->clear();
      }
    }
    if (has_push_token()) {
      if (push_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        push_token_->clear();
      }
    }
    if (has_ad_id()) {
      if (ad_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ad_id_->clear();
      }
    }
  }
  if (has_access_token()) {
    if (access_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      access_token_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Credential::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Credential)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 platform_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_type_)));
          set_has_platform_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_platform_uid;
        break;
      }

      // required string platform_uid = 2;
      case 2: {
        if (tag == 18) {
         parse_platform_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->platform_uid().data(), this->platform_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "platform_uid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_os_type;
        break;
      }

      // required int32 os_type = 3;
      case 3: {
        if (tag == 24) {
         parse_os_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &os_type_)));
          set_has_os_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_market_type;
        break;
      }

      // required int32 market_type = 4;
      case 4: {
        if (tag == 32) {
         parse_market_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_type_)));
          set_has_market_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_country_code;
        break;
      }

      // required string country_code = 5;
      case 5: {
        if (tag == 42) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lang_code;
        break;
      }

      // required string lang_code = 6;
      case 6: {
        if (tag == 50) {
         parse_lang_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang_code().data(), this->lang_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lang_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_push_token;
        break;
      }

      // optional string push_token = 7;
      case 7: {
        if (tag == 58) {
         parse_push_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->push_token().data(), this->push_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "push_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ad_id;
        break;
      }

      // optional string ad_id = 10;
      case 10: {
        if (tag == 82) {
         parse_ad_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ad_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ad_id().data(), this->ad_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ad_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_access_token;
        break;
      }

      // optional string access_token = 11;
      case 11: {
        if (tag == 90) {
         parse_access_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "access_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Credential)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Credential)
  return false;
#undef DO_
}

void Credential::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Credential)
  // required int32 platform_type = 1;
  if (has_platform_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platform_type(), output);
  }

  // required string platform_uid = 2;
  if (has_platform_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_uid().data(), this->platform_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform_uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->platform_uid(), output);
  }

  // required int32 os_type = 3;
  if (has_os_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->os_type(), output);
  }

  // required int32 market_type = 4;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->market_type(), output);
  }

  // required string country_code = 5;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->country_code(), output);
  }

  // required string lang_code = 6;
  if (has_lang_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang_code().data(), this->lang_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lang_code(), output);
  }

  // optional string push_token = 7;
  if (has_push_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->push_token().data(), this->push_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "push_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->push_token(), output);
  }

  // optional string ad_id = 10;
  if (has_ad_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_id().data(), this->ad_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ad_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ad_id(), output);
  }

  // optional string access_token = 11;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->access_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Credential)
}

::google::protobuf::uint8* Credential::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Credential)
  // required int32 platform_type = 1;
  if (has_platform_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platform_type(), target);
  }

  // required string platform_uid = 2;
  if (has_platform_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->platform_uid().data(), this->platform_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "platform_uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->platform_uid(), target);
  }

  // required int32 os_type = 3;
  if (has_os_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->os_type(), target);
  }

  // required int32 market_type = 4;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->market_type(), target);
  }

  // required string country_code = 5;
  if (has_country_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->country_code(), target);
  }

  // required string lang_code = 6;
  if (has_lang_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang_code().data(), this->lang_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lang_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lang_code(), target);
  }

  // optional string push_token = 7;
  if (has_push_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->push_token().data(), this->push_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "push_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->push_token(), target);
  }

  // optional string ad_id = 10;
  if (has_ad_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ad_id().data(), this->ad_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ad_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ad_id(), target);
  }

  // optional string access_token = 11;
  if (has_access_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->access_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Credential)
  return target;
}

int Credential::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 platform_type = 1;
    if (has_platform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_type());
    }

    // required string platform_uid = 2;
    if (has_platform_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_uid());
    }

    // required int32 os_type = 3;
    if (has_os_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->os_type());
    }

    // required int32 market_type = 4;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_type());
    }

    // required string country_code = 5;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // required string lang_code = 6;
    if (has_lang_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lang_code());
    }

    // optional string push_token = 7;
    if (has_push_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->push_token());
    }

    // optional string ad_id = 10;
    if (has_ad_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ad_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string access_token = 11;
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Credential::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Credential* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Credential*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Credential::MergeFrom(const Credential& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_type()) {
      set_platform_type(from.platform_type());
    }
    if (from.has_platform_uid()) {
      set_platform_uid(from.platform_uid());
    }
    if (from.has_os_type()) {
      set_os_type(from.os_type());
    }
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_country_code()) {
      set_country_code(from.country_code());
    }
    if (from.has_lang_code()) {
      set_lang_code(from.lang_code());
    }
    if (from.has_push_token()) {
      set_push_token(from.push_token());
    }
    if (from.has_ad_id()) {
      set_ad_id(from.ad_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_access_token()) {
      set_access_token(from.access_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Credential::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Credential::CopyFrom(const Credential& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Credential::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Credential::Swap(Credential* other) {
  if (other != this) {
    std::swap(platform_type_, other->platform_type_);
    std::swap(platform_uid_, other->platform_uid_);
    std::swap(os_type_, other->os_type_);
    std::swap(market_type_, other->market_type_);
    std::swap(country_code_, other->country_code_);
    std::swap(lang_code_, other->lang_code_);
    std::swap(push_token_, other->push_token_);
    std::swap(ad_id_, other->ad_id_);
    std::swap(access_token_, other->access_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Credential::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Credential_descriptor_;
  metadata.reflection = Credential_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Endpoint::kHostFieldNumber;
const int Endpoint::kPortFieldNumber;
#endif  // !_MSC_VER

Endpoint::Endpoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Endpoint)
}

void Endpoint::InitAsDefaultInstance() {
}

Endpoint::Endpoint(const Endpoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Endpoint)
}

void Endpoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Endpoint::~Endpoint() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Endpoint)
  SharedDtor();
}

void Endpoint::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void Endpoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Endpoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Endpoint_descriptor_;
}

const Endpoint& Endpoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Endpoint* Endpoint::default_instance_ = NULL;

Endpoint* Endpoint::New() const {
  return new Endpoint;
}

void Endpoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Endpoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Endpoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Endpoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Endpoint)
  return false;
#undef DO_
}

void Endpoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Endpoint)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Endpoint)
}

::google::protobuf::uint8* Endpoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Endpoint)
  // required string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Endpoint)
  return target;
}

int Endpoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Endpoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Endpoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Endpoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Endpoint::MergeFrom(const Endpoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Endpoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Endpoint::CopyFrom(const Endpoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Endpoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Endpoint::Swap(Endpoint* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Endpoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Endpoint_descriptor_;
  metadata.reflection = Endpoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountBlockInfo::kBlockTypeFieldNumber;
const int AccountBlockInfo::kBlockReasonFieldNumber;
const int AccountBlockInfo::kBlockMessageFieldNumber;
const int AccountBlockInfo::kStartTimeFieldNumber;
const int AccountBlockInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

AccountBlockInfo::AccountBlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.AccountBlockInfo)
}

void AccountBlockInfo::InitAsDefaultInstance() {
}

AccountBlockInfo::AccountBlockInfo(const AccountBlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.AccountBlockInfo)
}

void AccountBlockInfo::SharedCtor() {
  _cached_size_ = 0;
  block_type_ = 0;
  block_reason_ = 0;
  block_message_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountBlockInfo::~AccountBlockInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.AccountBlockInfo)
  SharedDtor();
}

void AccountBlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccountBlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountBlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountBlockInfo_descriptor_;
}

const AccountBlockInfo& AccountBlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

AccountBlockInfo* AccountBlockInfo::default_instance_ = NULL;

AccountBlockInfo* AccountBlockInfo::New() const {
  return new AccountBlockInfo;
}

void AccountBlockInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountBlockInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(block_type_, block_message_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountBlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.AccountBlockInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 block_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_type_)));
          set_has_block_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_block_reason;
        break;
      }

      // required int32 block_reason = 2;
      case 2: {
        if (tag == 16) {
         parse_block_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_reason_)));
          set_has_block_reason();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_block_message;
        break;
      }

      // required int32 block_message = 3;
      case 3: {
        if (tag == 24) {
         parse_block_message:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_message_)));
          set_has_block_message();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 4;
      case 4: {
        if (tag == 32) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.AccountBlockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.AccountBlockInfo)
  return false;
#undef DO_
}

void AccountBlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.AccountBlockInfo)
  // required int32 block_type = 1;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->block_type(), output);
  }

  // required int32 block_reason = 2;
  if (has_block_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->block_reason(), output);
  }

  // required int32 block_message = 3;
  if (has_block_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block_message(), output);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->start_time(), output);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.AccountBlockInfo)
}

::google::protobuf::uint8* AccountBlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.AccountBlockInfo)
  // required int32 block_type = 1;
  if (has_block_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->block_type(), target);
  }

  // required int32 block_reason = 2;
  if (has_block_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->block_reason(), target);
  }

  // required int32 block_message = 3;
  if (has_block_message()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->block_message(), target);
  }

  // required int64 start_time = 4;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->start_time(), target);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.AccountBlockInfo)
  return target;
}

int AccountBlockInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 block_type = 1;
    if (has_block_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_type());
    }

    // required int32 block_reason = 2;
    if (has_block_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_reason());
    }

    // required int32 block_message = 3;
    if (has_block_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_message());
    }

    // required int64 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountBlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountBlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountBlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountBlockInfo::MergeFrom(const AccountBlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_type()) {
      set_block_type(from.block_type());
    }
    if (from.has_block_reason()) {
      set_block_reason(from.block_reason());
    }
    if (from.has_block_message()) {
      set_block_message(from.block_message());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountBlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountBlockInfo::CopyFrom(const AccountBlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountBlockInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AccountBlockInfo::Swap(AccountBlockInfo* other) {
  if (other != this) {
    std::swap(block_type_, other->block_type_);
    std::swap(block_reason_, other->block_reason_);
    std::swap(block_message_, other->block_message_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountBlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountBlockInfo_descriptor_;
  metadata.reflection = AccountBlockInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GlobalAccount_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalAccount_TYPE_descriptor_;
}
bool GlobalAccount_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 9:
    case 10:
    case 20:
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlobalAccount_TYPE GlobalAccount::NORMAL;
const GlobalAccount_TYPE GlobalAccount::BOT;
const GlobalAccount_TYPE GlobalAccount::QA;
const GlobalAccount_TYPE GlobalAccount::GM;
const GlobalAccount_TYPE GlobalAccount::ADMIN;
const GlobalAccount_TYPE GlobalAccount::TYPE_MIN;
const GlobalAccount_TYPE GlobalAccount::TYPE_MAX;
const int GlobalAccount::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* GlobalAccount_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalAccount_STATUS_descriptor_;
}
bool GlobalAccount_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 98:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GlobalAccount_STATUS GlobalAccount::STATUS_NORMAL;
const GlobalAccount_STATUS GlobalAccount::STATUS_WITHDRAWAL_WAIT;
const GlobalAccount_STATUS GlobalAccount::STATUS_WITHDRAWAL;
const GlobalAccount_STATUS GlobalAccount::STATUS_MIN;
const GlobalAccount_STATUS GlobalAccount::STATUS_MAX;
const int GlobalAccount::STATUS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GlobalAccount::kAccountIdFieldNumber;
const int GlobalAccount::kNicknameFieldNumber;
const int GlobalAccount::kTypeFieldNumber;
const int GlobalAccount::kStatusFieldNumber;
#endif  // !_MSC_VER

GlobalAccount::GlobalAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GlobalAccount)
}

void GlobalAccount::InitAsDefaultInstance() {
}

GlobalAccount::GlobalAccount(const GlobalAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GlobalAccount)
}

void GlobalAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalAccount::~GlobalAccount() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GlobalAccount)
  SharedDtor();
}

void GlobalAccount::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void GlobalAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalAccount_descriptor_;
}

const GlobalAccount& GlobalAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GlobalAccount* GlobalAccount::default_instance_ = NULL;

GlobalAccount* GlobalAccount::New() const {
  return new GlobalAccount;
}

void GlobalAccount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GlobalAccount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, status_);
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GlobalAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .b2.protocol.commondata.GlobalAccount.TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GlobalAccount_TYPE_IsValid(value)) {
            set_type(static_cast< ::b2::protocol::commondata::GlobalAccount_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .b2.protocol.commondata.GlobalAccount.STATUS status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GlobalAccount_STATUS_IsValid(value)) {
            set_status(static_cast< ::b2::protocol::commondata::GlobalAccount_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GlobalAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GlobalAccount)
  return false;
#undef DO_
}

void GlobalAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GlobalAccount)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional .b2.protocol.commondata.GlobalAccount.TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .b2.protocol.commondata.GlobalAccount.STATUS status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GlobalAccount)
}

::google::protobuf::uint8* GlobalAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GlobalAccount)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional .b2.protocol.commondata.GlobalAccount.TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .b2.protocol.commondata.GlobalAccount.STATUS status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GlobalAccount)
  return target;
}

int GlobalAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional .b2.protocol.commondata.GlobalAccount.TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .b2.protocol.commondata.GlobalAccount.STATUS status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalAccount::MergeFrom(const GlobalAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalAccount::CopyFrom(const GlobalAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalAccount::Swap(GlobalAccount* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalAccount_descriptor_;
  metadata.reflection = GlobalAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldAccount::kNameFieldNumber;
const int WorldAccount::kAccountIdFieldNumber;
const int WorldAccount::kCashFieldNumber;
const int WorldAccount::kMoneyFieldNumber;
const int WorldAccount::kBladePointFieldNumber;
const int WorldAccount::kBladePointMaxFieldNumber;
const int WorldAccount::kBladePointChargeLefttimeSecondFieldNumber;
const int WorldAccount::kInventoryAetherBuyCountFieldNumber;
const int WorldAccount::kInventoryConsumableSlotCountFieldNumber;
const int WorldAccount::kDarkCrystalFieldNumber;
const int WorldAccount::kStageBoostTicketFieldNumber;
const int WorldAccount::kShopTenLotteryTicketFieldNumber;
const int WorldAccount::kFamePointFieldNumber;
const int WorldAccount::kSocialPointFieldNumber;
const int WorldAccount::kLastPlayStageIdFieldNumber;
const int WorldAccount::kLastClearStageIdNormalFieldNumber;
const int WorldAccount::kLastClearStageIdHardFieldNumber;
const int WorldAccount::kLastClearStageIdVeryHardFieldNumber;
const int WorldAccount::kLastClearStageIdHellFieldNumber;
const int WorldAccount::kAttendanceDayFieldNumber;
const int WorldAccount::kAttendanceTypeFieldNumber;
const int WorldAccount::kNextAttendanceTimeFieldNumber;
const int WorldAccount::kPvpMatchGradeFieldNumber;
const int WorldAccount::kPvpMatchStarCountFieldNumber;
const int WorldAccount::kAssaultMatchGradeFieldNumber;
const int WorldAccount::kAssaultMatchStarCountFieldNumber;
const int WorldAccount::kDailyPlayTimeInSecFieldNumber;
const int WorldAccount::kDailyPlayTimeRewardIndexFieldNumber;
const int WorldAccount::kDailyPlayTimeUpdateTimeFieldNumber;
const int WorldAccount::kRestTimeFieldNumber;
const int WorldAccount::kNextFairyGiftTimeFieldNumber;
const int WorldAccount::kLeaveGuildTimeFieldNumber;
const int WorldAccount::kGuildIdFieldNumber;
const int WorldAccount::kKickedGuildIdFieldNumber;
const int WorldAccount::kGoldBuffEndTimeFieldNumber;
const int WorldAccount::kExpBuffEndTimeFieldNumber;
const int WorldAccount::kGoldBuffTicketFieldNumber;
const int WorldAccount::kExpBuffTicketFieldNumber;
const int WorldAccount::kStageAutoClearTicketFieldNumber;
const int WorldAccount::kExchangeCountGoldFieldNumber;
const int WorldAccount::kExchangeCountGemFieldNumber;
#endif  // !_MSC_VER

WorldAccount::WorldAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.WorldAccount)
}

void WorldAccount::InitAsDefaultInstance() {
}

WorldAccount::WorldAccount(const WorldAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.WorldAccount)
}

void WorldAccount::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = GOOGLE_LONGLONG(0);
  cash_ = 0;
  money_ = 0;
  blade_point_ = 0;
  blade_point_max_ = 0;
  blade_point_charge_lefttime_second_ = 0;
  inventory_aether_buy_count_ = 0;
  inventory_consumable_slot_count_ = 0;
  dark_crystal_ = 0;
  stage_boost_ticket_ = 0;
  shop_ten_lottery_ticket_ = 0;
  fame_point_ = 0;
  social_point_ = 0;
  last_play_stage_id_ = 0;
  last_clear_stage_id_normal_ = 0;
  last_clear_stage_id_hard_ = 0;
  last_clear_stage_id_very_hard_ = 0;
  last_clear_stage_id_hell_ = 0;
  attendance_day_ = 0;
  attendance_type_ = 1;
  nextattendance_time_ = GOOGLE_LONGLONG(0);
  pvp_match_grade_ = 0;
  pvp_match_star_count_ = 0;
  assault_match_grade_ = 0;
  assault_match_star_count_ = 0;
  daily_play_time_in_sec_ = 0;
  daily_play_time_reward_index_ = 0;
  daily_play_time_update_time_ = GOOGLE_LONGLONG(0);
  rest_time_ = GOOGLE_LONGLONG(0);
  next_fairy_gift_time_ = GOOGLE_LONGLONG(0);
  leave_guild_time_ = GOOGLE_LONGLONG(0);
  guild_id_ = GOOGLE_LONGLONG(0);
  kicked_guild_id_ = GOOGLE_LONGLONG(0);
  gold_buff_end_time_ = GOOGLE_LONGLONG(0);
  exp_buff_end_time_ = GOOGLE_LONGLONG(0);
  gold_buff_ticket_ = GOOGLE_LONGLONG(0);
  exp_buff_ticket_ = GOOGLE_LONGLONG(0);
  stage_auto_clear_ticket_ = 0;
  exchange_count_gold_ = 0;
  exchange_count_gem_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldAccount::~WorldAccount() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.WorldAccount)
  SharedDtor();
}

void WorldAccount::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WorldAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldAccount_descriptor_;
}

const WorldAccount& WorldAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

WorldAccount* WorldAccount::default_instance_ = NULL;

WorldAccount* WorldAccount::New() const {
  return new WorldAccount;
}

void WorldAccount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WorldAccount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, inventory_aether_buy_count_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(inventory_consumable_slot_count_, last_clear_stage_id_normal_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(last_clear_stage_id_hard_, nextattendance_time_);
    ZR_(pvp_match_grade_, pvp_match_star_count_);
    attendance_type_ = 1;
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(assault_match_grade_, leave_guild_time_);
    daily_play_time_reward_index_ = 0;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(stage_auto_clear_ticket_, exchange_count_gold_);
    guild_id_ = GOOGLE_LONGLONG(0);
  }
  exchange_count_gem_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.WorldAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional int64 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cash;
        break;
      }

      // optional int32 cash = 10;
      case 10: {
        if (tag == 80) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_money;
        break;
      }

      // optional int32 money = 11;
      case 11: {
        if (tag == 88) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_blade_point;
        break;
      }

      // optional int32 blade_point = 12;
      case 12: {
        if (tag == 96) {
         parse_blade_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_point_)));
          set_has_blade_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_blade_point_max;
        break;
      }

      // optional int32 blade_point_max = 13;
      case 13: {
        if (tag == 104) {
         parse_blade_point_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_point_max_)));
          set_has_blade_point_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_blade_point_charge_lefttime_second;
        break;
      }

      // optional int32 blade_point_charge_lefttime_second = 14;
      case 14: {
        if (tag == 112) {
         parse_blade_point_charge_lefttime_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_point_charge_lefttime_second_)));
          set_has_blade_point_charge_lefttime_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_inventory_aether_buy_count;
        break;
      }

      // optional int32 inventory_aether_buy_count = 15;
      case 15: {
        if (tag == 120) {
         parse_inventory_aether_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_aether_buy_count_)));
          set_has_inventory_aether_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_inventory_consumable_slot_count;
        break;
      }

      // optional int32 inventory_consumable_slot_count = 16;
      case 16: {
        if (tag == 128) {
         parse_inventory_consumable_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_consumable_slot_count_)));
          set_has_inventory_consumable_slot_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_dark_crystal;
        break;
      }

      // optional int32 dark_crystal = 17;
      case 17: {
        if (tag == 136) {
         parse_dark_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dark_crystal_)));
          set_has_dark_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_stage_boost_ticket;
        break;
      }

      // optional int32 stage_boost_ticket = 18;
      case 18: {
        if (tag == 144) {
         parse_stage_boost_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_boost_ticket_)));
          set_has_stage_boost_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_shop_ten_lottery_ticket;
        break;
      }

      // optional int32 shop_ten_lottery_ticket = 19;
      case 19: {
        if (tag == 152) {
         parse_shop_ten_lottery_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_ten_lottery_ticket_)));
          set_has_shop_ten_lottery_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_fame_point;
        break;
      }

      // optional int32 fame_point = 20;
      case 20: {
        if (tag == 160) {
         parse_fame_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fame_point_)));
          set_has_fame_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_social_point;
        break;
      }

      // optional int32 social_point = 21;
      case 21: {
        if (tag == 168) {
         parse_social_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &social_point_)));
          set_has_social_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_last_play_stage_id;
        break;
      }

      // optional int32 last_play_stage_id = 22;
      case 22: {
        if (tag == 176) {
         parse_last_play_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_play_stage_id_)));
          set_has_last_play_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_last_clear_stage_id_normal;
        break;
      }

      // optional int32 last_clear_stage_id_normal = 23;
      case 23: {
        if (tag == 184) {
         parse_last_clear_stage_id_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_clear_stage_id_normal_)));
          set_has_last_clear_stage_id_normal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_last_clear_stage_id_hard;
        break;
      }

      // optional int32 last_clear_stage_id_hard = 24;
      case 24: {
        if (tag == 192) {
         parse_last_clear_stage_id_hard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_clear_stage_id_hard_)));
          set_has_last_clear_stage_id_hard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_last_clear_stage_id_very_hard;
        break;
      }

      // optional int32 last_clear_stage_id_very_hard = 25;
      case 25: {
        if (tag == 200) {
         parse_last_clear_stage_id_very_hard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_clear_stage_id_very_hard_)));
          set_has_last_clear_stage_id_very_hard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_last_clear_stage_id_hell;
        break;
      }

      // optional int32 last_clear_stage_id_hell = 26;
      case 26: {
        if (tag == 208) {
         parse_last_clear_stage_id_hell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_clear_stage_id_hell_)));
          set_has_last_clear_stage_id_hell();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_attendance_day;
        break;
      }

      // optional int32 attendance_day = 27;
      case 27: {
        if (tag == 216) {
         parse_attendance_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attendance_day_)));
          set_has_attendance_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_attendance_type;
        break;
      }

      // optional .b2.protocol.commondata.DailyAttendanceType attendance_type = 28;
      case 28: {
        if (tag == 224) {
         parse_attendance_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DailyAttendanceType_IsValid(value)) {
            set_attendance_type(static_cast< ::b2::protocol::commondata::DailyAttendanceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_nextAttendance_time;
        break;
      }

      // optional int64 nextAttendance_time = 29;
      case 29: {
        if (tag == 232) {
         parse_nextAttendance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nextattendance_time_)));
          set_has_nextattendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_pvp_match_grade;
        break;
      }

      // optional int32 pvp_match_grade = 30;
      case 30: {
        if (tag == 240) {
         parse_pvp_match_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_match_grade_)));
          set_has_pvp_match_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_pvp_match_star_count;
        break;
      }

      // optional int32 pvp_match_star_count = 31;
      case 31: {
        if (tag == 248) {
         parse_pvp_match_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_match_star_count_)));
          set_has_pvp_match_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_assault_match_grade;
        break;
      }

      // optional int32 assault_match_grade = 32;
      case 32: {
        if (tag == 256) {
         parse_assault_match_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_match_grade_)));
          set_has_assault_match_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_assault_match_star_count;
        break;
      }

      // optional int32 assault_match_star_count = 33;
      case 33: {
        if (tag == 264) {
         parse_assault_match_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_match_star_count_)));
          set_has_assault_match_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_daily_play_time_in_sec;
        break;
      }

      // optional int32 daily_play_time_in_sec = 40;
      case 40: {
        if (tag == 320) {
         parse_daily_play_time_in_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_play_time_in_sec_)));
          set_has_daily_play_time_in_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_daily_play_time_reward_index;
        break;
      }

      // optional int32 daily_play_time_reward_index = 41;
      case 41: {
        if (tag == 328) {
         parse_daily_play_time_reward_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_play_time_reward_index_)));
          set_has_daily_play_time_reward_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_daily_play_time_update_time;
        break;
      }

      // optional int64 daily_play_time_update_time = 42;
      case 42: {
        if (tag == 336) {
         parse_daily_play_time_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daily_play_time_update_time_)));
          set_has_daily_play_time_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_rest_time;
        break;
      }

      // optional int64 rest_time = 43;
      case 43: {
        if (tag == 344) {
         parse_rest_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rest_time_)));
          set_has_rest_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_next_fairy_gift_time;
        break;
      }

      // optional int64 next_fairy_gift_time = 44;
      case 44: {
        if (tag == 352) {
         parse_next_fairy_gift_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_fairy_gift_time_)));
          set_has_next_fairy_gift_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_leave_guild_time;
        break;
      }

      // optional int64 leave_guild_time = 50;
      case 50: {
        if (tag == 400) {
         parse_leave_guild_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leave_guild_time_)));
          set_has_leave_guild_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_guild_id;
        break;
      }

      // optional int64 guild_id = 51;
      case 51: {
        if (tag == 408) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_kicked_guild_id;
        break;
      }

      // optional int64 kicked_guild_id = 52;
      case 52: {
        if (tag == 416) {
         parse_kicked_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kicked_guild_id_)));
          set_has_kicked_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_gold_buff_end_time;
        break;
      }

      // optional int64 gold_buff_end_time = 60;
      case 60: {
        if (tag == 480) {
         parse_gold_buff_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_buff_end_time_)));
          set_has_gold_buff_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_exp_buff_end_time;
        break;
      }

      // optional int64 exp_buff_end_time = 61;
      case 61: {
        if (tag == 488) {
         parse_exp_buff_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_buff_end_time_)));
          set_has_exp_buff_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_gold_buff_ticket;
        break;
      }

      // optional int64 gold_buff_ticket = 62;
      case 62: {
        if (tag == 496) {
         parse_gold_buff_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_buff_ticket_)));
          set_has_gold_buff_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_exp_buff_ticket;
        break;
      }

      // optional int64 exp_buff_ticket = 63;
      case 63: {
        if (tag == 504) {
         parse_exp_buff_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_buff_ticket_)));
          set_has_exp_buff_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_stage_auto_clear_ticket;
        break;
      }

      // optional int32 stage_auto_clear_ticket = 70;
      case 70: {
        if (tag == 560) {
         parse_stage_auto_clear_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_auto_clear_ticket_)));
          set_has_stage_auto_clear_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_exchange_count_gold;
        break;
      }

      // optional int32 exchange_count_gold = 71;
      case 71: {
        if (tag == 568) {
         parse_exchange_count_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_count_gold_)));
          set_has_exchange_count_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_exchange_count_gem;
        break;
      }

      // optional int32 exchange_count_gem = 72;
      case 72: {
        if (tag == 576) {
         parse_exchange_count_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_count_gem_)));
          set_has_exchange_count_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.WorldAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.WorldAccount)
  return false;
#undef DO_
}

void WorldAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.WorldAccount)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->account_id(), output);
  }

  // optional int32 cash = 10;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cash(), output);
  }

  // optional int32 money = 11;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->money(), output);
  }

  // optional int32 blade_point = 12;
  if (has_blade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->blade_point(), output);
  }

  // optional int32 blade_point_max = 13;
  if (has_blade_point_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->blade_point_max(), output);
  }

  // optional int32 blade_point_charge_lefttime_second = 14;
  if (has_blade_point_charge_lefttime_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->blade_point_charge_lefttime_second(), output);
  }

  // optional int32 inventory_aether_buy_count = 15;
  if (has_inventory_aether_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->inventory_aether_buy_count(), output);
  }

  // optional int32 inventory_consumable_slot_count = 16;
  if (has_inventory_consumable_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->inventory_consumable_slot_count(), output);
  }

  // optional int32 dark_crystal = 17;
  if (has_dark_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->dark_crystal(), output);
  }

  // optional int32 stage_boost_ticket = 18;
  if (has_stage_boost_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->stage_boost_ticket(), output);
  }

  // optional int32 shop_ten_lottery_ticket = 19;
  if (has_shop_ten_lottery_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->shop_ten_lottery_ticket(), output);
  }

  // optional int32 fame_point = 20;
  if (has_fame_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->fame_point(), output);
  }

  // optional int32 social_point = 21;
  if (has_social_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->social_point(), output);
  }

  // optional int32 last_play_stage_id = 22;
  if (has_last_play_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->last_play_stage_id(), output);
  }

  // optional int32 last_clear_stage_id_normal = 23;
  if (has_last_clear_stage_id_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->last_clear_stage_id_normal(), output);
  }

  // optional int32 last_clear_stage_id_hard = 24;
  if (has_last_clear_stage_id_hard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->last_clear_stage_id_hard(), output);
  }

  // optional int32 last_clear_stage_id_very_hard = 25;
  if (has_last_clear_stage_id_very_hard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->last_clear_stage_id_very_hard(), output);
  }

  // optional int32 last_clear_stage_id_hell = 26;
  if (has_last_clear_stage_id_hell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->last_clear_stage_id_hell(), output);
  }

  // optional int32 attendance_day = 27;
  if (has_attendance_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->attendance_day(), output);
  }

  // optional .b2.protocol.commondata.DailyAttendanceType attendance_type = 28;
  if (has_attendance_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->attendance_type(), output);
  }

  // optional int64 nextAttendance_time = 29;
  if (has_nextattendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->nextattendance_time(), output);
  }

  // optional int32 pvp_match_grade = 30;
  if (has_pvp_match_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->pvp_match_grade(), output);
  }

  // optional int32 pvp_match_star_count = 31;
  if (has_pvp_match_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->pvp_match_star_count(), output);
  }

  // optional int32 assault_match_grade = 32;
  if (has_assault_match_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->assault_match_grade(), output);
  }

  // optional int32 assault_match_star_count = 33;
  if (has_assault_match_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->assault_match_star_count(), output);
  }

  // optional int32 daily_play_time_in_sec = 40;
  if (has_daily_play_time_in_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->daily_play_time_in_sec(), output);
  }

  // optional int32 daily_play_time_reward_index = 41;
  if (has_daily_play_time_reward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->daily_play_time_reward_index(), output);
  }

  // optional int64 daily_play_time_update_time = 42;
  if (has_daily_play_time_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->daily_play_time_update_time(), output);
  }

  // optional int64 rest_time = 43;
  if (has_rest_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->rest_time(), output);
  }

  // optional int64 next_fairy_gift_time = 44;
  if (has_next_fairy_gift_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->next_fairy_gift_time(), output);
  }

  // optional int64 leave_guild_time = 50;
  if (has_leave_guild_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->leave_guild_time(), output);
  }

  // optional int64 guild_id = 51;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->guild_id(), output);
  }

  // optional int64 kicked_guild_id = 52;
  if (has_kicked_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->kicked_guild_id(), output);
  }

  // optional int64 gold_buff_end_time = 60;
  if (has_gold_buff_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(60, this->gold_buff_end_time(), output);
  }

  // optional int64 exp_buff_end_time = 61;
  if (has_exp_buff_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(61, this->exp_buff_end_time(), output);
  }

  // optional int64 gold_buff_ticket = 62;
  if (has_gold_buff_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->gold_buff_ticket(), output);
  }

  // optional int64 exp_buff_ticket = 63;
  if (has_exp_buff_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->exp_buff_ticket(), output);
  }

  // optional int32 stage_auto_clear_ticket = 70;
  if (has_stage_auto_clear_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->stage_auto_clear_ticket(), output);
  }

  // optional int32 exchange_count_gold = 71;
  if (has_exchange_count_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->exchange_count_gold(), output);
  }

  // optional int32 exchange_count_gem = 72;
  if (has_exchange_count_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->exchange_count_gem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.WorldAccount)
}

::google::protobuf::uint8* WorldAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.WorldAccount)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->account_id(), target);
  }

  // optional int32 cash = 10;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cash(), target);
  }

  // optional int32 money = 11;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->money(), target);
  }

  // optional int32 blade_point = 12;
  if (has_blade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->blade_point(), target);
  }

  // optional int32 blade_point_max = 13;
  if (has_blade_point_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->blade_point_max(), target);
  }

  // optional int32 blade_point_charge_lefttime_second = 14;
  if (has_blade_point_charge_lefttime_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->blade_point_charge_lefttime_second(), target);
  }

  // optional int32 inventory_aether_buy_count = 15;
  if (has_inventory_aether_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->inventory_aether_buy_count(), target);
  }

  // optional int32 inventory_consumable_slot_count = 16;
  if (has_inventory_consumable_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->inventory_consumable_slot_count(), target);
  }

  // optional int32 dark_crystal = 17;
  if (has_dark_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->dark_crystal(), target);
  }

  // optional int32 stage_boost_ticket = 18;
  if (has_stage_boost_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->stage_boost_ticket(), target);
  }

  // optional int32 shop_ten_lottery_ticket = 19;
  if (has_shop_ten_lottery_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->shop_ten_lottery_ticket(), target);
  }

  // optional int32 fame_point = 20;
  if (has_fame_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->fame_point(), target);
  }

  // optional int32 social_point = 21;
  if (has_social_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->social_point(), target);
  }

  // optional int32 last_play_stage_id = 22;
  if (has_last_play_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->last_play_stage_id(), target);
  }

  // optional int32 last_clear_stage_id_normal = 23;
  if (has_last_clear_stage_id_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->last_clear_stage_id_normal(), target);
  }

  // optional int32 last_clear_stage_id_hard = 24;
  if (has_last_clear_stage_id_hard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->last_clear_stage_id_hard(), target);
  }

  // optional int32 last_clear_stage_id_very_hard = 25;
  if (has_last_clear_stage_id_very_hard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->last_clear_stage_id_very_hard(), target);
  }

  // optional int32 last_clear_stage_id_hell = 26;
  if (has_last_clear_stage_id_hell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->last_clear_stage_id_hell(), target);
  }

  // optional int32 attendance_day = 27;
  if (has_attendance_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->attendance_day(), target);
  }

  // optional .b2.protocol.commondata.DailyAttendanceType attendance_type = 28;
  if (has_attendance_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->attendance_type(), target);
  }

  // optional int64 nextAttendance_time = 29;
  if (has_nextattendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->nextattendance_time(), target);
  }

  // optional int32 pvp_match_grade = 30;
  if (has_pvp_match_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->pvp_match_grade(), target);
  }

  // optional int32 pvp_match_star_count = 31;
  if (has_pvp_match_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->pvp_match_star_count(), target);
  }

  // optional int32 assault_match_grade = 32;
  if (has_assault_match_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->assault_match_grade(), target);
  }

  // optional int32 assault_match_star_count = 33;
  if (has_assault_match_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->assault_match_star_count(), target);
  }

  // optional int32 daily_play_time_in_sec = 40;
  if (has_daily_play_time_in_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->daily_play_time_in_sec(), target);
  }

  // optional int32 daily_play_time_reward_index = 41;
  if (has_daily_play_time_reward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->daily_play_time_reward_index(), target);
  }

  // optional int64 daily_play_time_update_time = 42;
  if (has_daily_play_time_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->daily_play_time_update_time(), target);
  }

  // optional int64 rest_time = 43;
  if (has_rest_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->rest_time(), target);
  }

  // optional int64 next_fairy_gift_time = 44;
  if (has_next_fairy_gift_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->next_fairy_gift_time(), target);
  }

  // optional int64 leave_guild_time = 50;
  if (has_leave_guild_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->leave_guild_time(), target);
  }

  // optional int64 guild_id = 51;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->guild_id(), target);
  }

  // optional int64 kicked_guild_id = 52;
  if (has_kicked_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->kicked_guild_id(), target);
  }

  // optional int64 gold_buff_end_time = 60;
  if (has_gold_buff_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(60, this->gold_buff_end_time(), target);
  }

  // optional int64 exp_buff_end_time = 61;
  if (has_exp_buff_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(61, this->exp_buff_end_time(), target);
  }

  // optional int64 gold_buff_ticket = 62;
  if (has_gold_buff_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->gold_buff_ticket(), target);
  }

  // optional int64 exp_buff_ticket = 63;
  if (has_exp_buff_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->exp_buff_ticket(), target);
  }

  // optional int32 stage_auto_clear_ticket = 70;
  if (has_stage_auto_clear_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->stage_auto_clear_ticket(), target);
  }

  // optional int32 exchange_count_gold = 71;
  if (has_exchange_count_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->exchange_count_gold(), target);
  }

  // optional int32 exchange_count_gem = 72;
  if (has_exchange_count_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->exchange_count_gem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.WorldAccount)
  return target;
}

int WorldAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional int32 cash = 10;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }

    // optional int32 money = 11;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 blade_point = 12;
    if (has_blade_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_point());
    }

    // optional int32 blade_point_max = 13;
    if (has_blade_point_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_point_max());
    }

    // optional int32 blade_point_charge_lefttime_second = 14;
    if (has_blade_point_charge_lefttime_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_point_charge_lefttime_second());
    }

    // optional int32 inventory_aether_buy_count = 15;
    if (has_inventory_aether_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_aether_buy_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 inventory_consumable_slot_count = 16;
    if (has_inventory_consumable_slot_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_consumable_slot_count());
    }

    // optional int32 dark_crystal = 17;
    if (has_dark_crystal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dark_crystal());
    }

    // optional int32 stage_boost_ticket = 18;
    if (has_stage_boost_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_boost_ticket());
    }

    // optional int32 shop_ten_lottery_ticket = 19;
    if (has_shop_ten_lottery_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_ten_lottery_ticket());
    }

    // optional int32 fame_point = 20;
    if (has_fame_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fame_point());
    }

    // optional int32 social_point = 21;
    if (has_social_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->social_point());
    }

    // optional int32 last_play_stage_id = 22;
    if (has_last_play_stage_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_play_stage_id());
    }

    // optional int32 last_clear_stage_id_normal = 23;
    if (has_last_clear_stage_id_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_clear_stage_id_normal());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 last_clear_stage_id_hard = 24;
    if (has_last_clear_stage_id_hard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_clear_stage_id_hard());
    }

    // optional int32 last_clear_stage_id_very_hard = 25;
    if (has_last_clear_stage_id_very_hard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_clear_stage_id_very_hard());
    }

    // optional int32 last_clear_stage_id_hell = 26;
    if (has_last_clear_stage_id_hell()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_clear_stage_id_hell());
    }

    // optional int32 attendance_day = 27;
    if (has_attendance_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attendance_day());
    }

    // optional .b2.protocol.commondata.DailyAttendanceType attendance_type = 28;
    if (has_attendance_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attendance_type());
    }

    // optional int64 nextAttendance_time = 29;
    if (has_nextattendance_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nextattendance_time());
    }

    // optional int32 pvp_match_grade = 30;
    if (has_pvp_match_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_match_grade());
    }

    // optional int32 pvp_match_star_count = 31;
    if (has_pvp_match_star_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_match_star_count());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 assault_match_grade = 32;
    if (has_assault_match_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_match_grade());
    }

    // optional int32 assault_match_star_count = 33;
    if (has_assault_match_star_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_match_star_count());
    }

    // optional int32 daily_play_time_in_sec = 40;
    if (has_daily_play_time_in_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_play_time_in_sec());
    }

    // optional int32 daily_play_time_reward_index = 41;
    if (has_daily_play_time_reward_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_play_time_reward_index());
    }

    // optional int64 daily_play_time_update_time = 42;
    if (has_daily_play_time_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daily_play_time_update_time());
    }

    // optional int64 rest_time = 43;
    if (has_rest_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rest_time());
    }

    // optional int64 next_fairy_gift_time = 44;
    if (has_next_fairy_gift_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_fairy_gift_time());
    }

    // optional int64 leave_guild_time = 50;
    if (has_leave_guild_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leave_guild_time());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 guild_id = 51;
    if (has_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

    // optional int64 kicked_guild_id = 52;
    if (has_kicked_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kicked_guild_id());
    }

    // optional int64 gold_buff_end_time = 60;
    if (has_gold_buff_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold_buff_end_time());
    }

    // optional int64 exp_buff_end_time = 61;
    if (has_exp_buff_end_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_buff_end_time());
    }

    // optional int64 gold_buff_ticket = 62;
    if (has_gold_buff_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold_buff_ticket());
    }

    // optional int64 exp_buff_ticket = 63;
    if (has_exp_buff_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_buff_ticket());
    }

    // optional int32 stage_auto_clear_ticket = 70;
    if (has_stage_auto_clear_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_auto_clear_ticket());
    }

    // optional int32 exchange_count_gold = 71;
    if (has_exchange_count_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_count_gold());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 exchange_count_gem = 72;
    if (has_exchange_count_gem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_count_gem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldAccount::MergeFrom(const WorldAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_blade_point()) {
      set_blade_point(from.blade_point());
    }
    if (from.has_blade_point_max()) {
      set_blade_point_max(from.blade_point_max());
    }
    if (from.has_blade_point_charge_lefttime_second()) {
      set_blade_point_charge_lefttime_second(from.blade_point_charge_lefttime_second());
    }
    if (from.has_inventory_aether_buy_count()) {
      set_inventory_aether_buy_count(from.inventory_aether_buy_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inventory_consumable_slot_count()) {
      set_inventory_consumable_slot_count(from.inventory_consumable_slot_count());
    }
    if (from.has_dark_crystal()) {
      set_dark_crystal(from.dark_crystal());
    }
    if (from.has_stage_boost_ticket()) {
      set_stage_boost_ticket(from.stage_boost_ticket());
    }
    if (from.has_shop_ten_lottery_ticket()) {
      set_shop_ten_lottery_ticket(from.shop_ten_lottery_ticket());
    }
    if (from.has_fame_point()) {
      set_fame_point(from.fame_point());
    }
    if (from.has_social_point()) {
      set_social_point(from.social_point());
    }
    if (from.has_last_play_stage_id()) {
      set_last_play_stage_id(from.last_play_stage_id());
    }
    if (from.has_last_clear_stage_id_normal()) {
      set_last_clear_stage_id_normal(from.last_clear_stage_id_normal());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_last_clear_stage_id_hard()) {
      set_last_clear_stage_id_hard(from.last_clear_stage_id_hard());
    }
    if (from.has_last_clear_stage_id_very_hard()) {
      set_last_clear_stage_id_very_hard(from.last_clear_stage_id_very_hard());
    }
    if (from.has_last_clear_stage_id_hell()) {
      set_last_clear_stage_id_hell(from.last_clear_stage_id_hell());
    }
    if (from.has_attendance_day()) {
      set_attendance_day(from.attendance_day());
    }
    if (from.has_attendance_type()) {
      set_attendance_type(from.attendance_type());
    }
    if (from.has_nextattendance_time()) {
      set_nextattendance_time(from.nextattendance_time());
    }
    if (from.has_pvp_match_grade()) {
      set_pvp_match_grade(from.pvp_match_grade());
    }
    if (from.has_pvp_match_star_count()) {
      set_pvp_match_star_count(from.pvp_match_star_count());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_assault_match_grade()) {
      set_assault_match_grade(from.assault_match_grade());
    }
    if (from.has_assault_match_star_count()) {
      set_assault_match_star_count(from.assault_match_star_count());
    }
    if (from.has_daily_play_time_in_sec()) {
      set_daily_play_time_in_sec(from.daily_play_time_in_sec());
    }
    if (from.has_daily_play_time_reward_index()) {
      set_daily_play_time_reward_index(from.daily_play_time_reward_index());
    }
    if (from.has_daily_play_time_update_time()) {
      set_daily_play_time_update_time(from.daily_play_time_update_time());
    }
    if (from.has_rest_time()) {
      set_rest_time(from.rest_time());
    }
    if (from.has_next_fairy_gift_time()) {
      set_next_fairy_gift_time(from.next_fairy_gift_time());
    }
    if (from.has_leave_guild_time()) {
      set_leave_guild_time(from.leave_guild_time());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_kicked_guild_id()) {
      set_kicked_guild_id(from.kicked_guild_id());
    }
    if (from.has_gold_buff_end_time()) {
      set_gold_buff_end_time(from.gold_buff_end_time());
    }
    if (from.has_exp_buff_end_time()) {
      set_exp_buff_end_time(from.exp_buff_end_time());
    }
    if (from.has_gold_buff_ticket()) {
      set_gold_buff_ticket(from.gold_buff_ticket());
    }
    if (from.has_exp_buff_ticket()) {
      set_exp_buff_ticket(from.exp_buff_ticket());
    }
    if (from.has_stage_auto_clear_ticket()) {
      set_stage_auto_clear_ticket(from.stage_auto_clear_ticket());
    }
    if (from.has_exchange_count_gold()) {
      set_exchange_count_gold(from.exchange_count_gold());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_exchange_count_gem()) {
      set_exchange_count_gem(from.exchange_count_gem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldAccount::CopyFrom(const WorldAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldAccount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WorldAccount::Swap(WorldAccount* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(account_id_, other->account_id_);
    std::swap(cash_, other->cash_);
    std::swap(money_, other->money_);
    std::swap(blade_point_, other->blade_point_);
    std::swap(blade_point_max_, other->blade_point_max_);
    std::swap(blade_point_charge_lefttime_second_, other->blade_point_charge_lefttime_second_);
    std::swap(inventory_aether_buy_count_, other->inventory_aether_buy_count_);
    std::swap(inventory_consumable_slot_count_, other->inventory_consumable_slot_count_);
    std::swap(dark_crystal_, other->dark_crystal_);
    std::swap(stage_boost_ticket_, other->stage_boost_ticket_);
    std::swap(shop_ten_lottery_ticket_, other->shop_ten_lottery_ticket_);
    std::swap(fame_point_, other->fame_point_);
    std::swap(social_point_, other->social_point_);
    std::swap(last_play_stage_id_, other->last_play_stage_id_);
    std::swap(last_clear_stage_id_normal_, other->last_clear_stage_id_normal_);
    std::swap(last_clear_stage_id_hard_, other->last_clear_stage_id_hard_);
    std::swap(last_clear_stage_id_very_hard_, other->last_clear_stage_id_very_hard_);
    std::swap(last_clear_stage_id_hell_, other->last_clear_stage_id_hell_);
    std::swap(attendance_day_, other->attendance_day_);
    std::swap(attendance_type_, other->attendance_type_);
    std::swap(nextattendance_time_, other->nextattendance_time_);
    std::swap(pvp_match_grade_, other->pvp_match_grade_);
    std::swap(pvp_match_star_count_, other->pvp_match_star_count_);
    std::swap(assault_match_grade_, other->assault_match_grade_);
    std::swap(assault_match_star_count_, other->assault_match_star_count_);
    std::swap(daily_play_time_in_sec_, other->daily_play_time_in_sec_);
    std::swap(daily_play_time_reward_index_, other->daily_play_time_reward_index_);
    std::swap(daily_play_time_update_time_, other->daily_play_time_update_time_);
    std::swap(rest_time_, other->rest_time_);
    std::swap(next_fairy_gift_time_, other->next_fairy_gift_time_);
    std::swap(leave_guild_time_, other->leave_guild_time_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(kicked_guild_id_, other->kicked_guild_id_);
    std::swap(gold_buff_end_time_, other->gold_buff_end_time_);
    std::swap(exp_buff_end_time_, other->exp_buff_end_time_);
    std::swap(gold_buff_ticket_, other->gold_buff_ticket_);
    std::swap(exp_buff_ticket_, other->exp_buff_ticket_);
    std::swap(stage_auto_clear_ticket_, other->stage_auto_clear_ticket_);
    std::swap(exchange_count_gold_, other->exchange_count_gold_);
    std::swap(exchange_count_gem_, other->exchange_count_gem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldAccount_descriptor_;
  metadata.reflection = WorldAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LightAccount::kAccountIdFieldNumber;
const int LightAccount::kCashFieldNumber;
const int LightAccount::kMoneyFieldNumber;
const int LightAccount::kBladePointFieldNumber;
const int LightAccount::kDarkCrystalFieldNumber;
const int LightAccount::kSocialPointFieldNumber;
const int LightAccount::kStageBoostTicketFieldNumber;
const int LightAccount::kShopTenLotteryTicketFieldNumber;
const int LightAccount::kFamePointFieldNumber;
const int LightAccount::kStageAutoClearTicketFieldNumber;
#endif  // !_MSC_VER

LightAccount::LightAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.LightAccount)
}

void LightAccount::InitAsDefaultInstance() {
}

LightAccount::LightAccount(const LightAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.LightAccount)
}

void LightAccount::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  cash_ = 0;
  money_ = 0;
  blade_point_ = 0;
  dark_crystal_ = 0;
  social_point_ = 0;
  stage_boost_ticket_ = 0;
  shop_ten_lottery_ticket_ = 0;
  fame_point_ = 0;
  stage_auto_clear_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightAccount::~LightAccount() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.LightAccount)
  SharedDtor();
}

void LightAccount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LightAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightAccount_descriptor_;
}

const LightAccount& LightAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

LightAccount* LightAccount::default_instance_ = NULL;

LightAccount* LightAccount::New() const {
  return new LightAccount;
}

void LightAccount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LightAccount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(account_id_, shop_ten_lottery_ticket_);
  }
  ZR_(fame_point_, stage_auto_clear_ticket_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.LightAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cash;
        break;
      }

      // optional int32 cash = 5;
      case 5: {
        if (tag == 40) {
         parse_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_)));
          set_has_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // optional int32 money = 6;
      case 6: {
        if (tag == 48) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_blade_point;
        break;
      }

      // optional int32 blade_point = 7;
      case 7: {
        if (tag == 56) {
         parse_blade_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_point_)));
          set_has_blade_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dark_crystal;
        break;
      }

      // optional int32 dark_crystal = 8;
      case 8: {
        if (tag == 64) {
         parse_dark_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dark_crystal_)));
          set_has_dark_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_social_point;
        break;
      }

      // optional int32 social_point = 9;
      case 9: {
        if (tag == 72) {
         parse_social_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &social_point_)));
          set_has_social_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_stage_boost_ticket;
        break;
      }

      // optional int32 stage_boost_ticket = 10;
      case 10: {
        if (tag == 80) {
         parse_stage_boost_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_boost_ticket_)));
          set_has_stage_boost_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_shop_ten_lottery_ticket;
        break;
      }

      // optional int32 shop_ten_lottery_ticket = 11;
      case 11: {
        if (tag == 88) {
         parse_shop_ten_lottery_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shop_ten_lottery_ticket_)));
          set_has_shop_ten_lottery_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_fame_point;
        break;
      }

      // optional int32 fame_point = 12;
      case 12: {
        if (tag == 96) {
         parse_fame_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fame_point_)));
          set_has_fame_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_stage_auto_clear_ticket;
        break;
      }

      // optional int32 stage_auto_clear_ticket = 13;
      case 13: {
        if (tag == 104) {
         parse_stage_auto_clear_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_auto_clear_ticket_)));
          set_has_stage_auto_clear_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.LightAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.LightAccount)
  return false;
#undef DO_
}

void LightAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.LightAccount)
  // optional int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // optional int32 cash = 5;
  if (has_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cash(), output);
  }

  // optional int32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money(), output);
  }

  // optional int32 blade_point = 7;
  if (has_blade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->blade_point(), output);
  }

  // optional int32 dark_crystal = 8;
  if (has_dark_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dark_crystal(), output);
  }

  // optional int32 social_point = 9;
  if (has_social_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->social_point(), output);
  }

  // optional int32 stage_boost_ticket = 10;
  if (has_stage_boost_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stage_boost_ticket(), output);
  }

  // optional int32 shop_ten_lottery_ticket = 11;
  if (has_shop_ten_lottery_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shop_ten_lottery_ticket(), output);
  }

  // optional int32 fame_point = 12;
  if (has_fame_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->fame_point(), output);
  }

  // optional int32 stage_auto_clear_ticket = 13;
  if (has_stage_auto_clear_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stage_auto_clear_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.LightAccount)
}

::google::protobuf::uint8* LightAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.LightAccount)
  // optional int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // optional int32 cash = 5;
  if (has_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cash(), target);
  }

  // optional int32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money(), target);
  }

  // optional int32 blade_point = 7;
  if (has_blade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->blade_point(), target);
  }

  // optional int32 dark_crystal = 8;
  if (has_dark_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dark_crystal(), target);
  }

  // optional int32 social_point = 9;
  if (has_social_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->social_point(), target);
  }

  // optional int32 stage_boost_ticket = 10;
  if (has_stage_boost_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stage_boost_ticket(), target);
  }

  // optional int32 shop_ten_lottery_ticket = 11;
  if (has_shop_ten_lottery_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shop_ten_lottery_ticket(), target);
  }

  // optional int32 fame_point = 12;
  if (has_fame_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->fame_point(), target);
  }

  // optional int32 stage_auto_clear_ticket = 13;
  if (has_stage_auto_clear_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stage_auto_clear_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.LightAccount)
  return target;
}

int LightAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional int32 cash = 5;
    if (has_cash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash());
    }

    // optional int32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 blade_point = 7;
    if (has_blade_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_point());
    }

    // optional int32 dark_crystal = 8;
    if (has_dark_crystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dark_crystal());
    }

    // optional int32 social_point = 9;
    if (has_social_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->social_point());
    }

    // optional int32 stage_boost_ticket = 10;
    if (has_stage_boost_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_boost_ticket());
    }

    // optional int32 shop_ten_lottery_ticket = 11;
    if (has_shop_ten_lottery_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shop_ten_lottery_ticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fame_point = 12;
    if (has_fame_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fame_point());
    }

    // optional int32 stage_auto_clear_ticket = 13;
    if (has_stage_auto_clear_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_auto_clear_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightAccount::MergeFrom(const LightAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_cash()) {
      set_cash(from.cash());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_blade_point()) {
      set_blade_point(from.blade_point());
    }
    if (from.has_dark_crystal()) {
      set_dark_crystal(from.dark_crystal());
    }
    if (from.has_social_point()) {
      set_social_point(from.social_point());
    }
    if (from.has_stage_boost_ticket()) {
      set_stage_boost_ticket(from.stage_boost_ticket());
    }
    if (from.has_shop_ten_lottery_ticket()) {
      set_shop_ten_lottery_ticket(from.shop_ten_lottery_ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fame_point()) {
      set_fame_point(from.fame_point());
    }
    if (from.has_stage_auto_clear_ticket()) {
      set_stage_auto_clear_ticket(from.stage_auto_clear_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightAccount::CopyFrom(const LightAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightAccount::IsInitialized() const {

  return true;
}

void LightAccount::Swap(LightAccount* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(cash_, other->cash_);
    std::swap(money_, other->money_);
    std::swap(blade_point_, other->blade_point_);
    std::swap(dark_crystal_, other->dark_crystal_);
    std::swap(social_point_, other->social_point_);
    std::swap(stage_boost_ticket_, other->stage_boost_ticket_);
    std::swap(shop_ten_lottery_ticket_, other->shop_ten_lottery_ticket_);
    std::swap(fame_point_, other->fame_point_);
    std::swap(stage_auto_clear_ticket_, other->stage_auto_clear_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightAccount_descriptor_;
  metadata.reflection = LightAccount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kNicknameFieldNumber;
const int AccountInfo::kCharactersFieldNumber;
const int AccountInfo::kEquipItemsFieldNumber;
const int AccountInfo::kEquipCostumesFieldNumber;
const int AccountInfo::kEquipTotemsFieldNumber;
const int AccountInfo::kMountAethersFieldNumber;
const int AccountInfo::kRelicsFieldNumber;
const int AccountInfo::kWingOptionsFieldNumber;
const int AccountInfo::kGuildSkillsFieldNumber;
const int AccountInfo::kItemPresetsFieldNumber;
const int AccountInfo::kUnitySkillsFieldNumber;
const int AccountInfo::kFairiesFieldNumber;
const int AccountInfo::kPvpMatchGradeFieldNumber;
const int AccountInfo::kPvpMatchStarCountFieldNumber;
const int AccountInfo::kAssaultMatchGradeFieldNumber;
const int AccountInfo::kAssaultMatchStarCountFieldNumber;
const int AccountInfo::kCharacterPresetsFieldNumber;
const int AccountInfo::kAccountIdFieldNumber;
const int AccountInfo::kGuildIdFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.AccountInfo)
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.AccountInfo)
}

void AccountInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pvp_match_grade_ = 0;
  pvp_match_star_count_ = 0;
  assault_match_grade_ = 0;
  assault_match_star_count_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  guild_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.AccountInfo)
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AccountInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (has_nickname()) {
    if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      nickname_->clear();
    }
  }
  ZR_(pvp_match_grade_, assault_match_star_count_);
  ZR_(account_id_, guild_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  characters_.Clear();
  equip_items_.Clear();
  equip_costumes_.Clear();
  equip_totems_.Clear();
  mount_aethers_.Clear();
  relics_.Clear();
  wing_options_.Clear();
  guild_skills_.Clear();
  item_presets_.Clear();
  unity_skills_.Clear();
  fairies_.Clear();
  character_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.AccountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_characters;
        break;
      }

      // repeated .b2.protocol.commondata.Character characters = 2;
      case 2: {
        if (tag == 18) {
         parse_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_characters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_characters;
        if (input->ExpectTag(26)) goto parse_equip_items;
        break;
      }

      // repeated .b2.protocol.commondata.Item equip_items = 3;
      case 3: {
        if (tag == 26) {
         parse_equip_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip_items;
        if (input->ExpectTag(34)) goto parse_equip_costumes;
        break;
      }

      // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
      case 4: {
        if (tag == 34) {
         parse_equip_costumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_costumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip_costumes;
        if (input->ExpectTag(42)) goto parse_equip_totems;
        break;
      }

      // repeated .b2.protocol.commondata.Totem equip_totems = 5;
      case 5: {
        if (tag == 42) {
         parse_equip_totems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_totems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equip_totems;
        if (input->ExpectTag(50)) goto parse_mount_aethers;
        break;
      }

      // repeated .b2.protocol.commondata.Aether mount_aethers = 6;
      case 6: {
        if (tag == 50) {
         parse_mount_aethers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mount_aethers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mount_aethers;
        if (input->ExpectTag(58)) goto parse_relics;
        break;
      }

      // repeated .b2.protocol.commondata.Relic relics = 7;
      case 7: {
        if (tag == 58) {
         parse_relics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_relics()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_relics;
        if (input->ExpectTag(66)) goto parse_wing_options;
        break;
      }

      // repeated .b2.protocol.commondata.WingOption wing_options = 8;
      case 8: {
        if (tag == 66) {
         parse_wing_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wing_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wing_options;
        if (input->ExpectTag(74)) goto parse_guild_skills;
        break;
      }

      // repeated .b2.protocol.commondata.GuildSkill guild_skills = 9;
      case 9: {
        if (tag == 74) {
         parse_guild_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guild_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_guild_skills;
        if (input->ExpectTag(82)) goto parse_item_presets;
        break;
      }

      // repeated .b2.protocol.commondata.ItemPreset item_presets = 10;
      case 10: {
        if (tag == 82) {
         parse_item_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_presets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_item_presets;
        if (input->ExpectTag(90)) goto parse_unity_skills;
        break;
      }

      // repeated .b2.protocol.commondata.UnitySkill unity_skills = 11;
      case 11: {
        if (tag == 90) {
         parse_unity_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unity_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_unity_skills;
        if (input->ExpectTag(98)) goto parse_fairies;
        break;
      }

      // repeated .b2.protocol.commondata.FairyStatus fairies = 12;
      case 12: {
        if (tag == 98) {
         parse_fairies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fairies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_fairies;
        if (input->ExpectTag(160)) goto parse_pvp_match_grade;
        break;
      }

      // optional int32 pvp_match_grade = 20;
      case 20: {
        if (tag == 160) {
         parse_pvp_match_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_match_grade_)));
          set_has_pvp_match_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_pvp_match_star_count;
        break;
      }

      // optional int32 pvp_match_star_count = 21;
      case 21: {
        if (tag == 168) {
         parse_pvp_match_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_match_star_count_)));
          set_has_pvp_match_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_assault_match_grade;
        break;
      }

      // optional int32 assault_match_grade = 22;
      case 22: {
        if (tag == 176) {
         parse_assault_match_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_match_grade_)));
          set_has_assault_match_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_assault_match_star_count;
        break;
      }

      // optional int32 assault_match_star_count = 23;
      case 23: {
        if (tag == 184) {
         parse_assault_match_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_match_star_count_)));
          set_has_assault_match_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_character_presets;
        break;
      }

      // repeated .b2.protocol.commondata.PresetNum character_presets = 30;
      case 30: {
        if (tag == 242) {
         parse_character_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character_presets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_character_presets;
        if (input->ExpectTag(320)) goto parse_account_id;
        break;
      }

      // required int64 account_id = 40;
      case 40: {
        if (tag == 320) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_guild_id;
        break;
      }

      // required int64 guild_id = 50;
      case 50: {
        if (tag == 400) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.AccountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.AccountInfo)
  return false;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.AccountInfo)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // repeated .b2.protocol.commondata.Character characters = 2;
  for (int i = 0; i < this->characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->characters(i), output);
  }

  // repeated .b2.protocol.commondata.Item equip_items = 3;
  for (int i = 0; i < this->equip_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_items(i), output);
  }

  // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
  for (int i = 0; i < this->equip_costumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip_costumes(i), output);
  }

  // repeated .b2.protocol.commondata.Totem equip_totems = 5;
  for (int i = 0; i < this->equip_totems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip_totems(i), output);
  }

  // repeated .b2.protocol.commondata.Aether mount_aethers = 6;
  for (int i = 0; i < this->mount_aethers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mount_aethers(i), output);
  }

  // repeated .b2.protocol.commondata.Relic relics = 7;
  for (int i = 0; i < this->relics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->relics(i), output);
  }

  // repeated .b2.protocol.commondata.WingOption wing_options = 8;
  for (int i = 0; i < this->wing_options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->wing_options(i), output);
  }

  // repeated .b2.protocol.commondata.GuildSkill guild_skills = 9;
  for (int i = 0; i < this->guild_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->guild_skills(i), output);
  }

  // repeated .b2.protocol.commondata.ItemPreset item_presets = 10;
  for (int i = 0; i < this->item_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item_presets(i), output);
  }

  // repeated .b2.protocol.commondata.UnitySkill unity_skills = 11;
  for (int i = 0; i < this->unity_skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->unity_skills(i), output);
  }

  // repeated .b2.protocol.commondata.FairyStatus fairies = 12;
  for (int i = 0; i < this->fairies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->fairies(i), output);
  }

  // optional int32 pvp_match_grade = 20;
  if (has_pvp_match_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->pvp_match_grade(), output);
  }

  // optional int32 pvp_match_star_count = 21;
  if (has_pvp_match_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->pvp_match_star_count(), output);
  }

  // optional int32 assault_match_grade = 22;
  if (has_assault_match_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->assault_match_grade(), output);
  }

  // optional int32 assault_match_star_count = 23;
  if (has_assault_match_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->assault_match_star_count(), output);
  }

  // repeated .b2.protocol.commondata.PresetNum character_presets = 30;
  for (int i = 0; i < this->character_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->character_presets(i), output);
  }

  // required int64 account_id = 40;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(40, this->account_id(), output);
  }

  // required int64 guild_id = 50;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(50, this->guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.AccountInfo)
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.AccountInfo)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // repeated .b2.protocol.commondata.Character characters = 2;
  for (int i = 0; i < this->characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->characters(i), target);
  }

  // repeated .b2.protocol.commondata.Item equip_items = 3;
  for (int i = 0; i < this->equip_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_items(i), target);
  }

  // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
  for (int i = 0; i < this->equip_costumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip_costumes(i), target);
  }

  // repeated .b2.protocol.commondata.Totem equip_totems = 5;
  for (int i = 0; i < this->equip_totems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip_totems(i), target);
  }

  // repeated .b2.protocol.commondata.Aether mount_aethers = 6;
  for (int i = 0; i < this->mount_aethers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mount_aethers(i), target);
  }

  // repeated .b2.protocol.commondata.Relic relics = 7;
  for (int i = 0; i < this->relics_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->relics(i), target);
  }

  // repeated .b2.protocol.commondata.WingOption wing_options = 8;
  for (int i = 0; i < this->wing_options_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wing_options(i), target);
  }

  // repeated .b2.protocol.commondata.GuildSkill guild_skills = 9;
  for (int i = 0; i < this->guild_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->guild_skills(i), target);
  }

  // repeated .b2.protocol.commondata.ItemPreset item_presets = 10;
  for (int i = 0; i < this->item_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item_presets(i), target);
  }

  // repeated .b2.protocol.commondata.UnitySkill unity_skills = 11;
  for (int i = 0; i < this->unity_skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->unity_skills(i), target);
  }

  // repeated .b2.protocol.commondata.FairyStatus fairies = 12;
  for (int i = 0; i < this->fairies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->fairies(i), target);
  }

  // optional int32 pvp_match_grade = 20;
  if (has_pvp_match_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->pvp_match_grade(), target);
  }

  // optional int32 pvp_match_star_count = 21;
  if (has_pvp_match_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->pvp_match_star_count(), target);
  }

  // optional int32 assault_match_grade = 22;
  if (has_assault_match_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->assault_match_grade(), target);
  }

  // optional int32 assault_match_star_count = 23;
  if (has_assault_match_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->assault_match_star_count(), target);
  }

  // repeated .b2.protocol.commondata.PresetNum character_presets = 30;
  for (int i = 0; i < this->character_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->character_presets(i), target);
  }

  // required int64 account_id = 40;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(40, this->account_id(), target);
  }

  // required int64 guild_id = 50;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(50, this->guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.AccountInfo)
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional int32 pvp_match_grade = 20;
    if (has_pvp_match_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_match_grade());
    }

    // optional int32 pvp_match_star_count = 21;
    if (has_pvp_match_star_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_match_star_count());
    }

    // optional int32 assault_match_grade = 22;
    if (has_assault_match_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_match_grade());
    }

    // optional int32 assault_match_star_count = 23;
    if (has_assault_match_star_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_match_star_count());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // required int64 account_id = 40;
    if (has_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required int64 guild_id = 50;
    if (has_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

  }
  // repeated .b2.protocol.commondata.Character characters = 2;
  total_size += 1 * this->characters_size();
  for (int i = 0; i < this->characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->characters(i));
  }

  // repeated .b2.protocol.commondata.Item equip_items = 3;
  total_size += 1 * this->equip_items_size();
  for (int i = 0; i < this->equip_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_items(i));
  }

  // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
  total_size += 1 * this->equip_costumes_size();
  for (int i = 0; i < this->equip_costumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_costumes(i));
  }

  // repeated .b2.protocol.commondata.Totem equip_totems = 5;
  total_size += 1 * this->equip_totems_size();
  for (int i = 0; i < this->equip_totems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_totems(i));
  }

  // repeated .b2.protocol.commondata.Aether mount_aethers = 6;
  total_size += 1 * this->mount_aethers_size();
  for (int i = 0; i < this->mount_aethers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mount_aethers(i));
  }

  // repeated .b2.protocol.commondata.Relic relics = 7;
  total_size += 1 * this->relics_size();
  for (int i = 0; i < this->relics_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->relics(i));
  }

  // repeated .b2.protocol.commondata.WingOption wing_options = 8;
  total_size += 1 * this->wing_options_size();
  for (int i = 0; i < this->wing_options_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wing_options(i));
  }

  // repeated .b2.protocol.commondata.GuildSkill guild_skills = 9;
  total_size += 1 * this->guild_skills_size();
  for (int i = 0; i < this->guild_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guild_skills(i));
  }

  // repeated .b2.protocol.commondata.ItemPreset item_presets = 10;
  total_size += 1 * this->item_presets_size();
  for (int i = 0; i < this->item_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_presets(i));
  }

  // repeated .b2.protocol.commondata.UnitySkill unity_skills = 11;
  total_size += 1 * this->unity_skills_size();
  for (int i = 0; i < this->unity_skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unity_skills(i));
  }

  // repeated .b2.protocol.commondata.FairyStatus fairies = 12;
  total_size += 1 * this->fairies_size();
  for (int i = 0; i < this->fairies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fairies(i));
  }

  // repeated .b2.protocol.commondata.PresetNum character_presets = 30;
  total_size += 2 * this->character_presets_size();
  for (int i = 0; i < this->character_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_presets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  characters_.MergeFrom(from.characters_);
  equip_items_.MergeFrom(from.equip_items_);
  equip_costumes_.MergeFrom(from.equip_costumes_);
  equip_totems_.MergeFrom(from.equip_totems_);
  mount_aethers_.MergeFrom(from.mount_aethers_);
  relics_.MergeFrom(from.relics_);
  wing_options_.MergeFrom(from.wing_options_);
  guild_skills_.MergeFrom(from.guild_skills_);
  item_presets_.MergeFrom(from.item_presets_);
  unity_skills_.MergeFrom(from.unity_skills_);
  fairies_.MergeFrom(from.fairies_);
  character_presets_.MergeFrom(from.character_presets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_pvp_match_grade()) {
      set_pvp_match_grade(from.pvp_match_grade());
    }
    if (from.has_pvp_match_star_count()) {
      set_pvp_match_star_count(from.pvp_match_star_count());
    }
    if (from.has_assault_match_grade()) {
      set_assault_match_grade(from.assault_match_grade());
    }
    if (from.has_assault_match_star_count()) {
      set_assault_match_star_count(from.assault_match_star_count());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00060001) != 0x00060001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->characters())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_costumes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_totems())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->mount_aethers())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->relics())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->wing_options())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->guild_skills())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->item_presets())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->unity_skills())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fairies())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->character_presets())) return false;
  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    characters_.Swap(&other->characters_);
    equip_items_.Swap(&other->equip_items_);
    equip_costumes_.Swap(&other->equip_costumes_);
    equip_totems_.Swap(&other->equip_totems_);
    mount_aethers_.Swap(&other->mount_aethers_);
    relics_.Swap(&other->relics_);
    wing_options_.Swap(&other->wing_options_);
    guild_skills_.Swap(&other->guild_skills_);
    item_presets_.Swap(&other->item_presets_);
    unity_skills_.Swap(&other->unity_skills_);
    fairies_.Swap(&other->fairies_);
    std::swap(pvp_match_grade_, other->pvp_match_grade_);
    std::swap(pvp_match_star_count_, other->pvp_match_star_count_);
    std::swap(assault_match_grade_, other->assault_match_grade_);
    std::swap(assault_match_star_count_, other->assault_match_star_count_);
    character_presets_.Swap(&other->character_presets_);
    std::swap(account_id_, other->account_id_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PresetNum::kCharacterTypeFieldNumber;
const int PresetNum::kItemPresetNumFieldNumber;
const int PresetNum::kSkillPresetNumFieldNumber;
#endif  // !_MSC_VER

PresetNum::PresetNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.PresetNum)
}

void PresetNum::InitAsDefaultInstance() {
}

PresetNum::PresetNum(const PresetNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.PresetNum)
}

void PresetNum::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  item_preset_num_ = 0;
  skill_preset_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresetNum::~PresetNum() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.PresetNum)
  SharedDtor();
}

void PresetNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PresetNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PresetNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresetNum_descriptor_;
}

const PresetNum& PresetNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

PresetNum* PresetNum::default_instance_ = NULL;

PresetNum* PresetNum::New() const {
  return new PresetNum;
}

void PresetNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PresetNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(item_preset_num_, skill_preset_num_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PresetNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.PresetNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_preset_num;
        break;
      }

      // optional int32 item_preset_num = 2;
      case 2: {
        if (tag == 16) {
         parse_item_preset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_preset_num_)));
          set_has_item_preset_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_preset_num;
        break;
      }

      // optional int32 skill_preset_num = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_preset_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_preset_num_)));
          set_has_skill_preset_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.PresetNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.PresetNum)
  return false;
#undef DO_
}

void PresetNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.PresetNum)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // optional int32 item_preset_num = 2;
  if (has_item_preset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_preset_num(), output);
  }

  // optional int32 skill_preset_num = 3;
  if (has_skill_preset_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_preset_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.PresetNum)
}

::google::protobuf::uint8* PresetNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.PresetNum)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // optional int32 item_preset_num = 2;
  if (has_item_preset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_preset_num(), target);
  }

  // optional int32 skill_preset_num = 3;
  if (has_skill_preset_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_preset_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.PresetNum)
  return target;
}

int PresetNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // optional int32 item_preset_num = 2;
    if (has_item_preset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_preset_num());
    }

    // optional int32 skill_preset_num = 3;
    if (has_skill_preset_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_preset_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresetNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PresetNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PresetNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PresetNum::MergeFrom(const PresetNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_item_preset_num()) {
      set_item_preset_num(from.item_preset_num());
    }
    if (from.has_skill_preset_num()) {
      set_skill_preset_num(from.skill_preset_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PresetNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresetNum::CopyFrom(const PresetNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresetNum::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PresetNum::Swap(PresetNum* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(item_preset_num_, other->item_preset_num_);
    std::swap(skill_preset_num_, other->skill_preset_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PresetNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PresetNum_descriptor_;
  metadata.reflection = PresetNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Character_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Character_TYPE_descriptor_;
}
bool Character_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Character_TYPE Character::GLADIATOR;
const Character_TYPE Character::ASSASSIN;
const Character_TYPE Character::WIZARD;
const Character_TYPE Character::FIGHTER;
const Character_TYPE Character::TYPE_MIN;
const Character_TYPE Character::TYPE_MAX;
const int Character::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Character::kCharacterTypeFieldNumber;
const int Character::kStyleFaceFieldNumber;
const int Character::kStyleHairFieldNumber;
const int Character::kStyleSkinFieldNumber;
const int Character::kLevelFieldNumber;
const int Character::kExpFieldNumber;
const int Character::kExpMaxFieldNumber;
const int Character::kSkillPointBuyCountFieldNumber;
const int Character::kInventoryItemBuyCountFieldNumber;
const int Character::kInventoryItemSlotCountFieldNumber;
const int Character::kRankFieldNumber;
const int Character::kNameFieldNumber;
const int Character::kRankNodeIndexFieldNumber;
const int Character::kRankNodeStateFieldNumber;
const int Character::kWingGradeFieldNumber;
const int Character::kWingLevelFieldNumber;
const int Character::kWingVisibleFieldNumber;
const int Character::kHelmetVisibleFieldNumber;
const int Character::kAetherOffenseSetOptionIdFieldNumber;
const int Character::kAetherDefenseSetOptionIdFieldNumber;
const int Character::kRemainSkillPointFieldNumber;
const int Character::kSkillQuickSlotsFieldNumber;
const int Character::kSkillsFieldNumber;
const int Character::kUnitySkillFieldNumber;
const int Character::kUnitySkillAwakenFieldNumber;
const int Character::kTotalPowerFieldNumber;
const int Character::kCostumeWeaponVisibleFieldNumber;
const int Character::kCostumeHatVisibleFieldNumber;
const int Character::kCostumeArmorVisibleFieldNumber;
#endif  // !_MSC_VER

Character::Character()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Character)
}

void Character::InitAsDefaultInstance() {
}

Character::Character(const Character& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Character)
}

void Character::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  character_type_ = 1;
  style_face_ = 0;
  style_hair_ = 0;
  style_skin_ = 0;
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  exp_max_ = GOOGLE_LONGLONG(0);
  skill_point_buy_count_ = 0;
  inventory_item_buy_count_ = 0;
  inventory_item_slot_count_ = 0;
  rank_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rank_node_index_ = 0;
  rank_node_state_ = false;
  wing_grade_ = 0;
  wing_level_ = 0;
  wing_visible_ = false;
  helmet_visible_ = false;
  aether_offense_set_option_id_ = 0;
  aether_defense_set_option_id_ = 0;
  remain_skill_point_ = 0;
  unity_skill_ = false;
  unity_skill_awaken_ = false;
  total_power_ = 0;
  costume_weapon_visible_ = false;
  costume_hat_visible_ = false;
  costume_armor_visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Character::~Character() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Character)
  SharedDtor();
}

void Character::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Character::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Character::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Character_descriptor_;
}

const Character& Character::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Character* Character::default_instance_ = NULL;

Character* Character::New() const {
  return new Character;
}

void Character::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Character*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(style_face_, exp_max_);
    character_type_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(inventory_item_buy_count_, inventory_item_slot_count_);
    ZR_(rank_, rank_node_state_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 10420224) {
    ZR_(wing_visible_, remain_skill_point_);
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(total_power_, costume_armor_visible_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  skill_quick_slots_.Clear();
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Character::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Character)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_style_face;
        break;
      }

      // optional int32 style_face = 2;
      case 2: {
        if (tag == 16) {
         parse_style_face:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_face_)));
          set_has_style_face();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_style_hair;
        break;
      }

      // optional int32 style_hair = 3;
      case 3: {
        if (tag == 24) {
         parse_style_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_hair_)));
          set_has_style_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_style_skin;
        break;
      }

      // optional int32 style_skin = 4;
      case 4: {
        if (tag == 32) {
         parse_style_skin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &style_skin_)));
          set_has_style_skin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_exp;
        break;
      }

      // optional int64 exp = 6;
      case 6: {
        if (tag == 48) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_exp_max;
        break;
      }

      // optional int64 exp_max = 7;
      case 7: {
        if (tag == 56) {
         parse_exp_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_max_)));
          set_has_exp_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_skill_point_buy_count;
        break;
      }

      // optional int32 skill_point_buy_count = 9;
      case 9: {
        if (tag == 72) {
         parse_skill_point_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_buy_count_)));
          set_has_skill_point_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_inventory_item_buy_count;
        break;
      }

      // optional int32 inventory_item_buy_count = 10;
      case 10: {
        if (tag == 80) {
         parse_inventory_item_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_item_buy_count_)));
          set_has_inventory_item_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_inventory_item_slot_count;
        break;
      }

      // optional int32 inventory_item_slot_count = 11;
      case 11: {
        if (tag == 88) {
         parse_inventory_item_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inventory_item_slot_count_)));
          set_has_inventory_item_slot_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_rank;
        break;
      }

      // optional int32 rank = 12;
      case 12: {
        if (tag == 96) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_name;
        break;
      }

      // optional string name = 13;
      case 13: {
        if (tag == 106) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_rank_node_index;
        break;
      }

      // optional int32 rank_node_index = 14;
      case 14: {
        if (tag == 112) {
         parse_rank_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_node_index_)));
          set_has_rank_node_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_rank_node_state;
        break;
      }

      // optional bool rank_node_state = 15;
      case 15: {
        if (tag == 120) {
         parse_rank_node_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rank_node_state_)));
          set_has_rank_node_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_wing_grade;
        break;
      }

      // optional int32 wing_grade = 16;
      case 16: {
        if (tag == 128) {
         parse_wing_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_grade_)));
          set_has_wing_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_wing_Level;
        break;
      }

      // optional int32 wing_Level = 17;
      case 17: {
        if (tag == 136) {
         parse_wing_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_level_)));
          set_has_wing_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_wing_visible;
        break;
      }

      // optional bool wing_visible = 18;
      case 18: {
        if (tag == 144) {
         parse_wing_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wing_visible_)));
          set_has_wing_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_helmet_visible;
        break;
      }

      // optional bool helmet_visible = 19;
      case 19: {
        if (tag == 152) {
         parse_helmet_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helmet_visible_)));
          set_has_helmet_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_aether_offense_set_option_id;
        break;
      }

      // optional int32 aether_offense_set_option_id = 20;
      case 20: {
        if (tag == 160) {
         parse_aether_offense_set_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aether_offense_set_option_id_)));
          set_has_aether_offense_set_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_aether_defense_set_option_id;
        break;
      }

      // optional int32 aether_defense_set_option_id = 21;
      case 21: {
        if (tag == 168) {
         parse_aether_defense_set_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aether_defense_set_option_id_)));
          set_has_aether_defense_set_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_remain_skill_point;
        break;
      }

      // optional int32 remain_skill_point = 24;
      case 24: {
        if (tag == 192) {
         parse_remain_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_skill_point_)));
          set_has_remain_skill_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_skill_quick_slots;
        break;
      }

      // repeated .b2.protocol.commondata.SkillQuickSlot skill_quick_slots = 25;
      case 25: {
        if (tag == 202) {
         parse_skill_quick_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_quick_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_skill_quick_slots;
        if (input->ExpectTag(210)) goto parse_skills;
        break;
      }

      // repeated .b2.protocol.commondata.Skill skills = 26;
      case 26: {
        if (tag == 210) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_skills;
        if (input->ExpectTag(216)) goto parse_unity_skill;
        break;
      }

      // optional bool unity_skill = 27;
      case 27: {
        if (tag == 216) {
         parse_unity_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unity_skill_)));
          set_has_unity_skill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_unity_skill_awaken;
        break;
      }

      // optional bool unity_skill_awaken = 28;
      case 28: {
        if (tag == 224) {
         parse_unity_skill_awaken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unity_skill_awaken_)));
          set_has_unity_skill_awaken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_total_power;
        break;
      }

      // optional int32 total_power = 29;
      case 29: {
        if (tag == 232) {
         parse_total_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_power_)));
          set_has_total_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_costume_weapon_visible;
        break;
      }

      // optional bool costume_weapon_visible = 31;
      case 31: {
        if (tag == 248) {
         parse_costume_weapon_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costume_weapon_visible_)));
          set_has_costume_weapon_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_costume_hat_visible;
        break;
      }

      // optional bool costume_hat_visible = 32;
      case 32: {
        if (tag == 256) {
         parse_costume_hat_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costume_hat_visible_)));
          set_has_costume_hat_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_costume_armor_visible;
        break;
      }

      // optional bool costume_armor_visible = 33;
      case 33: {
        if (tag == 264) {
         parse_costume_armor_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costume_armor_visible_)));
          set_has_costume_armor_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Character)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Character)
  return false;
#undef DO_
}

void Character::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Character)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // optional int32 style_face = 2;
  if (has_style_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->style_face(), output);
  }

  // optional int32 style_hair = 3;
  if (has_style_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->style_hair(), output);
  }

  // optional int32 style_skin = 4;
  if (has_style_skin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->style_skin(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->exp(), output);
  }

  // optional int64 exp_max = 7;
  if (has_exp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->exp_max(), output);
  }

  // optional int32 skill_point_buy_count = 9;
  if (has_skill_point_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->skill_point_buy_count(), output);
  }

  // optional int32 inventory_item_buy_count = 10;
  if (has_inventory_item_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->inventory_item_buy_count(), output);
  }

  // optional int32 inventory_item_slot_count = 11;
  if (has_inventory_item_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->inventory_item_slot_count(), output);
  }

  // optional int32 rank = 12;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rank(), output);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->name(), output);
  }

  // optional int32 rank_node_index = 14;
  if (has_rank_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rank_node_index(), output);
  }

  // optional bool rank_node_state = 15;
  if (has_rank_node_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->rank_node_state(), output);
  }

  // optional int32 wing_grade = 16;
  if (has_wing_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->wing_grade(), output);
  }

  // optional int32 wing_Level = 17;
  if (has_wing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wing_level(), output);
  }

  // optional bool wing_visible = 18;
  if (has_wing_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->wing_visible(), output);
  }

  // optional bool helmet_visible = 19;
  if (has_helmet_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->helmet_visible(), output);
  }

  // optional int32 aether_offense_set_option_id = 20;
  if (has_aether_offense_set_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->aether_offense_set_option_id(), output);
  }

  // optional int32 aether_defense_set_option_id = 21;
  if (has_aether_defense_set_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->aether_defense_set_option_id(), output);
  }

  // optional int32 remain_skill_point = 24;
  if (has_remain_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->remain_skill_point(), output);
  }

  // repeated .b2.protocol.commondata.SkillQuickSlot skill_quick_slots = 25;
  for (int i = 0; i < this->skill_quick_slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->skill_quick_slots(i), output);
  }

  // repeated .b2.protocol.commondata.Skill skills = 26;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->skills(i), output);
  }

  // optional bool unity_skill = 27;
  if (has_unity_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->unity_skill(), output);
  }

  // optional bool unity_skill_awaken = 28;
  if (has_unity_skill_awaken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->unity_skill_awaken(), output);
  }

  // optional int32 total_power = 29;
  if (has_total_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->total_power(), output);
  }

  // optional bool costume_weapon_visible = 31;
  if (has_costume_weapon_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->costume_weapon_visible(), output);
  }

  // optional bool costume_hat_visible = 32;
  if (has_costume_hat_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->costume_hat_visible(), output);
  }

  // optional bool costume_armor_visible = 33;
  if (has_costume_armor_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->costume_armor_visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Character)
}

::google::protobuf::uint8* Character::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Character)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // optional int32 style_face = 2;
  if (has_style_face()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->style_face(), target);
  }

  // optional int32 style_hair = 3;
  if (has_style_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->style_hair(), target);
  }

  // optional int32 style_skin = 4;
  if (has_style_skin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->style_skin(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int64 exp = 6;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->exp(), target);
  }

  // optional int64 exp_max = 7;
  if (has_exp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->exp_max(), target);
  }

  // optional int32 skill_point_buy_count = 9;
  if (has_skill_point_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->skill_point_buy_count(), target);
  }

  // optional int32 inventory_item_buy_count = 10;
  if (has_inventory_item_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->inventory_item_buy_count(), target);
  }

  // optional int32 inventory_item_slot_count = 11;
  if (has_inventory_item_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->inventory_item_slot_count(), target);
  }

  // optional int32 rank = 12;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rank(), target);
  }

  // optional string name = 13;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->name(), target);
  }

  // optional int32 rank_node_index = 14;
  if (has_rank_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rank_node_index(), target);
  }

  // optional bool rank_node_state = 15;
  if (has_rank_node_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->rank_node_state(), target);
  }

  // optional int32 wing_grade = 16;
  if (has_wing_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->wing_grade(), target);
  }

  // optional int32 wing_Level = 17;
  if (has_wing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wing_level(), target);
  }

  // optional bool wing_visible = 18;
  if (has_wing_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->wing_visible(), target);
  }

  // optional bool helmet_visible = 19;
  if (has_helmet_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->helmet_visible(), target);
  }

  // optional int32 aether_offense_set_option_id = 20;
  if (has_aether_offense_set_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->aether_offense_set_option_id(), target);
  }

  // optional int32 aether_defense_set_option_id = 21;
  if (has_aether_defense_set_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->aether_defense_set_option_id(), target);
  }

  // optional int32 remain_skill_point = 24;
  if (has_remain_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->remain_skill_point(), target);
  }

  // repeated .b2.protocol.commondata.SkillQuickSlot skill_quick_slots = 25;
  for (int i = 0; i < this->skill_quick_slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->skill_quick_slots(i), target);
  }

  // repeated .b2.protocol.commondata.Skill skills = 26;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->skills(i), target);
  }

  // optional bool unity_skill = 27;
  if (has_unity_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->unity_skill(), target);
  }

  // optional bool unity_skill_awaken = 28;
  if (has_unity_skill_awaken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->unity_skill_awaken(), target);
  }

  // optional int32 total_power = 29;
  if (has_total_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->total_power(), target);
  }

  // optional bool costume_weapon_visible = 31;
  if (has_costume_weapon_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->costume_weapon_visible(), target);
  }

  // optional bool costume_hat_visible = 32;
  if (has_costume_hat_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->costume_hat_visible(), target);
  }

  // optional bool costume_armor_visible = 33;
  if (has_costume_armor_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->costume_armor_visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Character)
  return target;
}

int Character::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // optional int32 style_face = 2;
    if (has_style_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style_face());
    }

    // optional int32 style_hair = 3;
    if (has_style_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style_hair());
    }

    // optional int32 style_skin = 4;
    if (has_style_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->style_skin());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 exp = 6;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 exp_max = 7;
    if (has_exp_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_max());
    }

    // optional int32 skill_point_buy_count = 9;
    if (has_skill_point_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point_buy_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 inventory_item_buy_count = 10;
    if (has_inventory_item_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_item_buy_count());
    }

    // optional int32 inventory_item_slot_count = 11;
    if (has_inventory_item_slot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inventory_item_slot_count());
    }

    // optional int32 rank = 12;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string name = 13;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 rank_node_index = 14;
    if (has_rank_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_node_index());
    }

    // optional bool rank_node_state = 15;
    if (has_rank_node_state()) {
      total_size += 1 + 1;
    }

    // optional int32 wing_grade = 16;
    if (has_wing_grade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_grade());
    }

    // optional int32 wing_Level = 17;
    if (has_wing_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool wing_visible = 18;
    if (has_wing_visible()) {
      total_size += 2 + 1;
    }

    // optional bool helmet_visible = 19;
    if (has_helmet_visible()) {
      total_size += 2 + 1;
    }

    // optional int32 aether_offense_set_option_id = 20;
    if (has_aether_offense_set_option_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aether_offense_set_option_id());
    }

    // optional int32 aether_defense_set_option_id = 21;
    if (has_aether_defense_set_option_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aether_defense_set_option_id());
    }

    // optional int32 remain_skill_point = 24;
    if (has_remain_skill_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_skill_point());
    }

    // optional bool unity_skill = 27;
    if (has_unity_skill()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool unity_skill_awaken = 28;
    if (has_unity_skill_awaken()) {
      total_size += 2 + 1;
    }

    // optional int32 total_power = 29;
    if (has_total_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_power());
    }

    // optional bool costume_weapon_visible = 31;
    if (has_costume_weapon_visible()) {
      total_size += 2 + 1;
    }

    // optional bool costume_hat_visible = 32;
    if (has_costume_hat_visible()) {
      total_size += 2 + 1;
    }

    // optional bool costume_armor_visible = 33;
    if (has_costume_armor_visible()) {
      total_size += 2 + 1;
    }

  }
  // repeated .b2.protocol.commondata.SkillQuickSlot skill_quick_slots = 25;
  total_size += 2 * this->skill_quick_slots_size();
  for (int i = 0; i < this->skill_quick_slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_quick_slots(i));
  }

  // repeated .b2.protocol.commondata.Skill skills = 26;
  total_size += 2 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Character::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Character* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Character*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Character::MergeFrom(const Character& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_quick_slots_.MergeFrom(from.skill_quick_slots_);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_style_face()) {
      set_style_face(from.style_face());
    }
    if (from.has_style_hair()) {
      set_style_hair(from.style_hair());
    }
    if (from.has_style_skin()) {
      set_style_skin(from.style_skin());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_exp_max()) {
      set_exp_max(from.exp_max());
    }
    if (from.has_skill_point_buy_count()) {
      set_skill_point_buy_count(from.skill_point_buy_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inventory_item_buy_count()) {
      set_inventory_item_buy_count(from.inventory_item_buy_count());
    }
    if (from.has_inventory_item_slot_count()) {
      set_inventory_item_slot_count(from.inventory_item_slot_count());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rank_node_index()) {
      set_rank_node_index(from.rank_node_index());
    }
    if (from.has_rank_node_state()) {
      set_rank_node_state(from.rank_node_state());
    }
    if (from.has_wing_grade()) {
      set_wing_grade(from.wing_grade());
    }
    if (from.has_wing_level()) {
      set_wing_level(from.wing_level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wing_visible()) {
      set_wing_visible(from.wing_visible());
    }
    if (from.has_helmet_visible()) {
      set_helmet_visible(from.helmet_visible());
    }
    if (from.has_aether_offense_set_option_id()) {
      set_aether_offense_set_option_id(from.aether_offense_set_option_id());
    }
    if (from.has_aether_defense_set_option_id()) {
      set_aether_defense_set_option_id(from.aether_defense_set_option_id());
    }
    if (from.has_remain_skill_point()) {
      set_remain_skill_point(from.remain_skill_point());
    }
    if (from.has_unity_skill()) {
      set_unity_skill(from.unity_skill());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_unity_skill_awaken()) {
      set_unity_skill_awaken(from.unity_skill_awaken());
    }
    if (from.has_total_power()) {
      set_total_power(from.total_power());
    }
    if (from.has_costume_weapon_visible()) {
      set_costume_weapon_visible(from.costume_weapon_visible());
    }
    if (from.has_costume_hat_visible()) {
      set_costume_hat_visible(from.costume_hat_visible());
    }
    if (from.has_costume_armor_visible()) {
      set_costume_armor_visible(from.costume_armor_visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Character::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Character::CopyFrom(const Character& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Character::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->skill_quick_slots())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->skills())) return false;
  return true;
}

void Character::Swap(Character* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(style_face_, other->style_face_);
    std::swap(style_hair_, other->style_hair_);
    std::swap(style_skin_, other->style_skin_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(exp_max_, other->exp_max_);
    std::swap(skill_point_buy_count_, other->skill_point_buy_count_);
    std::swap(inventory_item_buy_count_, other->inventory_item_buy_count_);
    std::swap(inventory_item_slot_count_, other->inventory_item_slot_count_);
    std::swap(rank_, other->rank_);
    std::swap(name_, other->name_);
    std::swap(rank_node_index_, other->rank_node_index_);
    std::swap(rank_node_state_, other->rank_node_state_);
    std::swap(wing_grade_, other->wing_grade_);
    std::swap(wing_level_, other->wing_level_);
    std::swap(wing_visible_, other->wing_visible_);
    std::swap(helmet_visible_, other->helmet_visible_);
    std::swap(aether_offense_set_option_id_, other->aether_offense_set_option_id_);
    std::swap(aether_defense_set_option_id_, other->aether_defense_set_option_id_);
    std::swap(remain_skill_point_, other->remain_skill_point_);
    skill_quick_slots_.Swap(&other->skill_quick_slots_);
    skills_.Swap(&other->skills_);
    std::swap(unity_skill_, other->unity_skill_);
    std::swap(unity_skill_awaken_, other->unity_skill_awaken_);
    std::swap(total_power_, other->total_power_);
    std::swap(costume_weapon_visible_, other->costume_weapon_visible_);
    std::swap(costume_hat_visible_, other->costume_hat_visible_);
    std::swap(costume_armor_visible_, other->costume_armor_visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Character::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Character_descriptor_;
  metadata.reflection = Character_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LightCharacter_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightCharacter_TYPE_descriptor_;
}
bool LightCharacter_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LightCharacter_TYPE LightCharacter::GLADIATOR;
const LightCharacter_TYPE LightCharacter::ASSASSIN;
const LightCharacter_TYPE LightCharacter::WIZARD;
const LightCharacter_TYPE LightCharacter::FIGHTER;
const LightCharacter_TYPE LightCharacter::TYPE_MIN;
const LightCharacter_TYPE LightCharacter::TYPE_MAX;
const int LightCharacter::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LightCharacter::kCharacterTypeFieldNumber;
const int LightCharacter::kLevelFieldNumber;
const int LightCharacter::kExpFieldNumber;
const int LightCharacter::kExpMaxFieldNumber;
const int LightCharacter::kChangedLevelFieldNumber;
const int LightCharacter::kRemainSkillPointFieldNumber;
#endif  // !_MSC_VER

LightCharacter::LightCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.LightCharacter)
}

void LightCharacter::InitAsDefaultInstance() {
}

LightCharacter::LightCharacter(const LightCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.LightCharacter)
}

void LightCharacter::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  exp_max_ = GOOGLE_LONGLONG(0);
  changed_level_ = false;
  remain_skill_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightCharacter::~LightCharacter() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.LightCharacter)
  SharedDtor();
}

void LightCharacter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LightCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightCharacter_descriptor_;
}

const LightCharacter& LightCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

LightCharacter* LightCharacter::default_instance_ = NULL;

LightCharacter* LightCharacter::New() const {
  return new LightCharacter;
}

void LightCharacter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LightCharacter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(level_, remain_skill_point_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LightCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.LightCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.LightCharacter.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::LightCharacter_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::LightCharacter_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int64 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exp_max;
        break;
      }

      // optional int64 exp_max = 4;
      case 4: {
        if (tag == 32) {
         parse_exp_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_max_)));
          set_has_exp_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_changed_level;
        break;
      }

      // optional bool changed_level = 5;
      case 5: {
        if (tag == 40) {
         parse_changed_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &changed_level_)));
          set_has_changed_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_remain_skill_point;
        break;
      }

      // optional int32 remain_skill_point = 6;
      case 6: {
        if (tag == 48) {
         parse_remain_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_skill_point_)));
          set_has_remain_skill_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.LightCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.LightCharacter)
  return false;
#undef DO_
}

void LightCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.LightCharacter)
  // required .b2.protocol.commondata.LightCharacter.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exp(), output);
  }

  // optional int64 exp_max = 4;
  if (has_exp_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp_max(), output);
  }

  // optional bool changed_level = 5;
  if (has_changed_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->changed_level(), output);
  }

  // optional int32 remain_skill_point = 6;
  if (has_remain_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->remain_skill_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.LightCharacter)
}

::google::protobuf::uint8* LightCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.LightCharacter)
  // required .b2.protocol.commondata.LightCharacter.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exp(), target);
  }

  // optional int64 exp_max = 4;
  if (has_exp_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp_max(), target);
  }

  // optional bool changed_level = 5;
  if (has_changed_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->changed_level(), target);
  }

  // optional int32 remain_skill_point = 6;
  if (has_remain_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->remain_skill_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.LightCharacter)
  return target;
}

int LightCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.LightCharacter.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int64 exp_max = 4;
    if (has_exp_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp_max());
    }

    // optional bool changed_level = 5;
    if (has_changed_level()) {
      total_size += 1 + 1;
    }

    // optional int32 remain_skill_point = 6;
    if (has_remain_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_skill_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LightCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LightCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LightCharacter::MergeFrom(const LightCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_exp_max()) {
      set_exp_max(from.exp_max());
    }
    if (from.has_changed_level()) {
      set_changed_level(from.changed_level());
    }
    if (from.has_remain_skill_point()) {
      set_remain_skill_point(from.remain_skill_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LightCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightCharacter::CopyFrom(const LightCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightCharacter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LightCharacter::Swap(LightCharacter* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(exp_max_, other->exp_max_);
    std::swap(changed_level_, other->changed_level_);
    std::swap(remain_skill_point_, other->remain_skill_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LightCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightCharacter_descriptor_;
  metadata.reflection = LightCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterSummary::kAccountIdFieldNumber;
const int CharacterSummary::kAccountNameFieldNumber;
const int CharacterSummary::kCharacterTypeFieldNumber;
const int CharacterSummary::kCharacterLevelFieldNumber;
const int CharacterSummary::kPowerFieldNumber;
const int CharacterSummary::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

CharacterSummary::CharacterSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.CharacterSummary)
}

void CharacterSummary::InitAsDefaultInstance() {
}

CharacterSummary::CharacterSummary(const CharacterSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.CharacterSummary)
}

void CharacterSummary::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  character_type_ = 1;
  character_level_ = 0;
  power_ = 0;
  is_online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterSummary::~CharacterSummary() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.CharacterSummary)
  SharedDtor();
}

void CharacterSummary::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete account_name_;
  }
  if (this != default_instance_) {
  }
}

void CharacterSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterSummary_descriptor_;
}

const CharacterSummary& CharacterSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

CharacterSummary* CharacterSummary::default_instance_ = NULL;

CharacterSummary* CharacterSummary::New() const {
  return new CharacterSummary;
}

void CharacterSummary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterSummary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(character_level_, is_online_);
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        account_name_->clear();
      }
    }
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.CharacterSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_account_name;
        break;
      }

      // required string account_name = 2;
      case 2: {
        if (tag == 18) {
         parse_account_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "account_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_character_level;
        break;
      }

      // required int32 character_level = 4;
      case 4: {
        if (tag == 32) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // required int32 power = 5;
      case 5: {
        if (tag == 40) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_is_online;
        break;
      }

      // optional bool is_online = 7;
      case 7: {
        if (tag == 56) {
         parse_is_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_online_)));
          set_has_is_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.CharacterSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.CharacterSummary)
  return false;
#undef DO_
}

void CharacterSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.CharacterSummary)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_name(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  // required int32 character_level = 4;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->character_level(), output);
  }

  // required int32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->power(), output);
  }

  // optional bool is_online = 7;
  if (has_is_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.CharacterSummary)
}

::google::protobuf::uint8* CharacterSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.CharacterSummary)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required string account_name = 2;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "account_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_name(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  // required int32 character_level = 4;
  if (has_character_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->character_level(), target);
  }

  // required int32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->power(), target);
  }

  // optional bool is_online = 7;
  if (has_is_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.CharacterSummary)
  return target;
}

int CharacterSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required string account_name = 2;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 character_level = 4;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }

    // required int32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional bool is_online = 7;
    if (has_is_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterSummary::MergeFrom(const CharacterSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_is_online()) {
      set_is_online(from.is_online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterSummary::CopyFrom(const CharacterSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterSummary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CharacterSummary::Swap(CharacterSummary* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(account_name_, other->account_name_);
    std::swap(character_type_, other->character_type_);
    std::swap(character_level_, other->character_level_);
    std::swap(power_, other->power_);
    std::swap(is_online_, other->is_online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterSummary_descriptor_;
  metadata.reflection = CharacterSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int User::kCharacterSummaryFieldNumber;
const int User::kLastLogoutTimeFieldNumber;
const int User::kGuildNameFieldNumber;
const int User::kMarkIndexFieldNumber;
const int User::kMarkColorFieldNumber;
const int User::kMarkBgIndexFieldNumber;
const int User::kMarkBgColorFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.User)
}

void User::InitAsDefaultInstance() {
  character_summary_ = const_cast< ::b2::protocol::commondata::CharacterSummary*>(&::b2::protocol::commondata::CharacterSummary::default_instance());
}

User::User(const User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.User)
}

void User::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  character_summary_ = NULL;
  last_logout_time_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_index_ = 0;
  mark_color_ = 0;
  mark_bg_index_ = 0;
  mark_bg_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.User)
  SharedDtor();
}

void User::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
    delete character_summary_;
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New() const {
  return new User;
}

void User::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<User*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(mark_index_, mark_bg_color_);
    if (has_character_summary()) {
      if (character_summary_ != NULL) character_summary_->::b2::protocol::commondata::CharacterSummary::Clear();
    }
    last_logout_time_ = GOOGLE_LONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.CharacterSummary character_summary = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_logout_time;
        break;
      }

      // required int64 last_logout_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 11;
      case 11: {
        if (tag == 90) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mark_index;
        break;
      }

      // optional int32 mark_index = 12;
      case 12: {
        if (tag == 96) {
         parse_mark_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_index_)));
          set_has_mark_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mark_color;
        break;
      }

      // optional int32 mark_color = 13;
      case 13: {
        if (tag == 104) {
         parse_mark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_color_)));
          set_has_mark_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mark_bg_index;
        break;
      }

      // optional int32 mark_bg_index = 14;
      case 14: {
        if (tag == 112) {
         parse_mark_bg_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_index_)));
          set_has_mark_bg_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_mark_bg_color;
        break;
      }

      // optional int32 mark_bg_color = 15;
      case 15: {
        if (tag == 120) {
         parse_mark_bg_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_color_)));
          set_has_mark_bg_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.User)
  // required .b2.protocol.commondata.CharacterSummary character_summary = 1;
  if (has_character_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->character_summary(), output);
  }

  // required int64 last_logout_time = 2;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_logout_time(), output);
  }

  // optional string guild_name = 11;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->guild_name(), output);
  }

  // optional int32 mark_index = 12;
  if (has_mark_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mark_index(), output);
  }

  // optional int32 mark_color = 13;
  if (has_mark_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mark_color(), output);
  }

  // optional int32 mark_bg_index = 14;
  if (has_mark_bg_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mark_bg_index(), output);
  }

  // optional int32 mark_bg_color = 15;
  if (has_mark_bg_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mark_bg_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.User)
  // required .b2.protocol.commondata.CharacterSummary character_summary = 1;
  if (has_character_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->character_summary(), target);
  }

  // required int64 last_logout_time = 2;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_logout_time(), target);
  }

  // optional string guild_name = 11;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->guild_name(), target);
  }

  // optional int32 mark_index = 12;
  if (has_mark_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mark_index(), target);
  }

  // optional int32 mark_color = 13;
  if (has_mark_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mark_color(), target);
  }

  // optional int32 mark_bg_index = 14;
  if (has_mark_bg_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mark_bg_index(), target);
  }

  // optional int32 mark_bg_color = 15;
  if (has_mark_bg_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mark_bg_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.CharacterSummary character_summary = 1;
    if (has_character_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character_summary());
    }

    // required int64 last_logout_time = 2;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time());
    }

    // optional string guild_name = 11;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional int32 mark_index = 12;
    if (has_mark_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_index());
    }

    // optional int32 mark_color = 13;
    if (has_mark_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_color());
    }

    // optional int32 mark_bg_index = 14;
    if (has_mark_bg_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_index());
    }

    // optional int32 mark_bg_color = 15;
    if (has_mark_bg_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_summary()) {
      mutable_character_summary()->::b2::protocol::commondata::CharacterSummary::MergeFrom(from.character_summary());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_mark_index()) {
      set_mark_index(from.mark_index());
    }
    if (from.has_mark_color()) {
      set_mark_color(from.mark_color());
    }
    if (from.has_mark_bg_index()) {
      set_mark_bg_index(from.mark_bg_index());
    }
    if (from.has_mark_bg_color()) {
      set_mark_bg_color(from.mark_bg_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_character_summary()) {
    if (!this->character_summary().IsInitialized()) return false;
  }
  return true;
}

void User::Swap(User* other) {
  if (other != this) {
    std::swap(character_summary_, other->character_summary_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(mark_index_, other->mark_index_);
    std::swap(mark_color_, other->mark_color_);
    std::swap(mark_bg_index_, other->mark_bg_index_);
    std::swap(mark_bg_color_, other->mark_bg_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Friend::kUserFieldNumber;
const int Friend::kLastSocialPointSendTimeFieldNumber;
const int Friend::kIsNewFieldNumber;
const int Friend::kRaidPenaltyRemoveTimeFieldNumber;
#endif  // !_MSC_VER

Friend::Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Friend)
}

void Friend::InitAsDefaultInstance() {
  user_ = const_cast< ::b2::protocol::commondata::User*>(&::b2::protocol::commondata::User::default_instance());
}

Friend::Friend(const Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Friend)
}

void Friend::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  last_social_point_send_time_ = GOOGLE_LONGLONG(0);
  is_new_ = false;
  raid_penalty_remove_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Friend::~Friend() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Friend)
  SharedDtor();
}

void Friend::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Friend_descriptor_;
}

const Friend& Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Friend* Friend::default_instance_ = NULL;

Friend* Friend::New() const {
  return new Friend;
}

void Friend::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Friend*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(last_social_point_send_time_, is_new_);
    if (has_user()) {
      if (user_ != NULL) user_->::b2::protocol::commondata::User::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Friend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_social_point_send_time;
        break;
      }

      // required int64 last_social_point_send_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_social_point_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_social_point_send_time_)));
          set_has_last_social_point_send_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_new;
        break;
      }

      // optional bool is_new = 3;
      case 3: {
        if (tag == 24) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raid_penalty_remove_time;
        break;
      }

      // optional int64 raid_penalty_remove_time = 4;
      case 4: {
        if (tag == 32) {
         parse_raid_penalty_remove_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raid_penalty_remove_time_)));
          set_has_raid_penalty_remove_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Friend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Friend)
  return false;
#undef DO_
}

void Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Friend)
  // required .b2.protocol.commondata.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // required int64 last_social_point_send_time = 2;
  if (has_last_social_point_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_social_point_send_time(), output);
  }

  // optional bool is_new = 3;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_new(), output);
  }

  // optional int64 raid_penalty_remove_time = 4;
  if (has_raid_penalty_remove_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->raid_penalty_remove_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Friend)
}

::google::protobuf::uint8* Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Friend)
  // required .b2.protocol.commondata.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // required int64 last_social_point_send_time = 2;
  if (has_last_social_point_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_social_point_send_time(), target);
  }

  // optional bool is_new = 3;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_new(), target);
  }

  // optional int64 raid_penalty_remove_time = 4;
  if (has_raid_penalty_remove_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->raid_penalty_remove_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Friend)
  return target;
}

int Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // required int64 last_social_point_send_time = 2;
    if (has_last_social_point_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_social_point_send_time());
    }

    // optional bool is_new = 3;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

    // optional int64 raid_penalty_remove_time = 4;
    if (has_raid_penalty_remove_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raid_penalty_remove_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Friend::MergeFrom(const Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::b2::protocol::commondata::User::MergeFrom(from.user());
    }
    if (from.has_last_social_point_send_time()) {
      set_last_social_point_send_time(from.last_social_point_send_time());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_raid_penalty_remove_time()) {
      set_raid_penalty_remove_time(from.raid_penalty_remove_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Friend::CopyFrom(const Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Friend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void Friend::Swap(Friend* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(last_social_point_send_time_, other->last_social_point_send_time_);
    std::swap(is_new_, other->is_new_);
    std::swap(raid_penalty_remove_time_, other->raid_penalty_remove_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Friend_descriptor_;
  metadata.reflection = Friend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInviteRewardInfo::kPlatformTypeFieldNumber;
const int FriendInviteRewardInfo::kInviteCountFieldNumber;
const int FriendInviteRewardInfo::kJoinerCountFieldNumber;
const int FriendInviteRewardInfo::kInviteRewardMaskFieldNumber;
const int FriendInviteRewardInfo::kJoinerRewardMaskFieldNumber;
#endif  // !_MSC_VER

FriendInviteRewardInfo::FriendInviteRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.FriendInviteRewardInfo)
}

void FriendInviteRewardInfo::InitAsDefaultInstance() {
}

FriendInviteRewardInfo::FriendInviteRewardInfo(const FriendInviteRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.FriendInviteRewardInfo)
}

void FriendInviteRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  platform_type_ = 0;
  invite_count_ = 0;
  joiner_count_ = 0;
  invite_reward_mask_ = 0;
  joiner_reward_mask_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInviteRewardInfo::~FriendInviteRewardInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.FriendInviteRewardInfo)
  SharedDtor();
}

void FriendInviteRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInviteRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInviteRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInviteRewardInfo_descriptor_;
}

const FriendInviteRewardInfo& FriendInviteRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

FriendInviteRewardInfo* FriendInviteRewardInfo::default_instance_ = NULL;

FriendInviteRewardInfo* FriendInviteRewardInfo::New() const {
  return new FriendInviteRewardInfo;
}

void FriendInviteRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FriendInviteRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(platform_type_, joiner_reward_mask_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInviteRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.FriendInviteRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 platform_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &platform_type_)));
          set_has_platform_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invite_count;
        break;
      }

      // required int32 invite_count = 2;
      case 2: {
        if (tag == 16) {
         parse_invite_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_count_)));
          set_has_invite_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_joiner_count;
        break;
      }

      // required int32 joiner_count = 3;
      case 3: {
        if (tag == 24) {
         parse_joiner_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joiner_count_)));
          set_has_joiner_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_invite_reward_mask;
        break;
      }

      // required int32 invite_reward_mask = 4;
      case 4: {
        if (tag == 32) {
         parse_invite_reward_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_reward_mask_)));
          set_has_invite_reward_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_joiner_reward_mask;
        break;
      }

      // required int32 joiner_reward_mask = 5;
      case 5: {
        if (tag == 40) {
         parse_joiner_reward_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joiner_reward_mask_)));
          set_has_joiner_reward_mask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.FriendInviteRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.FriendInviteRewardInfo)
  return false;
#undef DO_
}

void FriendInviteRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.FriendInviteRewardInfo)
  // required int32 platform_type = 1;
  if (has_platform_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->platform_type(), output);
  }

  // required int32 invite_count = 2;
  if (has_invite_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->invite_count(), output);
  }

  // required int32 joiner_count = 3;
  if (has_joiner_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->joiner_count(), output);
  }

  // required int32 invite_reward_mask = 4;
  if (has_invite_reward_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->invite_reward_mask(), output);
  }

  // required int32 joiner_reward_mask = 5;
  if (has_joiner_reward_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->joiner_reward_mask(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.FriendInviteRewardInfo)
}

::google::protobuf::uint8* FriendInviteRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.FriendInviteRewardInfo)
  // required int32 platform_type = 1;
  if (has_platform_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->platform_type(), target);
  }

  // required int32 invite_count = 2;
  if (has_invite_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->invite_count(), target);
  }

  // required int32 joiner_count = 3;
  if (has_joiner_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->joiner_count(), target);
  }

  // required int32 invite_reward_mask = 4;
  if (has_invite_reward_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->invite_reward_mask(), target);
  }

  // required int32 joiner_reward_mask = 5;
  if (has_joiner_reward_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->joiner_reward_mask(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.FriendInviteRewardInfo)
  return target;
}

int FriendInviteRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 platform_type = 1;
    if (has_platform_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->platform_type());
    }

    // required int32 invite_count = 2;
    if (has_invite_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_count());
    }

    // required int32 joiner_count = 3;
    if (has_joiner_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joiner_count());
    }

    // required int32 invite_reward_mask = 4;
    if (has_invite_reward_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_reward_mask());
    }

    // required int32 joiner_reward_mask = 5;
    if (has_joiner_reward_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joiner_reward_mask());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInviteRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInviteRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInviteRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInviteRewardInfo::MergeFrom(const FriendInviteRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform_type()) {
      set_platform_type(from.platform_type());
    }
    if (from.has_invite_count()) {
      set_invite_count(from.invite_count());
    }
    if (from.has_joiner_count()) {
      set_joiner_count(from.joiner_count());
    }
    if (from.has_invite_reward_mask()) {
      set_invite_reward_mask(from.invite_reward_mask());
    }
    if (from.has_joiner_reward_mask()) {
      set_joiner_reward_mask(from.joiner_reward_mask());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInviteRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInviteRewardInfo::CopyFrom(const FriendInviteRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInviteRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void FriendInviteRewardInfo::Swap(FriendInviteRewardInfo* other) {
  if (other != this) {
    std::swap(platform_type_, other->platform_type_);
    std::swap(invite_count_, other->invite_count_);
    std::swap(joiner_count_, other->joiner_count_);
    std::swap(invite_reward_mask_, other->invite_reward_mask_);
    std::swap(joiner_reward_mask_, other->joiner_reward_mask_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInviteRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInviteRewardInfo_descriptor_;
  metadata.reflection = FriendInviteRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Item_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_TYPE_descriptor_;
}
bool Item_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Item_TYPE Item::WEAPON;
const Item_TYPE Item::HAT;
const Item_TYPE Item::ARMOR;
const Item_TYPE Item::GLOVE;
const Item_TYPE Item::SHOES;
const Item_TYPE Item::BELT;
const Item_TYPE Item::NECK;
const Item_TYPE Item::RING;
const Item_TYPE Item::MATERIAL;
const Item_TYPE Item::GOODS;
const Item_TYPE Item::UPGRADE_STONE;
const Item_TYPE Item::ENHANCE_SCROLL;
const Item_TYPE Item::BLESSED_ENHANCE_SCROLL;
const Item_TYPE Item::PROTECTION_SCROLL;
const Item_TYPE Item::BOSS_PIECE;
const Item_TYPE Item::WEAPON_ESSENCE;
const Item_TYPE Item::ARMOR_ESSENCE;
const Item_TYPE Item::ACCESSORY_ESSENCE;
const Item_TYPE Item::RANK_PROMOTION_POINT;
const Item_TYPE Item::HERO_PIECE;
const Item_TYPE Item::AETHER_PIECE;
const Item_TYPE Item::DISMANTLE_MATERIAL;
const Item_TYPE Item::DIMENSIONAL_PIECE;
const Item_TYPE Item::COSTUME_ENHANCE_MATERIAL;
const Item_TYPE Item::WEAPON_SURPASS_ANVIL;
const Item_TYPE Item::ARMOR_SURPASS_ANVIL;
const Item_TYPE Item::ACCESSORY_SURPASS_ANVIL;
const Item_TYPE Item::SEAL_BOX;
const Item_TYPE Item::ADVANCED_RANK_PROMOTION_POINT;
const Item_TYPE Item::GOLD;
const Item_TYPE Item::TYPE_MIN;
const Item_TYPE Item::TYPE_MAX;
const int Item::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Item_CharacterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_CharacterType_descriptor_;
}
bool Item_CharacterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Item_CharacterType Item::COMMON;
const Item_CharacterType Item::GLADIATOR;
const Item_CharacterType Item::ASSASSIN;
const Item_CharacterType Item::WIZARD;
const Item_CharacterType Item::FIGHTER;
const Item_CharacterType Item::CharacterType_MIN;
const Item_CharacterType Item::CharacterType_MAX;
const int Item::CharacterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kTemplateIdFieldNumber;
const int Item::kCharacterTypeFieldNumber;
const int Item::kInventoryTypeFieldNumber;
const int Item::kEquipPositionFieldNumber;
const int Item::kAmountFieldNumber;
const int Item::kGradeFieldNumber;
const int Item::kQualityFieldNumber;
const int Item::kRandomOptionId1FieldNumber;
const int Item::kRandomOptionId2FieldNumber;
const int Item::kRandomOptionId3FieldNumber;
const int Item::kRandomOptionValue1FieldNumber;
const int Item::kRandomOptionValue2FieldNumber;
const int Item::kRandomOptionValue3FieldNumber;
const int Item::kLevelFieldNumber;
const int Item::kExpFieldNumber;
const int Item::kEnhanceLevelFieldNumber;
const int Item::kSurpassCountFieldNumber;
const int Item::kLockedFieldNumber;
const int Item::kPowerFieldNumber;
const int Item::kIsNewFieldNumber;
const int Item::kMdMainAttributeValueFieldNumber;
const int Item::kOpenSealSlotCountFieldNumber;
const int Item::kSealSlotStatesFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Item)
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Item)
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  template_id_ = 0;
  character_type_ = 0;
  inventory_type_ = 2;
  equip_position_ = 0;
  amount_ = 0;
  grade_ = 0;
  quality_ = 1;
  random_option_id1_ = 0;
  random_option_id2_ = 0;
  random_option_id3_ = 0;
  random_option_value1_ = 0;
  random_option_value2_ = 0;
  random_option_value3_ = 0;
  level_ = 0;
  exp_ = 0;
  enhance_level_ = 0;
  surpass_count_ = 0;
  locked_ = false;
  power_ = 0;
  is_new_ = false;
  md_main_attribute_value_ = 0;
  open_seal_slot_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Item*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, character_type_);
    ZR_(equip_position_, grade_);
    inventory_type_ = 2;
    quality_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(random_option_id1_, exp_);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(enhance_level_, md_main_attribute_value_);
    open_seal_slot_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  seal_slot_states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Item_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_inventory_type;
        break;
      }

      // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
      case 4: {
        if (tag == 32) {
         parse_inventory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Inventory_TYPE_IsValid(value)) {
            set_inventory_type(static_cast< ::b2::protocol::commondata::Inventory_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_equip_position;
        break;
      }

      // required .b2.protocol.commondata.EquipPosition equip_position = 5;
      case 5: {
        if (tag == 40) {
         parse_equip_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipPosition_IsValid(value)) {
            set_equip_position(static_cast< ::b2::protocol::commondata::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // required int32 amount = 6;
      case 6: {
        if (tag == 48) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }

      // required int32 grade = 7;
      case 7: {
        if (tag == 56) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // required .b2.protocol.commondata.ItemQuality quality = 8;
      case 8: {
        if (tag == 64) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ItemQuality_IsValid(value)) {
            set_quality(static_cast< ::b2::protocol::commondata::ItemQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_random_option_id1;
        break;
      }

      // required int32 random_option_id1 = 9;
      case 9: {
        if (tag == 72) {
         parse_random_option_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_option_id1_)));
          set_has_random_option_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_random_option_id2;
        break;
      }

      // required int32 random_option_id2 = 10;
      case 10: {
        if (tag == 80) {
         parse_random_option_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_option_id2_)));
          set_has_random_option_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_random_option_id3;
        break;
      }

      // required int32 random_option_id3 = 11;
      case 11: {
        if (tag == 88) {
         parse_random_option_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_option_id3_)));
          set_has_random_option_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_random_option_value1;
        break;
      }

      // required float random_option_value1 = 12;
      case 12: {
        if (tag == 101) {
         parse_random_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_option_value1_)));
          set_has_random_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_random_option_value2;
        break;
      }

      // required float random_option_value2 = 13;
      case 13: {
        if (tag == 109) {
         parse_random_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_option_value2_)));
          set_has_random_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_random_option_value3;
        break;
      }

      // required float random_option_value3 = 14;
      case 14: {
        if (tag == 117) {
         parse_random_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_option_value3_)));
          set_has_random_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }

      // required int32 level = 15;
      case 15: {
        if (tag == 120) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_exp;
        break;
      }

      // required float exp = 16;
      case 16: {
        if (tag == 133) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 17;
      case 17: {
        if (tag == 136) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_surpass_count;
        break;
      }

      // required int32 surpass_count = 18;
      case 18: {
        if (tag == 144) {
         parse_surpass_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surpass_count_)));
          set_has_surpass_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_locked;
        break;
      }

      // required bool locked = 19;
      case 19: {
        if (tag == 152) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_power;
        break;
      }

      // required float power = 20;
      case 20: {
        if (tag == 165) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_is_new;
        break;
      }

      // required bool is_new = 21;
      case 21: {
        if (tag == 168) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_md_main_attribute_value;
        break;
      }

      // required float md_main_attribute_value = 22;
      case 22: {
        if (tag == 181) {
         parse_md_main_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_main_attribute_value_)));
          set_has_md_main_attribute_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_open_seal_slot_count;
        break;
      }

      // required int32 open_seal_slot_count = 30;
      case 30: {
        if (tag == 240) {
         parse_open_seal_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_seal_slot_count_)));
          set_has_open_seal_slot_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_seal_slot_states;
        break;
      }

      // repeated .b2.protocol.commondata.SealSlotState seal_slot_states = 31;
      case 31: {
        if (tag == 250) {
         parse_seal_slot_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seal_slot_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_seal_slot_states;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Item)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
  if (has_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->inventory_type(), output);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 5;
  if (has_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->equip_position(), output);
  }

  // required int32 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->amount(), output);
  }

  // required int32 grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grade(), output);
  }

  // required .b2.protocol.commondata.ItemQuality quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->quality(), output);
  }

  // required int32 random_option_id1 = 9;
  if (has_random_option_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->random_option_id1(), output);
  }

  // required int32 random_option_id2 = 10;
  if (has_random_option_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->random_option_id2(), output);
  }

  // required int32 random_option_id3 = 11;
  if (has_random_option_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->random_option_id3(), output);
  }

  // required float random_option_value1 = 12;
  if (has_random_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->random_option_value1(), output);
  }

  // required float random_option_value2 = 13;
  if (has_random_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->random_option_value2(), output);
  }

  // required float random_option_value3 = 14;
  if (has_random_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->random_option_value3(), output);
  }

  // required int32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->level(), output);
  }

  // required float exp = 16;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->exp(), output);
  }

  // required int32 enhance_level = 17;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->enhance_level(), output);
  }

  // required int32 surpass_count = 18;
  if (has_surpass_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->surpass_count(), output);
  }

  // required bool locked = 19;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->locked(), output);
  }

  // required float power = 20;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->power(), output);
  }

  // required bool is_new = 21;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_new(), output);
  }

  // required float md_main_attribute_value = 22;
  if (has_md_main_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->md_main_attribute_value(), output);
  }

  // required int32 open_seal_slot_count = 30;
  if (has_open_seal_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->open_seal_slot_count(), output);
  }

  // repeated .b2.protocol.commondata.SealSlotState seal_slot_states = 31;
  for (int i = 0; i < this->seal_slot_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->seal_slot_states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Item)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
  if (has_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->inventory_type(), target);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 5;
  if (has_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->equip_position(), target);
  }

  // required int32 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->amount(), target);
  }

  // required int32 grade = 7;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grade(), target);
  }

  // required .b2.protocol.commondata.ItemQuality quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->quality(), target);
  }

  // required int32 random_option_id1 = 9;
  if (has_random_option_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->random_option_id1(), target);
  }

  // required int32 random_option_id2 = 10;
  if (has_random_option_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->random_option_id2(), target);
  }

  // required int32 random_option_id3 = 11;
  if (has_random_option_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->random_option_id3(), target);
  }

  // required float random_option_value1 = 12;
  if (has_random_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->random_option_value1(), target);
  }

  // required float random_option_value2 = 13;
  if (has_random_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->random_option_value2(), target);
  }

  // required float random_option_value3 = 14;
  if (has_random_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->random_option_value3(), target);
  }

  // required int32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->level(), target);
  }

  // required float exp = 16;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->exp(), target);
  }

  // required int32 enhance_level = 17;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->enhance_level(), target);
  }

  // required int32 surpass_count = 18;
  if (has_surpass_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->surpass_count(), target);
  }

  // required bool locked = 19;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->locked(), target);
  }

  // required float power = 20;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->power(), target);
  }

  // required bool is_new = 21;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_new(), target);
  }

  // required float md_main_attribute_value = 22;
  if (has_md_main_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->md_main_attribute_value(), target);
  }

  // required int32 open_seal_slot_count = 30;
  if (has_open_seal_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->open_seal_slot_count(), target);
  }

  // repeated .b2.protocol.commondata.SealSlotState seal_slot_states = 31;
  for (int i = 0; i < this->seal_slot_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->seal_slot_states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required .b2.protocol.commondata.Item.CharacterType character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
    if (has_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inventory_type());
    }

    // required .b2.protocol.commondata.EquipPosition equip_position = 5;
    if (has_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_position());
    }

    // required int32 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // required int32 grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required .b2.protocol.commondata.ItemQuality quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 random_option_id1 = 9;
    if (has_random_option_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_option_id1());
    }

    // required int32 random_option_id2 = 10;
    if (has_random_option_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_option_id2());
    }

    // required int32 random_option_id3 = 11;
    if (has_random_option_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_option_id3());
    }

    // required float random_option_value1 = 12;
    if (has_random_option_value1()) {
      total_size += 1 + 4;
    }

    // required float random_option_value2 = 13;
    if (has_random_option_value2()) {
      total_size += 1 + 4;
    }

    // required float random_option_value3 = 14;
    if (has_random_option_value3()) {
      total_size += 1 + 4;
    }

    // required int32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required float exp = 16;
    if (has_exp()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 enhance_level = 17;
    if (has_enhance_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 surpass_count = 18;
    if (has_surpass_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surpass_count());
    }

    // required bool locked = 19;
    if (has_locked()) {
      total_size += 2 + 1;
    }

    // required float power = 20;
    if (has_power()) {
      total_size += 2 + 4;
    }

    // required bool is_new = 21;
    if (has_is_new()) {
      total_size += 2 + 1;
    }

    // required float md_main_attribute_value = 22;
    if (has_md_main_attribute_value()) {
      total_size += 2 + 4;
    }

    // required int32 open_seal_slot_count = 30;
    if (has_open_seal_slot_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_seal_slot_count());
    }

  }
  // repeated .b2.protocol.commondata.SealSlotState seal_slot_states = 31;
  total_size += 2 * this->seal_slot_states_size();
  for (int i = 0; i < this->seal_slot_states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seal_slot_states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  seal_slot_states_.MergeFrom(from.seal_slot_states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_inventory_type()) {
      set_inventory_type(from.inventory_type());
    }
    if (from.has_equip_position()) {
      set_equip_position(from.equip_position());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_random_option_id1()) {
      set_random_option_id1(from.random_option_id1());
    }
    if (from.has_random_option_id2()) {
      set_random_option_id2(from.random_option_id2());
    }
    if (from.has_random_option_id3()) {
      set_random_option_id3(from.random_option_id3());
    }
    if (from.has_random_option_value1()) {
      set_random_option_value1(from.random_option_value1());
    }
    if (from.has_random_option_value2()) {
      set_random_option_value2(from.random_option_value2());
    }
    if (from.has_random_option_value3()) {
      set_random_option_value3(from.random_option_value3());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_surpass_count()) {
      set_surpass_count(from.surpass_count());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_md_main_attribute_value()) {
      set_md_main_attribute_value(from.md_main_attribute_value());
    }
    if (from.has_open_seal_slot_count()) {
      set_open_seal_slot_count(from.open_seal_slot_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->seal_slot_states())) return false;
  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(template_id_, other->template_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(inventory_type_, other->inventory_type_);
    std::swap(equip_position_, other->equip_position_);
    std::swap(amount_, other->amount_);
    std::swap(grade_, other->grade_);
    std::swap(quality_, other->quality_);
    std::swap(random_option_id1_, other->random_option_id1_);
    std::swap(random_option_id2_, other->random_option_id2_);
    std::swap(random_option_id3_, other->random_option_id3_);
    std::swap(random_option_value1_, other->random_option_value1_);
    std::swap(random_option_value2_, other->random_option_value2_);
    std::swap(random_option_value3_, other->random_option_value3_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(surpass_count_, other->surpass_count_);
    std::swap(locked_, other->locked_);
    std::swap(power_, other->power_);
    std::swap(is_new_, other->is_new_);
    std::swap(md_main_attribute_value_, other->md_main_attribute_value_);
    std::swap(open_seal_slot_count_, other->open_seal_slot_count_);
    seal_slot_states_.Swap(&other->seal_slot_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SealSlotState::kSealSlotFieldNumber;
const int SealSlotState::kOpenedFieldNumber;
const int SealSlotState::kOptionIdFieldNumber;
const int SealSlotState::kOptionValueFieldNumber;
#endif  // !_MSC_VER

SealSlotState::SealSlotState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.SealSlotState)
}

void SealSlotState::InitAsDefaultInstance() {
}

SealSlotState::SealSlotState(const SealSlotState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.SealSlotState)
}

void SealSlotState::SharedCtor() {
  _cached_size_ = 0;
  seal_slot_ = 0;
  opened_ = false;
  option_id_ = 0;
  option_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SealSlotState::~SealSlotState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.SealSlotState)
  SharedDtor();
}

void SealSlotState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SealSlotState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SealSlotState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SealSlotState_descriptor_;
}

const SealSlotState& SealSlotState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

SealSlotState* SealSlotState::default_instance_ = NULL;

SealSlotState* SealSlotState::New() const {
  return new SealSlotState;
}

void SealSlotState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SealSlotState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seal_slot_, option_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SealSlotState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.SealSlotState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seal_slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seal_slot_)));
          set_has_seal_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_opened;
        break;
      }

      // required bool opened = 2;
      case 2: {
        if (tag == 16) {
         parse_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opened_)));
          set_has_opened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_option_id;
        break;
      }

      // required int32 option_id = 3;
      case 3: {
        if (tag == 24) {
         parse_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_option_value;
        break;
      }

      // required float option_value = 4;
      case 4: {
        if (tag == 37) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.SealSlotState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.SealSlotState)
  return false;
#undef DO_
}

void SealSlotState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.SealSlotState)
  // required int32 seal_slot = 1;
  if (has_seal_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seal_slot(), output);
  }

  // required bool opened = 2;
  if (has_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->opened(), output);
  }

  // required int32 option_id = 3;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->option_id(), output);
  }

  // required float option_value = 4;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->option_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.SealSlotState)
}

::google::protobuf::uint8* SealSlotState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.SealSlotState)
  // required int32 seal_slot = 1;
  if (has_seal_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seal_slot(), target);
  }

  // required bool opened = 2;
  if (has_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->opened(), target);
  }

  // required int32 option_id = 3;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->option_id(), target);
  }

  // required float option_value = 4;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->option_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.SealSlotState)
  return target;
}

int SealSlotState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seal_slot = 1;
    if (has_seal_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seal_slot());
    }

    // required bool opened = 2;
    if (has_opened()) {
      total_size += 1 + 1;
    }

    // required int32 option_id = 3;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required float option_value = 4;
    if (has_option_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SealSlotState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SealSlotState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SealSlotState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SealSlotState::MergeFrom(const SealSlotState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seal_slot()) {
      set_seal_slot(from.seal_slot());
    }
    if (from.has_opened()) {
      set_opened(from.opened());
    }
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SealSlotState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SealSlotState::CopyFrom(const SealSlotState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SealSlotState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SealSlotState::Swap(SealSlotState* other) {
  if (other != this) {
    std::swap(seal_slot_, other->seal_slot_);
    std::swap(opened_, other->opened_);
    std::swap(option_id_, other->option_id_);
    std::swap(option_value_, other->option_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SealSlotState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SealSlotState_descriptor_;
  metadata.reflection = SealSlotState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Costume_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Costume_TYPE_descriptor_;
}
bool Costume_TYPE_IsValid(int value) {
  switch(value) {
    case 201:
    case 202:
    case 203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Costume_TYPE Costume::COSTUME_WEAPON;
const Costume_TYPE Costume::COSTUME_HAT;
const Costume_TYPE Costume::COSTUME_ARMOR;
const Costume_TYPE Costume::TYPE_MIN;
const Costume_TYPE Costume::TYPE_MAX;
const int Costume::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Costume_CharacterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Costume_CharacterType_descriptor_;
}
bool Costume_CharacterType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Costume_CharacterType Costume::GLADIATOR;
const Costume_CharacterType Costume::ASSASSIN;
const Costume_CharacterType Costume::WIZARD;
const Costume_CharacterType Costume::FIGHTER;
const Costume_CharacterType Costume::CharacterType_MIN;
const Costume_CharacterType Costume::CharacterType_MAX;
const int Costume::CharacterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Costume::kIdFieldNumber;
const int Costume::kTemplateIdFieldNumber;
const int Costume::kCharacterTypeFieldNumber;
const int Costume::kInventoryTypeFieldNumber;
const int Costume::kEquipPositionFieldNumber;
const int Costume::kAmountFieldNumber;
const int Costume::kGradeFieldNumber;
const int Costume::kQualityFieldNumber;
const int Costume::kRandomOptionId1FieldNumber;
const int Costume::kRandomOptionId2FieldNumber;
const int Costume::kRandomOptionId3FieldNumber;
const int Costume::kRandomOptionValue1FieldNumber;
const int Costume::kRandomOptionValue2FieldNumber;
const int Costume::kRandomOptionValue3FieldNumber;
const int Costume::kLevelFieldNumber;
const int Costume::kExpFieldNumber;
const int Costume::kEnhanceLevelFieldNumber;
const int Costume::kSurpassCountFieldNumber;
const int Costume::kLockedFieldNumber;
const int Costume::kPowerFieldNumber;
const int Costume::kIsNewFieldNumber;
const int Costume::kMdMainAttributeValueFieldNumber;
#endif  // !_MSC_VER

Costume::Costume()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Costume)
}

void Costume::InitAsDefaultInstance() {
}

Costume::Costume(const Costume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Costume)
}

void Costume::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  template_id_ = 0;
  character_type_ = 1;
  inventory_type_ = 2;
  equip_position_ = 0;
  amount_ = 0;
  grade_ = 0;
  quality_ = 1;
  random_option_id1_ = 0;
  random_option_id2_ = 0;
  random_option_id3_ = 0;
  random_option_value1_ = 0;
  random_option_value2_ = 0;
  random_option_value3_ = 0;
  level_ = 0;
  exp_ = 0;
  enhance_level_ = 0;
  surpass_count_ = 0;
  locked_ = false;
  power_ = 0;
  is_new_ = false;
  md_main_attribute_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Costume::~Costume() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Costume)
  SharedDtor();
}

void Costume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Costume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Costume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Costume_descriptor_;
}

const Costume& Costume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Costume* Costume::default_instance_ = NULL;

Costume* Costume::New() const {
  return new Costume;
}

void Costume::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Costume*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, template_id_);
    ZR_(equip_position_, grade_);
    character_type_ = 1;
    inventory_type_ = 2;
    quality_ = 1;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(random_option_id1_, exp_);
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(enhance_level_, md_main_attribute_value_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Costume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Costume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Costume.CharacterType character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Costume_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Costume_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_inventory_type;
        break;
      }

      // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
      case 4: {
        if (tag == 32) {
         parse_inventory_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Inventory_TYPE_IsValid(value)) {
            set_inventory_type(static_cast< ::b2::protocol::commondata::Inventory_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_equip_position;
        break;
      }

      // required .b2.protocol.commondata.EquipPosition equip_position = 5;
      case 5: {
        if (tag == 40) {
         parse_equip_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipPosition_IsValid(value)) {
            set_equip_position(static_cast< ::b2::protocol::commondata::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_amount;
        break;
      }

      // required int32 amount = 6;
      case 6: {
        if (tag == 48) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_grade;
        break;
      }

      // required int32 grade = 7;
      case 7: {
        if (tag == 56) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // required .b2.protocol.commondata.ItemQuality quality = 8;
      case 8: {
        if (tag == 64) {
         parse_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ItemQuality_IsValid(value)) {
            set_quality(static_cast< ::b2::protocol::commondata::ItemQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_random_option_id1;
        break;
      }

      // required int32 random_option_id1 = 9;
      case 9: {
        if (tag == 72) {
         parse_random_option_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_option_id1_)));
          set_has_random_option_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_random_option_id2;
        break;
      }

      // required int32 random_option_id2 = 10;
      case 10: {
        if (tag == 80) {
         parse_random_option_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_option_id2_)));
          set_has_random_option_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_random_option_id3;
        break;
      }

      // required int32 random_option_id3 = 11;
      case 11: {
        if (tag == 88) {
         parse_random_option_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_option_id3_)));
          set_has_random_option_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_random_option_value1;
        break;
      }

      // required float random_option_value1 = 12;
      case 12: {
        if (tag == 101) {
         parse_random_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_option_value1_)));
          set_has_random_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_random_option_value2;
        break;
      }

      // required float random_option_value2 = 13;
      case 13: {
        if (tag == 109) {
         parse_random_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_option_value2_)));
          set_has_random_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_random_option_value3;
        break;
      }

      // required float random_option_value3 = 14;
      case 14: {
        if (tag == 117) {
         parse_random_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_option_value3_)));
          set_has_random_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_level;
        break;
      }

      // required int32 level = 15;
      case 15: {
        if (tag == 120) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_exp;
        break;
      }

      // required float exp = 16;
      case 16: {
        if (tag == 133) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 17;
      case 17: {
        if (tag == 136) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_surpass_count;
        break;
      }

      // required int32 surpass_count = 18;
      case 18: {
        if (tag == 144) {
         parse_surpass_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surpass_count_)));
          set_has_surpass_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_locked;
        break;
      }

      // required bool locked = 19;
      case 19: {
        if (tag == 152) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_power;
        break;
      }

      // required float power = 20;
      case 20: {
        if (tag == 165) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_is_new;
        break;
      }

      // required bool is_new = 21;
      case 21: {
        if (tag == 168) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(181)) goto parse_md_main_attribute_value;
        break;
      }

      // required float md_main_attribute_value = 22;
      case 22: {
        if (tag == 181) {
         parse_md_main_attribute_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &md_main_attribute_value_)));
          set_has_md_main_attribute_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Costume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Costume)
  return false;
#undef DO_
}

void Costume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Costume)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // required .b2.protocol.commondata.Costume.CharacterType character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
  if (has_inventory_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->inventory_type(), output);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 5;
  if (has_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->equip_position(), output);
  }

  // required int32 amount = 6;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->amount(), output);
  }

  // required int32 grade = 7;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->grade(), output);
  }

  // required .b2.protocol.commondata.ItemQuality quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->quality(), output);
  }

  // required int32 random_option_id1 = 9;
  if (has_random_option_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->random_option_id1(), output);
  }

  // required int32 random_option_id2 = 10;
  if (has_random_option_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->random_option_id2(), output);
  }

  // required int32 random_option_id3 = 11;
  if (has_random_option_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->random_option_id3(), output);
  }

  // required float random_option_value1 = 12;
  if (has_random_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->random_option_value1(), output);
  }

  // required float random_option_value2 = 13;
  if (has_random_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->random_option_value2(), output);
  }

  // required float random_option_value3 = 14;
  if (has_random_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->random_option_value3(), output);
  }

  // required int32 level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->level(), output);
  }

  // required float exp = 16;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->exp(), output);
  }

  // required int32 enhance_level = 17;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->enhance_level(), output);
  }

  // required int32 surpass_count = 18;
  if (has_surpass_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->surpass_count(), output);
  }

  // required bool locked = 19;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->locked(), output);
  }

  // required float power = 20;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->power(), output);
  }

  // required bool is_new = 21;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_new(), output);
  }

  // required float md_main_attribute_value = 22;
  if (has_md_main_attribute_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->md_main_attribute_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Costume)
}

::google::protobuf::uint8* Costume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Costume)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // required .b2.protocol.commondata.Costume.CharacterType character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
  if (has_inventory_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->inventory_type(), target);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 5;
  if (has_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->equip_position(), target);
  }

  // required int32 amount = 6;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->amount(), target);
  }

  // required int32 grade = 7;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->grade(), target);
  }

  // required .b2.protocol.commondata.ItemQuality quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->quality(), target);
  }

  // required int32 random_option_id1 = 9;
  if (has_random_option_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->random_option_id1(), target);
  }

  // required int32 random_option_id2 = 10;
  if (has_random_option_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->random_option_id2(), target);
  }

  // required int32 random_option_id3 = 11;
  if (has_random_option_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->random_option_id3(), target);
  }

  // required float random_option_value1 = 12;
  if (has_random_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->random_option_value1(), target);
  }

  // required float random_option_value2 = 13;
  if (has_random_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->random_option_value2(), target);
  }

  // required float random_option_value3 = 14;
  if (has_random_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->random_option_value3(), target);
  }

  // required int32 level = 15;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->level(), target);
  }

  // required float exp = 16;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->exp(), target);
  }

  // required int32 enhance_level = 17;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->enhance_level(), target);
  }

  // required int32 surpass_count = 18;
  if (has_surpass_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->surpass_count(), target);
  }

  // required bool locked = 19;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->locked(), target);
  }

  // required float power = 20;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->power(), target);
  }

  // required bool is_new = 21;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_new(), target);
  }

  // required float md_main_attribute_value = 22;
  if (has_md_main_attribute_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->md_main_attribute_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Costume)
  return target;
}

int Costume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required .b2.protocol.commondata.Costume.CharacterType character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.Inventory.TYPE inventory_type = 4;
    if (has_inventory_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->inventory_type());
    }

    // required .b2.protocol.commondata.EquipPosition equip_position = 5;
    if (has_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_position());
    }

    // required int32 amount = 6;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // required int32 grade = 7;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required .b2.protocol.commondata.ItemQuality quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 random_option_id1 = 9;
    if (has_random_option_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_option_id1());
    }

    // required int32 random_option_id2 = 10;
    if (has_random_option_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_option_id2());
    }

    // required int32 random_option_id3 = 11;
    if (has_random_option_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->random_option_id3());
    }

    // required float random_option_value1 = 12;
    if (has_random_option_value1()) {
      total_size += 1 + 4;
    }

    // required float random_option_value2 = 13;
    if (has_random_option_value2()) {
      total_size += 1 + 4;
    }

    // required float random_option_value3 = 14;
    if (has_random_option_value3()) {
      total_size += 1 + 4;
    }

    // required int32 level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required float exp = 16;
    if (has_exp()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 enhance_level = 17;
    if (has_enhance_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

    // required int32 surpass_count = 18;
    if (has_surpass_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surpass_count());
    }

    // required bool locked = 19;
    if (has_locked()) {
      total_size += 2 + 1;
    }

    // required float power = 20;
    if (has_power()) {
      total_size += 2 + 4;
    }

    // required bool is_new = 21;
    if (has_is_new()) {
      total_size += 2 + 1;
    }

    // required float md_main_attribute_value = 22;
    if (has_md_main_attribute_value()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Costume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Costume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Costume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Costume::MergeFrom(const Costume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_inventory_type()) {
      set_inventory_type(from.inventory_type());
    }
    if (from.has_equip_position()) {
      set_equip_position(from.equip_position());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_random_option_id1()) {
      set_random_option_id1(from.random_option_id1());
    }
    if (from.has_random_option_id2()) {
      set_random_option_id2(from.random_option_id2());
    }
    if (from.has_random_option_id3()) {
      set_random_option_id3(from.random_option_id3());
    }
    if (from.has_random_option_value1()) {
      set_random_option_value1(from.random_option_value1());
    }
    if (from.has_random_option_value2()) {
      set_random_option_value2(from.random_option_value2());
    }
    if (from.has_random_option_value3()) {
      set_random_option_value3(from.random_option_value3());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_surpass_count()) {
      set_surpass_count(from.surpass_count());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_md_main_attribute_value()) {
      set_md_main_attribute_value(from.md_main_attribute_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Costume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Costume::CopyFrom(const Costume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Costume::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void Costume::Swap(Costume* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(template_id_, other->template_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(inventory_type_, other->inventory_type_);
    std::swap(equip_position_, other->equip_position_);
    std::swap(amount_, other->amount_);
    std::swap(grade_, other->grade_);
    std::swap(quality_, other->quality_);
    std::swap(random_option_id1_, other->random_option_id1_);
    std::swap(random_option_id2_, other->random_option_id2_);
    std::swap(random_option_id3_, other->random_option_id3_);
    std::swap(random_option_value1_, other->random_option_value1_);
    std::swap(random_option_value2_, other->random_option_value2_);
    std::swap(random_option_value3_, other->random_option_value3_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(surpass_count_, other->surpass_count_);
    std::swap(locked_, other->locked_);
    std::swap(power_, other->power_);
    std::swap(is_new_, other->is_new_);
    std::swap(md_main_attribute_value_, other->md_main_attribute_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Costume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Costume_descriptor_;
  metadata.reflection = Costume_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Totem_CharacterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Totem_CharacterType_descriptor_;
}
bool Totem_CharacterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Totem_CharacterType Totem::NONE;
const Totem_CharacterType Totem::GLADIATOR;
const Totem_CharacterType Totem::ASSASSIN;
const Totem_CharacterType Totem::WIZARD;
const Totem_CharacterType Totem::FIGHTER;
const Totem_CharacterType Totem::CharacterType_MIN;
const Totem_CharacterType Totem::CharacterType_MAX;
const int Totem::CharacterType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Totem::kIdFieldNumber;
const int Totem::kTemplateIdFieldNumber;
const int Totem::kCharacterTypeFieldNumber;
const int Totem::kEquipSlotFieldNumber;
const int Totem::kGradeFieldNumber;
const int Totem::kMainOptionIdFieldNumber;
const int Totem::kMainOptionValueFieldNumber;
const int Totem::kSubOptionDetailsFieldNumber;
const int Totem::kRefineLevelFieldNumber;
const int Totem::kRefineTryCountFieldNumber;
const int Totem::kGoldSuccessRateFieldNumber;
const int Totem::kPieceSuccessRateFieldNumber;
const int Totem::kLockedFieldNumber;
const int Totem::kPowerFieldNumber;
const int Totem::kIsNewFieldNumber;
#endif  // !_MSC_VER

Totem::Totem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Totem)
}

void Totem::InitAsDefaultInstance() {
}

Totem::Totem(const Totem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Totem)
}

void Totem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  template_id_ = 0;
  character_type_ = 0;
  equip_slot_ = 0;
  grade_ = 1;
  main_option_id_ = 0;
  main_option_value_ = 0;
  refine_level_ = 0;
  refine_try_count_ = 0;
  gold_success_rate_ = 0;
  piece_success_rate_ = 0;
  locked_ = false;
  power_ = 0;
  is_new_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Totem::~Totem() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Totem)
  SharedDtor();
}

void Totem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Totem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Totem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Totem_descriptor_;
}

const Totem& Totem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Totem* Totem::default_instance_ = NULL;

Totem* Totem::New() const {
  return new Totem;
}

void Totem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Totem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, equip_slot_);
    ZR_(main_option_id_, main_option_value_);
    grade_ = 1;
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(refine_level_, is_new_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  sub_option_details_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Totem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Totem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_template_id;
        break;
      }

      // required int32 template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Totem.CharacterType character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Totem_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Totem_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equip_slot;
        break;
      }

      // required .b2.protocol.commondata.TotemEquipSlot equip_slot = 4;
      case 4: {
        if (tag == 32) {
         parse_equip_slot:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::TotemEquipSlot_IsValid(value)) {
            set_equip_slot(static_cast< ::b2::protocol::commondata::TotemEquipSlot >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_grade;
        break;
      }

      // required .b2.protocol.commondata.TotemGrade grade = 5;
      case 5: {
        if (tag == 40) {
         parse_grade:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::TotemGrade_IsValid(value)) {
            set_grade(static_cast< ::b2::protocol::commondata::TotemGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_main_option_id;
        break;
      }

      // required int32 main_option_id = 6;
      case 6: {
        if (tag == 48) {
         parse_main_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_option_id_)));
          set_has_main_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_main_option_value;
        break;
      }

      // required float main_option_value = 7;
      case 7: {
        if (tag == 61) {
         parse_main_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &main_option_value_)));
          set_has_main_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sub_option_details;
        break;
      }

      // repeated .b2.protocol.commondata.TotemSubOptionDetail sub_option_details = 8;
      case 8: {
        if (tag == 66) {
         parse_sub_option_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sub_option_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sub_option_details;
        if (input->ExpectTag(72)) goto parse_refine_level;
        break;
      }

      // required int32 refine_level = 9;
      case 9: {
        if (tag == 72) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_refine_try_count;
        break;
      }

      // required int32 refine_try_count = 10;
      case 10: {
        if (tag == 80) {
         parse_refine_try_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_try_count_)));
          set_has_refine_try_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_gold_success_rate;
        break;
      }

      // required int32 gold_success_rate = 11;
      case 11: {
        if (tag == 88) {
         parse_gold_success_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_success_rate_)));
          set_has_gold_success_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_piece_success_rate;
        break;
      }

      // required int32 piece_success_rate = 12;
      case 12: {
        if (tag == 96) {
         parse_piece_success_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &piece_success_rate_)));
          set_has_piece_success_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_locked;
        break;
      }

      // required bool locked = 13;
      case 13: {
        if (tag == 104) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_power;
        break;
      }

      // required float power = 14;
      case 14: {
        if (tag == 117) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_is_new;
        break;
      }

      // required bool is_new = 15;
      case 15: {
        if (tag == 120) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Totem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Totem)
  return false;
#undef DO_
}

void Totem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Totem)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->template_id(), output);
  }

  // required .b2.protocol.commondata.Totem.CharacterType character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  // required .b2.protocol.commondata.TotemEquipSlot equip_slot = 4;
  if (has_equip_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->equip_slot(), output);
  }

  // required .b2.protocol.commondata.TotemGrade grade = 5;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->grade(), output);
  }

  // required int32 main_option_id = 6;
  if (has_main_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->main_option_id(), output);
  }

  // required float main_option_value = 7;
  if (has_main_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->main_option_value(), output);
  }

  // repeated .b2.protocol.commondata.TotemSubOptionDetail sub_option_details = 8;
  for (int i = 0; i < this->sub_option_details_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sub_option_details(i), output);
  }

  // required int32 refine_level = 9;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->refine_level(), output);
  }

  // required int32 refine_try_count = 10;
  if (has_refine_try_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refine_try_count(), output);
  }

  // required int32 gold_success_rate = 11;
  if (has_gold_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->gold_success_rate(), output);
  }

  // required int32 piece_success_rate = 12;
  if (has_piece_success_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->piece_success_rate(), output);
  }

  // required bool locked = 13;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->locked(), output);
  }

  // required float power = 14;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->power(), output);
  }

  // required bool is_new = 15;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_new(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Totem)
}

::google::protobuf::uint8* Totem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Totem)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required int32 template_id = 2;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->template_id(), target);
  }

  // required .b2.protocol.commondata.Totem.CharacterType character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  // required .b2.protocol.commondata.TotemEquipSlot equip_slot = 4;
  if (has_equip_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->equip_slot(), target);
  }

  // required .b2.protocol.commondata.TotemGrade grade = 5;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->grade(), target);
  }

  // required int32 main_option_id = 6;
  if (has_main_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->main_option_id(), target);
  }

  // required float main_option_value = 7;
  if (has_main_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->main_option_value(), target);
  }

  // repeated .b2.protocol.commondata.TotemSubOptionDetail sub_option_details = 8;
  for (int i = 0; i < this->sub_option_details_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sub_option_details(i), target);
  }

  // required int32 refine_level = 9;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->refine_level(), target);
  }

  // required int32 refine_try_count = 10;
  if (has_refine_try_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refine_try_count(), target);
  }

  // required int32 gold_success_rate = 11;
  if (has_gold_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->gold_success_rate(), target);
  }

  // required int32 piece_success_rate = 12;
  if (has_piece_success_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->piece_success_rate(), target);
  }

  // required bool locked = 13;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->locked(), target);
  }

  // required float power = 14;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->power(), target);
  }

  // required bool is_new = 15;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_new(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Totem)
  return target;
}

int Totem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required int32 template_id = 2;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required .b2.protocol.commondata.Totem.CharacterType character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required .b2.protocol.commondata.TotemEquipSlot equip_slot = 4;
    if (has_equip_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_slot());
    }

    // required .b2.protocol.commondata.TotemGrade grade = 5;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->grade());
    }

    // required int32 main_option_id = 6;
    if (has_main_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_option_id());
    }

    // required float main_option_value = 7;
    if (has_main_option_value()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 refine_level = 9;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_level());
    }

    // required int32 refine_try_count = 10;
    if (has_refine_try_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_try_count());
    }

    // required int32 gold_success_rate = 11;
    if (has_gold_success_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold_success_rate());
    }

    // required int32 piece_success_rate = 12;
    if (has_piece_success_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->piece_success_rate());
    }

    // required bool locked = 13;
    if (has_locked()) {
      total_size += 1 + 1;
    }

    // required float power = 14;
    if (has_power()) {
      total_size += 1 + 4;
    }

    // required bool is_new = 15;
    if (has_is_new()) {
      total_size += 1 + 1;
    }

  }
  // repeated .b2.protocol.commondata.TotemSubOptionDetail sub_option_details = 8;
  total_size += 1 * this->sub_option_details_size();
  for (int i = 0; i < this->sub_option_details_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sub_option_details(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Totem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Totem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Totem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Totem::MergeFrom(const Totem& from) {
  GOOGLE_CHECK_NE(&from, this);
  sub_option_details_.MergeFrom(from.sub_option_details_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_equip_slot()) {
      set_equip_slot(from.equip_slot());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_main_option_id()) {
      set_main_option_id(from.main_option_id());
    }
    if (from.has_main_option_value()) {
      set_main_option_value(from.main_option_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
    if (from.has_refine_try_count()) {
      set_refine_try_count(from.refine_try_count());
    }
    if (from.has_gold_success_rate()) {
      set_gold_success_rate(from.gold_success_rate());
    }
    if (from.has_piece_success_rate()) {
      set_piece_success_rate(from.piece_success_rate());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Totem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Totem::CopyFrom(const Totem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Totem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007f7f) != 0x00007f7f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->sub_option_details())) return false;
  return true;
}

void Totem::Swap(Totem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(template_id_, other->template_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(equip_slot_, other->equip_slot_);
    std::swap(grade_, other->grade_);
    std::swap(main_option_id_, other->main_option_id_);
    std::swap(main_option_value_, other->main_option_value_);
    sub_option_details_.Swap(&other->sub_option_details_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(refine_try_count_, other->refine_try_count_);
    std::swap(gold_success_rate_, other->gold_success_rate_);
    std::swap(piece_success_rate_, other->piece_success_rate_);
    std::swap(locked_, other->locked_);
    std::swap(power_, other->power_);
    std::swap(is_new_, other->is_new_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Totem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Totem_descriptor_;
  metadata.reflection = Totem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotemSubOptionDetail::kOptionIdFieldNumber;
const int TotemSubOptionDetail::kOptionValueFieldNumber;
const int TotemSubOptionDetail::kRefineCountFieldNumber;
const int TotemSubOptionDetail::kRefineStatesFieldNumber;
#endif  // !_MSC_VER

TotemSubOptionDetail::TotemSubOptionDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.TotemSubOptionDetail)
}

void TotemSubOptionDetail::InitAsDefaultInstance() {
}

TotemSubOptionDetail::TotemSubOptionDetail(const TotemSubOptionDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.TotemSubOptionDetail)
}

void TotemSubOptionDetail::SharedCtor() {
  _cached_size_ = 0;
  option_id_ = 0;
  option_value_ = 0;
  refine_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotemSubOptionDetail::~TotemSubOptionDetail() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.TotemSubOptionDetail)
  SharedDtor();
}

void TotemSubOptionDetail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotemSubOptionDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotemSubOptionDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemSubOptionDetail_descriptor_;
}

const TotemSubOptionDetail& TotemSubOptionDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

TotemSubOptionDetail* TotemSubOptionDetail::default_instance_ = NULL;

TotemSubOptionDetail* TotemSubOptionDetail::New() const {
  return new TotemSubOptionDetail;
}

void TotemSubOptionDetail::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TotemSubOptionDetail*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(option_id_, option_value_);
    refine_count_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  refine_states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotemSubOptionDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.TotemSubOptionDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_id_)));
          set_has_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_option_value;
        break;
      }

      // required float option_value = 2;
      case 2: {
        if (tag == 21) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_refine_count;
        break;
      }

      // required int32 refine_count = 3;
      case 3: {
        if (tag == 24) {
         parse_refine_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refine_count_)));
          set_has_refine_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refine_states;
        break;
      }

      // repeated .b2.protocol.commondata.TotemRefineState refine_states = 4;
      case 4: {
        if (tag == 34) {
         parse_refine_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine_states()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refine_states;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.TotemSubOptionDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.TotemSubOptionDetail)
  return false;
#undef DO_
}

void TotemSubOptionDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.TotemSubOptionDetail)
  // required int32 option_id = 1;
  if (has_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->option_id(), output);
  }

  // required float option_value = 2;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->option_value(), output);
  }

  // required int32 refine_count = 3;
  if (has_refine_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->refine_count(), output);
  }

  // repeated .b2.protocol.commondata.TotemRefineState refine_states = 4;
  for (int i = 0; i < this->refine_states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->refine_states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.TotemSubOptionDetail)
}

::google::protobuf::uint8* TotemSubOptionDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.TotemSubOptionDetail)
  // required int32 option_id = 1;
  if (has_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->option_id(), target);
  }

  // required float option_value = 2;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->option_value(), target);
  }

  // required int32 refine_count = 3;
  if (has_refine_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->refine_count(), target);
  }

  // repeated .b2.protocol.commondata.TotemRefineState refine_states = 4;
  for (int i = 0; i < this->refine_states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->refine_states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.TotemSubOptionDetail)
  return target;
}

int TotemSubOptionDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 option_id = 1;
    if (has_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_id());
    }

    // required float option_value = 2;
    if (has_option_value()) {
      total_size += 1 + 4;
    }

    // required int32 refine_count = 3;
    if (has_refine_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refine_count());
    }

  }
  // repeated .b2.protocol.commondata.TotemRefineState refine_states = 4;
  total_size += 1 * this->refine_states_size();
  for (int i = 0; i < this->refine_states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine_states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotemSubOptionDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotemSubOptionDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotemSubOptionDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotemSubOptionDetail::MergeFrom(const TotemSubOptionDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  refine_states_.MergeFrom(from.refine_states_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_option_id()) {
      set_option_id(from.option_id());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
    if (from.has_refine_count()) {
      set_refine_count(from.refine_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotemSubOptionDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotemSubOptionDetail::CopyFrom(const TotemSubOptionDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotemSubOptionDetail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->refine_states())) return false;
  return true;
}

void TotemSubOptionDetail::Swap(TotemSubOptionDetail* other) {
  if (other != this) {
    std::swap(option_id_, other->option_id_);
    std::swap(option_value_, other->option_value_);
    std::swap(refine_count_, other->refine_count_);
    refine_states_.Swap(&other->refine_states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotemSubOptionDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotemSubOptionDetail_descriptor_;
  metadata.reflection = TotemSubOptionDetail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TotemRefineState_Refinestatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemRefineState_Refinestatus_descriptor_;
}
bool TotemRefineState_Refinestatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TotemRefineState_Refinestatus TotemRefineState::NONE;
const TotemRefineState_Refinestatus TotemRefineState::SUCCESS;
const TotemRefineState_Refinestatus TotemRefineState::FAIL;
const TotemRefineState_Refinestatus TotemRefineState::Refinestatus_MIN;
const TotemRefineState_Refinestatus TotemRefineState::Refinestatus_MAX;
const int TotemRefineState::Refinestatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TotemRefineState::kIndexFieldNumber;
const int TotemRefineState::kStatusFieldNumber;
#endif  // !_MSC_VER

TotemRefineState::TotemRefineState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.TotemRefineState)
}

void TotemRefineState::InitAsDefaultInstance() {
}

TotemRefineState::TotemRefineState(const TotemRefineState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.TotemRefineState)
}

void TotemRefineState::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotemRefineState::~TotemRefineState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.TotemRefineState)
  SharedDtor();
}

void TotemRefineState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotemRefineState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotemRefineState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotemRefineState_descriptor_;
}

const TotemRefineState& TotemRefineState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

TotemRefineState* TotemRefineState::default_instance_ = NULL;

TotemRefineState* TotemRefineState::New() const {
  return new TotemRefineState;
}

void TotemRefineState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TotemRefineState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotemRefineState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.TotemRefineState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required .b2.protocol.commondata.TotemRefineState.Refinestatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::TotemRefineState_Refinestatus_IsValid(value)) {
            set_status(static_cast< ::b2::protocol::commondata::TotemRefineState_Refinestatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.TotemRefineState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.TotemRefineState)
  return false;
#undef DO_
}

void TotemRefineState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.TotemRefineState)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required .b2.protocol.commondata.TotemRefineState.Refinestatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.TotemRefineState)
}

::google::protobuf::uint8* TotemRefineState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.TotemRefineState)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required .b2.protocol.commondata.TotemRefineState.Refinestatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.TotemRefineState)
  return target;
}

int TotemRefineState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required .b2.protocol.commondata.TotemRefineState.Refinestatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotemRefineState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotemRefineState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotemRefineState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotemRefineState::MergeFrom(const TotemRefineState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotemRefineState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotemRefineState::CopyFrom(const TotemRefineState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotemRefineState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TotemRefineState::Swap(TotemRefineState* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotemRefineState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotemRefineState_descriptor_;
  metadata.reflection = TotemRefineState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Inventory_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_TYPE_descriptor_;
}
bool Inventory_TYPE_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 202:
    case 203:
    case 1001:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Inventory_TYPE Inventory::WEAPON;
const Inventory_TYPE Inventory::ARMOR;
const Inventory_TYPE Inventory::ACCESSORY;
const Inventory_TYPE Inventory::WING;
const Inventory_TYPE Inventory::COSTUME_WEAPON;
const Inventory_TYPE Inventory::COSTUME_ARMOR;
const Inventory_TYPE Inventory::CONSUMABLE;
const Inventory_TYPE Inventory::TYPE_MIN;
const Inventory_TYPE Inventory::TYPE_MAX;
const int Inventory::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Inventory::Inventory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Inventory)
}

void Inventory::InitAsDefaultInstance() {
}

Inventory::Inventory(const Inventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Inventory)
}

void Inventory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Inventory)
  SharedDtor();
}

void Inventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Inventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_descriptor_;
}

const Inventory& Inventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Inventory* Inventory::default_instance_ = NULL;

Inventory* Inventory::New() const {
  return new Inventory;
}

void Inventory::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Inventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Inventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Inventory)
  return false;
#undef DO_
}

void Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Inventory)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Inventory)
}

::google::protobuf::uint8* Inventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Inventory)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Inventory)
  return target;
}

int Inventory::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inventory::MergeFrom(const Inventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory::CopyFrom(const Inventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {

  return true;
}

void Inventory::Swap(Inventory* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_descriptor_;
  metadata.reflection = Inventory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InventoryCountInfo::kCharacterTypeFieldNumber;
const int InventoryCountInfo::kCountFieldNumber;
const int InventoryCountInfo::kMaxCountFieldNumber;
#endif  // !_MSC_VER

InventoryCountInfo::InventoryCountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.InventoryCountInfo)
}

void InventoryCountInfo::InitAsDefaultInstance() {
}

InventoryCountInfo::InventoryCountInfo(const InventoryCountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.InventoryCountInfo)
}

void InventoryCountInfo::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  count_ = 0;
  max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InventoryCountInfo::~InventoryCountInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.InventoryCountInfo)
  SharedDtor();
}

void InventoryCountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InventoryCountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InventoryCountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InventoryCountInfo_descriptor_;
}

const InventoryCountInfo& InventoryCountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

InventoryCountInfo* InventoryCountInfo::default_instance_ = NULL;

InventoryCountInfo* InventoryCountInfo::New() const {
  return new InventoryCountInfo;
}

void InventoryCountInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InventoryCountInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(count_, max_count_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InventoryCountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.InventoryCountInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 4;
      case 4: {
        if (tag == 32) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.InventoryCountInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.InventoryCountInfo)
  return false;
#undef DO_
}

void InventoryCountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.InventoryCountInfo)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // required int32 max_count = 4;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.InventoryCountInfo)
}

::google::protobuf::uint8* InventoryCountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.InventoryCountInfo)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // required int32 max_count = 4;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.InventoryCountInfo)
  return target;
}

int InventoryCountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 max_count = 4;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InventoryCountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InventoryCountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InventoryCountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InventoryCountInfo::MergeFrom(const InventoryCountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InventoryCountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventoryCountInfo::CopyFrom(const InventoryCountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryCountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void InventoryCountInfo::Swap(InventoryCountInfo* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(count_, other->count_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InventoryCountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InventoryCountInfo_descriptor_;
  metadata.reflection = InventoryCountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemPreset::kAccountIdFieldNumber;
const int ItemPreset::kCharacterTypeFieldNumber;
const int ItemPreset::kPresetIdFieldNumber;
const int ItemPreset::kEquipPositionFieldNumber;
const int ItemPreset::kItemIdFieldNumber;
#endif  // !_MSC_VER

ItemPreset::ItemPreset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ItemPreset)
}

void ItemPreset::InitAsDefaultInstance() {
}

ItemPreset::ItemPreset(const ItemPreset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ItemPreset)
}

void ItemPreset::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  character_type_ = 1;
  preset_id_ = 0;
  equip_position_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemPreset::~ItemPreset() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ItemPreset)
  SharedDtor();
}

void ItemPreset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemPreset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemPreset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemPreset_descriptor_;
}

const ItemPreset& ItemPreset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ItemPreset* ItemPreset::default_instance_ = NULL;

ItemPreset* ItemPreset::New() const {
  return new ItemPreset;
}

void ItemPreset::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemPreset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(preset_id_, equip_position_);
    account_id_ = GOOGLE_LONGLONG(0);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemPreset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ItemPreset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_preset_id;
        break;
      }

      // required int32 preset_id = 3;
      case 3: {
        if (tag == 24) {
         parse_preset_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preset_id_)));
          set_has_preset_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_equip_position;
        break;
      }

      // required .b2.protocol.commondata.EquipPosition equip_position = 4;
      case 4: {
        if (tag == 32) {
         parse_equip_position:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::EquipPosition_IsValid(value)) {
            set_equip_position(static_cast< ::b2::protocol::commondata::EquipPosition >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_item_id;
        break;
      }

      // required int64 item_id = 5;
      case 5: {
        if (tag == 40) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ItemPreset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ItemPreset)
  return false;
#undef DO_
}

void ItemPreset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ItemPreset)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required int32 preset_id = 3;
  if (has_preset_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->preset_id(), output);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 4;
  if (has_equip_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->equip_position(), output);
  }

  // required int64 item_id = 5;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ItemPreset)
}

::google::protobuf::uint8* ItemPreset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ItemPreset)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required int32 preset_id = 3;
  if (has_preset_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->preset_id(), target);
  }

  // required .b2.protocol.commondata.EquipPosition equip_position = 4;
  if (has_equip_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->equip_position(), target);
  }

  // required int64 item_id = 5;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ItemPreset)
  return target;
}

int ItemPreset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 preset_id = 3;
    if (has_preset_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preset_id());
    }

    // required .b2.protocol.commondata.EquipPosition equip_position = 4;
    if (has_equip_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->equip_position());
    }

    // required int64 item_id = 5;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemPreset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemPreset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemPreset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemPreset::MergeFrom(const ItemPreset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_preset_id()) {
      set_preset_id(from.preset_id());
    }
    if (from.has_equip_position()) {
      set_equip_position(from.equip_position());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemPreset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemPreset::CopyFrom(const ItemPreset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemPreset::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ItemPreset::Swap(ItemPreset* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(preset_id_, other->preset_id_);
    std::swap(equip_position_, other->equip_position_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemPreset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemPreset_descriptor_;
  metadata.reflection = ItemPreset_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Aether_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aether_TYPE_descriptor_;
}
bool Aether_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Aether_TYPE Aether::ALL;
const Aether_TYPE Aether::THUNDERSTORM;
const Aether_TYPE Aether::DESTROY;
const Aether_TYPE Aether::INSIGHT;
const Aether_TYPE Aether::RAGE;
const Aether_TYPE Aether::DESPAIR;
const Aether_TYPE Aether::RESTRAINT;
const Aether_TYPE Aether::RESIST;
const Aether_TYPE Aether::REVENGE;
const Aether_TYPE Aether::PROTECT;
const Aether_TYPE Aether::PASSION;
const Aether_TYPE Aether::OBLIVION;
const Aether_TYPE Aether::FREEZING;
const Aether_TYPE Aether::TYPE_MIN;
const Aether_TYPE Aether::TYPE_MAX;
const int Aether::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Aether_TIER_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aether_TIER_descriptor_;
}
bool Aether_TIER_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Aether_TIER Aether::SEAL;
const Aether_TIER Aether::ANTI_DEVIL;
const Aether_TIER Aether::EXTERMINATE_DEVIL;
const Aether_TIER Aether::ETERNAL_LIFE;
const Aether_TIER Aether::TIER_MIN;
const Aether_TIER Aether::TIER_MAX;
const int Aether::TIER_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Aether_CharacterType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aether_CharacterType_descriptor_;
}
bool Aether_CharacterType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Aether_CharacterType Aether::NOT_USED;
const Aether_CharacterType Aether::GLADIATOR;
const Aether_CharacterType Aether::ASSASSIN;
const Aether_CharacterType Aether::WIZARD;
const Aether_CharacterType Aether::FIGHTER;
const Aether_CharacterType Aether::CharacterType_MIN;
const Aether_CharacterType Aether::CharacterType_MAX;
const int Aether::CharacterType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Aether_SetOptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aether_SetOptionType_descriptor_;
}
bool Aether_SetOptionType_IsValid(int value) {
  switch(value) {
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Aether_SetOptionType Aether::THUNDER_DAMAGE;
const Aether_SetOptionType Aether::IMMOBILIZE;
const Aether_SetOptionType Aether::SHIELD;
const Aether_SetOptionType Aether::FIRE_RANGE;
const Aether_SetOptionType Aether::METEOR_DAMAGE;
const Aether_SetOptionType Aether::SKILL_COOLTIME;
const Aether_SetOptionType Aether::SKILL_GAGE;
const Aether_SetOptionType Aether::STUN;
const Aether_SetOptionType Aether::SUPER_ARMOR;
const Aether_SetOptionType Aether::DAMAGE_REFLECT;
const Aether_SetOptionType Aether::PROHIBIT_BEHAVIOR;
const Aether_SetOptionType Aether::FREEZE_RANGE;
const Aether_SetOptionType Aether::SetOptionType_MIN;
const Aether_SetOptionType Aether::SetOptionType_MAX;
const int Aether::SetOptionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Aether::kIdFieldNumber;
const int Aether::kTypeFieldNumber;
const int Aether::kSlotFieldNumber;
const int Aether::kCharacterTypeFieldNumber;
const int Aether::kLevelFieldNumber;
const int Aether::kGradeFieldNumber;
const int Aether::kTierFieldNumber;
const int Aether::kMainOptionIdFieldNumber;
const int Aether::kMainOptionValueFieldNumber;
const int Aether::kSubOptionId1FieldNumber;
const int Aether::kSubOptionId2FieldNumber;
const int Aether::kSubOptionId3FieldNumber;
const int Aether::kSubOptionValue1FieldNumber;
const int Aether::kSubOptionValue2FieldNumber;
const int Aether::kSubOptionValue3FieldNumber;
const int Aether::kSubOptionEnhanceCount1FieldNumber;
const int Aether::kSubOptionEnhanceCount2FieldNumber;
const int Aether::kSubOptionEnhanceCount3FieldNumber;
const int Aether::kLockedFieldNumber;
const int Aether::kIsNewFieldNumber;
const int Aether::kCalcMainOptionValueFieldNumber;
const int Aether::kCalcSubOptionValue1FieldNumber;
const int Aether::kCalcSubOptionValue2FieldNumber;
const int Aether::kCalcSubOptionValue3FieldNumber;
const int Aether::kCalcTierFieldNumber;
#endif  // !_MSC_VER

Aether::Aether()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Aether)
}

void Aether::InitAsDefaultInstance() {
}

Aether::Aether(const Aether& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Aether)
}

void Aether::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  slot_ = 0;
  character_type_ = 0;
  level_ = 0;
  grade_ = 0;
  tier_ = 1;
  main_option_id_ = 0;
  main_option_value_ = 0;
  sub_option_id1_ = 0;
  sub_option_id2_ = 0;
  sub_option_id3_ = 0;
  sub_option_value1_ = 0;
  sub_option_value2_ = 0;
  sub_option_value3_ = 0;
  sub_option_enhance_count1_ = 0;
  sub_option_enhance_count2_ = 0;
  sub_option_enhance_count3_ = 0;
  locked_ = false;
  is_new_ = false;
  calc_main_option_value_ = 0;
  calc_sub_option_value1_ = 0;
  calc_sub_option_value2_ = 0;
  calc_sub_option_value3_ = 0;
  calc_tier_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Aether::~Aether() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Aether)
  SharedDtor();
}

void Aether::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Aether::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aether::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aether_descriptor_;
}

const Aether& Aether::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Aether* Aether::default_instance_ = NULL;

Aether* Aether::New() const {
  return new Aether;
}

void Aether::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Aether*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, grade_);
    tier_ = 1;
    main_option_id_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(main_option_value_, sub_option_enhance_count1_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(sub_option_enhance_count2_, calc_sub_option_value3_);
  }
  calc_tier_ = 1;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Aether::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Aether)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .b2.protocol.commondata.Aether.TYPE type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TYPE_IsValid(value)) {
            set_type(static_cast< ::b2::protocol::commondata::Aether_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // required int32 slot = 3;
      case 3: {
        if (tag == 24) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Aether.CharacterType character_type = 4;
      case 4: {
        if (tag == 32) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Aether_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // required int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_grade;
        break;
      }

      // required int32 grade = 6;
      case 6: {
        if (tag == 48) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tier;
        break;
      }

      // required .b2.protocol.commondata.Aether.TIER tier = 7;
      case 7: {
        if (tag == 56) {
         parse_tier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TIER_IsValid(value)) {
            set_tier(static_cast< ::b2::protocol::commondata::Aether_TIER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_main_option_id;
        break;
      }

      // required int32 main_option_id = 8;
      case 8: {
        if (tag == 64) {
         parse_main_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_option_id_)));
          set_has_main_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_main_option_value;
        break;
      }

      // required float main_option_value = 9;
      case 9: {
        if (tag == 77) {
         parse_main_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &main_option_value_)));
          set_has_main_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sub_option_id1;
        break;
      }

      // required int32 sub_option_id1 = 10;
      case 10: {
        if (tag == 80) {
         parse_sub_option_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_option_id1_)));
          set_has_sub_option_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sub_option_id2;
        break;
      }

      // required int32 sub_option_id2 = 11;
      case 11: {
        if (tag == 88) {
         parse_sub_option_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_option_id2_)));
          set_has_sub_option_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_sub_option_id3;
        break;
      }

      // required int32 sub_option_id3 = 12;
      case 12: {
        if (tag == 96) {
         parse_sub_option_id3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_option_id3_)));
          set_has_sub_option_id3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_sub_option_value1;
        break;
      }

      // required float sub_option_value1 = 13;
      case 13: {
        if (tag == 109) {
         parse_sub_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sub_option_value1_)));
          set_has_sub_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_sub_option_value2;
        break;
      }

      // required float sub_option_value2 = 14;
      case 14: {
        if (tag == 117) {
         parse_sub_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sub_option_value2_)));
          set_has_sub_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_sub_option_value3;
        break;
      }

      // required float sub_option_value3 = 15;
      case 15: {
        if (tag == 125) {
         parse_sub_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sub_option_value3_)));
          set_has_sub_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_sub_option_enhance_count1;
        break;
      }

      // required int32 sub_option_enhance_count1 = 16;
      case 16: {
        if (tag == 128) {
         parse_sub_option_enhance_count1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_option_enhance_count1_)));
          set_has_sub_option_enhance_count1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_sub_option_enhance_count2;
        break;
      }

      // required int32 sub_option_enhance_count2 = 17;
      case 17: {
        if (tag == 136) {
         parse_sub_option_enhance_count2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_option_enhance_count2_)));
          set_has_sub_option_enhance_count2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_sub_option_enhance_count3;
        break;
      }

      // required int32 sub_option_enhance_count3 = 18;
      case 18: {
        if (tag == 144) {
         parse_sub_option_enhance_count3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_option_enhance_count3_)));
          set_has_sub_option_enhance_count3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_locked;
        break;
      }

      // required bool locked = 20;
      case 20: {
        if (tag == 160) {
         parse_locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_is_new;
        break;
      }

      // required bool is_new = 21;
      case 21: {
        if (tag == 168) {
         parse_is_new:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_)));
          set_has_is_new();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_calc_main_option_value;
        break;
      }

      // required float calc_main_option_value = 30;
      case 30: {
        if (tag == 245) {
         parse_calc_main_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calc_main_option_value_)));
          set_has_calc_main_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_calc_sub_option_value1;
        break;
      }

      // required float calc_sub_option_value1 = 31;
      case 31: {
        if (tag == 253) {
         parse_calc_sub_option_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calc_sub_option_value1_)));
          set_has_calc_sub_option_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_calc_sub_option_value2;
        break;
      }

      // required float calc_sub_option_value2 = 32;
      case 32: {
        if (tag == 261) {
         parse_calc_sub_option_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calc_sub_option_value2_)));
          set_has_calc_sub_option_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(269)) goto parse_calc_sub_option_value3;
        break;
      }

      // required float calc_sub_option_value3 = 33;
      case 33: {
        if (tag == 269) {
         parse_calc_sub_option_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calc_sub_option_value3_)));
          set_has_calc_sub_option_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_calc_tier;
        break;
      }

      // required .b2.protocol.commondata.Aether.TIER calc_tier = 34;
      case 34: {
        if (tag == 272) {
         parse_calc_tier:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TIER_IsValid(value)) {
            set_calc_tier(static_cast< ::b2::protocol::commondata::Aether_TIER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Aether)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Aether)
  return false;
#undef DO_
}

void Aether::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Aether)
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required .b2.protocol.commondata.Aether.TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  // required .b2.protocol.commondata.Aether.CharacterType character_type = 4;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->character_type(), output);
  }

  // required int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // required int32 grade = 6;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->grade(), output);
  }

  // required .b2.protocol.commondata.Aether.TIER tier = 7;
  if (has_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->tier(), output);
  }

  // required int32 main_option_id = 8;
  if (has_main_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->main_option_id(), output);
  }

  // required float main_option_value = 9;
  if (has_main_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->main_option_value(), output);
  }

  // required int32 sub_option_id1 = 10;
  if (has_sub_option_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sub_option_id1(), output);
  }

  // required int32 sub_option_id2 = 11;
  if (has_sub_option_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->sub_option_id2(), output);
  }

  // required int32 sub_option_id3 = 12;
  if (has_sub_option_id3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sub_option_id3(), output);
  }

  // required float sub_option_value1 = 13;
  if (has_sub_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->sub_option_value1(), output);
  }

  // required float sub_option_value2 = 14;
  if (has_sub_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sub_option_value2(), output);
  }

  // required float sub_option_value3 = 15;
  if (has_sub_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->sub_option_value3(), output);
  }

  // required int32 sub_option_enhance_count1 = 16;
  if (has_sub_option_enhance_count1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sub_option_enhance_count1(), output);
  }

  // required int32 sub_option_enhance_count2 = 17;
  if (has_sub_option_enhance_count2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->sub_option_enhance_count2(), output);
  }

  // required int32 sub_option_enhance_count3 = 18;
  if (has_sub_option_enhance_count3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sub_option_enhance_count3(), output);
  }

  // required bool locked = 20;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->locked(), output);
  }

  // required bool is_new = 21;
  if (has_is_new()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_new(), output);
  }

  // required float calc_main_option_value = 30;
  if (has_calc_main_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->calc_main_option_value(), output);
  }

  // required float calc_sub_option_value1 = 31;
  if (has_calc_sub_option_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->calc_sub_option_value1(), output);
  }

  // required float calc_sub_option_value2 = 32;
  if (has_calc_sub_option_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->calc_sub_option_value2(), output);
  }

  // required float calc_sub_option_value3 = 33;
  if (has_calc_sub_option_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->calc_sub_option_value3(), output);
  }

  // required .b2.protocol.commondata.Aether.TIER calc_tier = 34;
  if (has_calc_tier()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->calc_tier(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Aether)
}

::google::protobuf::uint8* Aether::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Aether)
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.Aether.TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  // required .b2.protocol.commondata.Aether.CharacterType character_type = 4;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->character_type(), target);
  }

  // required int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // required int32 grade = 6;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->grade(), target);
  }

  // required .b2.protocol.commondata.Aether.TIER tier = 7;
  if (has_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->tier(), target);
  }

  // required int32 main_option_id = 8;
  if (has_main_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->main_option_id(), target);
  }

  // required float main_option_value = 9;
  if (has_main_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->main_option_value(), target);
  }

  // required int32 sub_option_id1 = 10;
  if (has_sub_option_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sub_option_id1(), target);
  }

  // required int32 sub_option_id2 = 11;
  if (has_sub_option_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->sub_option_id2(), target);
  }

  // required int32 sub_option_id3 = 12;
  if (has_sub_option_id3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->sub_option_id3(), target);
  }

  // required float sub_option_value1 = 13;
  if (has_sub_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->sub_option_value1(), target);
  }

  // required float sub_option_value2 = 14;
  if (has_sub_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sub_option_value2(), target);
  }

  // required float sub_option_value3 = 15;
  if (has_sub_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->sub_option_value3(), target);
  }

  // required int32 sub_option_enhance_count1 = 16;
  if (has_sub_option_enhance_count1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->sub_option_enhance_count1(), target);
  }

  // required int32 sub_option_enhance_count2 = 17;
  if (has_sub_option_enhance_count2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->sub_option_enhance_count2(), target);
  }

  // required int32 sub_option_enhance_count3 = 18;
  if (has_sub_option_enhance_count3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sub_option_enhance_count3(), target);
  }

  // required bool locked = 20;
  if (has_locked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->locked(), target);
  }

  // required bool is_new = 21;
  if (has_is_new()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_new(), target);
  }

  // required float calc_main_option_value = 30;
  if (has_calc_main_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->calc_main_option_value(), target);
  }

  // required float calc_sub_option_value1 = 31;
  if (has_calc_sub_option_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->calc_sub_option_value1(), target);
  }

  // required float calc_sub_option_value2 = 32;
  if (has_calc_sub_option_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->calc_sub_option_value2(), target);
  }

  // required float calc_sub_option_value3 = 33;
  if (has_calc_sub_option_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->calc_sub_option_value3(), target);
  }

  // required .b2.protocol.commondata.Aether.TIER calc_tier = 34;
  if (has_calc_tier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->calc_tier(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Aether)
  return target;
}

int Aether::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required .b2.protocol.commondata.Aether.TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // required .b2.protocol.commondata.Aether.CharacterType character_type = 4;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 grade = 6;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required .b2.protocol.commondata.Aether.TIER tier = 7;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tier());
    }

    // required int32 main_option_id = 8;
    if (has_main_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_option_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float main_option_value = 9;
    if (has_main_option_value()) {
      total_size += 1 + 4;
    }

    // required int32 sub_option_id1 = 10;
    if (has_sub_option_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_option_id1());
    }

    // required int32 sub_option_id2 = 11;
    if (has_sub_option_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_option_id2());
    }

    // required int32 sub_option_id3 = 12;
    if (has_sub_option_id3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_option_id3());
    }

    // required float sub_option_value1 = 13;
    if (has_sub_option_value1()) {
      total_size += 1 + 4;
    }

    // required float sub_option_value2 = 14;
    if (has_sub_option_value2()) {
      total_size += 1 + 4;
    }

    // required float sub_option_value3 = 15;
    if (has_sub_option_value3()) {
      total_size += 1 + 4;
    }

    // required int32 sub_option_enhance_count1 = 16;
    if (has_sub_option_enhance_count1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_option_enhance_count1());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 sub_option_enhance_count2 = 17;
    if (has_sub_option_enhance_count2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_option_enhance_count2());
    }

    // required int32 sub_option_enhance_count3 = 18;
    if (has_sub_option_enhance_count3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_option_enhance_count3());
    }

    // required bool locked = 20;
    if (has_locked()) {
      total_size += 2 + 1;
    }

    // required bool is_new = 21;
    if (has_is_new()) {
      total_size += 2 + 1;
    }

    // required float calc_main_option_value = 30;
    if (has_calc_main_option_value()) {
      total_size += 2 + 4;
    }

    // required float calc_sub_option_value1 = 31;
    if (has_calc_sub_option_value1()) {
      total_size += 2 + 4;
    }

    // required float calc_sub_option_value2 = 32;
    if (has_calc_sub_option_value2()) {
      total_size += 2 + 4;
    }

    // required float calc_sub_option_value3 = 33;
    if (has_calc_sub_option_value3()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required .b2.protocol.commondata.Aether.TIER calc_tier = 34;
    if (has_calc_tier()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->calc_tier());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aether::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Aether* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Aether*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Aether::MergeFrom(const Aether& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_tier()) {
      set_tier(from.tier());
    }
    if (from.has_main_option_id()) {
      set_main_option_id(from.main_option_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_main_option_value()) {
      set_main_option_value(from.main_option_value());
    }
    if (from.has_sub_option_id1()) {
      set_sub_option_id1(from.sub_option_id1());
    }
    if (from.has_sub_option_id2()) {
      set_sub_option_id2(from.sub_option_id2());
    }
    if (from.has_sub_option_id3()) {
      set_sub_option_id3(from.sub_option_id3());
    }
    if (from.has_sub_option_value1()) {
      set_sub_option_value1(from.sub_option_value1());
    }
    if (from.has_sub_option_value2()) {
      set_sub_option_value2(from.sub_option_value2());
    }
    if (from.has_sub_option_value3()) {
      set_sub_option_value3(from.sub_option_value3());
    }
    if (from.has_sub_option_enhance_count1()) {
      set_sub_option_enhance_count1(from.sub_option_enhance_count1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sub_option_enhance_count2()) {
      set_sub_option_enhance_count2(from.sub_option_enhance_count2());
    }
    if (from.has_sub_option_enhance_count3()) {
      set_sub_option_enhance_count3(from.sub_option_enhance_count3());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_is_new()) {
      set_is_new(from.is_new());
    }
    if (from.has_calc_main_option_value()) {
      set_calc_main_option_value(from.calc_main_option_value());
    }
    if (from.has_calc_sub_option_value1()) {
      set_calc_sub_option_value1(from.calc_sub_option_value1());
    }
    if (from.has_calc_sub_option_value2()) {
      set_calc_sub_option_value2(from.calc_sub_option_value2());
    }
    if (from.has_calc_sub_option_value3()) {
      set_calc_sub_option_value3(from.calc_sub_option_value3());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_calc_tier()) {
      set_calc_tier(from.calc_tier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Aether::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aether::CopyFrom(const Aether& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aether::IsInitialized() const {
  if ((_has_bits_[0] & 0x01ffffff) != 0x01ffffff) return false;

  return true;
}

void Aether::Swap(Aether* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(slot_, other->slot_);
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(grade_, other->grade_);
    std::swap(tier_, other->tier_);
    std::swap(main_option_id_, other->main_option_id_);
    std::swap(main_option_value_, other->main_option_value_);
    std::swap(sub_option_id1_, other->sub_option_id1_);
    std::swap(sub_option_id2_, other->sub_option_id2_);
    std::swap(sub_option_id3_, other->sub_option_id3_);
    std::swap(sub_option_value1_, other->sub_option_value1_);
    std::swap(sub_option_value2_, other->sub_option_value2_);
    std::swap(sub_option_value3_, other->sub_option_value3_);
    std::swap(sub_option_enhance_count1_, other->sub_option_enhance_count1_);
    std::swap(sub_option_enhance_count2_, other->sub_option_enhance_count2_);
    std::swap(sub_option_enhance_count3_, other->sub_option_enhance_count3_);
    std::swap(locked_, other->locked_);
    std::swap(is_new_, other->is_new_);
    std::swap(calc_main_option_value_, other->calc_main_option_value_);
    std::swap(calc_sub_option_value1_, other->calc_sub_option_value1_);
    std::swap(calc_sub_option_value2_, other->calc_sub_option_value2_);
    std::swap(calc_sub_option_value3_, other->calc_sub_option_value3_);
    std::swap(calc_tier_, other->calc_tier_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Aether::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Aether_descriptor_;
  metadata.reflection = Aether_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterSetOptionInfo::kSelectedOffenseSetOptionIdFieldNumber;
const int CharacterSetOptionInfo::kSelectedDefenseSetOptionIdFieldNumber;
const int CharacterSetOptionInfo::kDefenseSetOptionIdsFieldNumber;
#endif  // !_MSC_VER

CharacterSetOptionInfo::CharacterSetOptionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.CharacterSetOptionInfo)
}

void CharacterSetOptionInfo::InitAsDefaultInstance() {
}

CharacterSetOptionInfo::CharacterSetOptionInfo(const CharacterSetOptionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.CharacterSetOptionInfo)
}

void CharacterSetOptionInfo::SharedCtor() {
  _cached_size_ = 0;
  selected_offense_set_option_id_ = 0;
  selected_defense_set_option_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterSetOptionInfo::~CharacterSetOptionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.CharacterSetOptionInfo)
  SharedDtor();
}

void CharacterSetOptionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterSetOptionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterSetOptionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterSetOptionInfo_descriptor_;
}

const CharacterSetOptionInfo& CharacterSetOptionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

CharacterSetOptionInfo* CharacterSetOptionInfo::default_instance_ = NULL;

CharacterSetOptionInfo* CharacterSetOptionInfo::New() const {
  return new CharacterSetOptionInfo;
}

void CharacterSetOptionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CharacterSetOptionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(selected_offense_set_option_id_, selected_defense_set_option_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  defense_set_option_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterSetOptionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.CharacterSetOptionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 selected_offense_set_option_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_offense_set_option_id_)));
          set_has_selected_offense_set_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_selected_defense_set_option_id;
        break;
      }

      // optional int32 selected_defense_set_option_id = 2;
      case 2: {
        if (tag == 16) {
         parse_selected_defense_set_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selected_defense_set_option_id_)));
          set_has_selected_defense_set_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_defense_set_option_ids;
        break;
      }

      // repeated int32 defense_set_option_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_defense_set_option_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_defense_set_option_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_defense_set_option_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_defense_set_option_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.CharacterSetOptionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.CharacterSetOptionInfo)
  return false;
#undef DO_
}

void CharacterSetOptionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.CharacterSetOptionInfo)
  // optional int32 selected_offense_set_option_id = 1;
  if (has_selected_offense_set_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selected_offense_set_option_id(), output);
  }

  // optional int32 selected_defense_set_option_id = 2;
  if (has_selected_defense_set_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->selected_defense_set_option_id(), output);
  }

  // repeated int32 defense_set_option_ids = 3;
  for (int i = 0; i < this->defense_set_option_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->defense_set_option_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.CharacterSetOptionInfo)
}

::google::protobuf::uint8* CharacterSetOptionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.CharacterSetOptionInfo)
  // optional int32 selected_offense_set_option_id = 1;
  if (has_selected_offense_set_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selected_offense_set_option_id(), target);
  }

  // optional int32 selected_defense_set_option_id = 2;
  if (has_selected_defense_set_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->selected_defense_set_option_id(), target);
  }

  // repeated int32 defense_set_option_ids = 3;
  for (int i = 0; i < this->defense_set_option_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->defense_set_option_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.CharacterSetOptionInfo)
  return target;
}

int CharacterSetOptionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 selected_offense_set_option_id = 1;
    if (has_selected_offense_set_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected_offense_set_option_id());
    }

    // optional int32 selected_defense_set_option_id = 2;
    if (has_selected_defense_set_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selected_defense_set_option_id());
    }

  }
  // repeated int32 defense_set_option_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->defense_set_option_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->defense_set_option_ids(i));
    }
    total_size += 1 * this->defense_set_option_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterSetOptionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterSetOptionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterSetOptionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterSetOptionInfo::MergeFrom(const CharacterSetOptionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  defense_set_option_ids_.MergeFrom(from.defense_set_option_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selected_offense_set_option_id()) {
      set_selected_offense_set_option_id(from.selected_offense_set_option_id());
    }
    if (from.has_selected_defense_set_option_id()) {
      set_selected_defense_set_option_id(from.selected_defense_set_option_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterSetOptionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterSetOptionInfo::CopyFrom(const CharacterSetOptionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterSetOptionInfo::IsInitialized() const {

  return true;
}

void CharacterSetOptionInfo::Swap(CharacterSetOptionInfo* other) {
  if (other != this) {
    std::swap(selected_offense_set_option_id_, other->selected_offense_set_option_id_);
    std::swap(selected_defense_set_option_id_, other->selected_defense_set_option_id_);
    defense_set_option_ids_.Swap(&other->defense_set_option_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterSetOptionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterSetOptionInfo_descriptor_;
  metadata.reflection = CharacterSetOptionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillQuickSlot::kSlotFieldNumber;
const int SkillQuickSlot::kLeftSkillPointFieldNumber;
const int SkillQuickSlot::kSkillTotalPowerFieldNumber;
const int SkillQuickSlot::kUsingSkillId1FieldNumber;
const int SkillQuickSlot::kUsingSkillId2FieldNumber;
const int SkillQuickSlot::kUsingSkillId3FieldNumber;
#endif  // !_MSC_VER

SkillQuickSlot::SkillQuickSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.SkillQuickSlot)
}

void SkillQuickSlot::InitAsDefaultInstance() {
}

SkillQuickSlot::SkillQuickSlot(const SkillQuickSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.SkillQuickSlot)
}

void SkillQuickSlot::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  left_skill_point_ = 0;
  skill_total_power_ = 0;
  using_skill_id_1_ = 0;
  using_skill_id_2_ = 0;
  using_skill_id_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillQuickSlot::~SkillQuickSlot() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.SkillQuickSlot)
  SharedDtor();
}

void SkillQuickSlot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillQuickSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillQuickSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillQuickSlot_descriptor_;
}

const SkillQuickSlot& SkillQuickSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

SkillQuickSlot* SkillQuickSlot::default_instance_ = NULL;

SkillQuickSlot* SkillQuickSlot::New() const {
  return new SkillQuickSlot;
}

void SkillQuickSlot::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillQuickSlot*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(slot_, using_skill_id_3_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillQuickSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.SkillQuickSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_left_skill_point;
        break;
      }

      // required int32 left_skill_point = 2;
      case 2: {
        if (tag == 16) {
         parse_left_skill_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_skill_point_)));
          set_has_left_skill_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_skill_total_power;
        break;
      }

      // required float skill_total_power = 3;
      case 3: {
        if (tag == 29) {
         parse_skill_total_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &skill_total_power_)));
          set_has_skill_total_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_using_skill_id_1;
        break;
      }

      // required int32 using_skill_id_1 = 10;
      case 10: {
        if (tag == 80) {
         parse_using_skill_id_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_skill_id_1_)));
          set_has_using_skill_id_1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_using_skill_id_2;
        break;
      }

      // required int32 using_skill_id_2 = 11;
      case 11: {
        if (tag == 88) {
         parse_using_skill_id_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_skill_id_2_)));
          set_has_using_skill_id_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_using_skill_id_3;
        break;
      }

      // required int32 using_skill_id_3 = 12;
      case 12: {
        if (tag == 96) {
         parse_using_skill_id_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &using_skill_id_3_)));
          set_has_using_skill_id_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.SkillQuickSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.SkillQuickSlot)
  return false;
#undef DO_
}

void SkillQuickSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.SkillQuickSlot)
  // required int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // required int32 left_skill_point = 2;
  if (has_left_skill_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->left_skill_point(), output);
  }

  // required float skill_total_power = 3;
  if (has_skill_total_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->skill_total_power(), output);
  }

  // required int32 using_skill_id_1 = 10;
  if (has_using_skill_id_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->using_skill_id_1(), output);
  }

  // required int32 using_skill_id_2 = 11;
  if (has_using_skill_id_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->using_skill_id_2(), output);
  }

  // required int32 using_skill_id_3 = 12;
  if (has_using_skill_id_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->using_skill_id_3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.SkillQuickSlot)
}

::google::protobuf::uint8* SkillQuickSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.SkillQuickSlot)
  // required int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // required int32 left_skill_point = 2;
  if (has_left_skill_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->left_skill_point(), target);
  }

  // required float skill_total_power = 3;
  if (has_skill_total_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->skill_total_power(), target);
  }

  // required int32 using_skill_id_1 = 10;
  if (has_using_skill_id_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->using_skill_id_1(), target);
  }

  // required int32 using_skill_id_2 = 11;
  if (has_using_skill_id_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->using_skill_id_2(), target);
  }

  // required int32 using_skill_id_3 = 12;
  if (has_using_skill_id_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->using_skill_id_3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.SkillQuickSlot)
  return target;
}

int SkillQuickSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // required int32 left_skill_point = 2;
    if (has_left_skill_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_skill_point());
    }

    // required float skill_total_power = 3;
    if (has_skill_total_power()) {
      total_size += 1 + 4;
    }

    // required int32 using_skill_id_1 = 10;
    if (has_using_skill_id_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_skill_id_1());
    }

    // required int32 using_skill_id_2 = 11;
    if (has_using_skill_id_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_skill_id_2());
    }

    // required int32 using_skill_id_3 = 12;
    if (has_using_skill_id_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->using_skill_id_3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillQuickSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillQuickSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillQuickSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillQuickSlot::MergeFrom(const SkillQuickSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_left_skill_point()) {
      set_left_skill_point(from.left_skill_point());
    }
    if (from.has_skill_total_power()) {
      set_skill_total_power(from.skill_total_power());
    }
    if (from.has_using_skill_id_1()) {
      set_using_skill_id_1(from.using_skill_id_1());
    }
    if (from.has_using_skill_id_2()) {
      set_using_skill_id_2(from.using_skill_id_2());
    }
    if (from.has_using_skill_id_3()) {
      set_using_skill_id_3(from.using_skill_id_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillQuickSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillQuickSlot::CopyFrom(const SkillQuickSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillQuickSlot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void SkillQuickSlot::Swap(SkillQuickSlot* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(left_skill_point_, other->left_skill_point_);
    std::swap(skill_total_power_, other->skill_total_power_);
    std::swap(using_skill_id_1_, other->using_skill_id_1_);
    std::swap(using_skill_id_2_, other->using_skill_id_2_);
    std::swap(using_skill_id_3_, other->using_skill_id_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillQuickSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillQuickSlot_descriptor_;
  metadata.reflection = SkillQuickSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill::kSkillIdFieldNumber;
const int Skill::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

Skill::Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Skill)
}

void Skill::InitAsDefaultInstance() {
}

Skill::Skill(const Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Skill)
}

void Skill::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0;
  skill_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill::~Skill() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Skill)
  SharedDtor();
}

void Skill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_descriptor_;
}

const Skill& Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Skill* Skill::default_instance_ = NULL;

Skill* Skill::New() const {
  return new Skill;
}

void Skill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Skill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(skill_id_, skill_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Skill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skill_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // required int32 skill_level = 2;
      case 2: {
        if (tag == 16) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Skill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Skill)
  return false;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Skill)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_id(), output);
  }

  // required int32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skill_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Skill)
}

::google::protobuf::uint8* Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Skill)
  // required int32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_id(), target);
  }

  // required int32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skill_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Skill)
  return target;
}

int Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_id());
    }

    // required int32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Skill::Swap(Skill* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_descriptor_;
  metadata.reflection = Skill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RawReward::kIdFieldNumber;
const int RawReward::kCountFieldNumber;
#endif  // !_MSC_VER

RawReward::RawReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RawReward)
}

void RawReward::InitAsDefaultInstance() {
}

RawReward::RawReward(const RawReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RawReward)
}

void RawReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawReward::~RawReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RawReward)
  SharedDtor();
}

void RawReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RawReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawReward_descriptor_;
}

const RawReward& RawReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RawReward* RawReward::default_instance_ = NULL;

RawReward* RawReward::New() const {
  return new RawReward;
}

void RawReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RawReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RawReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RawReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RawReward)
  return false;
#undef DO_
}

void RawReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RawReward)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RawReward)
}

::google::protobuf::uint8* RawReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RawReward)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RawReward)
  return target;
}

int RawReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawReward::MergeFrom(const RawReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawReward::CopyFrom(const RawReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RawReward::Swap(RawReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RawReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawReward_descriptor_;
  metadata.reflection = RawReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Reward::kRawRewardFieldNumber;
const int Reward::kItemFieldNumber;
const int Reward::kCostumeFieldNumber;
const int Reward::kTotemFieldNumber;
const int Reward::kAetherFieldNumber;
const int Reward::kLightAccountFieldNumber;
const int Reward::kLightCharactersFieldNumber;
#endif  // !_MSC_VER

Reward::Reward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Reward)
}

void Reward::InitAsDefaultInstance() {
  raw_reward_ = const_cast< ::b2::protocol::commondata::RawReward*>(&::b2::protocol::commondata::RawReward::default_instance());
  item_ = const_cast< ::b2::protocol::commondata::Item*>(&::b2::protocol::commondata::Item::default_instance());
  costume_ = const_cast< ::b2::protocol::commondata::Costume*>(&::b2::protocol::commondata::Costume::default_instance());
  totem_ = const_cast< ::b2::protocol::commondata::Totem*>(&::b2::protocol::commondata::Totem::default_instance());
  aether_ = const_cast< ::b2::protocol::commondata::Aether*>(&::b2::protocol::commondata::Aether::default_instance());
  light_account_ = const_cast< ::b2::protocol::commondata::LightAccount*>(&::b2::protocol::commondata::LightAccount::default_instance());
}

Reward::Reward(const Reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Reward)
}

void Reward::SharedCtor() {
  _cached_size_ = 0;
  raw_reward_ = NULL;
  item_ = NULL;
  costume_ = NULL;
  totem_ = NULL;
  aether_ = NULL;
  light_account_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Reward::~Reward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Reward)
  SharedDtor();
}

void Reward::SharedDtor() {
  if (this != default_instance_) {
    delete raw_reward_;
    delete item_;
    delete costume_;
    delete totem_;
    delete aether_;
    delete light_account_;
  }
}

void Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reward_descriptor_;
}

const Reward& Reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Reward* Reward::default_instance_ = NULL;

Reward* Reward::New() const {
  return new Reward;
}

void Reward::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_raw_reward()) {
      if (raw_reward_ != NULL) raw_reward_->::b2::protocol::commondata::RawReward::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::b2::protocol::commondata::Item::Clear();
    }
    if (has_costume()) {
      if (costume_ != NULL) costume_->::b2::protocol::commondata::Costume::Clear();
    }
    if (has_totem()) {
      if (totem_ != NULL) totem_->::b2::protocol::commondata::Totem::Clear();
    }
    if (has_aether()) {
      if (aether_ != NULL) aether_->::b2::protocol::commondata::Aether::Clear();
    }
    if (has_light_account()) {
      if (light_account_ != NULL) light_account_->::b2::protocol::commondata::LightAccount::Clear();
    }
  }
  light_characters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.RawReward raw_reward = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // optional .b2.protocol.commondata.Item item = 5;
      case 5: {
        if (tag == 42) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_costume;
        break;
      }

      // optional .b2.protocol.commondata.Costume costume = 6;
      case 6: {
        if (tag == 50) {
         parse_costume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_costume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_totem;
        break;
      }

      // optional .b2.protocol.commondata.Totem totem = 7;
      case 7: {
        if (tag == 58) {
         parse_totem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_aether;
        break;
      }

      // optional .b2.protocol.commondata.Aether aether = 8;
      case 8: {
        if (tag == 66) {
         parse_aether:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aether()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_light_account;
        break;
      }

      // optional .b2.protocol.commondata.LightAccount light_account = 9;
      case 9: {
        if (tag == 74) {
         parse_light_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_light_account()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_light_characters;
        break;
      }

      // repeated .b2.protocol.commondata.LightCharacter light_characters = 10;
      case 10: {
        if (tag == 82) {
         parse_light_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_light_characters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_light_characters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Reward)
  return false;
#undef DO_
}

void Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Reward)
  // required .b2.protocol.commondata.RawReward raw_reward = 1;
  if (has_raw_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raw_reward(), output);
  }

  // optional .b2.protocol.commondata.Item item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(), output);
  }

  // optional .b2.protocol.commondata.Costume costume = 6;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->costume(), output);
  }

  // optional .b2.protocol.commondata.Totem totem = 7;
  if (has_totem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->totem(), output);
  }

  // optional .b2.protocol.commondata.Aether aether = 8;
  if (has_aether()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aether(), output);
  }

  // optional .b2.protocol.commondata.LightAccount light_account = 9;
  if (has_light_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->light_account(), output);
  }

  // repeated .b2.protocol.commondata.LightCharacter light_characters = 10;
  for (int i = 0; i < this->light_characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->light_characters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Reward)
}

::google::protobuf::uint8* Reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Reward)
  // required .b2.protocol.commondata.RawReward raw_reward = 1;
  if (has_raw_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raw_reward(), target);
  }

  // optional .b2.protocol.commondata.Item item = 5;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(), target);
  }

  // optional .b2.protocol.commondata.Costume costume = 6;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->costume(), target);
  }

  // optional .b2.protocol.commondata.Totem totem = 7;
  if (has_totem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->totem(), target);
  }

  // optional .b2.protocol.commondata.Aether aether = 8;
  if (has_aether()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->aether(), target);
  }

  // optional .b2.protocol.commondata.LightAccount light_account = 9;
  if (has_light_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->light_account(), target);
  }

  // repeated .b2.protocol.commondata.LightCharacter light_characters = 10;
  for (int i = 0; i < this->light_characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->light_characters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Reward)
  return target;
}

int Reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.RawReward raw_reward = 1;
    if (has_raw_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raw_reward());
    }

    // optional .b2.protocol.commondata.Item item = 5;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .b2.protocol.commondata.Costume costume = 6;
    if (has_costume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->costume());
    }

    // optional .b2.protocol.commondata.Totem totem = 7;
    if (has_totem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totem());
    }

    // optional .b2.protocol.commondata.Aether aether = 8;
    if (has_aether()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aether());
    }

    // optional .b2.protocol.commondata.LightAccount light_account = 9;
    if (has_light_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->light_account());
    }

  }
  // repeated .b2.protocol.commondata.LightCharacter light_characters = 10;
  total_size += 1 * this->light_characters_size();
  for (int i = 0; i < this->light_characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->light_characters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Reward::MergeFrom(const Reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  light_characters_.MergeFrom(from.light_characters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_reward()) {
      mutable_raw_reward()->::b2::protocol::commondata::RawReward::MergeFrom(from.raw_reward());
    }
    if (from.has_item()) {
      mutable_item()->::b2::protocol::commondata::Item::MergeFrom(from.item());
    }
    if (from.has_costume()) {
      mutable_costume()->::b2::protocol::commondata::Costume::MergeFrom(from.costume());
    }
    if (from.has_totem()) {
      mutable_totem()->::b2::protocol::commondata::Totem::MergeFrom(from.totem());
    }
    if (from.has_aether()) {
      mutable_aether()->::b2::protocol::commondata::Aether::MergeFrom(from.aether());
    }
    if (from.has_light_account()) {
      mutable_light_account()->::b2::protocol::commondata::LightAccount::MergeFrom(from.light_account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reward::CopyFrom(const Reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_raw_reward()) {
    if (!this->raw_reward().IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_costume()) {
    if (!this->costume().IsInitialized()) return false;
  }
  if (has_totem()) {
    if (!this->totem().IsInitialized()) return false;
  }
  if (has_aether()) {
    if (!this->aether().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->light_characters())) return false;
  return true;
}

void Reward::Swap(Reward* other) {
  if (other != this) {
    std::swap(raw_reward_, other->raw_reward_);
    std::swap(item_, other->item_);
    std::swap(costume_, other->costume_);
    std::swap(totem_, other->totem_);
    std::swap(aether_, other->aether_);
    std::swap(light_account_, other->light_account_);
    light_characters_.Swap(&other->light_characters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reward_descriptor_;
  metadata.reflection = Reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardRandomCount::kIdFieldNumber;
const int RewardRandomCount::kMinCountFieldNumber;
const int RewardRandomCount::kMaxCountFieldNumber;
#endif  // !_MSC_VER

RewardRandomCount::RewardRandomCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RewardRandomCount)
}

void RewardRandomCount::InitAsDefaultInstance() {
}

RewardRandomCount::RewardRandomCount(const RewardRandomCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RewardRandomCount)
}

void RewardRandomCount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  min_count_ = 0;
  max_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardRandomCount::~RewardRandomCount() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RewardRandomCount)
  SharedDtor();
}

void RewardRandomCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardRandomCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardRandomCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardRandomCount_descriptor_;
}

const RewardRandomCount& RewardRandomCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RewardRandomCount* RewardRandomCount::default_instance_ = NULL;

RewardRandomCount* RewardRandomCount::New() const {
  return new RewardRandomCount;
}

void RewardRandomCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RewardRandomCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, max_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardRandomCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RewardRandomCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_min_count;
        break;
      }

      // required int32 min_count = 2;
      case 2: {
        if (tag == 16) {
         parse_min_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_count_)));
          set_has_min_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 3;
      case 3: {
        if (tag == 24) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RewardRandomCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RewardRandomCount)
  return false;
#undef DO_
}

void RewardRandomCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RewardRandomCount)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 min_count = 2;
  if (has_min_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_count(), output);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RewardRandomCount)
}

::google::protobuf::uint8* RewardRandomCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RewardRandomCount)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 min_count = 2;
  if (has_min_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_count(), target);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RewardRandomCount)
  return target;
}

int RewardRandomCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 min_count = 2;
    if (has_min_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_count());
    }

    // required int32 max_count = 3;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardRandomCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardRandomCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardRandomCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardRandomCount::MergeFrom(const RewardRandomCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_min_count()) {
      set_min_count(from.min_count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardRandomCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardRandomCount::CopyFrom(const RewardRandomCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardRandomCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RewardRandomCount::Swap(RewardRandomCount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(min_count_, other->min_count_);
    std::swap(max_count_, other->max_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardRandomCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardRandomCount_descriptor_;
  metadata.reflection = RewardRandomCount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QuestInfo_QuestSlotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestInfo_QuestSlotType_descriptor_;
}
bool QuestInfo_QuestSlotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QuestInfo_QuestSlotType QuestInfo::QUEST_MAIN1;
const QuestInfo_QuestSlotType QuestInfo::QUEST_MAIN2;
const QuestInfo_QuestSlotType QuestInfo::QUEST_SUB1;
const QuestInfo_QuestSlotType QuestInfo::QUEST_SUB2;
const QuestInfo_QuestSlotType QuestInfo::QuestSlotType_MIN;
const QuestInfo_QuestSlotType QuestInfo::QuestSlotType_MAX;
const int QuestInfo::QuestSlotType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QuestInfo::kSlotFieldNumber;
const int QuestInfo::kTypeFieldNumber;
const int QuestInfo::kQuestIdFieldNumber;
const int QuestInfo::kProgressCountFieldNumber;
const int QuestInfo::kStateFieldNumber;
#endif  // !_MSC_VER

QuestInfo::QuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.QuestInfo)
}

void QuestInfo::InitAsDefaultInstance() {
}

QuestInfo::QuestInfo(const QuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.QuestInfo)
}

void QuestInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 1;
  type_ = 1;
  quest_id_ = 0;
  progress_count_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestInfo::~QuestInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.QuestInfo)
  SharedDtor();
}

void QuestInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestInfo_descriptor_;
}

const QuestInfo& QuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

QuestInfo* QuestInfo::default_instance_ = NULL;

QuestInfo* QuestInfo::New() const {
  return new QuestInfo;
}

void QuestInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QuestInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(quest_id_, state_);
    slot_ = 1;
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.QuestInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::QuestInfo_QuestSlotType_IsValid(value)) {
            set_slot(static_cast< ::b2::protocol::commondata::QuestInfo_QuestSlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .b2.protocol.commondata.QuestType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::QuestType_IsValid(value)) {
            set_type(static_cast< ::b2::protocol::commondata::QuestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quest_id;
        break;
      }

      // required int32 quest_id = 3;
      case 3: {
        if (tag == 24) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress_count;
        break;
      }

      // required int32 progress_count = 4;
      case 4: {
        if (tag == 32) {
         parse_progress_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_count_)));
          set_has_progress_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required int32 state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.QuestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.QuestInfo)
  return false;
#undef DO_
}

void QuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.QuestInfo)
  // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->slot(), output);
  }

  // required .b2.protocol.commondata.QuestType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 quest_id = 3;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quest_id(), output);
  }

  // required int32 progress_count = 4;
  if (has_progress_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->progress_count(), output);
  }

  // required int32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.QuestInfo)
}

::google::protobuf::uint8* QuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.QuestInfo)
  // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->slot(), target);
  }

  // required .b2.protocol.commondata.QuestType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 quest_id = 3;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quest_id(), target);
  }

  // required int32 progress_count = 4;
  if (has_progress_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->progress_count(), target);
  }

  // required int32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.QuestInfo)
  return target;
}

int QuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot());
    }

    // required .b2.protocol.commondata.QuestType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 quest_id = 3;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }

    // required int32 progress_count = 4;
    if (has_progress_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress_count());
    }

    // required int32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestInfo::MergeFrom(const QuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_progress_count()) {
      set_progress_count(from.progress_count());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestInfo::CopyFrom(const QuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void QuestInfo::Swap(QuestInfo* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(type_, other->type_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(progress_count_, other->progress_count_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestInfo_descriptor_;
  metadata.reflection = QuestInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MissionInfo_MissionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionInfo_MissionType_descriptor_;
}
bool MissionInfo_MissionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionInfo_MissionType MissionInfo::DAILY;
const MissionInfo_MissionType MissionInfo::WEEKLY;
const MissionInfo_MissionType MissionInfo::MONTHLY;
const MissionInfo_MissionType MissionInfo::SERIAL;
const MissionInfo_MissionType MissionInfo::FEATURED;
const MissionInfo_MissionType MissionInfo::MissionType_MIN;
const MissionInfo_MissionType MissionInfo::MissionType_MAX;
const int MissionInfo::MissionType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MissionInfo_MissionStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionInfo_MissionStateType_descriptor_;
}
bool MissionInfo_MissionStateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MissionInfo_MissionStateType MissionInfo::PROGRESS;
const MissionInfo_MissionStateType MissionInfo::COMPLETED;
const MissionInfo_MissionStateType MissionInfo::REWARDED;
const MissionInfo_MissionStateType MissionInfo::MissionStateType_MIN;
const MissionInfo_MissionStateType MissionInfo::MissionStateType_MAX;
const int MissionInfo::MissionStateType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MissionInfo::kMissionTypeFieldNumber;
const int MissionInfo::kMissionStateTypeFieldNumber;
const int MissionInfo::kMissionIdFieldNumber;
const int MissionInfo::kProgressCountFieldNumber;
const int MissionInfo::kCompletedStepFieldNumber;
const int MissionInfo::kRewardedStepFieldNumber;
#endif  // !_MSC_VER

MissionInfo::MissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MissionInfo)
}

void MissionInfo::InitAsDefaultInstance() {
}

MissionInfo::MissionInfo(const MissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MissionInfo)
}

void MissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 1;
  mission_state_type_ = 1;
  mission_id_ = 0;
  progress_count_ = GOOGLE_LONGLONG(0);
  completed_step_ = 0;
  rewarded_step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionInfo::~MissionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MissionInfo)
  SharedDtor();
}

void MissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionInfo_descriptor_;
}

const MissionInfo& MissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MissionInfo* MissionInfo::default_instance_ = NULL;

MissionInfo* MissionInfo::New() const {
  return new MissionInfo;
}

void MissionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MissionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(progress_count_, rewarded_step_);
    mission_type_ = 1;
    mission_state_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MissionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionType_IsValid(value)) {
            set_mission_type(static_cast< ::b2::protocol::commondata::MissionInfo_MissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mission_state_type;
        break;
      }

      // required .b2.protocol.commondata.MissionInfo.MissionStateType mission_state_type = 2;
      case 2: {
        if (tag == 16) {
         parse_mission_state_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionStateType_IsValid(value)) {
            set_mission_state_type(static_cast< ::b2::protocol::commondata::MissionInfo_MissionStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mission_id;
        break;
      }

      // required int32 mission_id = 3;
      case 3: {
        if (tag == 24) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress_count;
        break;
      }

      // required int64 progress_count = 4;
      case 4: {
        if (tag == 32) {
         parse_progress_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &progress_count_)));
          set_has_progress_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_completed_step;
        break;
      }

      // optional int32 completed_step = 5;
      case 5: {
        if (tag == 40) {
         parse_completed_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completed_step_)));
          set_has_completed_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rewarded_step;
        break;
      }

      // optional int32 rewarded_step = 6;
      case 6: {
        if (tag == 48) {
         parse_rewarded_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewarded_step_)));
          set_has_rewarded_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MissionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MissionInfo)
  return false;
#undef DO_
}

void MissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MissionInfo)
  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mission_type(), output);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionStateType mission_state_type = 2;
  if (has_mission_state_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mission_state_type(), output);
  }

  // required int32 mission_id = 3;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mission_id(), output);
  }

  // required int64 progress_count = 4;
  if (has_progress_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->progress_count(), output);
  }

  // optional int32 completed_step = 5;
  if (has_completed_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->completed_step(), output);
  }

  // optional int32 rewarded_step = 6;
  if (has_rewarded_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewarded_step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MissionInfo)
}

::google::protobuf::uint8* MissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MissionInfo)
  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mission_type(), target);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionStateType mission_state_type = 2;
  if (has_mission_state_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mission_state_type(), target);
  }

  // required int32 mission_id = 3;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mission_id(), target);
  }

  // required int64 progress_count = 4;
  if (has_progress_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->progress_count(), target);
  }

  // optional int32 completed_step = 5;
  if (has_completed_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->completed_step(), target);
  }

  // optional int32 rewarded_step = 6;
  if (has_rewarded_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewarded_step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MissionInfo)
  return target;
}

int MissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_type());
    }

    // required .b2.protocol.commondata.MissionInfo.MissionStateType mission_state_type = 2;
    if (has_mission_state_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_state_type());
    }

    // required int32 mission_id = 3;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // required int64 progress_count = 4;
    if (has_progress_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->progress_count());
    }

    // optional int32 completed_step = 5;
    if (has_completed_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completed_step());
    }

    // optional int32 rewarded_step = 6;
    if (has_rewarded_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewarded_step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionInfo::MergeFrom(const MissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_mission_state_type()) {
      set_mission_state_type(from.mission_state_type());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_progress_count()) {
      set_progress_count(from.progress_count());
    }
    if (from.has_completed_step()) {
      set_completed_step(from.completed_step());
    }
    if (from.has_rewarded_step()) {
      set_rewarded_step(from.rewarded_step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionInfo::CopyFrom(const MissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MissionInfo::Swap(MissionInfo* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(mission_state_type_, other->mission_state_type_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(progress_count_, other->progress_count_);
    std::swap(completed_step_, other->completed_step_);
    std::swap(rewarded_step_, other->rewarded_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionInfo_descriptor_;
  metadata.reflection = MissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionCompletePointInfo::kMissionTypeFieldNumber;
const int MissionCompletePointInfo::kCompletePointFieldNumber;
const int MissionCompletePointInfo::kRewardIndexsFieldNumber;
#endif  // !_MSC_VER

MissionCompletePointInfo::MissionCompletePointInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MissionCompletePointInfo)
}

void MissionCompletePointInfo::InitAsDefaultInstance() {
}

MissionCompletePointInfo::MissionCompletePointInfo(const MissionCompletePointInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MissionCompletePointInfo)
}

void MissionCompletePointInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 1;
  completepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionCompletePointInfo::~MissionCompletePointInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MissionCompletePointInfo)
  SharedDtor();
}

void MissionCompletePointInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionCompletePointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionCompletePointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionCompletePointInfo_descriptor_;
}

const MissionCompletePointInfo& MissionCompletePointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MissionCompletePointInfo* MissionCompletePointInfo::default_instance_ = NULL;

MissionCompletePointInfo* MissionCompletePointInfo::New() const {
  return new MissionCompletePointInfo;
}

void MissionCompletePointInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mission_type_ = 1;
    completepoint_ = 0;
  }
  reward_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionCompletePointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MissionCompletePointInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionType_IsValid(value)) {
            set_mission_type(static_cast< ::b2::protocol::commondata::MissionInfo_MissionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_completePoint;
        break;
      }

      // required int32 completePoint = 2;
      case 2: {
        if (tag == 16) {
         parse_completePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completepoint_)));
          set_has_completepoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_indexs;
        break;
      }

      // repeated int32 reward_indexs = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_reward_indexs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward_indexs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_indexs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MissionCompletePointInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MissionCompletePointInfo)
  return false;
#undef DO_
}

void MissionCompletePointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MissionCompletePointInfo)
  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mission_type(), output);
  }

  // required int32 completePoint = 2;
  if (has_completepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->completepoint(), output);
  }

  // repeated int32 reward_indexs = 3;
  for (int i = 0; i < this->reward_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->reward_indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MissionCompletePointInfo)
}

::google::protobuf::uint8* MissionCompletePointInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MissionCompletePointInfo)
  // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mission_type(), target);
  }

  // required int32 completePoint = 2;
  if (has_completepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->completepoint(), target);
  }

  // repeated int32 reward_indexs = 3;
  for (int i = 0; i < this->reward_indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->reward_indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MissionCompletePointInfo)
  return target;
}

int MissionCompletePointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MissionInfo.MissionType mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_type());
    }

    // required int32 completePoint = 2;
    if (has_completepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completepoint());
    }

  }
  // repeated int32 reward_indexs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward_indexs(i));
    }
    total_size += 1 * this->reward_indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionCompletePointInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionCompletePointInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionCompletePointInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionCompletePointInfo::MergeFrom(const MissionCompletePointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_indexs_.MergeFrom(from.reward_indexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_completepoint()) {
      set_completepoint(from.completepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionCompletePointInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionCompletePointInfo::CopyFrom(const MissionCompletePointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionCompletePointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MissionCompletePointInfo::Swap(MissionCompletePointInfo* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(completepoint_, other->completepoint_);
    reward_indexs_.Swap(&other->reward_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionCompletePointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionCompletePointInfo_descriptor_;
  metadata.reflection = MissionCompletePointInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Guild_JoinOption_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Guild_JoinOption_descriptor_;
}
bool Guild_JoinOption_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Guild_JoinOption Guild::PUBLIC;
const Guild_JoinOption Guild::PRIVATE;
const Guild_JoinOption Guild::JoinOption_MIN;
const Guild_JoinOption Guild::JoinOption_MAX;
const int Guild::JoinOption_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Guild_InviteState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Guild_InviteState_descriptor_;
}
bool Guild_InviteState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Guild_InviteState Guild::NONE;
const Guild_InviteState Guild::JOINED_GUILD;
const Guild_InviteState Guild::INVITED;
const Guild_InviteState Guild::NON_INVITING;
const Guild_InviteState Guild::INVITABLE;
const Guild_InviteState Guild::InviteState_MIN;
const Guild_InviteState Guild::InviteState_MAX;
const int Guild::InviteState_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Guild::kGuildIdFieldNumber;
const int Guild::kGuildNameFieldNumber;
const int Guild::kMasterAccountIdFieldNumber;
const int Guild::kMasterNameFieldNumber;
const int Guild::kMaxMemberCountFieldNumber;
const int Guild::kNoticeFieldNumber;
const int Guild::kLevelFieldNumber;
const int Guild::kExpFieldNumber;
const int Guild::kJoinOptionFieldNumber;
const int Guild::kMarkIndexFieldNumber;
const int Guild::kMarkColorFieldNumber;
const int Guild::kMarkBgIndexFieldNumber;
const int Guild::kMarkBgColorFieldNumber;
const int Guild::kCurMemberCountFieldNumber;
const int Guild::kCreateTimeFieldNumber;
const int Guild::kMasterElectedTimeFieldNumber;
const int Guild::kSeasonObtainMedalFieldNumber;
const int Guild::kSeasonRankingFieldNumber;
const int Guild::kSeasonRankingTotalFieldNumber;
const int Guild::kMembersAvgPowerFieldNumber;
const int Guild::kTotalResultFieldNumber;
const int Guild::kJoinGuildBattleFieldNumber;
const int Guild::kTurnObtainMedalFieldNumber;
#endif  // !_MSC_VER

Guild::Guild()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Guild)
}

void Guild::InitAsDefaultInstance() {
}

Guild::Guild(const Guild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Guild)
}

void Guild::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_account_id_ = GOOGLE_LONGLONG(0);
  master_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_member_count_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  exp_ = 0;
  join_option_ = 1;
  mark_index_ = 0;
  mark_color_ = 0;
  mark_bg_index_ = 0;
  mark_bg_color_ = 0;
  cur_member_count_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  master_elected_time_ = GOOGLE_LONGLONG(0);
  season_obtain_medal_ = 0;
  season_ranking_ = 0;
  season_ranking_total_ = 0;
  members_avg_power_ = 0;
  total_result_ = 0;
  join_guild_battle_ = false;
  turn_obtain_medal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Guild::~Guild() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Guild)
  SharedDtor();
}

void Guild::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (master_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete master_name_;
  }
  if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void Guild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Guild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Guild_descriptor_;
}

const Guild& Guild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Guild* Guild::default_instance_ = NULL;

Guild* Guild::New() const {
  return new Guild;
}

void Guild::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Guild*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(max_member_count_, exp_);
    guild_id_ = GOOGLE_LONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
    master_account_id_ = GOOGLE_LONGLONG(0);
    if (has_master_name()) {
      if (master_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        master_name_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        notice_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(mark_index_, cur_member_count_);
    join_option_ = 1;
    master_elected_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(season_ranking_, turn_obtain_medal_);
    season_obtain_medal_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Guild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Guild)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master_account_id;
        break;
      }

      // required int64 master_account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_master_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &master_account_id_)));
          set_has_master_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_master_name;
        break;
      }

      // required string master_name = 4;
      case 4: {
        if (tag == 34) {
         parse_master_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_name().data(), this->master_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "master_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_max_member_count;
        break;
      }

      // required int32 max_member_count = 5;
      case 5: {
        if (tag == 40) {
         parse_max_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_member_count_)));
          set_has_max_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }

      // required string notice = 6;
      case 6: {
        if (tag == 50) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "notice");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required int32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // required int32 exp = 8;
      case 8: {
        if (tag == 64) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_join_option;
        break;
      }

      // required .b2.protocol.commondata.Guild.JoinOption join_option = 10;
      case 10: {
        if (tag == 80) {
         parse_join_option:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Guild_JoinOption_IsValid(value)) {
            set_join_option(static_cast< ::b2::protocol::commondata::Guild_JoinOption >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mark_index;
        break;
      }

      // required int32 mark_index = 11;
      case 11: {
        if (tag == 88) {
         parse_mark_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_index_)));
          set_has_mark_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mark_color;
        break;
      }

      // required int32 mark_color = 12;
      case 12: {
        if (tag == 96) {
         parse_mark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_color_)));
          set_has_mark_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mark_bg_index;
        break;
      }

      // required int32 mark_bg_index = 13;
      case 13: {
        if (tag == 104) {
         parse_mark_bg_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_index_)));
          set_has_mark_bg_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_mark_bg_color;
        break;
      }

      // required int32 mark_bg_color = 14;
      case 14: {
        if (tag == 112) {
         parse_mark_bg_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_color_)));
          set_has_mark_bg_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_cur_member_count;
        break;
      }

      // required int32 cur_member_count = 15;
      case 15: {
        if (tag == 120) {
         parse_cur_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_member_count_)));
          set_has_cur_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 16;
      case 16: {
        if (tag == 128) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_master_elected_time;
        break;
      }

      // optional int64 master_elected_time = 17;
      case 17: {
        if (tag == 136) {
         parse_master_elected_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &master_elected_time_)));
          set_has_master_elected_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_season_obtain_medal;
        break;
      }

      // required int32 season_obtain_medal = 20;
      case 20: {
        if (tag == 160) {
         parse_season_obtain_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_obtain_medal_)));
          set_has_season_obtain_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_season_ranking;
        break;
      }

      // required int32 season_ranking = 21;
      case 21: {
        if (tag == 168) {
         parse_season_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_ranking_)));
          set_has_season_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_season_ranking_total;
        break;
      }

      // required int32 season_ranking_total = 22;
      case 22: {
        if (tag == 176) {
         parse_season_ranking_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_ranking_total_)));
          set_has_season_ranking_total();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_members_avg_power;
        break;
      }

      // required int32 members_avg_power = 23;
      case 23: {
        if (tag == 184) {
         parse_members_avg_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &members_avg_power_)));
          set_has_members_avg_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_total_result;
        break;
      }

      // required int32 total_result = 24;
      case 24: {
        if (tag == 192) {
         parse_total_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_result_)));
          set_has_total_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_join_guild_battle;
        break;
      }

      // optional bool join_guild_battle = 30;
      case 30: {
        if (tag == 240) {
         parse_join_guild_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &join_guild_battle_)));
          set_has_join_guild_battle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_turn_obtain_medal;
        break;
      }

      // optional int32 turn_obtain_medal = 31;
      case 31: {
        if (tag == 248) {
         parse_turn_obtain_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_obtain_medal_)));
          set_has_turn_obtain_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Guild)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Guild)
  return false;
#undef DO_
}

void Guild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Guild)
  // required int64 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guild_id(), output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  // required int64 master_account_id = 3;
  if (has_master_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->master_account_id(), output);
  }

  // required string master_name = 4;
  if (has_master_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_name().data(), this->master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->master_name(), output);
  }

  // required int32 max_member_count = 5;
  if (has_max_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_member_count(), output);
  }

  // required string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->notice(), output);
  }

  // required int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // required int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // required .b2.protocol.commondata.Guild.JoinOption join_option = 10;
  if (has_join_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->join_option(), output);
  }

  // required int32 mark_index = 11;
  if (has_mark_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mark_index(), output);
  }

  // required int32 mark_color = 12;
  if (has_mark_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mark_color(), output);
  }

  // required int32 mark_bg_index = 13;
  if (has_mark_bg_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mark_bg_index(), output);
  }

  // required int32 mark_bg_color = 14;
  if (has_mark_bg_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mark_bg_color(), output);
  }

  // required int32 cur_member_count = 15;
  if (has_cur_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cur_member_count(), output);
  }

  // required int64 create_time = 16;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->create_time(), output);
  }

  // optional int64 master_elected_time = 17;
  if (has_master_elected_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->master_elected_time(), output);
  }

  // required int32 season_obtain_medal = 20;
  if (has_season_obtain_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->season_obtain_medal(), output);
  }

  // required int32 season_ranking = 21;
  if (has_season_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->season_ranking(), output);
  }

  // required int32 season_ranking_total = 22;
  if (has_season_ranking_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->season_ranking_total(), output);
  }

  // required int32 members_avg_power = 23;
  if (has_members_avg_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->members_avg_power(), output);
  }

  // required int32 total_result = 24;
  if (has_total_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->total_result(), output);
  }

  // optional bool join_guild_battle = 30;
  if (has_join_guild_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->join_guild_battle(), output);
  }

  // optional int32 turn_obtain_medal = 31;
  if (has_turn_obtain_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->turn_obtain_medal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Guild)
}

::google::protobuf::uint8* Guild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Guild)
  // required int64 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guild_id(), target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // required int64 master_account_id = 3;
  if (has_master_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->master_account_id(), target);
  }

  // required string master_name = 4;
  if (has_master_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_name().data(), this->master_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "master_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->master_name(), target);
  }

  // required int32 max_member_count = 5;
  if (has_max_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_member_count(), target);
  }

  // required string notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "notice");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->notice(), target);
  }

  // required int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // required int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // required .b2.protocol.commondata.Guild.JoinOption join_option = 10;
  if (has_join_option()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->join_option(), target);
  }

  // required int32 mark_index = 11;
  if (has_mark_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mark_index(), target);
  }

  // required int32 mark_color = 12;
  if (has_mark_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mark_color(), target);
  }

  // required int32 mark_bg_index = 13;
  if (has_mark_bg_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mark_bg_index(), target);
  }

  // required int32 mark_bg_color = 14;
  if (has_mark_bg_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mark_bg_color(), target);
  }

  // required int32 cur_member_count = 15;
  if (has_cur_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cur_member_count(), target);
  }

  // required int64 create_time = 16;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->create_time(), target);
  }

  // optional int64 master_elected_time = 17;
  if (has_master_elected_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->master_elected_time(), target);
  }

  // required int32 season_obtain_medal = 20;
  if (has_season_obtain_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->season_obtain_medal(), target);
  }

  // required int32 season_ranking = 21;
  if (has_season_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->season_ranking(), target);
  }

  // required int32 season_ranking_total = 22;
  if (has_season_ranking_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->season_ranking_total(), target);
  }

  // required int32 members_avg_power = 23;
  if (has_members_avg_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->members_avg_power(), target);
  }

  // required int32 total_result = 24;
  if (has_total_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->total_result(), target);
  }

  // optional bool join_guild_battle = 30;
  if (has_join_guild_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->join_guild_battle(), target);
  }

  // optional int32 turn_obtain_medal = 31;
  if (has_turn_obtain_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->turn_obtain_medal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Guild)
  return target;
}

int Guild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

    // required string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // required int64 master_account_id = 3;
    if (has_master_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->master_account_id());
    }

    // required string master_name = 4;
    if (has_master_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_name());
    }

    // required int32 max_member_count = 5;
    if (has_max_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_member_count());
    }

    // required string notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // required int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .b2.protocol.commondata.Guild.JoinOption join_option = 10;
    if (has_join_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->join_option());
    }

    // required int32 mark_index = 11;
    if (has_mark_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_index());
    }

    // required int32 mark_color = 12;
    if (has_mark_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_color());
    }

    // required int32 mark_bg_index = 13;
    if (has_mark_bg_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_index());
    }

    // required int32 mark_bg_color = 14;
    if (has_mark_bg_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_color());
    }

    // required int32 cur_member_count = 15;
    if (has_cur_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_member_count());
    }

    // required int64 create_time = 16;
    if (has_create_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // optional int64 master_elected_time = 17;
    if (has_master_elected_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->master_elected_time());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 season_obtain_medal = 20;
    if (has_season_obtain_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_obtain_medal());
    }

    // required int32 season_ranking = 21;
    if (has_season_ranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_ranking());
    }

    // required int32 season_ranking_total = 22;
    if (has_season_ranking_total()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_ranking_total());
    }

    // required int32 members_avg_power = 23;
    if (has_members_avg_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->members_avg_power());
    }

    // required int32 total_result = 24;
    if (has_total_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_result());
    }

    // optional bool join_guild_battle = 30;
    if (has_join_guild_battle()) {
      total_size += 2 + 1;
    }

    // optional int32 turn_obtain_medal = 31;
    if (has_turn_obtain_medal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn_obtain_medal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Guild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Guild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Guild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Guild::MergeFrom(const Guild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_master_account_id()) {
      set_master_account_id(from.master_account_id());
    }
    if (from.has_master_name()) {
      set_master_name(from.master_name());
    }
    if (from.has_max_member_count()) {
      set_max_member_count(from.max_member_count());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_join_option()) {
      set_join_option(from.join_option());
    }
    if (from.has_mark_index()) {
      set_mark_index(from.mark_index());
    }
    if (from.has_mark_color()) {
      set_mark_color(from.mark_color());
    }
    if (from.has_mark_bg_index()) {
      set_mark_bg_index(from.mark_bg_index());
    }
    if (from.has_mark_bg_color()) {
      set_mark_bg_color(from.mark_bg_color());
    }
    if (from.has_cur_member_count()) {
      set_cur_member_count(from.cur_member_count());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_master_elected_time()) {
      set_master_elected_time(from.master_elected_time());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_season_obtain_medal()) {
      set_season_obtain_medal(from.season_obtain_medal());
    }
    if (from.has_season_ranking()) {
      set_season_ranking(from.season_ranking());
    }
    if (from.has_season_ranking_total()) {
      set_season_ranking_total(from.season_ranking_total());
    }
    if (from.has_members_avg_power()) {
      set_members_avg_power(from.members_avg_power());
    }
    if (from.has_total_result()) {
      set_total_result(from.total_result());
    }
    if (from.has_join_guild_battle()) {
      set_join_guild_battle(from.join_guild_battle());
    }
    if (from.has_turn_obtain_medal()) {
      set_turn_obtain_medal(from.turn_obtain_medal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Guild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Guild::CopyFrom(const Guild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Guild::IsInitialized() const {
  if ((_has_bits_[0] & 0x001f7fff) != 0x001f7fff) return false;

  return true;
}

void Guild::Swap(Guild* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(master_account_id_, other->master_account_id_);
    std::swap(master_name_, other->master_name_);
    std::swap(max_member_count_, other->max_member_count_);
    std::swap(notice_, other->notice_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(join_option_, other->join_option_);
    std::swap(mark_index_, other->mark_index_);
    std::swap(mark_color_, other->mark_color_);
    std::swap(mark_bg_index_, other->mark_bg_index_);
    std::swap(mark_bg_color_, other->mark_bg_color_);
    std::swap(cur_member_count_, other->cur_member_count_);
    std::swap(create_time_, other->create_time_);
    std::swap(master_elected_time_, other->master_elected_time_);
    std::swap(season_obtain_medal_, other->season_obtain_medal_);
    std::swap(season_ranking_, other->season_ranking_);
    std::swap(season_ranking_total_, other->season_ranking_total_);
    std::swap(members_avg_power_, other->members_avg_power_);
    std::swap(total_result_, other->total_result_);
    std::swap(join_guild_battle_, other->join_guild_battle_);
    std::swap(turn_obtain_medal_, other->turn_obtain_medal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Guild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Guild_descriptor_;
  metadata.reflection = Guild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRanking::kRankingFieldNumber;
const int GuildRanking::kGuildIdFieldNumber;
const int GuildRanking::kGuildNameFieldNumber;
const int GuildRanking::kTotalObtainMedalFieldNumber;
const int GuildRanking::kTotalResultFieldNumber;
const int GuildRanking::kMembersAvgPowerFieldNumber;
const int GuildRanking::kCreateTimeFieldNumber;
const int GuildRanking::kMarkFieldNumber;
const int GuildRanking::kMarkColorFieldNumber;
const int GuildRanking::kMarkBgFieldNumber;
const int GuildRanking::kMarkBgColorFieldNumber;
const int GuildRanking::kGmNicknameFieldNumber;
const int GuildRanking::kMaxMemberCountFieldNumber;
const int GuildRanking::kCurMemberCountFieldNumber;
const int GuildRanking::kLevelFieldNumber;
const int GuildRanking::kExpFieldNumber;
#endif  // !_MSC_VER

GuildRanking::GuildRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildRanking)
}

void GuildRanking::InitAsDefaultInstance() {
}

GuildRanking::GuildRanking(const GuildRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildRanking)
}

void GuildRanking::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ranking_ = 0;
  guild_id_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_obtain_medal_ = 0;
  total_result_ = 0;
  members_avg_power_ = 0;
  create_time_ = GOOGLE_LONGLONG(0);
  mark_ = 0;
  mark_color_ = 0;
  mark_bg_ = 0;
  mark_bg_color_ = 0;
  gm_nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  max_member_count_ = 0;
  cur_member_count_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRanking::~GuildRanking() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildRanking)
  SharedDtor();
}

void GuildRanking::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (gm_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gm_nickname_;
  }
  if (this != default_instance_) {
  }
}

void GuildRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRanking_descriptor_;
}

const GuildRanking& GuildRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildRanking* GuildRanking::default_instance_ = NULL;

GuildRanking* GuildRanking::New() const {
  return new GuildRanking;
}

void GuildRanking::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildRanking*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guild_id_, total_obtain_medal_);
    ZR_(total_result_, mark_);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(mark_color_, mark_bg_color_);
    ZR_(max_member_count_, exp_);
    if (has_gm_nickname()) {
      if (gm_nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        gm_nickname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildRanking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ranking = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guild_id;
        break;
      }

      // required int64 guild_id = 2;
      case 2: {
        if (tag == 16) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 3;
      case 3: {
        if (tag == 26) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_total_obtain_medal;
        break;
      }

      // required int32 total_obtain_medal = 4;
      case 4: {
        if (tag == 32) {
         parse_total_obtain_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_obtain_medal_)));
          set_has_total_obtain_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_result;
        break;
      }

      // required int32 total_result = 5;
      case 5: {
        if (tag == 40) {
         parse_total_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_result_)));
          set_has_total_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_members_avg_power;
        break;
      }

      // required int32 members_avg_power = 6;
      case 6: {
        if (tag == 48) {
         parse_members_avg_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &members_avg_power_)));
          set_has_members_avg_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // required int64 create_time = 7;
      case 7: {
        if (tag == 56) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mark;
        break;
      }

      // required int32 mark = 10;
      case 10: {
        if (tag == 80) {
         parse_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_)));
          set_has_mark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mark_color;
        break;
      }

      // required int32 mark_color = 11;
      case 11: {
        if (tag == 88) {
         parse_mark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_color_)));
          set_has_mark_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mark_bg;
        break;
      }

      // required int32 mark_bg = 12;
      case 12: {
        if (tag == 96) {
         parse_mark_bg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_)));
          set_has_mark_bg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mark_bg_color;
        break;
      }

      // required int32 mark_bg_color = 13;
      case 13: {
        if (tag == 104) {
         parse_mark_bg_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_color_)));
          set_has_mark_bg_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_gm_nickname;
        break;
      }

      // required string gm_nickname = 14;
      case 14: {
        if (tag == 114) {
         parse_gm_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gm_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gm_nickname().data(), this->gm_nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gm_nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_max_member_count;
        break;
      }

      // required int32 max_member_count = 15;
      case 15: {
        if (tag == 120) {
         parse_max_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_member_count_)));
          set_has_max_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_cur_member_count;
        break;
      }

      // required int32 cur_member_count = 16;
      case 16: {
        if (tag == 128) {
         parse_cur_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_member_count_)));
          set_has_cur_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_level;
        break;
      }

      // required int32 level = 17;
      case 17: {
        if (tag == 136) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_exp;
        break;
      }

      // required int32 exp = 18;
      case 18: {
        if (tag == 144) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildRanking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildRanking)
  return false;
#undef DO_
}

void GuildRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildRanking)
  // required int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // required int64 guild_id = 2;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->guild_id(), output);
  }

  // required string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guild_name(), output);
  }

  // required int32 total_obtain_medal = 4;
  if (has_total_obtain_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->total_obtain_medal(), output);
  }

  // required int32 total_result = 5;
  if (has_total_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_result(), output);
  }

  // required int32 members_avg_power = 6;
  if (has_members_avg_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->members_avg_power(), output);
  }

  // required int64 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->create_time(), output);
  }

  // required int32 mark = 10;
  if (has_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mark(), output);
  }

  // required int32 mark_color = 11;
  if (has_mark_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mark_color(), output);
  }

  // required int32 mark_bg = 12;
  if (has_mark_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mark_bg(), output);
  }

  // required int32 mark_bg_color = 13;
  if (has_mark_bg_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mark_bg_color(), output);
  }

  // required string gm_nickname = 14;
  if (has_gm_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gm_nickname().data(), this->gm_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gm_nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->gm_nickname(), output);
  }

  // required int32 max_member_count = 15;
  if (has_max_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->max_member_count(), output);
  }

  // required int32 cur_member_count = 16;
  if (has_cur_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->cur_member_count(), output);
  }

  // required int32 level = 17;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->level(), output);
  }

  // required int32 exp = 18;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildRanking)
}

::google::protobuf::uint8* GuildRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildRanking)
  // required int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // required int64 guild_id = 2;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->guild_id(), target);
  }

  // required string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }

  // required int32 total_obtain_medal = 4;
  if (has_total_obtain_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->total_obtain_medal(), target);
  }

  // required int32 total_result = 5;
  if (has_total_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_result(), target);
  }

  // required int32 members_avg_power = 6;
  if (has_members_avg_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->members_avg_power(), target);
  }

  // required int64 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->create_time(), target);
  }

  // required int32 mark = 10;
  if (has_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mark(), target);
  }

  // required int32 mark_color = 11;
  if (has_mark_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mark_color(), target);
  }

  // required int32 mark_bg = 12;
  if (has_mark_bg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mark_bg(), target);
  }

  // required int32 mark_bg_color = 13;
  if (has_mark_bg_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mark_bg_color(), target);
  }

  // required string gm_nickname = 14;
  if (has_gm_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gm_nickname().data(), this->gm_nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gm_nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->gm_nickname(), target);
  }

  // required int32 max_member_count = 15;
  if (has_max_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->max_member_count(), target);
  }

  // required int32 cur_member_count = 16;
  if (has_cur_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->cur_member_count(), target);
  }

  // required int32 level = 17;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->level(), target);
  }

  // required int32 exp = 18;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildRanking)
  return target;
}

int GuildRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int64 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

    // required string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // required int32 total_obtain_medal = 4;
    if (has_total_obtain_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_obtain_medal());
    }

    // required int32 total_result = 5;
    if (has_total_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_result());
    }

    // required int32 members_avg_power = 6;
    if (has_members_avg_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->members_avg_power());
    }

    // required int64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->create_time());
    }

    // required int32 mark = 10;
    if (has_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 mark_color = 11;
    if (has_mark_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_color());
    }

    // required int32 mark_bg = 12;
    if (has_mark_bg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg());
    }

    // required int32 mark_bg_color = 13;
    if (has_mark_bg_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_color());
    }

    // required string gm_nickname = 14;
    if (has_gm_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gm_nickname());
    }

    // required int32 max_member_count = 15;
    if (has_max_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_member_count());
    }

    // required int32 cur_member_count = 16;
    if (has_cur_member_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_member_count());
    }

    // required int32 level = 17;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 18;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRanking::MergeFrom(const GuildRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_total_obtain_medal()) {
      set_total_obtain_medal(from.total_obtain_medal());
    }
    if (from.has_total_result()) {
      set_total_result(from.total_result());
    }
    if (from.has_members_avg_power()) {
      set_members_avg_power(from.members_avg_power());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_mark()) {
      set_mark(from.mark());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mark_color()) {
      set_mark_color(from.mark_color());
    }
    if (from.has_mark_bg()) {
      set_mark_bg(from.mark_bg());
    }
    if (from.has_mark_bg_color()) {
      set_mark_bg_color(from.mark_bg_color());
    }
    if (from.has_gm_nickname()) {
      set_gm_nickname(from.gm_nickname());
    }
    if (from.has_max_member_count()) {
      set_max_member_count(from.max_member_count());
    }
    if (from.has_cur_member_count()) {
      set_cur_member_count(from.cur_member_count());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRanking::CopyFrom(const GuildRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GuildRanking::Swap(GuildRanking* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(total_obtain_medal_, other->total_obtain_medal_);
    std::swap(total_result_, other->total_result_);
    std::swap(members_avg_power_, other->members_avg_power_);
    std::swap(create_time_, other->create_time_);
    std::swap(mark_, other->mark_);
    std::swap(mark_color_, other->mark_color_);
    std::swap(mark_bg_, other->mark_bg_);
    std::swap(mark_bg_color_, other->mark_bg_color_);
    std::swap(gm_nickname_, other->gm_nickname_);
    std::swap(max_member_count_, other->max_member_count_);
    std::swap(cur_member_count_, other->cur_member_count_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRanking_descriptor_;
  metadata.reflection = GuildRanking_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuildMember_Rank_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMember_Rank_descriptor_;
}
bool GuildMember_Rank_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuildMember_Rank GuildMember::MASTER;
const GuildMember_Rank GuildMember::SUB_MASTER;
const GuildMember_Rank GuildMember::NORMAL;
const GuildMember_Rank GuildMember::Rank_MIN;
const GuildMember_Rank GuildMember::Rank_MAX;
const int GuildMember::Rank_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuildMember::kGuildIdFieldNumber;
const int GuildMember::kContributionFieldNumber;
const int GuildMember::kRankFieldNumber;
const int GuildMember::kCharacterSummaryFieldNumber;
const int GuildMember::kLastLogoutTimeFieldNumber;
const int GuildMember::kTotalSupportCountFieldNumber;
const int GuildMember::kTodaySupportCountFieldNumber;
const int GuildMember::kTotalDonationCountFieldNumber;
const int GuildMember::kTodayDonationCountFieldNumber;
const int GuildMember::kRaidPenaltyRemoveTimeFieldNumber;
#endif  // !_MSC_VER

GuildMember::GuildMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildMember)
}

void GuildMember::InitAsDefaultInstance() {
  character_summary_ = const_cast< ::b2::protocol::commondata::CharacterSummary*>(&::b2::protocol::commondata::CharacterSummary::default_instance());
}

GuildMember::GuildMember(const GuildMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildMember)
}

void GuildMember::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = GOOGLE_LONGLONG(0);
  contribution_ = 0;
  rank_ = 1;
  character_summary_ = NULL;
  last_logout_time_ = GOOGLE_LONGLONG(0);
  total_support_count_ = 0;
  today_support_count_ = 0;
  total_donation_count_ = 0;
  today_donation_count_ = 0;
  raid_penalty_remove_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMember::~GuildMember() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildMember)
  SharedDtor();
}

void GuildMember::SharedDtor() {
  if (this != default_instance_) {
    delete character_summary_;
  }
}

void GuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMember_descriptor_;
}

const GuildMember& GuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildMember* GuildMember::default_instance_ = NULL;

GuildMember* GuildMember::New() const {
  return new GuildMember;
}

void GuildMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(guild_id_, contribution_);
    ZR_(last_logout_time_, total_donation_count_);
    rank_ = 1;
    if (has_character_summary()) {
      if (character_summary_ != NULL) character_summary_->::b2::protocol::commondata::CharacterSummary::Clear();
    }
  }
  ZR_(today_donation_count_, raid_penalty_remove_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contribution;
        break;
      }

      // required int32 contribution = 2;
      case 2: {
        if (tag == 16) {
         parse_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribution_)));
          set_has_contribution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required .b2.protocol.commondata.GuildMember.Rank rank = 3;
      case 3: {
        if (tag == 24) {
         parse_rank:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GuildMember_Rank_IsValid(value)) {
            set_rank(static_cast< ::b2::protocol::commondata::GuildMember_Rank >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_character_summary;
        break;
      }

      // required .b2.protocol.commondata.CharacterSummary character_summary = 4;
      case 4: {
        if (tag == 34) {
         parse_character_summary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_summary()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_last_logout_time;
        break;
      }

      // required int64 last_logout_time = 5;
      case 5: {
        if (tag == 40) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_total_support_count;
        break;
      }

      // required int32 total_support_count = 10;
      case 10: {
        if (tag == 80) {
         parse_total_support_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_support_count_)));
          set_has_total_support_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_today_support_count;
        break;
      }

      // required int32 today_support_count = 11;
      case 11: {
        if (tag == 88) {
         parse_today_support_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_support_count_)));
          set_has_today_support_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_total_donation_count;
        break;
      }

      // required int32 total_donation_count = 12;
      case 12: {
        if (tag == 96) {
         parse_total_donation_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_donation_count_)));
          set_has_total_donation_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_today_donation_count;
        break;
      }

      // required int32 today_donation_count = 13;
      case 13: {
        if (tag == 104) {
         parse_today_donation_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &today_donation_count_)));
          set_has_today_donation_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_raid_penalty_remove_time;
        break;
      }

      // required int64 raid_penalty_remove_time = 14;
      case 14: {
        if (tag == 112) {
         parse_raid_penalty_remove_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raid_penalty_remove_time_)));
          set_has_raid_penalty_remove_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildMember)
  return false;
#undef DO_
}

void GuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildMember)
  // required int64 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guild_id(), output);
  }

  // required int32 contribution = 2;
  if (has_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contribution(), output);
  }

  // required .b2.protocol.commondata.GuildMember.Rank rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->rank(), output);
  }

  // required .b2.protocol.commondata.CharacterSummary character_summary = 4;
  if (has_character_summary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->character_summary(), output);
  }

  // required int64 last_logout_time = 5;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->last_logout_time(), output);
  }

  // required int32 total_support_count = 10;
  if (has_total_support_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->total_support_count(), output);
  }

  // required int32 today_support_count = 11;
  if (has_today_support_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->today_support_count(), output);
  }

  // required int32 total_donation_count = 12;
  if (has_total_donation_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_donation_count(), output);
  }

  // required int32 today_donation_count = 13;
  if (has_today_donation_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->today_donation_count(), output);
  }

  // required int64 raid_penalty_remove_time = 14;
  if (has_raid_penalty_remove_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->raid_penalty_remove_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildMember)
}

::google::protobuf::uint8* GuildMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildMember)
  // required int64 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guild_id(), target);
  }

  // required int32 contribution = 2;
  if (has_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contribution(), target);
  }

  // required .b2.protocol.commondata.GuildMember.Rank rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->rank(), target);
  }

  // required .b2.protocol.commondata.CharacterSummary character_summary = 4;
  if (has_character_summary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->character_summary(), target);
  }

  // required int64 last_logout_time = 5;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->last_logout_time(), target);
  }

  // required int32 total_support_count = 10;
  if (has_total_support_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->total_support_count(), target);
  }

  // required int32 today_support_count = 11;
  if (has_today_support_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->today_support_count(), target);
  }

  // required int32 total_donation_count = 12;
  if (has_total_donation_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_donation_count(), target);
  }

  // required int32 today_donation_count = 13;
  if (has_today_donation_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->today_donation_count(), target);
  }

  // required int64 raid_penalty_remove_time = 14;
  if (has_raid_penalty_remove_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->raid_penalty_remove_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildMember)
  return target;
}

int GuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

    // required int32 contribution = 2;
    if (has_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribution());
    }

    // required .b2.protocol.commondata.GuildMember.Rank rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rank());
    }

    // required .b2.protocol.commondata.CharacterSummary character_summary = 4;
    if (has_character_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character_summary());
    }

    // required int64 last_logout_time = 5;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_logout_time());
    }

    // required int32 total_support_count = 10;
    if (has_total_support_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_support_count());
    }

    // required int32 today_support_count = 11;
    if (has_today_support_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_support_count());
    }

    // required int32 total_donation_count = 12;
    if (has_total_donation_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_donation_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 today_donation_count = 13;
    if (has_today_donation_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->today_donation_count());
    }

    // required int64 raid_penalty_remove_time = 14;
    if (has_raid_penalty_remove_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raid_penalty_remove_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMember::MergeFrom(const GuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_contribution()) {
      set_contribution(from.contribution());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_character_summary()) {
      mutable_character_summary()->::b2::protocol::commondata::CharacterSummary::MergeFrom(from.character_summary());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_total_support_count()) {
      set_total_support_count(from.total_support_count());
    }
    if (from.has_today_support_count()) {
      set_today_support_count(from.today_support_count());
    }
    if (from.has_total_donation_count()) {
      set_total_donation_count(from.total_donation_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_today_donation_count()) {
      set_today_donation_count(from.today_donation_count());
    }
    if (from.has_raid_penalty_remove_time()) {
      set_raid_penalty_remove_time(from.raid_penalty_remove_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMember::CopyFrom(const GuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (has_character_summary()) {
    if (!this->character_summary().IsInitialized()) return false;
  }
  return true;
}

void GuildMember::Swap(GuildMember* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(contribution_, other->contribution_);
    std::swap(rank_, other->rank_);
    std::swap(character_summary_, other->character_summary_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(total_support_count_, other->total_support_count_);
    std::swap(today_support_count_, other->today_support_count_);
    std::swap(total_donation_count_, other->total_donation_count_);
    std::swap(today_donation_count_, other->today_donation_count_);
    std::swap(raid_penalty_remove_time_, other->raid_penalty_remove_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMember_descriptor_;
  metadata.reflection = GuildMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberCandidate::kAccountIdFieldNumber;
const int GuildMemberCandidate::kInviteStateFieldNumber;
#endif  // !_MSC_VER

GuildMemberCandidate::GuildMemberCandidate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildMemberCandidate)
}

void GuildMemberCandidate::InitAsDefaultInstance() {
}

GuildMemberCandidate::GuildMemberCandidate(const GuildMemberCandidate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildMemberCandidate)
}

void GuildMemberCandidate::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  invite_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberCandidate::~GuildMemberCandidate() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildMemberCandidate)
  SharedDtor();
}

void GuildMemberCandidate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMemberCandidate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberCandidate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberCandidate_descriptor_;
}

const GuildMemberCandidate& GuildMemberCandidate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildMemberCandidate* GuildMemberCandidate::default_instance_ = NULL;

GuildMemberCandidate* GuildMemberCandidate::New() const {
  return new GuildMemberCandidate;
}

void GuildMemberCandidate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMemberCandidate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(account_id_, invite_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberCandidate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildMemberCandidate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_invite_state;
        break;
      }

      // required .b2.protocol.commondata.Guild.InviteState invite_state = 2;
      case 2: {
        if (tag == 16) {
         parse_invite_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Guild_InviteState_IsValid(value)) {
            set_invite_state(static_cast< ::b2::protocol::commondata::Guild_InviteState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildMemberCandidate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildMemberCandidate)
  return false;
#undef DO_
}

void GuildMemberCandidate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildMemberCandidate)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required .b2.protocol.commondata.Guild.InviteState invite_state = 2;
  if (has_invite_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->invite_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildMemberCandidate)
}

::google::protobuf::uint8* GuildMemberCandidate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildMemberCandidate)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required .b2.protocol.commondata.Guild.InviteState invite_state = 2;
  if (has_invite_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->invite_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildMemberCandidate)
  return target;
}

int GuildMemberCandidate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required .b2.protocol.commondata.Guild.InviteState invite_state = 2;
    if (has_invite_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->invite_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberCandidate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberCandidate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberCandidate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberCandidate::MergeFrom(const GuildMemberCandidate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_invite_state()) {
      set_invite_state(from.invite_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberCandidate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberCandidate::CopyFrom(const GuildMemberCandidate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberCandidate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildMemberCandidate::Swap(GuildMemberCandidate* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(invite_state_, other->invite_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberCandidate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberCandidate_descriptor_;
  metadata.reflection = GuildMemberCandidate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BattleFormation_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFormation_TYPE_descriptor_;
}
bool BattleFormation_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleFormation_TYPE BattleFormation::NORMAL;
const BattleFormation_TYPE BattleFormation::OFFENSIVE;
const BattleFormation_TYPE BattleFormation::DEFENSIVE;
const BattleFormation_TYPE BattleFormation::TYPE_MIN;
const BattleFormation_TYPE BattleFormation::TYPE_MAX;
const int BattleFormation::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* BattleFormation_BuffType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFormation_BuffType_descriptor_;
}
bool BattleFormation_BuffType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BattleFormation_BuffType BattleFormation::NONE;
const BattleFormation_BuffType BattleFormation::INC_ATTACK;
const BattleFormation_BuffType BattleFormation::DEC_DAMAGE;
const BattleFormation_BuffType BattleFormation::BuffType_MIN;
const BattleFormation_BuffType BattleFormation::BuffType_MAX;
const int BattleFormation::BuffType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BattleFormation::kFormationTypeFieldNumber;
const int BattleFormation::kFormationLevelFieldNumber;
#endif  // !_MSC_VER

BattleFormation::BattleFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.BattleFormation)
}

void BattleFormation::InitAsDefaultInstance() {
}

BattleFormation::BattleFormation(const BattleFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.BattleFormation)
}

void BattleFormation::SharedCtor() {
  _cached_size_ = 0;
  formation_type_ = 1;
  formation_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFormation::~BattleFormation() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.BattleFormation)
  SharedDtor();
}

void BattleFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFormation_descriptor_;
}

const BattleFormation& BattleFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

BattleFormation* BattleFormation::default_instance_ = NULL;

BattleFormation* BattleFormation::New() const {
  return new BattleFormation;
}

void BattleFormation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    formation_type_ = 1;
    formation_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.BattleFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::BattleFormation_TYPE_IsValid(value)) {
            set_formation_type(static_cast< ::b2::protocol::commondata::BattleFormation_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_formation_level;
        break;
      }

      // required int32 formation_level = 2;
      case 2: {
        if (tag == 16) {
         parse_formation_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formation_level_)));
          set_has_formation_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.BattleFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.BattleFormation)
  return false;
#undef DO_
}

void BattleFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.BattleFormation)
  // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->formation_type(), output);
  }

  // required int32 formation_level = 2;
  if (has_formation_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->formation_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.BattleFormation)
}

::google::protobuf::uint8* BattleFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.BattleFormation)
  // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->formation_type(), target);
  }

  // required int32 formation_level = 2;
  if (has_formation_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->formation_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.BattleFormation)
  return target;
}

int BattleFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

    // required int32 formation_level = 2;
    if (has_formation_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formation_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleFormation::MergeFrom(const BattleFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
    if (from.has_formation_level()) {
      set_formation_level(from.formation_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFormation::CopyFrom(const BattleFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFormation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BattleFormation::Swap(BattleFormation* other) {
  if (other != this) {
    std::swap(formation_type_, other->formation_type_);
    std::swap(formation_level_, other->formation_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFormation_descriptor_;
  metadata.reflection = BattleFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleFormationBuff::kIdFieldNumber;
const int BattleFormationBuff::kBuffType1FieldNumber;
const int BattleFormationBuff::kBuffValue1FieldNumber;
const int BattleFormationBuff::kBuffType2FieldNumber;
const int BattleFormationBuff::kBuffValue2FieldNumber;
#endif  // !_MSC_VER

BattleFormationBuff::BattleFormationBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.BattleFormationBuff)
}

void BattleFormationBuff::InitAsDefaultInstance() {
}

BattleFormationBuff::BattleFormationBuff(const BattleFormationBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.BattleFormationBuff)
}

void BattleFormationBuff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buff_type1_ = 0;
  buff_value1_ = 0;
  buff_type2_ = 0;
  buff_value2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleFormationBuff::~BattleFormationBuff() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.BattleFormationBuff)
  SharedDtor();
}

void BattleFormationBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleFormationBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleFormationBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleFormationBuff_descriptor_;
}

const BattleFormationBuff& BattleFormationBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

BattleFormationBuff* BattleFormationBuff::default_instance_ = NULL;

BattleFormationBuff* BattleFormationBuff::New() const {
  return new BattleFormationBuff;
}

void BattleFormationBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleFormationBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, buff_value2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleFormationBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.BattleFormationBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_buff_type1;
        break;
      }

      // required .b2.protocol.commondata.BattleFormation.BuffType buff_type1 = 10;
      case 10: {
        if (tag == 80) {
         parse_buff_type1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::BattleFormation_BuffType_IsValid(value)) {
            set_buff_type1(static_cast< ::b2::protocol::commondata::BattleFormation_BuffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_buff_value1;
        break;
      }

      // required float buff_value1 = 11;
      case 11: {
        if (tag == 93) {
         parse_buff_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buff_value1_)));
          set_has_buff_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_buff_type2;
        break;
      }

      // required .b2.protocol.commondata.BattleFormation.BuffType buff_type2 = 12;
      case 12: {
        if (tag == 96) {
         parse_buff_type2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::BattleFormation_BuffType_IsValid(value)) {
            set_buff_type2(static_cast< ::b2::protocol::commondata::BattleFormation_BuffType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_buff_value2;
        break;
      }

      // required float buff_value2 = 13;
      case 13: {
        if (tag == 109) {
         parse_buff_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buff_value2_)));
          set_has_buff_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.BattleFormationBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.BattleFormationBuff)
  return false;
#undef DO_
}

void BattleFormationBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.BattleFormationBuff)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .b2.protocol.commondata.BattleFormation.BuffType buff_type1 = 10;
  if (has_buff_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->buff_type1(), output);
  }

  // required float buff_value1 = 11;
  if (has_buff_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->buff_value1(), output);
  }

  // required .b2.protocol.commondata.BattleFormation.BuffType buff_type2 = 12;
  if (has_buff_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->buff_type2(), output);
  }

  // required float buff_value2 = 13;
  if (has_buff_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->buff_value2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.BattleFormationBuff)
}

::google::protobuf::uint8* BattleFormationBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.BattleFormationBuff)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .b2.protocol.commondata.BattleFormation.BuffType buff_type1 = 10;
  if (has_buff_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->buff_type1(), target);
  }

  // required float buff_value1 = 11;
  if (has_buff_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->buff_value1(), target);
  }

  // required .b2.protocol.commondata.BattleFormation.BuffType buff_type2 = 12;
  if (has_buff_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->buff_type2(), target);
  }

  // required float buff_value2 = 13;
  if (has_buff_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->buff_value2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.BattleFormationBuff)
  return target;
}

int BattleFormationBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required .b2.protocol.commondata.BattleFormation.BuffType buff_type1 = 10;
    if (has_buff_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buff_type1());
    }

    // required float buff_value1 = 11;
    if (has_buff_value1()) {
      total_size += 1 + 4;
    }

    // required .b2.protocol.commondata.BattleFormation.BuffType buff_type2 = 12;
    if (has_buff_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buff_type2());
    }

    // required float buff_value2 = 13;
    if (has_buff_value2()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleFormationBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleFormationBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleFormationBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleFormationBuff::MergeFrom(const BattleFormationBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buff_type1()) {
      set_buff_type1(from.buff_type1());
    }
    if (from.has_buff_value1()) {
      set_buff_value1(from.buff_value1());
    }
    if (from.has_buff_type2()) {
      set_buff_type2(from.buff_type2());
    }
    if (from.has_buff_value2()) {
      set_buff_value2(from.buff_value2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleFormationBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleFormationBuff::CopyFrom(const BattleFormationBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleFormationBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BattleFormationBuff::Swap(BattleFormationBuff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buff_type1_, other->buff_type1_);
    std::swap(buff_value1_, other->buff_value1_);
    std::swap(buff_type2_, other->buff_type2_);
    std::swap(buff_value2_, other->buff_value2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleFormationBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleFormationBuff_descriptor_;
  metadata.reflection = BattleFormationBuff_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuildBattleEntry_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleEntry_TYPE_descriptor_;
}
bool GuildBattleEntry_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuildBattleEntry_TYPE GuildBattleEntry::CHARACTER;
const GuildBattleEntry_TYPE GuildBattleEntry::MERCENARY;
const GuildBattleEntry_TYPE GuildBattleEntry::TYPE_MIN;
const GuildBattleEntry_TYPE GuildBattleEntry::TYPE_MAX;
const int GuildBattleEntry::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuildBattleEntry_SlotData::kSlotNumFieldNumber;
const int GuildBattleEntry_SlotData::kEntryCodeFieldNumber;
const int GuildBattleEntry_SlotData::kEntryTypeFieldNumber;
const int GuildBattleEntry_SlotData::kLevelFieldNumber;
#endif  // !_MSC_VER

GuildBattleEntry_SlotData::GuildBattleEntry_SlotData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildBattleEntry.SlotData)
}

void GuildBattleEntry_SlotData::InitAsDefaultInstance() {
}

GuildBattleEntry_SlotData::GuildBattleEntry_SlotData(const GuildBattleEntry_SlotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildBattleEntry.SlotData)
}

void GuildBattleEntry_SlotData::SharedCtor() {
  _cached_size_ = 0;
  slot_num_ = 0;
  entry_code_ = 0;
  entry_type_ = 1;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleEntry_SlotData::~GuildBattleEntry_SlotData() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildBattleEntry.SlotData)
  SharedDtor();
}

void GuildBattleEntry_SlotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleEntry_SlotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleEntry_SlotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleEntry_SlotData_descriptor_;
}

const GuildBattleEntry_SlotData& GuildBattleEntry_SlotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildBattleEntry_SlotData* GuildBattleEntry_SlotData::default_instance_ = NULL;

GuildBattleEntry_SlotData* GuildBattleEntry_SlotData::New() const {
  return new GuildBattleEntry_SlotData;
}

void GuildBattleEntry_SlotData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildBattleEntry_SlotData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(slot_num_, entry_code_);
    entry_type_ = 1;
    level_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBattleEntry_SlotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildBattleEntry.SlotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 slot_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_num_)));
          set_has_slot_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entry_code;
        break;
      }

      // required int32 entry_code = 2;
      case 2: {
        if (tag == 16) {
         parse_entry_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entry_code_)));
          set_has_entry_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_entry_type;
        break;
      }

      // optional .b2.protocol.commondata.GuildBattleEntry.TYPE entry_type = 10;
      case 10: {
        if (tag == 80) {
         parse_entry_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GuildBattleEntry_TYPE_IsValid(value)) {
            set_entry_type(static_cast< ::b2::protocol::commondata::GuildBattleEntry_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }

      // optional int32 level = 11;
      case 11: {
        if (tag == 88) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildBattleEntry.SlotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildBattleEntry.SlotData)
  return false;
#undef DO_
}

void GuildBattleEntry_SlotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildBattleEntry.SlotData)
  // required int32 slot_num = 1;
  if (has_slot_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_num(), output);
  }

  // required int32 entry_code = 2;
  if (has_entry_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entry_code(), output);
  }

  // optional .b2.protocol.commondata.GuildBattleEntry.TYPE entry_type = 10;
  if (has_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->entry_type(), output);
  }

  // optional int32 level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildBattleEntry.SlotData)
}

::google::protobuf::uint8* GuildBattleEntry_SlotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildBattleEntry.SlotData)
  // required int32 slot_num = 1;
  if (has_slot_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_num(), target);
  }

  // required int32 entry_code = 2;
  if (has_entry_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entry_code(), target);
  }

  // optional .b2.protocol.commondata.GuildBattleEntry.TYPE entry_type = 10;
  if (has_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->entry_type(), target);
  }

  // optional int32 level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildBattleEntry.SlotData)
  return target;
}

int GuildBattleEntry_SlotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 slot_num = 1;
    if (has_slot_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_num());
    }

    // required int32 entry_code = 2;
    if (has_entry_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entry_code());
    }

    // optional .b2.protocol.commondata.GuildBattleEntry.TYPE entry_type = 10;
    if (has_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
    }

    // optional int32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleEntry_SlotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleEntry_SlotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleEntry_SlotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBattleEntry_SlotData::MergeFrom(const GuildBattleEntry_SlotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_num()) {
      set_slot_num(from.slot_num());
    }
    if (from.has_entry_code()) {
      set_entry_code(from.entry_code());
    }
    if (from.has_entry_type()) {
      set_entry_type(from.entry_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBattleEntry_SlotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBattleEntry_SlotData::CopyFrom(const GuildBattleEntry_SlotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBattleEntry_SlotData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GuildBattleEntry_SlotData::Swap(GuildBattleEntry_SlotData* other) {
  if (other != this) {
    std::swap(slot_num_, other->slot_num_);
    std::swap(entry_code_, other->entry_code_);
    std::swap(entry_type_, other->entry_type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBattleEntry_SlotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleEntry_SlotData_descriptor_;
  metadata.reflection = GuildBattleEntry_SlotData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GuildBattleEntry::kSlotsFieldNumber;
#endif  // !_MSC_VER

GuildBattleEntry::GuildBattleEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildBattleEntry)
}

void GuildBattleEntry::InitAsDefaultInstance() {
}

GuildBattleEntry::GuildBattleEntry(const GuildBattleEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildBattleEntry)
}

void GuildBattleEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleEntry::~GuildBattleEntry() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildBattleEntry)
  SharedDtor();
}

void GuildBattleEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleEntry_descriptor_;
}

const GuildBattleEntry& GuildBattleEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildBattleEntry* GuildBattleEntry::default_instance_ = NULL;

GuildBattleEntry* GuildBattleEntry::New() const {
  return new GuildBattleEntry;
}

void GuildBattleEntry::Clear() {
  slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBattleEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildBattleEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .b2.protocol.commondata.GuildBattleEntry.SlotData slots = 3;
      case 3: {
        if (tag == 26) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildBattleEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildBattleEntry)
  return false;
#undef DO_
}

void GuildBattleEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildBattleEntry)
  // repeated .b2.protocol.commondata.GuildBattleEntry.SlotData slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildBattleEntry)
}

::google::protobuf::uint8* GuildBattleEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildBattleEntry)
  // repeated .b2.protocol.commondata.GuildBattleEntry.SlotData slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildBattleEntry)
  return target;
}

int GuildBattleEntry::ByteSize() const {
  int total_size = 0;

  // repeated .b2.protocol.commondata.GuildBattleEntry.SlotData slots = 3;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBattleEntry::MergeFrom(const GuildBattleEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBattleEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBattleEntry::CopyFrom(const GuildBattleEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBattleEntry::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->slots())) return false;
  return true;
}

void GuildBattleEntry::Swap(GuildBattleEntry* other) {
  if (other != this) {
    slots_.Swap(&other->slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBattleEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleEntry_descriptor_;
  metadata.reflection = GuildBattleEntry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuildBattleResult_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleResult_TYPE_descriptor_;
}
bool GuildBattleResult_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 1000:
    case 1000000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuildBattleResult_TYPE GuildBattleResult::LOSE;
const GuildBattleResult_TYPE GuildBattleResult::DRAW;
const GuildBattleResult_TYPE GuildBattleResult::WIN;
const GuildBattleResult_TYPE GuildBattleResult::TYPE_MIN;
const GuildBattleResult_TYPE GuildBattleResult::TYPE_MAX;
const int GuildBattleResult::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

GuildBattleResult::GuildBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildBattleResult)
}

void GuildBattleResult::InitAsDefaultInstance() {
}

GuildBattleResult::GuildBattleResult(const GuildBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildBattleResult)
}

void GuildBattleResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleResult::~GuildBattleResult() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildBattleResult)
  SharedDtor();
}

void GuildBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleResult_descriptor_;
}

const GuildBattleResult& GuildBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildBattleResult* GuildBattleResult::default_instance_ = NULL;

GuildBattleResult* GuildBattleResult::New() const {
  return new GuildBattleResult;
}

void GuildBattleResult::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildBattleResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildBattleResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildBattleResult)
  return false;
#undef DO_
}

void GuildBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildBattleResult)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildBattleResult)
}

::google::protobuf::uint8* GuildBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildBattleResult)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildBattleResult)
  return target;
}

int GuildBattleResult::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBattleResult::MergeFrom(const GuildBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBattleResult::CopyFrom(const GuildBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBattleResult::IsInitialized() const {

  return true;
}

void GuildBattleResult::Swap(GuildBattleResult* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleResult_descriptor_;
  metadata.reflection = GuildBattleResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GuildBattleState_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleState_TYPE_descriptor_;
}
bool GuildBattleState_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GuildBattleState_TYPE GuildBattleState::NONE;
const GuildBattleState_TYPE GuildBattleState::INIT;
const GuildBattleState_TYPE GuildBattleState::INITDONE;
const GuildBattleState_TYPE GuildBattleState::READY;
const GuildBattleState_TYPE GuildBattleState::MATCHING;
const GuildBattleState_TYPE GuildBattleState::MATCHINGDONE;
const GuildBattleState_TYPE GuildBattleState::BATTLE;
const GuildBattleState_TYPE GuildBattleState::SETTLEMENT;
const GuildBattleState_TYPE GuildBattleState::SETTLEMENTDONE;
const GuildBattleState_TYPE GuildBattleState::RESULT;
const GuildBattleState_TYPE GuildBattleState::TYPE_MIN;
const GuildBattleState_TYPE GuildBattleState::TYPE_MAX;
const int GuildBattleState::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GuildBattleState::kSeasonIdFieldNumber;
const int GuildBattleState::kTurnFieldNumber;
const int GuildBattleState::kCurrentStateFieldNumber;
const int GuildBattleState::kBeginTimeFieldNumber;
const int GuildBattleState::kEndTimeFieldNumber;
#endif  // !_MSC_VER

GuildBattleState::GuildBattleState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildBattleState)
}

void GuildBattleState::InitAsDefaultInstance() {
}

GuildBattleState::GuildBattleState(const GuildBattleState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildBattleState)
}

void GuildBattleState::SharedCtor() {
  _cached_size_ = 0;
  season_id_ = 0;
  turn_ = 0;
  current_state_ = 0;
  begin_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleState::~GuildBattleState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildBattleState)
  SharedDtor();
}

void GuildBattleState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleState_descriptor_;
}

const GuildBattleState& GuildBattleState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildBattleState* GuildBattleState::default_instance_ = NULL;

GuildBattleState* GuildBattleState::New() const {
  return new GuildBattleState;
}

void GuildBattleState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildBattleState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(season_id_, current_state_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBattleState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildBattleState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 season_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_id_)));
          set_has_season_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_turn;
        break;
      }

      // required int32 turn = 2;
      case 2: {
        if (tag == 16) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_current_state;
        break;
      }

      // required .b2.protocol.commondata.GuildBattleState.TYPE current_state = 3;
      case 3: {
        if (tag == 24) {
         parse_current_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GuildBattleState_TYPE_IsValid(value)) {
            set_current_state(static_cast< ::b2::protocol::commondata::GuildBattleState_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_begin_time;
        break;
      }

      // required int64 begin_time = 4;
      case 4: {
        if (tag == 32) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 5;
      case 5: {
        if (tag == 40) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildBattleState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildBattleState)
  return false;
#undef DO_
}

void GuildBattleState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildBattleState)
  // required int32 season_id = 1;
  if (has_season_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->season_id(), output);
  }

  // required int32 turn = 2;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->turn(), output);
  }

  // required .b2.protocol.commondata.GuildBattleState.TYPE current_state = 3;
  if (has_current_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->current_state(), output);
  }

  // required int64 begin_time = 4;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildBattleState)
}

::google::protobuf::uint8* GuildBattleState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildBattleState)
  // required int32 season_id = 1;
  if (has_season_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->season_id(), target);
  }

  // required int32 turn = 2;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->turn(), target);
  }

  // required .b2.protocol.commondata.GuildBattleState.TYPE current_state = 3;
  if (has_current_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->current_state(), target);
  }

  // required int64 begin_time = 4;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begin_time(), target);
  }

  // required int64 end_time = 5;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildBattleState)
  return target;
}

int GuildBattleState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 season_id = 1;
    if (has_season_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_id());
    }

    // required int32 turn = 2;
    if (has_turn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn());
    }

    // required .b2.protocol.commondata.GuildBattleState.TYPE current_state = 3;
    if (has_current_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_state());
    }

    // required int64 begin_time = 4;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin_time());
    }

    // required int64 end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBattleState::MergeFrom(const GuildBattleState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season_id()) {
      set_season_id(from.season_id());
    }
    if (from.has_turn()) {
      set_turn(from.turn());
    }
    if (from.has_current_state()) {
      set_current_state(from.current_state());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBattleState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBattleState::CopyFrom(const GuildBattleState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBattleState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuildBattleState::Swap(GuildBattleState* other) {
  if (other != this) {
    std::swap(season_id_, other->season_id_);
    std::swap(turn_, other->turn_);
    std::swap(current_state_, other->current_state_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBattleState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleState_descriptor_;
  metadata.reflection = GuildBattleState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleHistory::kObtainMedalFieldNumber;
const int GuildBattleHistory::kMedalTotalCountFieldNumber;
const int GuildBattleHistory::kResultFieldNumber;
const int GuildBattleHistory::kBattleEndTimeFieldNumber;
const int GuildBattleHistory::kMemberCountFieldNumber;
const int GuildBattleHistory::kAttackCountFieldNumber;
const int GuildBattleHistory::kTargetGuildIdFieldNumber;
const int GuildBattleHistory::kTargetGuildNameFieldNumber;
const int GuildBattleHistory::kTargetObtainMedalFieldNumber;
const int GuildBattleHistory::kTargetMarkFieldNumber;
const int GuildBattleHistory::kTargetMarkColorFieldNumber;
const int GuildBattleHistory::kTargetMarkBgFieldNumber;
const int GuildBattleHistory::kTargetMarkBgColorFieldNumber;
const int GuildBattleHistory::kTargetMedalTotalCountFieldNumber;
const int GuildBattleHistory::kTargetMemberCountFieldNumber;
const int GuildBattleHistory::kTargetAttackCountFieldNumber;
#endif  // !_MSC_VER

GuildBattleHistory::GuildBattleHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildBattleHistory)
}

void GuildBattleHistory::InitAsDefaultInstance() {
}

GuildBattleHistory::GuildBattleHistory(const GuildBattleHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildBattleHistory)
}

void GuildBattleHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  obtain_medal_ = 0;
  medal_total_count_ = 0;
  result_ = 1;
  battle_end_time_ = GOOGLE_LONGLONG(0);
  member_count_ = 0;
  attack_count_ = 0;
  target_guild_id_ = GOOGLE_LONGLONG(0);
  target_guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_obtain_medal_ = 0;
  target_mark_ = 0;
  target_mark_color_ = 0;
  target_mark_bg_ = 0;
  target_mark_bg_color_ = 0;
  target_medal_total_count_ = 0;
  target_member_count_ = 0;
  target_attack_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleHistory::~GuildBattleHistory() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildBattleHistory)
  SharedDtor();
}

void GuildBattleHistory::SharedDtor() {
  if (target_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete target_guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildBattleHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleHistory_descriptor_;
}

const GuildBattleHistory& GuildBattleHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildBattleHistory* GuildBattleHistory::default_instance_ = NULL;

GuildBattleHistory* GuildBattleHistory::New() const {
  return new GuildBattleHistory;
}

void GuildBattleHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildBattleHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(obtain_medal_, battle_end_time_);
    ZR_(member_count_, attack_count_);
    result_ = 1;
    if (has_target_guild_name()) {
      if (target_guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        target_guild_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(target_mark_, target_attack_count_);
    target_obtain_medal_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBattleHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildBattleHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 obtain_medal = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obtain_medal_)));
          set_has_obtain_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_medal_total_count;
        break;
      }

      // required int32 medal_total_count = 2;
      case 2: {
        if (tag == 16) {
         parse_medal_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &medal_total_count_)));
          set_has_medal_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .b2.protocol.commondata.GuildBattleResult.TYPE result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GuildBattleResult_TYPE_IsValid(value)) {
            set_result(static_cast< ::b2::protocol::commondata::GuildBattleResult_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battle_end_time;
        break;
      }

      // required int64 battle_end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_battle_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battle_end_time_)));
          set_has_battle_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_member_count;
        break;
      }

      // required int32 member_count = 5;
      case 5: {
        if (tag == 40) {
         parse_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_attack_count;
        break;
      }

      // required int32 attack_count = 6;
      case 6: {
        if (tag == 48) {
         parse_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_count_)));
          set_has_attack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_target_guild_id;
        break;
      }

      // required int64 target_guild_id = 11;
      case 11: {
        if (tag == 88) {
         parse_target_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_guild_id_)));
          set_has_target_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_target_guild_name;
        break;
      }

      // required string target_guild_name = 12;
      case 12: {
        if (tag == 98) {
         parse_target_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->target_guild_name().data(), this->target_guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "target_guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_target_obtain_medal;
        break;
      }

      // required int32 target_obtain_medal = 13;
      case 13: {
        if (tag == 104) {
         parse_target_obtain_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_obtain_medal_)));
          set_has_target_obtain_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_target_mark;
        break;
      }

      // required int32 target_mark = 14;
      case 14: {
        if (tag == 112) {
         parse_target_mark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_mark_)));
          set_has_target_mark();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_target_mark_color;
        break;
      }

      // required int32 target_mark_color = 15;
      case 15: {
        if (tag == 120) {
         parse_target_mark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_mark_color_)));
          set_has_target_mark_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_target_mark_bg;
        break;
      }

      // required int32 target_mark_bg = 16;
      case 16: {
        if (tag == 128) {
         parse_target_mark_bg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_mark_bg_)));
          set_has_target_mark_bg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_target_mark_bg_color;
        break;
      }

      // required int32 target_mark_bg_color = 17;
      case 17: {
        if (tag == 136) {
         parse_target_mark_bg_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_mark_bg_color_)));
          set_has_target_mark_bg_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_target_medal_total_count;
        break;
      }

      // required int32 target_medal_total_count = 18;
      case 18: {
        if (tag == 144) {
         parse_target_medal_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_medal_total_count_)));
          set_has_target_medal_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_target_member_count;
        break;
      }

      // required int32 target_member_count = 19;
      case 19: {
        if (tag == 152) {
         parse_target_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_member_count_)));
          set_has_target_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_target_attack_count;
        break;
      }

      // required int32 target_attack_count = 20;
      case 20: {
        if (tag == 160) {
         parse_target_attack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_attack_count_)));
          set_has_target_attack_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildBattleHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildBattleHistory)
  return false;
#undef DO_
}

void GuildBattleHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildBattleHistory)
  // required int32 obtain_medal = 1;
  if (has_obtain_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obtain_medal(), output);
  }

  // required int32 medal_total_count = 2;
  if (has_medal_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->medal_total_count(), output);
  }

  // required .b2.protocol.commondata.GuildBattleResult.TYPE result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  // required int64 battle_end_time = 4;
  if (has_battle_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->battle_end_time(), output);
  }

  // required int32 member_count = 5;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->member_count(), output);
  }

  // required int32 attack_count = 6;
  if (has_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attack_count(), output);
  }

  // required int64 target_guild_id = 11;
  if (has_target_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->target_guild_id(), output);
  }

  // required string target_guild_name = 12;
  if (has_target_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_guild_name().data(), this->target_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->target_guild_name(), output);
  }

  // required int32 target_obtain_medal = 13;
  if (has_target_obtain_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->target_obtain_medal(), output);
  }

  // required int32 target_mark = 14;
  if (has_target_mark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->target_mark(), output);
  }

  // required int32 target_mark_color = 15;
  if (has_target_mark_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->target_mark_color(), output);
  }

  // required int32 target_mark_bg = 16;
  if (has_target_mark_bg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->target_mark_bg(), output);
  }

  // required int32 target_mark_bg_color = 17;
  if (has_target_mark_bg_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->target_mark_bg_color(), output);
  }

  // required int32 target_medal_total_count = 18;
  if (has_target_medal_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->target_medal_total_count(), output);
  }

  // required int32 target_member_count = 19;
  if (has_target_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->target_member_count(), output);
  }

  // required int32 target_attack_count = 20;
  if (has_target_attack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->target_attack_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildBattleHistory)
}

::google::protobuf::uint8* GuildBattleHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildBattleHistory)
  // required int32 obtain_medal = 1;
  if (has_obtain_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->obtain_medal(), target);
  }

  // required int32 medal_total_count = 2;
  if (has_medal_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->medal_total_count(), target);
  }

  // required .b2.protocol.commondata.GuildBattleResult.TYPE result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  // required int64 battle_end_time = 4;
  if (has_battle_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->battle_end_time(), target);
  }

  // required int32 member_count = 5;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->member_count(), target);
  }

  // required int32 attack_count = 6;
  if (has_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attack_count(), target);
  }

  // required int64 target_guild_id = 11;
  if (has_target_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->target_guild_id(), target);
  }

  // required string target_guild_name = 12;
  if (has_target_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->target_guild_name().data(), this->target_guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "target_guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->target_guild_name(), target);
  }

  // required int32 target_obtain_medal = 13;
  if (has_target_obtain_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->target_obtain_medal(), target);
  }

  // required int32 target_mark = 14;
  if (has_target_mark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->target_mark(), target);
  }

  // required int32 target_mark_color = 15;
  if (has_target_mark_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->target_mark_color(), target);
  }

  // required int32 target_mark_bg = 16;
  if (has_target_mark_bg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->target_mark_bg(), target);
  }

  // required int32 target_mark_bg_color = 17;
  if (has_target_mark_bg_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->target_mark_bg_color(), target);
  }

  // required int32 target_medal_total_count = 18;
  if (has_target_medal_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->target_medal_total_count(), target);
  }

  // required int32 target_member_count = 19;
  if (has_target_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->target_member_count(), target);
  }

  // required int32 target_attack_count = 20;
  if (has_target_attack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->target_attack_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildBattleHistory)
  return target;
}

int GuildBattleHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 obtain_medal = 1;
    if (has_obtain_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obtain_medal());
    }

    // required int32 medal_total_count = 2;
    if (has_medal_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->medal_total_count());
    }

    // required .b2.protocol.commondata.GuildBattleResult.TYPE result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required int64 battle_end_time = 4;
    if (has_battle_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battle_end_time());
    }

    // required int32 member_count = 5;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_count());
    }

    // required int32 attack_count = 6;
    if (has_attack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_count());
    }

    // required int64 target_guild_id = 11;
    if (has_target_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_guild_id());
    }

    // required string target_guild_name = 12;
    if (has_target_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_guild_name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 target_obtain_medal = 13;
    if (has_target_obtain_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_obtain_medal());
    }

    // required int32 target_mark = 14;
    if (has_target_mark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_mark());
    }

    // required int32 target_mark_color = 15;
    if (has_target_mark_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_mark_color());
    }

    // required int32 target_mark_bg = 16;
    if (has_target_mark_bg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_mark_bg());
    }

    // required int32 target_mark_bg_color = 17;
    if (has_target_mark_bg_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_mark_bg_color());
    }

    // required int32 target_medal_total_count = 18;
    if (has_target_medal_total_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_medal_total_count());
    }

    // required int32 target_member_count = 19;
    if (has_target_member_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_member_count());
    }

    // required int32 target_attack_count = 20;
    if (has_target_attack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_attack_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBattleHistory::MergeFrom(const GuildBattleHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obtain_medal()) {
      set_obtain_medal(from.obtain_medal());
    }
    if (from.has_medal_total_count()) {
      set_medal_total_count(from.medal_total_count());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_battle_end_time()) {
      set_battle_end_time(from.battle_end_time());
    }
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_attack_count()) {
      set_attack_count(from.attack_count());
    }
    if (from.has_target_guild_id()) {
      set_target_guild_id(from.target_guild_id());
    }
    if (from.has_target_guild_name()) {
      set_target_guild_name(from.target_guild_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target_obtain_medal()) {
      set_target_obtain_medal(from.target_obtain_medal());
    }
    if (from.has_target_mark()) {
      set_target_mark(from.target_mark());
    }
    if (from.has_target_mark_color()) {
      set_target_mark_color(from.target_mark_color());
    }
    if (from.has_target_mark_bg()) {
      set_target_mark_bg(from.target_mark_bg());
    }
    if (from.has_target_mark_bg_color()) {
      set_target_mark_bg_color(from.target_mark_bg_color());
    }
    if (from.has_target_medal_total_count()) {
      set_target_medal_total_count(from.target_medal_total_count());
    }
    if (from.has_target_member_count()) {
      set_target_member_count(from.target_member_count());
    }
    if (from.has_target_attack_count()) {
      set_target_attack_count(from.target_attack_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBattleHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBattleHistory::CopyFrom(const GuildBattleHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBattleHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void GuildBattleHistory::Swap(GuildBattleHistory* other) {
  if (other != this) {
    std::swap(obtain_medal_, other->obtain_medal_);
    std::swap(medal_total_count_, other->medal_total_count_);
    std::swap(result_, other->result_);
    std::swap(battle_end_time_, other->battle_end_time_);
    std::swap(member_count_, other->member_count_);
    std::swap(attack_count_, other->attack_count_);
    std::swap(target_guild_id_, other->target_guild_id_);
    std::swap(target_guild_name_, other->target_guild_name_);
    std::swap(target_obtain_medal_, other->target_obtain_medal_);
    std::swap(target_mark_, other->target_mark_);
    std::swap(target_mark_color_, other->target_mark_color_);
    std::swap(target_mark_bg_, other->target_mark_bg_);
    std::swap(target_mark_bg_color_, other->target_mark_bg_color_);
    std::swap(target_medal_total_count_, other->target_medal_total_count_);
    std::swap(target_member_count_, other->target_member_count_);
    std::swap(target_attack_count_, other->target_attack_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBattleHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleHistory_descriptor_;
  metadata.reflection = GuildBattleHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBattleRecord::kWinCountFieldNumber;
const int GuildBattleRecord::kDrawCountFieldNumber;
const int GuildBattleRecord::kLoseCountFieldNumber;
const int GuildBattleRecord::kTotalObtainMedalFieldNumber;
const int GuildBattleRecord::kRankingFieldNumber;
const int GuildBattleRecord::kRankingTotalCountFieldNumber;
const int GuildBattleRecord::kSeasonIdFieldNumber;
#endif  // !_MSC_VER

GuildBattleRecord::GuildBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildBattleRecord)
}

void GuildBattleRecord::InitAsDefaultInstance() {
}

GuildBattleRecord::GuildBattleRecord(const GuildBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildBattleRecord)
}

void GuildBattleRecord::SharedCtor() {
  _cached_size_ = 0;
  win_count_ = 0;
  draw_count_ = 0;
  lose_count_ = 0;
  total_obtain_medal_ = 0;
  ranking_ = 0;
  ranking_total_count_ = 0;
  season_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBattleRecord::~GuildBattleRecord() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildBattleRecord)
  SharedDtor();
}

void GuildBattleRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBattleRecord_descriptor_;
}

const GuildBattleRecord& GuildBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildBattleRecord* GuildBattleRecord::default_instance_ = NULL;

GuildBattleRecord* GuildBattleRecord::New() const {
  return new GuildBattleRecord;
}

void GuildBattleRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildBattleRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(win_count_, season_id_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildBattleRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 win_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_draw_count;
        break;
      }

      // required int32 draw_count = 2;
      case 2: {
        if (tag == 16) {
         parse_draw_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &draw_count_)));
          set_has_draw_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lose_count;
        break;
      }

      // required int32 lose_count = 3;
      case 3: {
        if (tag == 24) {
         parse_lose_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_count_)));
          set_has_lose_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_total_obtain_medal;
        break;
      }

      // required int32 total_obtain_medal = 11;
      case 11: {
        if (tag == 88) {
         parse_total_obtain_medal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_obtain_medal_)));
          set_has_total_obtain_medal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 12;
      case 12: {
        if (tag == 96) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ranking_total_count;
        break;
      }

      // required int32 ranking_total_count = 13;
      case 13: {
        if (tag == 104) {
         parse_ranking_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_total_count_)));
          set_has_ranking_total_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_season_id;
        break;
      }

      // required int32 season_id = 21;
      case 21: {
        if (tag == 168) {
         parse_season_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_id_)));
          set_has_season_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildBattleRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildBattleRecord)
  return false;
#undef DO_
}

void GuildBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildBattleRecord)
  // required int32 win_count = 1;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->win_count(), output);
  }

  // required int32 draw_count = 2;
  if (has_draw_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->draw_count(), output);
  }

  // required int32 lose_count = 3;
  if (has_lose_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lose_count(), output);
  }

  // required int32 total_obtain_medal = 11;
  if (has_total_obtain_medal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->total_obtain_medal(), output);
  }

  // required int32 ranking = 12;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ranking(), output);
  }

  // required int32 ranking_total_count = 13;
  if (has_ranking_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ranking_total_count(), output);
  }

  // required int32 season_id = 21;
  if (has_season_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->season_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildBattleRecord)
}

::google::protobuf::uint8* GuildBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildBattleRecord)
  // required int32 win_count = 1;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->win_count(), target);
  }

  // required int32 draw_count = 2;
  if (has_draw_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->draw_count(), target);
  }

  // required int32 lose_count = 3;
  if (has_lose_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lose_count(), target);
  }

  // required int32 total_obtain_medal = 11;
  if (has_total_obtain_medal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->total_obtain_medal(), target);
  }

  // required int32 ranking = 12;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ranking(), target);
  }

  // required int32 ranking_total_count = 13;
  if (has_ranking_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ranking_total_count(), target);
  }

  // required int32 season_id = 21;
  if (has_season_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->season_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildBattleRecord)
  return target;
}

int GuildBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 win_count = 1;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

    // required int32 draw_count = 2;
    if (has_draw_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->draw_count());
    }

    // required int32 lose_count = 3;
    if (has_lose_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose_count());
    }

    // required int32 total_obtain_medal = 11;
    if (has_total_obtain_medal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_obtain_medal());
    }

    // required int32 ranking = 12;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int32 ranking_total_count = 13;
    if (has_ranking_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking_total_count());
    }

    // required int32 season_id = 21;
    if (has_season_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBattleRecord::MergeFrom(const GuildBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_draw_count()) {
      set_draw_count(from.draw_count());
    }
    if (from.has_lose_count()) {
      set_lose_count(from.lose_count());
    }
    if (from.has_total_obtain_medal()) {
      set_total_obtain_medal(from.total_obtain_medal());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_ranking_total_count()) {
      set_ranking_total_count(from.ranking_total_count());
    }
    if (from.has_season_id()) {
      set_season_id(from.season_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBattleRecord::CopyFrom(const GuildBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBattleRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GuildBattleRecord::Swap(GuildBattleRecord* other) {
  if (other != this) {
    std::swap(win_count_, other->win_count_);
    std::swap(draw_count_, other->draw_count_);
    std::swap(lose_count_, other->lose_count_);
    std::swap(total_obtain_medal_, other->total_obtain_medal_);
    std::swap(ranking_, other->ranking_);
    std::swap(ranking_total_count_, other->ranking_total_count_);
    std::swap(season_id_, other->season_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBattleRecord_descriptor_;
  metadata.reflection = GuildBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSkill::kIdFieldNumber;
const int GuildSkill::kLevelFieldNumber;
const int GuildSkill::kEnabledFieldNumber;
const int GuildSkill::kBuffEndTimeFieldNumber;
#endif  // !_MSC_VER

GuildSkill::GuildSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildSkill)
}

void GuildSkill::InitAsDefaultInstance() {
}

GuildSkill::GuildSkill(const GuildSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildSkill)
}

void GuildSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  enabled_ = false;
  buff_end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSkill::~GuildSkill() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildSkill)
  SharedDtor();
}

void GuildSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSkill_descriptor_;
}

const GuildSkill& GuildSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildSkill* GuildSkill::default_instance_ = NULL;

GuildSkill* GuildSkill::New() const {
  return new GuildSkill;
}

void GuildSkill::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildSkill*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, enabled_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enabled;
        break;
      }

      // required bool enabled = 3;
      case 3: {
        if (tag == 24) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_buff_end_time;
        break;
      }

      // optional int64 buff_end_time = 10;
      case 10: {
        if (tag == 80) {
         parse_buff_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buff_end_time_)));
          set_has_buff_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildSkill)
  return false;
#undef DO_
}

void GuildSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildSkill)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required bool enabled = 3;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }

  // optional int64 buff_end_time = 10;
  if (has_buff_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->buff_end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildSkill)
}

::google::protobuf::uint8* GuildSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildSkill)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required bool enabled = 3;
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }

  // optional int64 buff_end_time = 10;
  if (has_buff_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->buff_end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildSkill)
  return target;
}

int GuildSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required bool enabled = 3;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional int64 buff_end_time = 10;
    if (has_buff_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buff_end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildSkill::MergeFrom(const GuildSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_buff_end_time()) {
      set_buff_end_time(from.buff_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildSkill::CopyFrom(const GuildSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildSkill::Swap(GuildSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(enabled_, other->enabled_);
    std::swap(buff_end_time_, other->buff_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSkill_descriptor_;
  metadata.reflection = GuildSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kGuildIdFieldNumber;
const int GuildInfo::kGuildNameFieldNumber;
const int GuildInfo::kMarkIndexFieldNumber;
const int GuildInfo::kMarkColorFieldNumber;
const int GuildInfo::kMarkBgIndexFieldNumber;
const int GuildInfo::kMarkBgColorFieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildInfo)
}

void GuildInfo::InitAsDefaultInstance() {
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildInfo)
}

void GuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guild_id_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mark_index_ = 0;
  mark_color_ = 0;
  mark_bg_index_ = 0;
  mark_bg_color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildInfo)
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfo_descriptor_;
}

const GuildInfo& GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(mark_index_, mark_bg_color_);
    guild_id_ = GOOGLE_LONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guild_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 guild_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // required string guild_name = 2;
      case 2: {
        if (tag == 18) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guild_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mark_index;
        break;
      }

      // required int32 mark_index = 3;
      case 3: {
        if (tag == 24) {
         parse_mark_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_index_)));
          set_has_mark_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mark_color;
        break;
      }

      // required int32 mark_color = 4;
      case 4: {
        if (tag == 32) {
         parse_mark_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_color_)));
          set_has_mark_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mark_bg_index;
        break;
      }

      // required int32 mark_bg_index = 5;
      case 5: {
        if (tag == 40) {
         parse_mark_bg_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_index_)));
          set_has_mark_bg_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mark_bg_color;
        break;
      }

      // required int32 mark_bg_color = 6;
      case 6: {
        if (tag == 48) {
         parse_mark_bg_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_bg_color_)));
          set_has_mark_bg_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildInfo)
  return false;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildInfo)
  // optional int64 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->guild_id(), output);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guild_name(), output);
  }

  // required int32 mark_index = 3;
  if (has_mark_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mark_index(), output);
  }

  // required int32 mark_color = 4;
  if (has_mark_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mark_color(), output);
  }

  // required int32 mark_bg_index = 5;
  if (has_mark_bg_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mark_bg_index(), output);
  }

  // required int32 mark_bg_color = 6;
  if (has_mark_bg_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mark_bg_color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildInfo)
}

::google::protobuf::uint8* GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildInfo)
  // optional int64 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->guild_id(), target);
  }

  // required string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // required int32 mark_index = 3;
  if (has_mark_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mark_index(), target);
  }

  // required int32 mark_color = 4;
  if (has_mark_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mark_color(), target);
  }

  // required int32 mark_bg_index = 5;
  if (has_mark_bg_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mark_bg_index(), target);
  }

  // required int32 mark_bg_color = 6;
  if (has_mark_bg_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mark_bg_color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildInfo)
  return target;
}

int GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

    // required string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // required int32 mark_index = 3;
    if (has_mark_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_index());
    }

    // required int32 mark_color = 4;
    if (has_mark_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_color());
    }

    // required int32 mark_bg_index = 5;
    if (has_mark_bg_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_index());
    }

    // required int32 mark_bg_color = 6;
    if (has_mark_bg_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_bg_color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_mark_index()) {
      set_mark_index(from.mark_index());
    }
    if (from.has_mark_color()) {
      set_mark_color(from.mark_color());
    }
    if (from.has_mark_bg_index()) {
      set_mark_bg_index(from.mark_bg_index());
    }
    if (from.has_mark_bg_color()) {
      set_mark_bg_color(from.mark_bg_color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;

  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(mark_index_, other->mark_index_);
    std::swap(mark_color_, other->mark_color_);
    std::swap(mark_bg_index_, other->mark_bg_index_);
    std::swap(mark_bg_color_, other->mark_bg_color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfo_descriptor_;
  metadata.reflection = GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMercenary::kIdFieldNumber;
const int GuildMercenary::kLevelFieldNumber;
const int GuildMercenary::kExpFieldNumber;
#endif  // !_MSC_VER

GuildMercenary::GuildMercenary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GuildMercenary)
}

void GuildMercenary::InitAsDefaultInstance() {
}

GuildMercenary::GuildMercenary(const GuildMercenary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GuildMercenary)
}

void GuildMercenary::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMercenary::~GuildMercenary() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GuildMercenary)
  SharedDtor();
}

void GuildMercenary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMercenary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMercenary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMercenary_descriptor_;
}

const GuildMercenary& GuildMercenary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GuildMercenary* GuildMercenary::default_instance_ = NULL;

GuildMercenary* GuildMercenary::New() const {
  return new GuildMercenary;
}

void GuildMercenary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMercenary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMercenary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GuildMercenary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required int32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GuildMercenary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GuildMercenary)
  return false;
#undef DO_
}

void GuildMercenary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GuildMercenary)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GuildMercenary)
}

::google::protobuf::uint8* GuildMercenary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GuildMercenary)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GuildMercenary)
  return target;
}

int GuildMercenary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMercenary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMercenary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMercenary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMercenary::MergeFrom(const GuildMercenary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMercenary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMercenary::CopyFrom(const GuildMercenary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMercenary::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GuildMercenary::Swap(GuildMercenary* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMercenary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMercenary_descriptor_;
  metadata.reflection = GuildMercenary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MatchMaking_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchMaking_TYPE_descriptor_;
}
bool MatchMaking_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 10:
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MatchMaking_TYPE MatchMaking::PVP_RANK;
const MatchMaking_TYPE MatchMaking::PVP_FRIENDLY;
const MatchMaking_TYPE MatchMaking::RAID_RANK;
const MatchMaking_TYPE MatchMaking::ASSAULT_RANK;
const MatchMaking_TYPE MatchMaking::TYPE_MIN;
const MatchMaking_TYPE MatchMaking::TYPE_MAX;
const int MatchMaking::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MatchMaking_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchMaking_STATE_descriptor_;
}
bool MatchMaking_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MatchMaking_STATE MatchMaking::WAITING;
const MatchMaking_STATE MatchMaking::ARRANGED;
const MatchMaking_STATE MatchMaking::CANCELED;
const MatchMaking_STATE MatchMaking::STATE_MIN;
const MatchMaking_STATE MatchMaking::STATE_MAX;
const int MatchMaking::STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchMaking::MatchMaking()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchMaking)
}

void MatchMaking::InitAsDefaultInstance() {
}

MatchMaking::MatchMaking(const MatchMaking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchMaking)
}

void MatchMaking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchMaking::~MatchMaking() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchMaking)
  SharedDtor();
}

void MatchMaking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchMaking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchMaking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchMaking_descriptor_;
}

const MatchMaking& MatchMaking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchMaking* MatchMaking::default_instance_ = NULL;

MatchMaking* MatchMaking::New() const {
  return new MatchMaking;
}

void MatchMaking::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchMaking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchMaking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchMaking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchMaking)
  return false;
#undef DO_
}

void MatchMaking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchMaking)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchMaking)
}

::google::protobuf::uint8* MatchMaking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchMaking)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchMaking)
  return target;
}

int MatchMaking::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchMaking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchMaking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchMaking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchMaking::MergeFrom(const MatchMaking& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchMaking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchMaking::CopyFrom(const MatchMaking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchMaking::IsInitialized() const {

  return true;
}

void MatchMaking::Swap(MatchMaking* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchMaking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchMaking_descriptor_;
  metadata.reflection = MatchMaking_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Invitation_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invitation_TYPE_descriptor_;
}
bool Invitation_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Invitation_TYPE Invitation::PVP_INVITE;
const Invitation_TYPE Invitation::TYPE_MIN;
const Invitation_TYPE Invitation::TYPE_MAX;
const int Invitation::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Invitation::Invitation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Invitation)
}

void Invitation::InitAsDefaultInstance() {
}

Invitation::Invitation(const Invitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Invitation)
}

void Invitation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invitation::~Invitation() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Invitation)
  SharedDtor();
}

void Invitation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invitation_descriptor_;
}

const Invitation& Invitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Invitation* Invitation::default_instance_ = NULL;

Invitation* Invitation::New() const {
  return new Invitation;
}

void Invitation::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Invitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Invitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Invitation)
  return false;
#undef DO_
}

void Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Invitation)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Invitation)
}

::google::protobuf::uint8* Invitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Invitation)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Invitation)
  return target;
}

int Invitation::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invitation::MergeFrom(const Invitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invitation::CopyFrom(const Invitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invitation::IsInitialized() const {

  return true;
}

void Invitation::Swap(Invitation* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invitation_descriptor_;
  metadata.reflection = Invitation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MatchInfo_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchInfo_TYPE_descriptor_;
}
bool MatchInfo_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MatchInfo_TYPE MatchInfo::AI;
const MatchInfo_TYPE MatchInfo::PLAYER;
const MatchInfo_TYPE MatchInfo::TEAM;
const MatchInfo_TYPE MatchInfo::RAID;
const MatchInfo_TYPE MatchInfo::ASSAULT;
const MatchInfo_TYPE MatchInfo::HEROTOWER;
const MatchInfo_TYPE MatchInfo::DONATION;
const MatchInfo_TYPE MatchInfo::DIMENSION;
const MatchInfo_TYPE MatchInfo::TYPE_MIN;
const MatchInfo_TYPE MatchInfo::TYPE_MAX;
const int MatchInfo::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MatchInfo::kMatchTokenFieldNumber;
const int MatchInfo::kOpponentTypeFieldNumber;
#endif  // !_MSC_VER

MatchInfo::MatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchInfo)
}

void MatchInfo::InitAsDefaultInstance() {
}

MatchInfo::MatchInfo(const MatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchInfo)
}

void MatchInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  match_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  opponent_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchInfo::~MatchInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchInfo)
  SharedDtor();
}

void MatchInfo::SharedDtor() {
  if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete match_token_;
  }
  if (this != default_instance_) {
  }
}

void MatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchInfo_descriptor_;
}

const MatchInfo& MatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchInfo* MatchInfo::default_instance_ = NULL;

MatchInfo* MatchInfo::New() const {
  return new MatchInfo;
}

void MatchInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_match_token()) {
      if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        match_token_->clear();
      }
    }
    opponent_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string match_token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_token().data(), this->match_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "match_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_opponent_type;
        break;
      }

      // required .b2.protocol.commondata.MatchInfo.TYPE opponent_type = 2;
      case 2: {
        if (tag == 16) {
         parse_opponent_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchInfo_TYPE_IsValid(value)) {
            set_opponent_type(static_cast< ::b2::protocol::commondata::MatchInfo_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchInfo)
  return false;
#undef DO_
}

void MatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchInfo)
  // required string match_token = 1;
  if (has_match_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_token().data(), this->match_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->match_token(), output);
  }

  // required .b2.protocol.commondata.MatchInfo.TYPE opponent_type = 2;
  if (has_opponent_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->opponent_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchInfo)
}

::google::protobuf::uint8* MatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchInfo)
  // required string match_token = 1;
  if (has_match_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_token().data(), this->match_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->match_token(), target);
  }

  // required .b2.protocol.commondata.MatchInfo.TYPE opponent_type = 2;
  if (has_opponent_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->opponent_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchInfo)
  return target;
}

int MatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string match_token = 1;
    if (has_match_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_token());
    }

    // required .b2.protocol.commondata.MatchInfo.TYPE opponent_type = 2;
    if (has_opponent_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opponent_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchInfo::MergeFrom(const MatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_token()) {
      set_match_token(from.match_token());
    }
    if (from.has_opponent_type()) {
      set_opponent_type(from.opponent_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchInfo::CopyFrom(const MatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MatchInfo::Swap(MatchInfo* other) {
  if (other != this) {
    std::swap(match_token_, other->match_token_);
    std::swap(opponent_type_, other->opponent_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchInfo_descriptor_;
  metadata.reflection = MatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchStatus::kBattleGradeFieldNumber;
const int MatchStatus::kBattleStarCountFieldNumber;
const int MatchStatus::kContinueWinFieldNumber;
const int MatchStatus::kContinueWinMaxFieldNumber;
#endif  // !_MSC_VER

MatchStatus::MatchStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchStatus)
}

void MatchStatus::InitAsDefaultInstance() {
}

MatchStatus::MatchStatus(const MatchStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchStatus)
}

void MatchStatus::SharedCtor() {
  _cached_size_ = 0;
  battle_grade_ = 0;
  battle_star_count_ = 0;
  continue_win_ = 0;
  continue_win_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchStatus::~MatchStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchStatus)
  SharedDtor();
}

void MatchStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchStatus_descriptor_;
}

const MatchStatus& MatchStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchStatus* MatchStatus::default_instance_ = NULL;

MatchStatus* MatchStatus::New() const {
  return new MatchStatus;
}

void MatchStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(battle_grade_, continue_win_max_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 battle_grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_grade_)));
          set_has_battle_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_battle_star_count;
        break;
      }

      // optional int32 battle_star_count = 2;
      case 2: {
        if (tag == 16) {
         parse_battle_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_star_count_)));
          set_has_battle_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_continue_win;
        break;
      }

      // optional int32 continue_win = 3;
      case 3: {
        if (tag == 24) {
         parse_continue_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_win_)));
          set_has_continue_win();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_continue_win_max;
        break;
      }

      // optional int32 continue_win_max = 4;
      case 4: {
        if (tag == 32) {
         parse_continue_win_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continue_win_max_)));
          set_has_continue_win_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchStatus)
  return false;
#undef DO_
}

void MatchStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchStatus)
  // optional int32 battle_grade = 1;
  if (has_battle_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->battle_grade(), output);
  }

  // optional int32 battle_star_count = 2;
  if (has_battle_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->battle_star_count(), output);
  }

  // optional int32 continue_win = 3;
  if (has_continue_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->continue_win(), output);
  }

  // optional int32 continue_win_max = 4;
  if (has_continue_win_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->continue_win_max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchStatus)
}

::google::protobuf::uint8* MatchStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchStatus)
  // optional int32 battle_grade = 1;
  if (has_battle_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->battle_grade(), target);
  }

  // optional int32 battle_star_count = 2;
  if (has_battle_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->battle_star_count(), target);
  }

  // optional int32 continue_win = 3;
  if (has_continue_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->continue_win(), target);
  }

  // optional int32 continue_win_max = 4;
  if (has_continue_win_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->continue_win_max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchStatus)
  return target;
}

int MatchStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 battle_grade = 1;
    if (has_battle_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_grade());
    }

    // optional int32 battle_star_count = 2;
    if (has_battle_star_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_star_count());
    }

    // optional int32 continue_win = 3;
    if (has_continue_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_win());
    }

    // optional int32 continue_win_max = 4;
    if (has_continue_win_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continue_win_max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchStatus::MergeFrom(const MatchStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_grade()) {
      set_battle_grade(from.battle_grade());
    }
    if (from.has_battle_star_count()) {
      set_battle_star_count(from.battle_star_count());
    }
    if (from.has_continue_win()) {
      set_continue_win(from.continue_win());
    }
    if (from.has_continue_win_max()) {
      set_continue_win_max(from.continue_win_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchStatus::CopyFrom(const MatchStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchStatus::IsInitialized() const {

  return true;
}

void MatchStatus::Swap(MatchStatus* other) {
  if (other != this) {
    std::swap(battle_grade_, other->battle_grade_);
    std::swap(battle_star_count_, other->battle_star_count_);
    std::swap(continue_win_, other->continue_win_);
    std::swap(continue_win_max_, other->continue_win_max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchStatus_descriptor_;
  metadata.reflection = MatchStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ranking::kAccountIdFieldNumber;
const int Ranking::kRankingFieldNumber;
const int Ranking::kTotalRankerCountFieldNumber;
const int Ranking::kPvpReplayUrlFieldNumber;
const int Ranking::kReplaySizeCompressedFieldNumber;
const int Ranking::kReplaySizeUncompressedFieldNumber;
#endif  // !_MSC_VER

Ranking::Ranking()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Ranking)
}

void Ranking::InitAsDefaultInstance() {
}

Ranking::Ranking(const Ranking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Ranking)
}

void Ranking::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  ranking_ = 0;
  total_ranker_count_ = 0;
  pvp_replay_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replay_size_compressed_ = 0;
  replay_size_uncompressed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ranking::~Ranking() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Ranking)
  SharedDtor();
}

void Ranking::SharedDtor() {
  if (pvp_replay_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvp_replay_url_;
  }
  if (this != default_instance_) {
  }
}

void Ranking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ranking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ranking_descriptor_;
}

const Ranking& Ranking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Ranking* Ranking::default_instance_ = NULL;

Ranking* Ranking::New() const {
  return new Ranking;
}

void Ranking::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ranking*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(account_id_, total_ranker_count_);
    ZR_(replay_size_compressed_, replay_size_uncompressed_);
    if (has_pvp_replay_url()) {
      if (pvp_replay_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pvp_replay_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ranking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Ranking)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 11;
      case 11: {
        if (tag == 88) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_total_ranker_count;
        break;
      }

      // required int32 total_ranker_count = 12;
      case 12: {
        if (tag == 96) {
         parse_total_ranker_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_ranker_count_)));
          set_has_total_ranker_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_pvp_replay_url;
        break;
      }

      // optional string pvp_replay_url = 20;
      case 20: {
        if (tag == 162) {
         parse_pvp_replay_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvp_replay_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pvp_replay_url().data(), this->pvp_replay_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pvp_replay_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_replay_size_compressed;
        break;
      }

      // optional int32 replay_size_compressed = 21;
      case 21: {
        if (tag == 168) {
         parse_replay_size_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_size_compressed_)));
          set_has_replay_size_compressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_replay_size_uncompressed;
        break;
      }

      // optional int32 replay_size_uncompressed = 22;
      case 22: {
        if (tag == 176) {
         parse_replay_size_uncompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_size_uncompressed_)));
          set_has_replay_size_uncompressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Ranking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Ranking)
  return false;
#undef DO_
}

void Ranking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Ranking)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required int32 ranking = 11;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ranking(), output);
  }

  // required int32 total_ranker_count = 12;
  if (has_total_ranker_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->total_ranker_count(), output);
  }

  // optional string pvp_replay_url = 20;
  if (has_pvp_replay_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvp_replay_url().data(), this->pvp_replay_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pvp_replay_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->pvp_replay_url(), output);
  }

  // optional int32 replay_size_compressed = 21;
  if (has_replay_size_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->replay_size_compressed(), output);
  }

  // optional int32 replay_size_uncompressed = 22;
  if (has_replay_size_uncompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->replay_size_uncompressed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Ranking)
}

::google::protobuf::uint8* Ranking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Ranking)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required int32 ranking = 11;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ranking(), target);
  }

  // required int32 total_ranker_count = 12;
  if (has_total_ranker_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->total_ranker_count(), target);
  }

  // optional string pvp_replay_url = 20;
  if (has_pvp_replay_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvp_replay_url().data(), this->pvp_replay_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pvp_replay_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->pvp_replay_url(), target);
  }

  // optional int32 replay_size_compressed = 21;
  if (has_replay_size_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->replay_size_compressed(), target);
  }

  // optional int32 replay_size_uncompressed = 22;
  if (has_replay_size_uncompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->replay_size_uncompressed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Ranking)
  return target;
}

int Ranking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required int32 ranking = 11;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int32 total_ranker_count = 12;
    if (has_total_ranker_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_ranker_count());
    }

    // optional string pvp_replay_url = 20;
    if (has_pvp_replay_url()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvp_replay_url());
    }

    // optional int32 replay_size_compressed = 21;
    if (has_replay_size_compressed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_size_compressed());
    }

    // optional int32 replay_size_uncompressed = 22;
    if (has_replay_size_uncompressed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_size_uncompressed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ranking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ranking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ranking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ranking::MergeFrom(const Ranking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_total_ranker_count()) {
      set_total_ranker_count(from.total_ranker_count());
    }
    if (from.has_pvp_replay_url()) {
      set_pvp_replay_url(from.pvp_replay_url());
    }
    if (from.has_replay_size_compressed()) {
      set_replay_size_compressed(from.replay_size_compressed());
    }
    if (from.has_replay_size_uncompressed()) {
      set_replay_size_uncompressed(from.replay_size_uncompressed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ranking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking::CopyFrom(const Ranking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Ranking::Swap(Ranking* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(ranking_, other->ranking_);
    std::swap(total_ranker_count_, other->total_ranker_count_);
    std::swap(pvp_replay_url_, other->pvp_replay_url_);
    std::swap(replay_size_compressed_, other->replay_size_compressed_);
    std::swap(replay_size_uncompressed_, other->replay_size_uncompressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ranking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ranking_descriptor_;
  metadata.reflection = Ranking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchRanker_Entry::kCharacterTypeFieldNumber;
const int MatchRanker_Entry::kLevelFieldNumber;
#endif  // !_MSC_VER

MatchRanker_Entry::MatchRanker_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchRanker.Entry)
}

void MatchRanker_Entry::InitAsDefaultInstance() {
}

MatchRanker_Entry::MatchRanker_Entry(const MatchRanker_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchRanker.Entry)
}

void MatchRanker_Entry::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRanker_Entry::~MatchRanker_Entry() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchRanker.Entry)
  SharedDtor();
}

void MatchRanker_Entry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchRanker_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRanker_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRanker_Entry_descriptor_;
}

const MatchRanker_Entry& MatchRanker_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchRanker_Entry* MatchRanker_Entry::default_instance_ = NULL;

MatchRanker_Entry* MatchRanker_Entry::New() const {
  return new MatchRanker_Entry;
}

void MatchRanker_Entry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    character_type_ = 1;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRanker_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchRanker.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchRanker.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchRanker.Entry)
  return false;
#undef DO_
}

void MatchRanker_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchRanker.Entry)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchRanker.Entry)
}

::google::protobuf::uint8* MatchRanker_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchRanker.Entry)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchRanker.Entry)
  return target;
}

int MatchRanker_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRanker_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRanker_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRanker_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRanker_Entry::MergeFrom(const MatchRanker_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRanker_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRanker_Entry::CopyFrom(const MatchRanker_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRanker_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MatchRanker_Entry::Swap(MatchRanker_Entry* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRanker_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRanker_Entry_descriptor_;
  metadata.reflection = MatchRanker_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MatchRanker::kAccountIdFieldNumber;
const int MatchRanker::kNicknameFieldNumber;
const int MatchRanker::kBattleGradeFieldNumber;
const int MatchRanker::kBattleStarCountFieldNumber;
const int MatchRanker::kBestFloorFieldNumber;
const int MatchRanker::kClearTimeFieldNumber;
const int MatchRanker::kTotalPowerFieldNumber;
const int MatchRanker::kPointFieldNumber;
const int MatchRanker::kEntriesFieldNumber;
const int MatchRanker::kPvpReplayUrlFieldNumber;
const int MatchRanker::kReplaySizeCompressedFieldNumber;
const int MatchRanker::kReplaySizeUncompressedFieldNumber;
#endif  // !_MSC_VER

MatchRanker::MatchRanker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchRanker)
}

void MatchRanker::InitAsDefaultInstance() {
}

MatchRanker::MatchRanker(const MatchRanker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchRanker)
}

void MatchRanker::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  battle_grade_ = 0;
  battle_star_count_ = 0;
  best_floor_ = 0;
  clear_time_ = 0;
  total_power_ = 0;
  point_ = 0;
  pvp_replay_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  replay_size_compressed_ = 0;
  replay_size_uncompressed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchRanker::~MatchRanker() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchRanker)
  SharedDtor();
}

void MatchRanker::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (pvp_replay_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pvp_replay_url_;
  }
  if (this != default_instance_) {
  }
}

void MatchRanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchRanker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchRanker_descriptor_;
}

const MatchRanker& MatchRanker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchRanker* MatchRanker::default_instance_ = NULL;

MatchRanker* MatchRanker::New() const {
  return new MatchRanker;
}

void MatchRanker::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchRanker*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(battle_grade_, point_);
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3584) {
    ZR_(replay_size_compressed_, replay_size_uncompressed_);
    if (has_pvp_replay_url()) {
      if (pvp_replay_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pvp_replay_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchRanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchRanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_battle_grade;
        break;
      }

      // optional int32 battle_grade = 3;
      case 3: {
        if (tag == 24) {
         parse_battle_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_grade_)));
          set_has_battle_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_battle_star_count;
        break;
      }

      // optional int32 battle_star_count = 4;
      case 4: {
        if (tag == 32) {
         parse_battle_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battle_star_count_)));
          set_has_battle_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_best_floor;
        break;
      }

      // optional int32 best_floor = 5;
      case 5: {
        if (tag == 40) {
         parse_best_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_floor_)));
          set_has_best_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_clear_time;
        break;
      }

      // optional int32 clear_time = 6;
      case 6: {
        if (tag == 48) {
         parse_clear_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_time_)));
          set_has_clear_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_total_power;
        break;
      }

      // required int32 total_power = 7;
      case 7: {
        if (tag == 56) {
         parse_total_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_power_)));
          set_has_total_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_point;
        break;
      }

      // optional int32 point = 8;
      case 8: {
        if (tag == 64) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_entries;
        break;
      }

      // repeated .b2.protocol.commondata.MatchRanker.Entry entries = 9;
      case 9: {
        if (tag == 74) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_entries;
        if (input->ExpectTag(82)) goto parse_pvp_replay_url;
        break;
      }

      // optional string pvp_replay_url = 10;
      case 10: {
        if (tag == 82) {
         parse_pvp_replay_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pvp_replay_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pvp_replay_url().data(), this->pvp_replay_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pvp_replay_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_replay_size_compressed;
        break;
      }

      // optional int32 replay_size_compressed = 11;
      case 11: {
        if (tag == 88) {
         parse_replay_size_compressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_size_compressed_)));
          set_has_replay_size_compressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_replay_size_uncompressed;
        break;
      }

      // optional int32 replay_size_uncompressed = 12;
      case 12: {
        if (tag == 96) {
         parse_replay_size_uncompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &replay_size_uncompressed_)));
          set_has_replay_size_uncompressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchRanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchRanker)
  return false;
#undef DO_
}

void MatchRanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchRanker)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // optional int32 battle_grade = 3;
  if (has_battle_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->battle_grade(), output);
  }

  // optional int32 battle_star_count = 4;
  if (has_battle_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->battle_star_count(), output);
  }

  // optional int32 best_floor = 5;
  if (has_best_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->best_floor(), output);
  }

  // optional int32 clear_time = 6;
  if (has_clear_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->clear_time(), output);
  }

  // required int32 total_power = 7;
  if (has_total_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->total_power(), output);
  }

  // optional int32 point = 8;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->point(), output);
  }

  // repeated .b2.protocol.commondata.MatchRanker.Entry entries = 9;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->entries(i), output);
  }

  // optional string pvp_replay_url = 10;
  if (has_pvp_replay_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvp_replay_url().data(), this->pvp_replay_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pvp_replay_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->pvp_replay_url(), output);
  }

  // optional int32 replay_size_compressed = 11;
  if (has_replay_size_compressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->replay_size_compressed(), output);
  }

  // optional int32 replay_size_uncompressed = 12;
  if (has_replay_size_uncompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->replay_size_uncompressed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchRanker)
}

::google::protobuf::uint8* MatchRanker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchRanker)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // optional int32 battle_grade = 3;
  if (has_battle_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->battle_grade(), target);
  }

  // optional int32 battle_star_count = 4;
  if (has_battle_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->battle_star_count(), target);
  }

  // optional int32 best_floor = 5;
  if (has_best_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->best_floor(), target);
  }

  // optional int32 clear_time = 6;
  if (has_clear_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->clear_time(), target);
  }

  // required int32 total_power = 7;
  if (has_total_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->total_power(), target);
  }

  // optional int32 point = 8;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->point(), target);
  }

  // repeated .b2.protocol.commondata.MatchRanker.Entry entries = 9;
  for (int i = 0; i < this->entries_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->entries(i), target);
  }

  // optional string pvp_replay_url = 10;
  if (has_pvp_replay_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pvp_replay_url().data(), this->pvp_replay_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pvp_replay_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->pvp_replay_url(), target);
  }

  // optional int32 replay_size_compressed = 11;
  if (has_replay_size_compressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->replay_size_compressed(), target);
  }

  // optional int32 replay_size_uncompressed = 12;
  if (has_replay_size_uncompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->replay_size_uncompressed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchRanker)
  return target;
}

int MatchRanker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // optional int32 battle_grade = 3;
    if (has_battle_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_grade());
    }

    // optional int32 battle_star_count = 4;
    if (has_battle_star_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battle_star_count());
    }

    // optional int32 best_floor = 5;
    if (has_best_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_floor());
    }

    // optional int32 clear_time = 6;
    if (has_clear_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear_time());
    }

    // required int32 total_power = 7;
    if (has_total_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_power());
    }

    // optional int32 point = 8;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional string pvp_replay_url = 10;
    if (has_pvp_replay_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pvp_replay_url());
    }

    // optional int32 replay_size_compressed = 11;
    if (has_replay_size_compressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_size_compressed());
    }

    // optional int32 replay_size_uncompressed = 12;
    if (has_replay_size_uncompressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->replay_size_uncompressed());
    }

  }
  // repeated .b2.protocol.commondata.MatchRanker.Entry entries = 9;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchRanker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchRanker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchRanker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchRanker::MergeFrom(const MatchRanker& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_battle_grade()) {
      set_battle_grade(from.battle_grade());
    }
    if (from.has_battle_star_count()) {
      set_battle_star_count(from.battle_star_count());
    }
    if (from.has_best_floor()) {
      set_best_floor(from.best_floor());
    }
    if (from.has_clear_time()) {
      set_clear_time(from.clear_time());
    }
    if (from.has_total_power()) {
      set_total_power(from.total_power());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_pvp_replay_url()) {
      set_pvp_replay_url(from.pvp_replay_url());
    }
    if (from.has_replay_size_compressed()) {
      set_replay_size_compressed(from.replay_size_compressed());
    }
    if (from.has_replay_size_uncompressed()) {
      set_replay_size_uncompressed(from.replay_size_uncompressed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchRanker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchRanker::CopyFrom(const MatchRanker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchRanker::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->entries())) return false;
  return true;
}

void MatchRanker::Swap(MatchRanker* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(battle_grade_, other->battle_grade_);
    std::swap(battle_star_count_, other->battle_star_count_);
    std::swap(best_floor_, other->best_floor_);
    std::swap(clear_time_, other->clear_time_);
    std::swap(total_power_, other->total_power_);
    std::swap(point_, other->point_);
    entries_.Swap(&other->entries_);
    std::swap(pvp_replay_url_, other->pvp_replay_url_);
    std::swap(replay_size_compressed_, other->replay_size_compressed_);
    std::swap(replay_size_uncompressed_, other->replay_size_uncompressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchRanker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchRanker_descriptor_;
  metadata.reflection = MatchRanker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankingReward::kGradeFieldNumber;
const int RankingReward::kStarCountFieldNumber;
const int RankingReward::kRankingFieldNumber;
const int RankingReward::kRankerCountFieldNumber;
const int RankingReward::kInitialGradeFieldNumber;
const int RankingReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

RankingReward::RankingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RankingReward)
}

void RankingReward::InitAsDefaultInstance() {
}

RankingReward::RankingReward(const RankingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RankingReward)
}

void RankingReward::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  star_count_ = 0;
  ranking_ = 0;
  ranker_count_ = 0;
  initial_grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingReward::~RankingReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RankingReward)
  SharedDtor();
}

void RankingReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RankingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankingReward_descriptor_;
}

const RankingReward& RankingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RankingReward* RankingReward::default_instance_ = NULL;

RankingReward* RankingReward::New() const {
  return new RankingReward;
}

void RankingReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RankingReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(grade_, ranker_count_);
    initial_grade_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RankingReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 grade = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_star_count;
        break;
      }

      // required int32 star_count = 2;
      case 2: {
        if (tag == 16) {
         parse_star_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_count_)));
          set_has_star_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 3;
      case 3: {
        if (tag == 24) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ranker_count;
        break;
      }

      // required int32 ranker_count = 4;
      case 4: {
        if (tag == 32) {
         parse_ranker_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranker_count_)));
          set_has_ranker_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_initial_grade;
        break;
      }

      // required int32 initial_grade = 5;
      case 5: {
        if (tag == 40) {
         parse_initial_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &initial_grade_)));
          set_has_initial_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 10;
      case 10: {
        if (tag == 82) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RankingReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RankingReward)
  return false;
#undef DO_
}

void RankingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RankingReward)
  // required int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // required int32 star_count = 2;
  if (has_star_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star_count(), output);
  }

  // required int32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // required int32 ranker_count = 4;
  if (has_ranker_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranker_count(), output);
  }

  // required int32 initial_grade = 5;
  if (has_initial_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->initial_grade(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RankingReward)
}

::google::protobuf::uint8* RankingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RankingReward)
  // required int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // required int32 star_count = 2;
  if (has_star_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star_count(), target);
  }

  // required int32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // required int32 ranker_count = 4;
  if (has_ranker_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranker_count(), target);
  }

  // required int32 initial_grade = 5;
  if (has_initial_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->initial_grade(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RankingReward)
  return target;
}

int RankingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 star_count = 2;
    if (has_star_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_count());
    }

    // required int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int32 ranker_count = 4;
    if (has_ranker_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranker_count());
    }

    // required int32 initial_grade = 5;
    if (has_initial_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->initial_grade());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 10;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankingReward::MergeFrom(const RankingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_star_count()) {
      set_star_count(from.star_count());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_ranker_count()) {
      set_ranker_count(from.ranker_count());
    }
    if (from.has_initial_grade()) {
      set_initial_grade(from.initial_grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingReward::CopyFrom(const RankingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void RankingReward::Swap(RankingReward* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(star_count_, other->star_count_);
    std::swap(ranking_, other->ranking_);
    std::swap(ranker_count_, other->ranker_count_);
    std::swap(initial_grade_, other->initial_grade_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankingReward_descriptor_;
  metadata.reflection = RankingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DimensionRankingReward::kBestDifficultyLevelFieldNumber;
const int DimensionRankingReward::kBestClearTimeMillisFieldNumber;
const int DimensionRankingReward::kRankingFieldNumber;
const int DimensionRankingReward::kRankerCountFieldNumber;
const int DimensionRankingReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

DimensionRankingReward::DimensionRankingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DimensionRankingReward)
}

void DimensionRankingReward::InitAsDefaultInstance() {
}

DimensionRankingReward::DimensionRankingReward(const DimensionRankingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DimensionRankingReward)
}

void DimensionRankingReward::SharedCtor() {
  _cached_size_ = 0;
  best_difficulty_level_ = 0;
  best_clear_time_millis_ = 0;
  ranking_ = 0;
  ranker_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DimensionRankingReward::~DimensionRankingReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DimensionRankingReward)
  SharedDtor();
}

void DimensionRankingReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DimensionRankingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DimensionRankingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DimensionRankingReward_descriptor_;
}

const DimensionRankingReward& DimensionRankingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DimensionRankingReward* DimensionRankingReward::default_instance_ = NULL;

DimensionRankingReward* DimensionRankingReward::New() const {
  return new DimensionRankingReward;
}

void DimensionRankingReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DimensionRankingReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(best_difficulty_level_, ranker_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DimensionRankingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DimensionRankingReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 best_difficulty_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_difficulty_level_)));
          set_has_best_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_best_clear_time_millis;
        break;
      }

      // required int32 best_clear_time_millis = 2;
      case 2: {
        if (tag == 16) {
         parse_best_clear_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_clear_time_millis_)));
          set_has_best_clear_time_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 3;
      case 3: {
        if (tag == 24) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ranker_count;
        break;
      }

      // required int32 ranker_count = 4;
      case 4: {
        if (tag == 32) {
         parse_ranker_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranker_count_)));
          set_has_ranker_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 10;
      case 10: {
        if (tag == 82) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DimensionRankingReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DimensionRankingReward)
  return false;
#undef DO_
}

void DimensionRankingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DimensionRankingReward)
  // required int32 best_difficulty_level = 1;
  if (has_best_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->best_difficulty_level(), output);
  }

  // required int32 best_clear_time_millis = 2;
  if (has_best_clear_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->best_clear_time_millis(), output);
  }

  // required int32 ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // required int32 ranker_count = 4;
  if (has_ranker_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranker_count(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DimensionRankingReward)
}

::google::protobuf::uint8* DimensionRankingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DimensionRankingReward)
  // required int32 best_difficulty_level = 1;
  if (has_best_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->best_difficulty_level(), target);
  }

  // required int32 best_clear_time_millis = 2;
  if (has_best_clear_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->best_clear_time_millis(), target);
  }

  // required int32 ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // required int32 ranker_count = 4;
  if (has_ranker_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranker_count(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 10;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DimensionRankingReward)
  return target;
}

int DimensionRankingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 best_difficulty_level = 1;
    if (has_best_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_difficulty_level());
    }

    // required int32 best_clear_time_millis = 2;
    if (has_best_clear_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_clear_time_millis());
    }

    // required int32 ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int32 ranker_count = 4;
    if (has_ranker_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranker_count());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 10;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DimensionRankingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DimensionRankingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DimensionRankingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DimensionRankingReward::MergeFrom(const DimensionRankingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_best_difficulty_level()) {
      set_best_difficulty_level(from.best_difficulty_level());
    }
    if (from.has_best_clear_time_millis()) {
      set_best_clear_time_millis(from.best_clear_time_millis());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_ranker_count()) {
      set_ranker_count(from.ranker_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DimensionRankingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionRankingReward::CopyFrom(const DimensionRankingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionRankingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void DimensionRankingReward::Swap(DimensionRankingReward* other) {
  if (other != this) {
    std::swap(best_difficulty_level_, other->best_difficulty_level_);
    std::swap(best_clear_time_millis_, other->best_clear_time_millis_);
    std::swap(ranking_, other->ranking_);
    std::swap(ranker_count_, other->ranker_count_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DimensionRankingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DimensionRankingReward_descriptor_;
  metadata.reflection = DimensionRankingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DimensionStatus::kBestDifficultyLevelFieldNumber;
const int DimensionStatus::kBestClearTimeMillisFieldNumber;
const int DimensionStatus::kBestCharacterTypeFieldNumber;
const int DimensionStatus::kBestCharacterLevelFieldNumber;
const int DimensionStatus::kBestTotalPowerFieldNumber;
const int DimensionStatus::kBestRecordTimeFieldNumber;
const int DimensionStatus::kTopDifficultyLevelFieldNumber;
const int DimensionStatus::kLastDifficultyLevelFieldNumber;
const int DimensionStatus::kLastCharacterTypeFieldNumber;
const int DimensionStatus::kDailyClearCountFieldNumber;
const int DimensionStatus::kDailyClearCountMaxFieldNumber;
const int DimensionStatus::kDailyCountInitTimeFieldNumber;
#endif  // !_MSC_VER

DimensionStatus::DimensionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DimensionStatus)
}

void DimensionStatus::InitAsDefaultInstance() {
}

DimensionStatus::DimensionStatus(const DimensionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DimensionStatus)
}

void DimensionStatus::SharedCtor() {
  _cached_size_ = 0;
  best_difficulty_level_ = 0;
  best_clear_time_millis_ = 0;
  best_character_type_ = 1;
  best_character_level_ = 0;
  best_total_power_ = 0;
  best_record_time_ = GOOGLE_LONGLONG(0);
  top_difficulty_level_ = 0;
  last_difficulty_level_ = 0;
  last_character_type_ = 1;
  daily_clear_count_ = 0;
  daily_clear_count_max_ = 0;
  daily_count_init_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DimensionStatus::~DimensionStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DimensionStatus)
  SharedDtor();
}

void DimensionStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DimensionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DimensionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DimensionStatus_descriptor_;
}

const DimensionStatus& DimensionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DimensionStatus* DimensionStatus::default_instance_ = NULL;

DimensionStatus* DimensionStatus::New() const {
  return new DimensionStatus;
}

void DimensionStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DimensionStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(best_difficulty_level_, best_clear_time_millis_);
    ZR_(best_character_level_, last_difficulty_level_);
    best_character_type_ = 1;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(daily_clear_count_, daily_count_init_time_);
    last_character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DimensionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DimensionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 best_difficulty_level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_difficulty_level_)));
          set_has_best_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_best_clear_time_millis;
        break;
      }

      // optional int32 best_clear_time_millis = 2;
      case 2: {
        if (tag == 16) {
         parse_best_clear_time_millis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_clear_time_millis_)));
          set_has_best_clear_time_millis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_best_character_type;
        break;
      }

      // optional .b2.protocol.commondata.Character.TYPE best_character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_best_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_best_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_best_character_level;
        break;
      }

      // optional int32 best_character_level = 4;
      case 4: {
        if (tag == 32) {
         parse_best_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_character_level_)));
          set_has_best_character_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_best_total_power;
        break;
      }

      // optional int32 best_total_power = 5;
      case 5: {
        if (tag == 40) {
         parse_best_total_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &best_total_power_)));
          set_has_best_total_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_best_record_time;
        break;
      }

      // optional int64 best_record_time = 6;
      case 6: {
        if (tag == 48) {
         parse_best_record_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &best_record_time_)));
          set_has_best_record_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_top_difficulty_level;
        break;
      }

      // required int32 top_difficulty_level = 7;
      case 7: {
        if (tag == 56) {
         parse_top_difficulty_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &top_difficulty_level_)));
          set_has_top_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_last_difficulty_level;
        break;
      }

      // optional int32 last_difficulty_level = 8;
      case 8: {
        if (tag == 64) {
         parse_last_difficulty_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_difficulty_level_)));
          set_has_last_difficulty_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_last_character_type;
        break;
      }

      // optional .b2.protocol.commondata.Character.TYPE last_character_type = 9;
      case 9: {
        if (tag == 72) {
         parse_last_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_last_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_daily_clear_count;
        break;
      }

      // required int32 daily_clear_count = 10;
      case 10: {
        if (tag == 80) {
         parse_daily_clear_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_clear_count_)));
          set_has_daily_clear_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_daily_clear_count_max;
        break;
      }

      // required int32 daily_clear_count_max = 11;
      case 11: {
        if (tag == 88) {
         parse_daily_clear_count_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_clear_count_max_)));
          set_has_daily_clear_count_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_daily_count_init_time;
        break;
      }

      // required int64 daily_count_init_time = 12;
      case 12: {
        if (tag == 96) {
         parse_daily_count_init_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daily_count_init_time_)));
          set_has_daily_count_init_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DimensionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DimensionStatus)
  return false;
#undef DO_
}

void DimensionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DimensionStatus)
  // required int32 best_difficulty_level = 1;
  if (has_best_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->best_difficulty_level(), output);
  }

  // optional int32 best_clear_time_millis = 2;
  if (has_best_clear_time_millis()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->best_clear_time_millis(), output);
  }

  // optional .b2.protocol.commondata.Character.TYPE best_character_type = 3;
  if (has_best_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->best_character_type(), output);
  }

  // optional int32 best_character_level = 4;
  if (has_best_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->best_character_level(), output);
  }

  // optional int32 best_total_power = 5;
  if (has_best_total_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->best_total_power(), output);
  }

  // optional int64 best_record_time = 6;
  if (has_best_record_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->best_record_time(), output);
  }

  // required int32 top_difficulty_level = 7;
  if (has_top_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->top_difficulty_level(), output);
  }

  // optional int32 last_difficulty_level = 8;
  if (has_last_difficulty_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->last_difficulty_level(), output);
  }

  // optional .b2.protocol.commondata.Character.TYPE last_character_type = 9;
  if (has_last_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->last_character_type(), output);
  }

  // required int32 daily_clear_count = 10;
  if (has_daily_clear_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->daily_clear_count(), output);
  }

  // required int32 daily_clear_count_max = 11;
  if (has_daily_clear_count_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->daily_clear_count_max(), output);
  }

  // required int64 daily_count_init_time = 12;
  if (has_daily_count_init_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->daily_count_init_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DimensionStatus)
}

::google::protobuf::uint8* DimensionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DimensionStatus)
  // required int32 best_difficulty_level = 1;
  if (has_best_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->best_difficulty_level(), target);
  }

  // optional int32 best_clear_time_millis = 2;
  if (has_best_clear_time_millis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->best_clear_time_millis(), target);
  }

  // optional .b2.protocol.commondata.Character.TYPE best_character_type = 3;
  if (has_best_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->best_character_type(), target);
  }

  // optional int32 best_character_level = 4;
  if (has_best_character_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->best_character_level(), target);
  }

  // optional int32 best_total_power = 5;
  if (has_best_total_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->best_total_power(), target);
  }

  // optional int64 best_record_time = 6;
  if (has_best_record_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->best_record_time(), target);
  }

  // required int32 top_difficulty_level = 7;
  if (has_top_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->top_difficulty_level(), target);
  }

  // optional int32 last_difficulty_level = 8;
  if (has_last_difficulty_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->last_difficulty_level(), target);
  }

  // optional .b2.protocol.commondata.Character.TYPE last_character_type = 9;
  if (has_last_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->last_character_type(), target);
  }

  // required int32 daily_clear_count = 10;
  if (has_daily_clear_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->daily_clear_count(), target);
  }

  // required int32 daily_clear_count_max = 11;
  if (has_daily_clear_count_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->daily_clear_count_max(), target);
  }

  // required int64 daily_count_init_time = 12;
  if (has_daily_count_init_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->daily_count_init_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DimensionStatus)
  return target;
}

int DimensionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 best_difficulty_level = 1;
    if (has_best_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_difficulty_level());
    }

    // optional int32 best_clear_time_millis = 2;
    if (has_best_clear_time_millis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_clear_time_millis());
    }

    // optional .b2.protocol.commondata.Character.TYPE best_character_type = 3;
    if (has_best_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->best_character_type());
    }

    // optional int32 best_character_level = 4;
    if (has_best_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_character_level());
    }

    // optional int32 best_total_power = 5;
    if (has_best_total_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->best_total_power());
    }

    // optional int64 best_record_time = 6;
    if (has_best_record_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->best_record_time());
    }

    // required int32 top_difficulty_level = 7;
    if (has_top_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->top_difficulty_level());
    }

    // optional int32 last_difficulty_level = 8;
    if (has_last_difficulty_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_difficulty_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .b2.protocol.commondata.Character.TYPE last_character_type = 9;
    if (has_last_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->last_character_type());
    }

    // required int32 daily_clear_count = 10;
    if (has_daily_clear_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_clear_count());
    }

    // required int32 daily_clear_count_max = 11;
    if (has_daily_clear_count_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_clear_count_max());
    }

    // required int64 daily_count_init_time = 12;
    if (has_daily_count_init_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daily_count_init_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DimensionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DimensionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DimensionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DimensionStatus::MergeFrom(const DimensionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_best_difficulty_level()) {
      set_best_difficulty_level(from.best_difficulty_level());
    }
    if (from.has_best_clear_time_millis()) {
      set_best_clear_time_millis(from.best_clear_time_millis());
    }
    if (from.has_best_character_type()) {
      set_best_character_type(from.best_character_type());
    }
    if (from.has_best_character_level()) {
      set_best_character_level(from.best_character_level());
    }
    if (from.has_best_total_power()) {
      set_best_total_power(from.best_total_power());
    }
    if (from.has_best_record_time()) {
      set_best_record_time(from.best_record_time());
    }
    if (from.has_top_difficulty_level()) {
      set_top_difficulty_level(from.top_difficulty_level());
    }
    if (from.has_last_difficulty_level()) {
      set_last_difficulty_level(from.last_difficulty_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_character_type()) {
      set_last_character_type(from.last_character_type());
    }
    if (from.has_daily_clear_count()) {
      set_daily_clear_count(from.daily_clear_count());
    }
    if (from.has_daily_clear_count_max()) {
      set_daily_clear_count_max(from.daily_clear_count_max());
    }
    if (from.has_daily_count_init_time()) {
      set_daily_count_init_time(from.daily_count_init_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DimensionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DimensionStatus::CopyFrom(const DimensionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DimensionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000e41) != 0x00000e41) return false;

  return true;
}

void DimensionStatus::Swap(DimensionStatus* other) {
  if (other != this) {
    std::swap(best_difficulty_level_, other->best_difficulty_level_);
    std::swap(best_clear_time_millis_, other->best_clear_time_millis_);
    std::swap(best_character_type_, other->best_character_type_);
    std::swap(best_character_level_, other->best_character_level_);
    std::swap(best_total_power_, other->best_total_power_);
    std::swap(best_record_time_, other->best_record_time_);
    std::swap(top_difficulty_level_, other->top_difficulty_level_);
    std::swap(last_difficulty_level_, other->last_difficulty_level_);
    std::swap(last_character_type_, other->last_character_type_);
    std::swap(daily_clear_count_, other->daily_clear_count_);
    std::swap(daily_clear_count_max_, other->daily_clear_count_max_);
    std::swap(daily_count_init_time_, other->daily_count_init_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DimensionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DimensionStatus_descriptor_;
  metadata.reflection = DimensionStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Room_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_TYPE_descriptor_;
}
bool Room_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Room_TYPE Room::PVP;
const Room_TYPE Room::RAID;
const Room_TYPE Room::ASSAULT;
const Room_TYPE Room::TYPE_MIN;
const Room_TYPE Room::TYPE_MAX;
const int Room::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Room_ACCESS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_ACCESS_descriptor_;
}
bool Room_ACCESS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Room_ACCESS Room::PUBLIC;
const Room_ACCESS Room::PRIVATE;
const Room_ACCESS Room::ACCESS_MIN;
const Room_ACCESS Room::ACCESS_MAX;
const int Room::ACCESS_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Room::Room()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Room)
}

void Room::InitAsDefaultInstance() {
}

Room::Room(const Room& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Room)
}

void Room::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Room)
  SharedDtor();
}

void Room::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Room::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Room::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Room_descriptor_;
}

const Room& Room::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Room* Room::default_instance_ = NULL;

Room* Room::New() const {
  return new Room;
}

void Room::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Room::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Room)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Room)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Room)
  return false;
#undef DO_
}

void Room::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Room)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Room)
}

::google::protobuf::uint8* Room::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Room)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Room)
  return target;
}

int Room::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Room::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Room* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Room*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Room::MergeFrom(const Room& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Room::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Room::CopyFrom(const Room& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {

  return true;
}

void Room::Swap(Room* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Room::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Room_descriptor_;
  metadata.reflection = Room_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomLocation::kChannelEndpointFieldNumber;
const int RoomLocation::kRoomIdFieldNumber;
#endif  // !_MSC_VER

RoomLocation::RoomLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RoomLocation)
}

void RoomLocation::InitAsDefaultInstance() {
  channel_endpoint_ = const_cast< ::b2::protocol::commondata::Endpoint*>(&::b2::protocol::commondata::Endpoint::default_instance());
}

RoomLocation::RoomLocation(const RoomLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RoomLocation)
}

void RoomLocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_endpoint_ = NULL;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomLocation::~RoomLocation() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RoomLocation)
  SharedDtor();
}

void RoomLocation::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
    delete channel_endpoint_;
  }
}

void RoomLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomLocation_descriptor_;
}

const RoomLocation& RoomLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RoomLocation* RoomLocation::default_instance_ = NULL;

RoomLocation* RoomLocation::New() const {
  return new RoomLocation;
}

void RoomLocation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_endpoint()) {
      if (channel_endpoint_ != NULL) channel_endpoint_->::b2::protocol::commondata::Endpoint::Clear();
    }
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RoomLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_endpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id;
        break;
      }

      // required string room_id = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RoomLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RoomLocation)
  return false;
#undef DO_
}

void RoomLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RoomLocation)
  // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
  if (has_channel_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_endpoint(), output);
  }

  // required string room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RoomLocation)
}

::google::protobuf::uint8* RoomLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RoomLocation)
  // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
  if (has_channel_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_endpoint(), target);
  }

  // required string room_id = 2;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RoomLocation)
  return target;
}

int RoomLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
    if (has_channel_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_endpoint());
    }

    // required string room_id = 2;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomLocation::MergeFrom(const RoomLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_endpoint()) {
      mutable_channel_endpoint()->::b2::protocol::commondata::Endpoint::MergeFrom(from.channel_endpoint());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLocation::CopyFrom(const RoomLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_channel_endpoint()) {
    if (!this->channel_endpoint().IsInitialized()) return false;
  }
  return true;
}

void RoomLocation::Swap(RoomLocation* other) {
  if (other != this) {
    std::swap(channel_endpoint_, other->channel_endpoint_);
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomLocation_descriptor_;
  metadata.reflection = RoomLocation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamBattleEntry::kFormationTypeFieldNumber;
const int TeamBattleEntry::kCharacterSlot1FieldNumber;
const int TeamBattleEntry::kCharacterSlot2FieldNumber;
const int TeamBattleEntry::kCharacterSlot3FieldNumber;
#endif  // !_MSC_VER

TeamBattleEntry::TeamBattleEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.TeamBattleEntry)
}

void TeamBattleEntry::InitAsDefaultInstance() {
}

TeamBattleEntry::TeamBattleEntry(const TeamBattleEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.TeamBattleEntry)
}

void TeamBattleEntry::SharedCtor() {
  _cached_size_ = 0;
  formation_type_ = 1;
  character_slot_1_ = 1;
  character_slot_2_ = 1;
  character_slot_3_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamBattleEntry::~TeamBattleEntry() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.TeamBattleEntry)
  SharedDtor();
}

void TeamBattleEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamBattleEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamBattleEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamBattleEntry_descriptor_;
}

const TeamBattleEntry& TeamBattleEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

TeamBattleEntry* TeamBattleEntry::default_instance_ = NULL;

TeamBattleEntry* TeamBattleEntry::New() const {
  return new TeamBattleEntry;
}

void TeamBattleEntry::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    formation_type_ = 1;
    character_slot_1_ = 1;
    character_slot_2_ = 1;
    character_slot_3_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamBattleEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.TeamBattleEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::BattleFormation_TYPE_IsValid(value)) {
            set_formation_type(static_cast< ::b2::protocol::commondata::BattleFormation_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_character_slot_1;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_slot_1 = 10;
      case 10: {
        if (tag == 80) {
         parse_character_slot_1:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_slot_1(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_character_slot_2;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_slot_2 = 11;
      case 11: {
        if (tag == 88) {
         parse_character_slot_2:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_slot_2(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_character_slot_3;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_slot_3 = 12;
      case 12: {
        if (tag == 96) {
         parse_character_slot_3:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_slot_3(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.TeamBattleEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.TeamBattleEntry)
  return false;
#undef DO_
}

void TeamBattleEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.TeamBattleEntry)
  // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
  if (has_formation_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->formation_type(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_slot_1 = 10;
  if (has_character_slot_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->character_slot_1(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_slot_2 = 11;
  if (has_character_slot_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->character_slot_2(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_slot_3 = 12;
  if (has_character_slot_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->character_slot_3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.TeamBattleEntry)
}

::google::protobuf::uint8* TeamBattleEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.TeamBattleEntry)
  // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
  if (has_formation_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->formation_type(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_slot_1 = 10;
  if (has_character_slot_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->character_slot_1(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_slot_2 = 11;
  if (has_character_slot_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->character_slot_2(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_slot_3 = 12;
  if (has_character_slot_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->character_slot_3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.TeamBattleEntry)
  return target;
}

int TeamBattleEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.BattleFormation.TYPE formation_type = 1;
    if (has_formation_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation_type());
    }

    // required .b2.protocol.commondata.Character.TYPE character_slot_1 = 10;
    if (has_character_slot_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_slot_1());
    }

    // required .b2.protocol.commondata.Character.TYPE character_slot_2 = 11;
    if (has_character_slot_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_slot_2());
    }

    // required .b2.protocol.commondata.Character.TYPE character_slot_3 = 12;
    if (has_character_slot_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_slot_3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamBattleEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamBattleEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamBattleEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamBattleEntry::MergeFrom(const TeamBattleEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formation_type()) {
      set_formation_type(from.formation_type());
    }
    if (from.has_character_slot_1()) {
      set_character_slot_1(from.character_slot_1());
    }
    if (from.has_character_slot_2()) {
      set_character_slot_2(from.character_slot_2());
    }
    if (from.has_character_slot_3()) {
      set_character_slot_3(from.character_slot_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamBattleEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamBattleEntry::CopyFrom(const TeamBattleEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamBattleEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TeamBattleEntry::Swap(TeamBattleEntry* other) {
  if (other != this) {
    std::swap(formation_type_, other->formation_type_);
    std::swap(character_slot_1_, other->character_slot_1_);
    std::swap(character_slot_2_, other->character_slot_2_);
    std::swap(character_slot_3_, other->character_slot_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamBattleEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamBattleEntry_descriptor_;
  metadata.reflection = TeamBattleEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchOpenPeriodInfo::kDayOfWeekFieldNumber;
const int MatchOpenPeriodInfo::kBeginHourFieldNumber;
const int MatchOpenPeriodInfo::kBeginMinFieldNumber;
const int MatchOpenPeriodInfo::kEndHourFieldNumber;
const int MatchOpenPeriodInfo::kEndMinFieldNumber;
const int MatchOpenPeriodInfo::kRaidTypeFieldNumber;
const int MatchOpenPeriodInfo::kAssaultTypeFieldNumber;
#endif  // !_MSC_VER

MatchOpenPeriodInfo::MatchOpenPeriodInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchOpenPeriodInfo)
}

void MatchOpenPeriodInfo::InitAsDefaultInstance() {
}

MatchOpenPeriodInfo::MatchOpenPeriodInfo(const MatchOpenPeriodInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchOpenPeriodInfo)
}

void MatchOpenPeriodInfo::SharedCtor() {
  _cached_size_ = 0;
  day_of_week_ = 0;
  begin_hour_ = 0;
  begin_min_ = 0;
  end_hour_ = 0;
  end_min_ = 0;
  raid_type_ = 0;
  assault_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchOpenPeriodInfo::~MatchOpenPeriodInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchOpenPeriodInfo)
  SharedDtor();
}

void MatchOpenPeriodInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchOpenPeriodInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchOpenPeriodInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchOpenPeriodInfo_descriptor_;
}

const MatchOpenPeriodInfo& MatchOpenPeriodInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchOpenPeriodInfo* MatchOpenPeriodInfo::default_instance_ = NULL;

MatchOpenPeriodInfo* MatchOpenPeriodInfo::New() const {
  return new MatchOpenPeriodInfo;
}

void MatchOpenPeriodInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MatchOpenPeriodInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(day_of_week_, assault_type_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchOpenPeriodInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchOpenPeriodInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 day_of_week = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_of_week_)));
          set_has_day_of_week();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_begin_hour;
        break;
      }

      // required int32 begin_hour = 2;
      case 2: {
        if (tag == 16) {
         parse_begin_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_hour_)));
          set_has_begin_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_begin_min;
        break;
      }

      // required int32 begin_min = 3;
      case 3: {
        if (tag == 24) {
         parse_begin_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_min_)));
          set_has_begin_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_hour;
        break;
      }

      // required int32 end_hour = 4;
      case 4: {
        if (tag == 32) {
         parse_end_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_hour_)));
          set_has_end_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end_min;
        break;
      }

      // required int32 end_min = 5;
      case 5: {
        if (tag == 40) {
         parse_end_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_min_)));
          set_has_end_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_raid_type;
        break;
      }

      // optional int32 raid_type = 6;
      case 6: {
        if (tag == 48) {
         parse_raid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_assault_type;
        break;
      }

      // optional int32 assault_type = 7;
      case 7: {
        if (tag == 56) {
         parse_assault_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_type_)));
          set_has_assault_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchOpenPeriodInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchOpenPeriodInfo)
  return false;
#undef DO_
}

void MatchOpenPeriodInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchOpenPeriodInfo)
  // required int32 day_of_week = 1;
  if (has_day_of_week()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day_of_week(), output);
  }

  // required int32 begin_hour = 2;
  if (has_begin_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->begin_hour(), output);
  }

  // required int32 begin_min = 3;
  if (has_begin_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->begin_min(), output);
  }

  // required int32 end_hour = 4;
  if (has_end_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->end_hour(), output);
  }

  // required int32 end_min = 5;
  if (has_end_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->end_min(), output);
  }

  // optional int32 raid_type = 6;
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->raid_type(), output);
  }

  // optional int32 assault_type = 7;
  if (has_assault_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->assault_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchOpenPeriodInfo)
}

::google::protobuf::uint8* MatchOpenPeriodInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchOpenPeriodInfo)
  // required int32 day_of_week = 1;
  if (has_day_of_week()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day_of_week(), target);
  }

  // required int32 begin_hour = 2;
  if (has_begin_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->begin_hour(), target);
  }

  // required int32 begin_min = 3;
  if (has_begin_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->begin_min(), target);
  }

  // required int32 end_hour = 4;
  if (has_end_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->end_hour(), target);
  }

  // required int32 end_min = 5;
  if (has_end_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->end_min(), target);
  }

  // optional int32 raid_type = 6;
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->raid_type(), target);
  }

  // optional int32 assault_type = 7;
  if (has_assault_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->assault_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchOpenPeriodInfo)
  return target;
}

int MatchOpenPeriodInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 day_of_week = 1;
    if (has_day_of_week()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_of_week());
    }

    // required int32 begin_hour = 2;
    if (has_begin_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_hour());
    }

    // required int32 begin_min = 3;
    if (has_begin_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin_min());
    }

    // required int32 end_hour = 4;
    if (has_end_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_hour());
    }

    // required int32 end_min = 5;
    if (has_end_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end_min());
    }

    // optional int32 raid_type = 6;
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_type());
    }

    // optional int32 assault_type = 7;
    if (has_assault_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchOpenPeriodInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchOpenPeriodInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchOpenPeriodInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchOpenPeriodInfo::MergeFrom(const MatchOpenPeriodInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day_of_week()) {
      set_day_of_week(from.day_of_week());
    }
    if (from.has_begin_hour()) {
      set_begin_hour(from.begin_hour());
    }
    if (from.has_begin_min()) {
      set_begin_min(from.begin_min());
    }
    if (from.has_end_hour()) {
      set_end_hour(from.end_hour());
    }
    if (from.has_end_min()) {
      set_end_min(from.end_min());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
    if (from.has_assault_type()) {
      set_assault_type(from.assault_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchOpenPeriodInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchOpenPeriodInfo::CopyFrom(const MatchOpenPeriodInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchOpenPeriodInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MatchOpenPeriodInfo::Swap(MatchOpenPeriodInfo* other) {
  if (other != this) {
    std::swap(day_of_week_, other->day_of_week_);
    std::swap(begin_hour_, other->begin_hour_);
    std::swap(begin_min_, other->begin_min_);
    std::swap(end_hour_, other->end_hour_);
    std::swap(end_min_, other->end_min_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(assault_type_, other->assault_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchOpenPeriodInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchOpenPeriodInfo_descriptor_;
  metadata.reflection = MatchOpenPeriodInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillMonsterInfo::kMonsterIdFieldNumber;
const int KillMonsterInfo::kMonsterGradeFieldNumber;
const int KillMonsterInfo::kKillCountFieldNumber;
#endif  // !_MSC_VER

KillMonsterInfo::KillMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.KillMonsterInfo)
}

void KillMonsterInfo::InitAsDefaultInstance() {
}

KillMonsterInfo::KillMonsterInfo(const KillMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.KillMonsterInfo)
}

void KillMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monster_id_ = 0;
  monster_grade_ = 0;
  kill_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillMonsterInfo::~KillMonsterInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.KillMonsterInfo)
  SharedDtor();
}

void KillMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillMonsterInfo_descriptor_;
}

const KillMonsterInfo& KillMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

KillMonsterInfo* KillMonsterInfo::default_instance_ = NULL;

KillMonsterInfo* KillMonsterInfo::New() const {
  return new KillMonsterInfo;
}

void KillMonsterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KillMonsterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(monster_id_, kill_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.KillMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 monster_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monster_grade;
        break;
      }

      // required int32 monster_grade = 2;
      case 2: {
        if (tag == 16) {
         parse_monster_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monster_grade_)));
          set_has_monster_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_kill_count;
        break;
      }

      // required int32 kill_count = 3;
      case 3: {
        if (tag == 24) {
         parse_kill_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.KillMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.KillMonsterInfo)
  return false;
#undef DO_
}

void KillMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.KillMonsterInfo)
  // required int32 monster_id = 1;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monster_id(), output);
  }

  // required int32 monster_grade = 2;
  if (has_monster_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monster_grade(), output);
  }

  // required int32 kill_count = 3;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kill_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.KillMonsterInfo)
}

::google::protobuf::uint8* KillMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.KillMonsterInfo)
  // required int32 monster_id = 1;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monster_id(), target);
  }

  // required int32 monster_grade = 2;
  if (has_monster_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monster_grade(), target);
  }

  // required int32 kill_count = 3;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kill_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.KillMonsterInfo)
  return target;
}

int KillMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 monster_id = 1;
    if (has_monster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_id());
    }

    // required int32 monster_grade = 2;
    if (has_monster_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monster_grade());
    }

    // required int32 kill_count = 3;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillMonsterInfo::MergeFrom(const KillMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_id()) {
      set_monster_id(from.monster_id());
    }
    if (from.has_monster_grade()) {
      set_monster_grade(from.monster_grade());
    }
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillMonsterInfo::CopyFrom(const KillMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void KillMonsterInfo::Swap(KillMonsterInfo* other) {
  if (other != this) {
    std::swap(monster_id_, other->monster_id_);
    std::swap(monster_grade_, other->monster_grade_);
    std::swap(kill_count_, other->kill_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillMonsterInfo_descriptor_;
  metadata.reflection = KillMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DropData::kTemplateIdFieldNumber;
const int DropData::kCountFieldNumber;
#endif  // !_MSC_VER

DropData::DropData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DropData)
}

void DropData::InitAsDefaultInstance() {
}

DropData::DropData(const DropData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DropData)
}

void DropData::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropData::~DropData() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DropData)
  SharedDtor();
}

void DropData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DropData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DropData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DropData_descriptor_;
}

const DropData& DropData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DropData* DropData::default_instance_ = NULL;

DropData* DropData::New() const {
  return new DropData;
}

void DropData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DropData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(template_id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DropData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DropData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DropData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DropData)
  return false;
#undef DO_
}

void DropData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DropData)
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DropData)
}

::google::protobuf::uint8* DropData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DropData)
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DropData)
  return target;
}

int DropData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DropData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DropData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DropData::MergeFrom(const DropData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DropData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DropData::CopyFrom(const DropData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DropData::Swap(DropData* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DropData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DropData_descriptor_;
  metadata.reflection = DropData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailItemInfo::kItemTemplateIdFieldNumber;
const int MailItemInfo::kItemAmountFieldNumber;
const int MailItemInfo::kCharacterTypeFieldNumber;
const int MailItemInfo::kItemFieldNumber;
const int MailItemInfo::kCostumeFieldNumber;
const int MailItemInfo::kTotemFieldNumber;
#endif  // !_MSC_VER

MailItemInfo::MailItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MailItemInfo)
}

void MailItemInfo::InitAsDefaultInstance() {
  item_ = const_cast< ::b2::protocol::commondata::Item*>(&::b2::protocol::commondata::Item::default_instance());
  costume_ = const_cast< ::b2::protocol::commondata::Costume*>(&::b2::protocol::commondata::Costume::default_instance());
  totem_ = const_cast< ::b2::protocol::commondata::Totem*>(&::b2::protocol::commondata::Totem::default_instance());
}

MailItemInfo::MailItemInfo(const MailItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MailItemInfo)
}

void MailItemInfo::SharedCtor() {
  _cached_size_ = 0;
  item_template_id_ = 0;
  item_amount_ = 0;
  character_type_ = 0;
  item_ = NULL;
  costume_ = NULL;
  totem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailItemInfo::~MailItemInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MailItemInfo)
  SharedDtor();
}

void MailItemInfo::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete costume_;
    delete totem_;
  }
}

void MailItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailItemInfo_descriptor_;
}

const MailItemInfo& MailItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MailItemInfo* MailItemInfo::default_instance_ = NULL;

MailItemInfo* MailItemInfo::New() const {
  return new MailItemInfo;
}

void MailItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MailItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(item_template_id_, item_amount_);
    character_type_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::b2::protocol::commondata::Item::Clear();
    }
    if (has_costume()) {
      if (costume_ != NULL) costume_->::b2::protocol::commondata::Costume::Clear();
    }
    if (has_totem()) {
      if (totem_ != NULL) totem_->::b2::protocol::commondata::Totem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MailItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_amount;
        break;
      }

      // required int32 item_amount = 2;
      case 2: {
        if (tag == 16) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // optional .b2.protocol.commondata.Item.CharacterType character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Item_CharacterType_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Item_CharacterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .b2.protocol.commondata.Item item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_costume;
        break;
      }

      // optional .b2.protocol.commondata.Costume costume = 5;
      case 5: {
        if (tag == 42) {
         parse_costume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_costume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_totem;
        break;
      }

      // optional .b2.protocol.commondata.Totem totem = 6;
      case 6: {
        if (tag == 50) {
         parse_totem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MailItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MailItemInfo)
  return false;
#undef DO_
}

void MailItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MailItemInfo)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_template_id(), output);
  }

  // required int32 item_amount = 2;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_amount(), output);
  }

  // optional .b2.protocol.commondata.Item.CharacterType character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  // optional .b2.protocol.commondata.Item item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  // optional .b2.protocol.commondata.Costume costume = 5;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->costume(), output);
  }

  // optional .b2.protocol.commondata.Totem totem = 6;
  if (has_totem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->totem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MailItemInfo)
}

::google::protobuf::uint8* MailItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MailItemInfo)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_template_id(), target);
  }

  // required int32 item_amount = 2;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_amount(), target);
  }

  // optional .b2.protocol.commondata.Item.CharacterType character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  // optional .b2.protocol.commondata.Item item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  // optional .b2.protocol.commondata.Costume costume = 5;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->costume(), target);
  }

  // optional .b2.protocol.commondata.Totem totem = 6;
  if (has_totem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->totem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MailItemInfo)
  return target;
}

int MailItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_template_id = 1;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required int32 item_amount = 2;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }

    // optional .b2.protocol.commondata.Item.CharacterType character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // optional .b2.protocol.commondata.Item item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .b2.protocol.commondata.Costume costume = 5;
    if (has_costume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->costume());
    }

    // optional .b2.protocol.commondata.Totem totem = 6;
    if (has_totem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailItemInfo::MergeFrom(const MailItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_item()) {
      mutable_item()->::b2::protocol::commondata::Item::MergeFrom(from.item());
    }
    if (from.has_costume()) {
      mutable_costume()->::b2::protocol::commondata::Costume::MergeFrom(from.costume());
    }
    if (from.has_totem()) {
      mutable_totem()->::b2::protocol::commondata::Totem::MergeFrom(from.totem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailItemInfo::CopyFrom(const MailItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_costume()) {
    if (!this->costume().IsInitialized()) return false;
  }
  if (has_totem()) {
    if (!this->totem().IsInitialized()) return false;
  }
  return true;
}

void MailItemInfo::Swap(MailItemInfo* other) {
  if (other != this) {
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(character_type_, other->character_type_);
    std::swap(item_, other->item_);
    std::swap(costume_, other->costume_);
    std::swap(totem_, other->totem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailItemInfo_descriptor_;
  metadata.reflection = MailItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingOption::kCharacterTypeFieldNumber;
const int WingOption::kOptionIndexFieldNumber;
const int WingOption::kLevelFieldNumber;
#endif  // !_MSC_VER

WingOption::WingOption()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.WingOption)
}

void WingOption::InitAsDefaultInstance() {
}

WingOption::WingOption(const WingOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.WingOption)
}

void WingOption::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  option_index_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingOption::~WingOption() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.WingOption)
  SharedDtor();
}

void WingOption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingOption_descriptor_;
}

const WingOption& WingOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

WingOption* WingOption::default_instance_ = NULL;

WingOption* WingOption::New() const {
  return new WingOption;
}

void WingOption::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WingOption*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(option_index_, level_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.WingOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_option_index;
        break;
      }

      // required int32 option_index = 2;
      case 2: {
        if (tag == 16) {
         parse_option_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &option_index_)));
          set_has_option_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.WingOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.WingOption)
  return false;
#undef DO_
}

void WingOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.WingOption)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->option_index(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.WingOption)
}

::google::protobuf::uint8* WingOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.WingOption)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 option_index = 2;
  if (has_option_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->option_index(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.WingOption)
  return target;
}

int WingOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 option_index = 2;
    if (has_option_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->option_index());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingOption::MergeFrom(const WingOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_option_index()) {
      set_option_index(from.option_index());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingOption::CopyFrom(const WingOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingOption::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WingOption::Swap(WingOption* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(option_index_, other->option_index_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingOption_descriptor_;
  metadata.reflection = WingOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FairyStatus::kFairyTypeFieldNumber;
const int FairyStatus::kLevelFieldNumber;
const int FairyStatus::kEnhancePointFieldNumber;
const int FairyStatus::kActivatedBlessOptionIdFieldNumber;
const int FairyStatus::kBlessLevelFieldNumber;
const int FairyStatus::kOptionValueFieldNumber;
#endif  // !_MSC_VER

FairyStatus::FairyStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.FairyStatus)
}

void FairyStatus::InitAsDefaultInstance() {
}

FairyStatus::FairyStatus(const FairyStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.FairyStatus)
}

void FairyStatus::SharedCtor() {
  _cached_size_ = 0;
  fairy_type_ = 1;
  level_ = 0;
  enhance_point_ = 0;
  activated_bless_option_id_ = 0;
  bless_level_ = 0;
  option_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FairyStatus::~FairyStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.FairyStatus)
  SharedDtor();
}

void FairyStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FairyStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FairyStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FairyStatus_descriptor_;
}

const FairyStatus& FairyStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

FairyStatus* FairyStatus::default_instance_ = NULL;

FairyStatus* FairyStatus::New() const {
  return new FairyStatus;
}

void FairyStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FairyStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(level_, option_value_);
    fairy_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FairyStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.FairyStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.FairyType fairy_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FairyType_IsValid(value)) {
            set_fairy_type(static_cast< ::b2::protocol::commondata::FairyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enhance_point;
        break;
      }

      // required int32 enhance_point = 3;
      case 3: {
        if (tag == 24) {
         parse_enhance_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_point_)));
          set_has_enhance_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_activated_bless_option_id;
        break;
      }

      // required int32 activated_bless_option_id = 5;
      case 5: {
        if (tag == 40) {
         parse_activated_bless_option_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activated_bless_option_id_)));
          set_has_activated_bless_option_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bless_level;
        break;
      }

      // required int32 bless_level = 6;
      case 6: {
        if (tag == 48) {
         parse_bless_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bless_level_)));
          set_has_bless_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_option_value;
        break;
      }

      // required float option_value = 7;
      case 7: {
        if (tag == 61) {
         parse_option_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &option_value_)));
          set_has_option_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.FairyStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.FairyStatus)
  return false;
#undef DO_
}

void FairyStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.FairyStatus)
  // required .b2.protocol.commondata.FairyType fairy_type = 1;
  if (has_fairy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fairy_type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 enhance_point = 3;
  if (has_enhance_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enhance_point(), output);
  }

  // required int32 activated_bless_option_id = 5;
  if (has_activated_bless_option_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->activated_bless_option_id(), output);
  }

  // required int32 bless_level = 6;
  if (has_bless_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bless_level(), output);
  }

  // required float option_value = 7;
  if (has_option_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->option_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.FairyStatus)
}

::google::protobuf::uint8* FairyStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.FairyStatus)
  // required .b2.protocol.commondata.FairyType fairy_type = 1;
  if (has_fairy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fairy_type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 enhance_point = 3;
  if (has_enhance_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enhance_point(), target);
  }

  // required int32 activated_bless_option_id = 5;
  if (has_activated_bless_option_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->activated_bless_option_id(), target);
  }

  // required int32 bless_level = 6;
  if (has_bless_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bless_level(), target);
  }

  // required float option_value = 7;
  if (has_option_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->option_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.FairyStatus)
  return target;
}

int FairyStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.FairyType fairy_type = 1;
    if (has_fairy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fairy_type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 enhance_point = 3;
    if (has_enhance_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_point());
    }

    // required int32 activated_bless_option_id = 5;
    if (has_activated_bless_option_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activated_bless_option_id());
    }

    // required int32 bless_level = 6;
    if (has_bless_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bless_level());
    }

    // required float option_value = 7;
    if (has_option_value()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FairyStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FairyStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FairyStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FairyStatus::MergeFrom(const FairyStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fairy_type()) {
      set_fairy_type(from.fairy_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enhance_point()) {
      set_enhance_point(from.enhance_point());
    }
    if (from.has_activated_bless_option_id()) {
      set_activated_bless_option_id(from.activated_bless_option_id());
    }
    if (from.has_bless_level()) {
      set_bless_level(from.bless_level());
    }
    if (from.has_option_value()) {
      set_option_value(from.option_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FairyStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FairyStatus::CopyFrom(const FairyStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FairyStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FairyStatus::Swap(FairyStatus* other) {
  if (other != this) {
    std::swap(fairy_type_, other->fairy_type_);
    std::swap(level_, other->level_);
    std::swap(enhance_point_, other->enhance_point_);
    std::swap(activated_bless_option_id_, other->activated_bless_option_id_);
    std::swap(bless_level_, other->bless_level_);
    std::swap(option_value_, other->option_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FairyStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FairyStatus_descriptor_;
  metadata.reflection = FairyStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relic::kCharacterTypeFieldNumber;
const int Relic::kRelicIdFieldNumber;
const int Relic::kGradeFieldNumber;
const int Relic::kEnhanceLevelFieldNumber;
#endif  // !_MSC_VER

Relic::Relic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Relic)
}

void Relic::InitAsDefaultInstance() {
}

Relic::Relic(const Relic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Relic)
}

void Relic::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  relic_id_ = 0;
  grade_ = 0;
  enhance_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relic::~Relic() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Relic)
  SharedDtor();
}

void Relic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relic_descriptor_;
}

const Relic& Relic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Relic* Relic::default_instance_ = NULL;

Relic* Relic::New() const {
  return new Relic;
}

void Relic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Relic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(relic_id_, enhance_level_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Relic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relic_id;
        break;
      }

      // required int32 relic_id = 2;
      case 2: {
        if (tag == 16) {
         parse_relic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relic_id_)));
          set_has_relic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // required int32 grade = 3;
      case 3: {
        if (tag == 24) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 4;
      case 4: {
        if (tag == 32) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Relic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Relic)
  return false;
#undef DO_
}

void Relic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Relic)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 relic_id = 2;
  if (has_relic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relic_id(), output);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // required int32 enhance_level = 4;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enhance_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Relic)
}

::google::protobuf::uint8* Relic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Relic)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 relic_id = 2;
  if (has_relic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relic_id(), target);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // required int32 enhance_level = 4;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enhance_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Relic)
  return target;
}

int Relic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 relic_id = 2;
    if (has_relic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relic_id());
    }

    // required int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 enhance_level = 4;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relic::MergeFrom(const Relic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_relic_id()) {
      set_relic_id(from.relic_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relic::CopyFrom(const Relic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Relic::Swap(Relic* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(relic_id_, other->relic_id_);
    std::swap(grade_, other->grade_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relic_descriptor_;
  metadata.reflection = Relic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RollingBanner::kIdFieldNumber;
const int RollingBanner::kTypeFieldNumber;
const int RollingBanner::kSubTypeFieldNumber;
const int RollingBanner::kBannerImgUrlFieldNumber;
const int RollingBanner::kStartTimeFieldNumber;
const int RollingBanner::kEndTimeFieldNumber;
const int RollingBanner::kBannerDurationFieldNumber;
const int RollingBanner::kWebUrlFieldNumber;
#endif  // !_MSC_VER

RollingBanner::RollingBanner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RollingBanner)
}

void RollingBanner::InitAsDefaultInstance() {
}

RollingBanner::RollingBanner(const RollingBanner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RollingBanner)
}

void RollingBanner::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  sub_type_ = 0;
  banner_img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  banner_duration_ = 0;
  web_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RollingBanner::~RollingBanner() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RollingBanner)
  SharedDtor();
}

void RollingBanner::SharedDtor() {
  if (banner_img_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete banner_img_url_;
  }
  if (web_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete web_url_;
  }
  if (this != default_instance_) {
  }
}

void RollingBanner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollingBanner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RollingBanner_descriptor_;
}

const RollingBanner& RollingBanner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RollingBanner* RollingBanner::default_instance_ = NULL;

RollingBanner* RollingBanner::New() const {
  return new RollingBanner;
}

void RollingBanner::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RollingBanner*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, type_);
    ZR_(start_time_, end_time_);
    if (has_banner_img_url()) {
      if (banner_img_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        banner_img_url_->clear();
      }
    }
    if (has_web_url()) {
      if (web_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        web_url_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RollingBanner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RollingBanner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sub_type;
        break;
      }

      // required int32 sub_type = 3;
      case 3: {
        if (tag == 24) {
         parse_sub_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_type_)));
          set_has_sub_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_banner_img_url;
        break;
      }

      // required string banner_img_url = 4;
      case 4: {
        if (tag == 34) {
         parse_banner_img_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->banner_img_url().data(), this->banner_img_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "banner_img_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 5;
      case 5: {
        if (tag == 40) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 6;
      case 6: {
        if (tag == 48) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_banner_duration;
        break;
      }

      // required int32 banner_duration = 7;
      case 7: {
        if (tag == 56) {
         parse_banner_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &banner_duration_)));
          set_has_banner_duration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_web_url;
        break;
      }

      // required string web_url = 8;
      case 8: {
        if (tag == 66) {
         parse_web_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_web_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->web_url().data(), this->web_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "web_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RollingBanner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RollingBanner)
  return false;
#undef DO_
}

void RollingBanner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RollingBanner)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 sub_type = 3;
  if (has_sub_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sub_type(), output);
  }

  // required string banner_img_url = 4;
  if (has_banner_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banner_img_url().data(), this->banner_img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banner_img_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->banner_img_url(), output);
  }

  // required int64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_time(), output);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->end_time(), output);
  }

  // required int32 banner_duration = 7;
  if (has_banner_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->banner_duration(), output);
  }

  // required string web_url = 8;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "web_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->web_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RollingBanner)
}

::google::protobuf::uint8* RollingBanner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RollingBanner)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 sub_type = 3;
  if (has_sub_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sub_type(), target);
  }

  // required string banner_img_url = 4;
  if (has_banner_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->banner_img_url().data(), this->banner_img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "banner_img_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->banner_img_url(), target);
  }

  // required int64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_time(), target);
  }

  // required int64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->end_time(), target);
  }

  // required int32 banner_duration = 7;
  if (has_banner_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->banner_duration(), target);
  }

  // required string web_url = 8;
  if (has_web_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->web_url().data(), this->web_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "web_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->web_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RollingBanner)
  return target;
}

int RollingBanner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 sub_type = 3;
    if (has_sub_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_type());
    }

    // required string banner_img_url = 4;
    if (has_banner_img_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_img_url());
    }

    // required int64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // required int32 banner_duration = 7;
    if (has_banner_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->banner_duration());
    }

    // required string web_url = 8;
    if (has_web_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->web_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollingBanner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RollingBanner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RollingBanner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RollingBanner::MergeFrom(const RollingBanner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sub_type()) {
      set_sub_type(from.sub_type());
    }
    if (from.has_banner_img_url()) {
      set_banner_img_url(from.banner_img_url());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_banner_duration()) {
      set_banner_duration(from.banner_duration());
    }
    if (from.has_web_url()) {
      set_web_url(from.web_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RollingBanner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollingBanner::CopyFrom(const RollingBanner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollingBanner::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void RollingBanner::Swap(RollingBanner* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(sub_type_, other->sub_type_);
    std::swap(banner_img_url_, other->banner_img_url_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(banner_duration_, other->banner_duration_);
    std::swap(web_url_, other->web_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RollingBanner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RollingBanner_descriptor_;
  metadata.reflection = RollingBanner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigData::kSkillPointBuyPriceGemFieldNumber;
const int ConfigData::kMaxSkillPointBuyCountFieldNumber;
const int ConfigData::kSkillPointResetPriceGemFieldNumber;
const int ConfigData::kNeedCashForExtendInventoryFieldNumber;
const int ConfigData::kIncreaseInventorySlotPerBuyCountFieldNumber;
const int ConfigData::kMaxInventorySlotCountFieldNumber;
const int ConfigData::kMaxFriendCountFieldNumber;
const int ConfigData::kMaxSendAskFriendFieldNumber;
const int ConfigData::kMaxReceiveAskFriendFieldNumber;
const int ConfigData::kCooltimeForSendSocialPointFieldNumber;
const int ConfigData::kMaxDeleteFriendCountForDayFieldNumber;
const int ConfigData::kMaxSocialPointValueFieldNumber;
const int ConfigData::kAddSocialPointForSendToFriendFieldNumber;
const int ConfigData::kAddSocialPointForReceiveFromFriendFieldNumber;
const int ConfigData::kStageBuffRateForIncreaseExpFieldNumber;
const int ConfigData::kStageBuffRateForIncreaseGoldFieldNumber;
const int ConfigData::kStageBuffRateForBoostGameSpeedFieldNumber;
const int ConfigData::kGuildSetUpGoldCostFieldNumber;
const int ConfigData::kDefaultMaxGuildMemberCountFieldNumber;
const int ConfigData::kMaxInviteGuildCountForAccountFieldNumber;
const int ConfigData::kInviteGuildExpirePeriodByDayFieldNumber;
const int ConfigData::kMaxRaidCountPerDayFieldNumber;
const int ConfigData::kUpdateGuildGoldCostFieldNumber;
const int ConfigData::kGuildMasterLogoutLimitPeriodDayFieldNumber;
const int ConfigData::kGuildBattleTimeLimitSecClientFieldNumber;
const int ConfigData::kHeroTowerSweepRewardCountPerFloorFieldNumber;
const int ConfigData::kAssaultResurrectionMaxCountFieldNumber;
const int ConfigData::kPvpMatchPointMaxFieldNumber;
const int ConfigData::kPvpMatchPointChargePeriodSecondFieldNumber;
const int ConfigData::kTeamMatchPointMaxFieldNumber;
const int ConfigData::kTeamMatchPointChargePeriodSecondFieldNumber;
const int ConfigData::kItemRandomOptionChangeCostDarkCrystalFieldNumber;
const int ConfigData::kItemPresetMaxCountFieldNumber;
const int ConfigData::kSkillQuickSlotMaxCountFieldNumber;
const int ConfigData::kAssaultMvpPointToOpenRewardFieldNumber;
const int ConfigData::kDuelRewardChallengeMaxCountFieldNumber;
const int ConfigData::kGuildSupportCoolTimeHourFieldNumber;
const int ConfigData::kGuildSupportMaxCountForDayFieldNumber;
const int ConfigData::kRestMaxTimeSecondFieldNumber;
const int ConfigData::kRestTimeSecondPerOnePointFieldNumber;
const int ConfigData::kGuildMercenaryDonationMaxCountForDayFieldNumber;
const int ConfigData::kGuildRejoinWaitTimeMinFieldNumber;
const int ConfigData::kCharacterLevelMaxFieldNumber;
const int ConfigData::kMatchContinuousWinCountForBonusFieldNumber;
const int ConfigData::kHeroTowerFreeTicketCountMaxFieldNumber;
const int ConfigData::kCounterDungeonDailyEnterCountMaxFieldNumber;
const int ConfigData::kMaxChatBlockCountFieldNumber;
const int ConfigData::kMinFloorForHeroTowerRankingFieldNumber;
const int ConfigData::kRaidGuildBonusCountMember2FieldNumber;
const int ConfigData::kRaidGuildBonusCountMember3FieldNumber;
const int ConfigData::kRaidGuildBonusCountMember4FieldNumber;
const int ConfigData::kShowReviewInducementPopupFieldNumber;
const int ConfigData::kMaxOpenStageDifficultyFieldNumber;
const int ConfigData::kItemRandomOptionChangeCostCashFieldNumber;
const int ConfigData::kEventDiceFreeCountFieldNumber;
const int ConfigData::kEventDicePointPerOneDiceFieldNumber;
const int ConfigData::kMaxCostumeInventorySlotCountFieldNumber;
const int ConfigData::kGuildMasterChangePeriodDayFieldNumber;
const int ConfigData::kExchangeItemCountGoldFieldNumber;
const int ConfigData::kExchangeItemCountGemFieldNumber;
const int ConfigData::kLobbyStyleFieldNumber;
const int ConfigData::kAdvancedRankLevelFieldNumber;
#endif  // !_MSC_VER

ConfigData::ConfigData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ConfigData)
}

void ConfigData::InitAsDefaultInstance() {
}

ConfigData::ConfigData(const ConfigData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ConfigData)
}

void ConfigData::SharedCtor() {
  _cached_size_ = 0;
  skill_point_buy_price_gem_ = 0;
  max_skill_point_buy_count_ = 0;
  skill_point_reset_price_gem_ = 0;
  need_cash_for_extend_inventory_ = 0;
  increase_inventory_slot_per_buy_count_ = 0;
  max_inventory_slot_count_ = 0;
  max_friend_count_ = 0;
  max_send_ask_friend_ = 0;
  max_receive_ask_friend_ = 0;
  cooltime_for_send_social_point_ = 0;
  max_delete_friend_count_for_day_ = 0;
  max_social_point_value_ = 0;
  add_social_point_for_send_to_friend_ = 0;
  add_social_point_for_receive_from_friend_ = 0;
  stage_buff_rate_for_increase_exp_ = 0;
  stage_buff_rate_for_increase_gold_ = 0;
  stage_buff_rate_for_boost_game_speed_ = 0;
  guild_set_up_gold_cost_ = 0;
  default_max_guild_member_count_ = 0;
  max_invite_guild_count_for_account_ = 0;
  invite_guild_expire_period_by_day_ = 0;
  max_raid_count_per_day_ = 0;
  update_guild_gold_cost_ = 0;
  guild_master_logout_limit_period_day_ = 0;
  guild_battle_time_limit_sec_client_ = 0;
  hero_tower_sweep_reward_count_per_floor_ = 0;
  assault_resurrection_max_count_ = 0;
  pvp_match_point_max_ = 0;
  pvp_match_point_charge_period_second_ = 0;
  team_match_point_max_ = 0;
  team_match_point_charge_period_second_ = 0;
  item_random_option_change_cost_dark_crystal_ = 0;
  item_preset_max_count_ = 0;
  skill_quick_slot_max_count_ = 0;
  assault_mvp_point_to_open_reward_ = 0;
  duel_reward_challenge_max_count_ = 0;
  guild_support_cool_time_hour_ = 0;
  guild_support_max_count_for_day_ = 0;
  rest_max_time_second_ = 0;
  rest_time_second_per_one_point_ = 0;
  guild_mercenary_donation_max_count_for_day_ = 0;
  guild_rejoin_wait_time_min_ = 0;
  character_level_max_ = 0;
  match_continuous_win_count_for_bonus_ = 0;
  hero_tower_free_ticket_count_max_ = 0;
  counter_dungeon_daily_enter_count_max_ = 0;
  max_chat_block_count_ = 0;
  min_floor_for_hero_tower_ranking_ = 0;
  raid_guild_bonus_count_member_2_ = 0;
  raid_guild_bonus_count_member_3_ = 0;
  raid_guild_bonus_count_member_4_ = 0;
  show_review_inducement_popup_ = 0;
  max_open_stage_difficulty_ = 0;
  item_random_option_change_cost_cash_ = 0;
  event_dice_free_count_ = 0;
  event_dice_point_per_one_dice_ = 0;
  max_costume_inventory_slot_count_ = 0;
  guild_master_change_period_day_ = 0;
  exchange_item_count_gold_ = 0;
  exchange_item_count_gem_ = 0;
  lobby_style_ = 0;
  advanced_rank_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigData::~ConfigData() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ConfigData)
  SharedDtor();
}

void ConfigData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigData_descriptor_;
}

const ConfigData& ConfigData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ConfigData* ConfigData::default_instance_ = NULL;

ConfigData* ConfigData::New() const {
  return new ConfigData;
}

void ConfigData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConfigData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(skill_point_buy_price_gem_, max_send_ask_friend_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(max_receive_ask_friend_, stage_buff_rate_for_increase_gold_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(stage_buff_rate_for_boost_game_speed_, guild_master_logout_limit_period_day_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(guild_battle_time_limit_sec_client_, item_random_option_change_cost_dark_crystal_);
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(item_preset_max_count_, rest_time_second_per_one_point_);
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(guild_mercenary_donation_max_count_for_day_, min_floor_for_hero_tower_ranking_);
  }
  if (_has_bits_[48 / 32] & 16711680) {
    ZR_(raid_guild_bonus_count_member_2_, event_dice_point_per_one_dice_);
  }
  if (_has_bits_[56 / 32] & 1056964608) {
    ZR_(max_costume_inventory_slot_count_, advanced_rank_level_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ConfigData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skill_point_buy_price_gem = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_buy_price_gem_)));
          set_has_skill_point_buy_price_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_skill_point_buy_count;
        break;
      }

      // optional int32 max_skill_point_buy_count = 2;
      case 2: {
        if (tag == 16) {
         parse_max_skill_point_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_skill_point_buy_count_)));
          set_has_max_skill_point_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skill_point_reset_price_gem;
        break;
      }

      // optional int32 skill_point_reset_price_gem = 3;
      case 3: {
        if (tag == 24) {
         parse_skill_point_reset_price_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_point_reset_price_gem_)));
          set_has_skill_point_reset_price_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_need_cash_for_extend_inventory;
        break;
      }

      // optional int32 need_cash_for_extend_inventory = 4;
      case 4: {
        if (tag == 32) {
         parse_need_cash_for_extend_inventory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_cash_for_extend_inventory_)));
          set_has_need_cash_for_extend_inventory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_increase_inventory_slot_per_buy_count;
        break;
      }

      // optional int32 increase_inventory_slot_per_buy_count = 5;
      case 5: {
        if (tag == 40) {
         parse_increase_inventory_slot_per_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &increase_inventory_slot_per_buy_count_)));
          set_has_increase_inventory_slot_per_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_inventory_slot_count;
        break;
      }

      // optional int32 max_inventory_slot_count = 6;
      case 6: {
        if (tag == 48) {
         parse_max_inventory_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_inventory_slot_count_)));
          set_has_max_inventory_slot_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_max_friend_count;
        break;
      }

      // optional int32 max_friend_count = 7;
      case 7: {
        if (tag == 56) {
         parse_max_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_friend_count_)));
          set_has_max_friend_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_max_send_ask_friend;
        break;
      }

      // optional int32 max_send_ask_friend = 8;
      case 8: {
        if (tag == 64) {
         parse_max_send_ask_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_send_ask_friend_)));
          set_has_max_send_ask_friend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_max_receive_ask_friend;
        break;
      }

      // optional int32 max_receive_ask_friend = 9;
      case 9: {
        if (tag == 72) {
         parse_max_receive_ask_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_receive_ask_friend_)));
          set_has_max_receive_ask_friend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cooltime_for_send_social_point;
        break;
      }

      // optional int32 cooltime_for_send_social_point = 10;
      case 10: {
        if (tag == 80) {
         parse_cooltime_for_send_social_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cooltime_for_send_social_point_)));
          set_has_cooltime_for_send_social_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_delete_friend_count_for_day;
        break;
      }

      // optional int32 max_delete_friend_count_for_day = 11;
      case 11: {
        if (tag == 88) {
         parse_max_delete_friend_count_for_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_delete_friend_count_for_day_)));
          set_has_max_delete_friend_count_for_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_max_social_point_value;
        break;
      }

      // optional int32 max_social_point_value = 12;
      case 12: {
        if (tag == 96) {
         parse_max_social_point_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_social_point_value_)));
          set_has_max_social_point_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_add_social_point_for_send_to_friend;
        break;
      }

      // optional int32 add_social_point_for_send_to_friend = 13;
      case 13: {
        if (tag == 104) {
         parse_add_social_point_for_send_to_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_social_point_for_send_to_friend_)));
          set_has_add_social_point_for_send_to_friend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_add_social_point_for_receive_from_friend;
        break;
      }

      // optional int32 add_social_point_for_receive_from_friend = 14;
      case 14: {
        if (tag == 112) {
         parse_add_social_point_for_receive_from_friend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_social_point_for_receive_from_friend_)));
          set_has_add_social_point_for_receive_from_friend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_stage_buff_rate_for_increase_exp;
        break;
      }

      // optional float stage_buff_rate_for_increase_exp = 15;
      case 15: {
        if (tag == 125) {
         parse_stage_buff_rate_for_increase_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stage_buff_rate_for_increase_exp_)));
          set_has_stage_buff_rate_for_increase_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_stage_buff_rate_for_increase_gold;
        break;
      }

      // optional float stage_buff_rate_for_increase_gold = 16;
      case 16: {
        if (tag == 133) {
         parse_stage_buff_rate_for_increase_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stage_buff_rate_for_increase_gold_)));
          set_has_stage_buff_rate_for_increase_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_stage_buff_rate_for_boost_game_speed;
        break;
      }

      // optional float stage_buff_rate_for_boost_game_speed = 17;
      case 17: {
        if (tag == 141) {
         parse_stage_buff_rate_for_boost_game_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stage_buff_rate_for_boost_game_speed_)));
          set_has_stage_buff_rate_for_boost_game_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_guild_set_up_gold_cost;
        break;
      }

      // optional int32 guild_set_up_gold_cost = 18;
      case 18: {
        if (tag == 144) {
         parse_guild_set_up_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_set_up_gold_cost_)));
          set_has_guild_set_up_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_default_max_guild_member_count;
        break;
      }

      // optional int32 default_max_guild_member_count = 19;
      case 19: {
        if (tag == 152) {
         parse_default_max_guild_member_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &default_max_guild_member_count_)));
          set_has_default_max_guild_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_max_invite_guild_count_for_account;
        break;
      }

      // optional int32 max_invite_guild_count_for_account = 20;
      case 20: {
        if (tag == 160) {
         parse_max_invite_guild_count_for_account:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_invite_guild_count_for_account_)));
          set_has_max_invite_guild_count_for_account();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_invite_guild_expire_period_by_day;
        break;
      }

      // optional int32 invite_guild_expire_period_by_day = 21;
      case 21: {
        if (tag == 168) {
         parse_invite_guild_expire_period_by_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_guild_expire_period_by_day_)));
          set_has_invite_guild_expire_period_by_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_max_raid_count_per_day;
        break;
      }

      // optional int32 max_raid_count_per_day = 22;
      case 22: {
        if (tag == 176) {
         parse_max_raid_count_per_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_raid_count_per_day_)));
          set_has_max_raid_count_per_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_update_guild_gold_cost;
        break;
      }

      // optional int32 update_guild_gold_cost = 23;
      case 23: {
        if (tag == 184) {
         parse_update_guild_gold_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &update_guild_gold_cost_)));
          set_has_update_guild_gold_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_guild_master_logout_limit_period_day;
        break;
      }

      // optional int32 guild_master_logout_limit_period_day = 24;
      case 24: {
        if (tag == 192) {
         parse_guild_master_logout_limit_period_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_master_logout_limit_period_day_)));
          set_has_guild_master_logout_limit_period_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_guild_battle_time_limit_sec_client;
        break;
      }

      // optional int32 guild_battle_time_limit_sec_client = 25;
      case 25: {
        if (tag == 200) {
         parse_guild_battle_time_limit_sec_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_battle_time_limit_sec_client_)));
          set_has_guild_battle_time_limit_sec_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_hero_tower_sweep_reward_count_per_floor;
        break;
      }

      // optional int32 hero_tower_sweep_reward_count_per_floor = 26;
      case 26: {
        if (tag == 208) {
         parse_hero_tower_sweep_reward_count_per_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_tower_sweep_reward_count_per_floor_)));
          set_has_hero_tower_sweep_reward_count_per_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_assault_resurrection_max_count;
        break;
      }

      // optional int32 assault_resurrection_max_count = 27;
      case 27: {
        if (tag == 216) {
         parse_assault_resurrection_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_resurrection_max_count_)));
          set_has_assault_resurrection_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_pvp_match_point_max;
        break;
      }

      // optional int32 pvp_match_point_max = 29;
      case 29: {
        if (tag == 232) {
         parse_pvp_match_point_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_match_point_max_)));
          set_has_pvp_match_point_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_pvp_match_point_charge_period_second;
        break;
      }

      // optional int32 pvp_match_point_charge_period_second = 30;
      case 30: {
        if (tag == 240) {
         parse_pvp_match_point_charge_period_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvp_match_point_charge_period_second_)));
          set_has_pvp_match_point_charge_period_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_team_match_point_max;
        break;
      }

      // optional int32 team_match_point_max = 31;
      case 31: {
        if (tag == 248) {
         parse_team_match_point_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_match_point_max_)));
          set_has_team_match_point_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_team_match_point_charge_period_second;
        break;
      }

      // optional int32 team_match_point_charge_period_second = 32;
      case 32: {
        if (tag == 256) {
         parse_team_match_point_charge_period_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_match_point_charge_period_second_)));
          set_has_team_match_point_charge_period_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_item_random_option_change_cost_dark_crystal;
        break;
      }

      // optional int32 item_random_option_change_cost_dark_crystal = 33;
      case 33: {
        if (tag == 264) {
         parse_item_random_option_change_cost_dark_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_random_option_change_cost_dark_crystal_)));
          set_has_item_random_option_change_cost_dark_crystal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_item_preset_max_count;
        break;
      }

      // optional int32 item_preset_max_count = 34;
      case 34: {
        if (tag == 272) {
         parse_item_preset_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_preset_max_count_)));
          set_has_item_preset_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_skill_quick_slot_max_count;
        break;
      }

      // optional int32 skill_quick_slot_max_count = 35;
      case 35: {
        if (tag == 280) {
         parse_skill_quick_slot_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_quick_slot_max_count_)));
          set_has_skill_quick_slot_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(288)) goto parse_assault_mvp_point_to_open_reward;
        break;
      }

      // optional int32 assault_mvp_point_to_open_reward = 36;
      case 36: {
        if (tag == 288) {
         parse_assault_mvp_point_to_open_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assault_mvp_point_to_open_reward_)));
          set_has_assault_mvp_point_to_open_reward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(296)) goto parse_duel_reward_challenge_max_count;
        break;
      }

      // optional int32 duel_reward_challenge_max_count = 37;
      case 37: {
        if (tag == 296) {
         parse_duel_reward_challenge_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duel_reward_challenge_max_count_)));
          set_has_duel_reward_challenge_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_guild_support_cool_time_hour;
        break;
      }

      // optional int32 guild_support_cool_time_hour = 38;
      case 38: {
        if (tag == 304) {
         parse_guild_support_cool_time_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_support_cool_time_hour_)));
          set_has_guild_support_cool_time_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_guild_support_max_count_for_day;
        break;
      }

      // optional int32 guild_support_max_count_for_day = 39;
      case 39: {
        if (tag == 312) {
         parse_guild_support_max_count_for_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_support_max_count_for_day_)));
          set_has_guild_support_max_count_for_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_rest_max_time_second;
        break;
      }

      // optional int32 rest_max_time_second = 40;
      case 40: {
        if (tag == 320) {
         parse_rest_max_time_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_max_time_second_)));
          set_has_rest_max_time_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_rest_time_second_per_one_point;
        break;
      }

      // optional int32 rest_time_second_per_one_point = 41;
      case 41: {
        if (tag == 328) {
         parse_rest_time_second_per_one_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rest_time_second_per_one_point_)));
          set_has_rest_time_second_per_one_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_guild_mercenary_donation_max_count_for_day;
        break;
      }

      // optional int32 guild_mercenary_donation_max_count_for_day = 42;
      case 42: {
        if (tag == 336) {
         parse_guild_mercenary_donation_max_count_for_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_mercenary_donation_max_count_for_day_)));
          set_has_guild_mercenary_donation_max_count_for_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_guild_rejoin_wait_time_min;
        break;
      }

      // optional int32 guild_rejoin_wait_time_min = 43;
      case 43: {
        if (tag == 344) {
         parse_guild_rejoin_wait_time_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_rejoin_wait_time_min_)));
          set_has_guild_rejoin_wait_time_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_character_level_max;
        break;
      }

      // optional int32 character_level_max = 44;
      case 44: {
        if (tag == 352) {
         parse_character_level_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_max_)));
          set_has_character_level_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_match_continuous_win_count_for_bonus;
        break;
      }

      // optional int32 match_continuous_win_count_for_bonus = 45;
      case 45: {
        if (tag == 360) {
         parse_match_continuous_win_count_for_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_continuous_win_count_for_bonus_)));
          set_has_match_continuous_win_count_for_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(368)) goto parse_hero_tower_free_ticket_count_max;
        break;
      }

      // optional int32 hero_tower_free_ticket_count_max = 46;
      case 46: {
        if (tag == 368) {
         parse_hero_tower_free_ticket_count_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_tower_free_ticket_count_max_)));
          set_has_hero_tower_free_ticket_count_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(376)) goto parse_counter_dungeon_daily_enter_count_max;
        break;
      }

      // optional int32 counter_dungeon_daily_enter_count_max = 47;
      case 47: {
        if (tag == 376) {
         parse_counter_dungeon_daily_enter_count_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counter_dungeon_daily_enter_count_max_)));
          set_has_counter_dungeon_daily_enter_count_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(384)) goto parse_max_chat_block_count;
        break;
      }

      // optional int32 max_chat_block_count = 48;
      case 48: {
        if (tag == 384) {
         parse_max_chat_block_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_chat_block_count_)));
          set_has_max_chat_block_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(392)) goto parse_min_floor_for_hero_tower_ranking;
        break;
      }

      // optional int32 min_floor_for_hero_tower_ranking = 49;
      case 49: {
        if (tag == 392) {
         parse_min_floor_for_hero_tower_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_floor_for_hero_tower_ranking_)));
          set_has_min_floor_for_hero_tower_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_raid_guild_bonus_count_member_2;
        break;
      }

      // optional int32 raid_guild_bonus_count_member_2 = 50;
      case 50: {
        if (tag == 400) {
         parse_raid_guild_bonus_count_member_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_guild_bonus_count_member_2_)));
          set_has_raid_guild_bonus_count_member_2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_raid_guild_bonus_count_member_3;
        break;
      }

      // optional int32 raid_guild_bonus_count_member_3 = 51;
      case 51: {
        if (tag == 408) {
         parse_raid_guild_bonus_count_member_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_guild_bonus_count_member_3_)));
          set_has_raid_guild_bonus_count_member_3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_raid_guild_bonus_count_member_4;
        break;
      }

      // optional int32 raid_guild_bonus_count_member_4 = 52;
      case 52: {
        if (tag == 416) {
         parse_raid_guild_bonus_count_member_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raid_guild_bonus_count_member_4_)));
          set_has_raid_guild_bonus_count_member_4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_show_review_inducement_popup;
        break;
      }

      // optional int32 show_review_inducement_popup = 53;
      case 53: {
        if (tag == 424) {
         parse_show_review_inducement_popup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &show_review_inducement_popup_)));
          set_has_show_review_inducement_popup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_max_open_stage_difficulty;
        break;
      }

      // optional int32 max_open_stage_difficulty = 54;
      case 54: {
        if (tag == 432) {
         parse_max_open_stage_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_open_stage_difficulty_)));
          set_has_max_open_stage_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_item_random_option_change_cost_cash;
        break;
      }

      // optional int32 item_random_option_change_cost_cash = 55;
      case 55: {
        if (tag == 440) {
         parse_item_random_option_change_cost_cash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_random_option_change_cost_cash_)));
          set_has_item_random_option_change_cost_cash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_event_dice_free_count;
        break;
      }

      // optional int32 event_dice_free_count = 56;
      case 56: {
        if (tag == 448) {
         parse_event_dice_free_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_dice_free_count_)));
          set_has_event_dice_free_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_event_dice_point_per_one_dice;
        break;
      }

      // optional int32 event_dice_point_per_one_dice = 57;
      case 57: {
        if (tag == 456) {
         parse_event_dice_point_per_one_dice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_dice_point_per_one_dice_)));
          set_has_event_dice_point_per_one_dice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_max_costume_inventory_slot_count;
        break;
      }

      // optional int32 max_costume_inventory_slot_count = 58;
      case 58: {
        if (tag == 464) {
         parse_max_costume_inventory_slot_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_costume_inventory_slot_count_)));
          set_has_max_costume_inventory_slot_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_guild_master_change_period_day;
        break;
      }

      // optional int32 guild_master_change_period_day = 59;
      case 59: {
        if (tag == 472) {
         parse_guild_master_change_period_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_master_change_period_day_)));
          set_has_guild_master_change_period_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_exchange_item_count_gold;
        break;
      }

      // optional int32 exchange_item_count_gold = 60;
      case 60: {
        if (tag == 480) {
         parse_exchange_item_count_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_item_count_gold_)));
          set_has_exchange_item_count_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_exchange_item_count_gem;
        break;
      }

      // optional int32 exchange_item_count_gem = 61;
      case 61: {
        if (tag == 488) {
         parse_exchange_item_count_gem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchange_item_count_gem_)));
          set_has_exchange_item_count_gem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_lobby_style;
        break;
      }

      // optional int32 lobby_style = 62;
      case 62: {
        if (tag == 496) {
         parse_lobby_style:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lobby_style_)));
          set_has_lobby_style();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_advanced_rank_level;
        break;
      }

      // optional int32 advanced_rank_level = 63;
      case 63: {
        if (tag == 504) {
         parse_advanced_rank_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advanced_rank_level_)));
          set_has_advanced_rank_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ConfigData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ConfigData)
  return false;
#undef DO_
}

void ConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ConfigData)
  // optional int32 skill_point_buy_price_gem = 1;
  if (has_skill_point_buy_price_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skill_point_buy_price_gem(), output);
  }

  // optional int32 max_skill_point_buy_count = 2;
  if (has_max_skill_point_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_skill_point_buy_count(), output);
  }

  // optional int32 skill_point_reset_price_gem = 3;
  if (has_skill_point_reset_price_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skill_point_reset_price_gem(), output);
  }

  // optional int32 need_cash_for_extend_inventory = 4;
  if (has_need_cash_for_extend_inventory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->need_cash_for_extend_inventory(), output);
  }

  // optional int32 increase_inventory_slot_per_buy_count = 5;
  if (has_increase_inventory_slot_per_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->increase_inventory_slot_per_buy_count(), output);
  }

  // optional int32 max_inventory_slot_count = 6;
  if (has_max_inventory_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_inventory_slot_count(), output);
  }

  // optional int32 max_friend_count = 7;
  if (has_max_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->max_friend_count(), output);
  }

  // optional int32 max_send_ask_friend = 8;
  if (has_max_send_ask_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->max_send_ask_friend(), output);
  }

  // optional int32 max_receive_ask_friend = 9;
  if (has_max_receive_ask_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_receive_ask_friend(), output);
  }

  // optional int32 cooltime_for_send_social_point = 10;
  if (has_cooltime_for_send_social_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cooltime_for_send_social_point(), output);
  }

  // optional int32 max_delete_friend_count_for_day = 11;
  if (has_max_delete_friend_count_for_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_delete_friend_count_for_day(), output);
  }

  // optional int32 max_social_point_value = 12;
  if (has_max_social_point_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->max_social_point_value(), output);
  }

  // optional int32 add_social_point_for_send_to_friend = 13;
  if (has_add_social_point_for_send_to_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->add_social_point_for_send_to_friend(), output);
  }

  // optional int32 add_social_point_for_receive_from_friend = 14;
  if (has_add_social_point_for_receive_from_friend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->add_social_point_for_receive_from_friend(), output);
  }

  // optional float stage_buff_rate_for_increase_exp = 15;
  if (has_stage_buff_rate_for_increase_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->stage_buff_rate_for_increase_exp(), output);
  }

  // optional float stage_buff_rate_for_increase_gold = 16;
  if (has_stage_buff_rate_for_increase_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->stage_buff_rate_for_increase_gold(), output);
  }

  // optional float stage_buff_rate_for_boost_game_speed = 17;
  if (has_stage_buff_rate_for_boost_game_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->stage_buff_rate_for_boost_game_speed(), output);
  }

  // optional int32 guild_set_up_gold_cost = 18;
  if (has_guild_set_up_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->guild_set_up_gold_cost(), output);
  }

  // optional int32 default_max_guild_member_count = 19;
  if (has_default_max_guild_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->default_max_guild_member_count(), output);
  }

  // optional int32 max_invite_guild_count_for_account = 20;
  if (has_max_invite_guild_count_for_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->max_invite_guild_count_for_account(), output);
  }

  // optional int32 invite_guild_expire_period_by_day = 21;
  if (has_invite_guild_expire_period_by_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->invite_guild_expire_period_by_day(), output);
  }

  // optional int32 max_raid_count_per_day = 22;
  if (has_max_raid_count_per_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->max_raid_count_per_day(), output);
  }

  // optional int32 update_guild_gold_cost = 23;
  if (has_update_guild_gold_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->update_guild_gold_cost(), output);
  }

  // optional int32 guild_master_logout_limit_period_day = 24;
  if (has_guild_master_logout_limit_period_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->guild_master_logout_limit_period_day(), output);
  }

  // optional int32 guild_battle_time_limit_sec_client = 25;
  if (has_guild_battle_time_limit_sec_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->guild_battle_time_limit_sec_client(), output);
  }

  // optional int32 hero_tower_sweep_reward_count_per_floor = 26;
  if (has_hero_tower_sweep_reward_count_per_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hero_tower_sweep_reward_count_per_floor(), output);
  }

  // optional int32 assault_resurrection_max_count = 27;
  if (has_assault_resurrection_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->assault_resurrection_max_count(), output);
  }

  // optional int32 pvp_match_point_max = 29;
  if (has_pvp_match_point_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->pvp_match_point_max(), output);
  }

  // optional int32 pvp_match_point_charge_period_second = 30;
  if (has_pvp_match_point_charge_period_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->pvp_match_point_charge_period_second(), output);
  }

  // optional int32 team_match_point_max = 31;
  if (has_team_match_point_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->team_match_point_max(), output);
  }

  // optional int32 team_match_point_charge_period_second = 32;
  if (has_team_match_point_charge_period_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->team_match_point_charge_period_second(), output);
  }

  // optional int32 item_random_option_change_cost_dark_crystal = 33;
  if (has_item_random_option_change_cost_dark_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->item_random_option_change_cost_dark_crystal(), output);
  }

  // optional int32 item_preset_max_count = 34;
  if (has_item_preset_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->item_preset_max_count(), output);
  }

  // optional int32 skill_quick_slot_max_count = 35;
  if (has_skill_quick_slot_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->skill_quick_slot_max_count(), output);
  }

  // optional int32 assault_mvp_point_to_open_reward = 36;
  if (has_assault_mvp_point_to_open_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->assault_mvp_point_to_open_reward(), output);
  }

  // optional int32 duel_reward_challenge_max_count = 37;
  if (has_duel_reward_challenge_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->duel_reward_challenge_max_count(), output);
  }

  // optional int32 guild_support_cool_time_hour = 38;
  if (has_guild_support_cool_time_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->guild_support_cool_time_hour(), output);
  }

  // optional int32 guild_support_max_count_for_day = 39;
  if (has_guild_support_max_count_for_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->guild_support_max_count_for_day(), output);
  }

  // optional int32 rest_max_time_second = 40;
  if (has_rest_max_time_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->rest_max_time_second(), output);
  }

  // optional int32 rest_time_second_per_one_point = 41;
  if (has_rest_time_second_per_one_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->rest_time_second_per_one_point(), output);
  }

  // optional int32 guild_mercenary_donation_max_count_for_day = 42;
  if (has_guild_mercenary_donation_max_count_for_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->guild_mercenary_donation_max_count_for_day(), output);
  }

  // optional int32 guild_rejoin_wait_time_min = 43;
  if (has_guild_rejoin_wait_time_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->guild_rejoin_wait_time_min(), output);
  }

  // optional int32 character_level_max = 44;
  if (has_character_level_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->character_level_max(), output);
  }

  // optional int32 match_continuous_win_count_for_bonus = 45;
  if (has_match_continuous_win_count_for_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->match_continuous_win_count_for_bonus(), output);
  }

  // optional int32 hero_tower_free_ticket_count_max = 46;
  if (has_hero_tower_free_ticket_count_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->hero_tower_free_ticket_count_max(), output);
  }

  // optional int32 counter_dungeon_daily_enter_count_max = 47;
  if (has_counter_dungeon_daily_enter_count_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->counter_dungeon_daily_enter_count_max(), output);
  }

  // optional int32 max_chat_block_count = 48;
  if (has_max_chat_block_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->max_chat_block_count(), output);
  }

  // optional int32 min_floor_for_hero_tower_ranking = 49;
  if (has_min_floor_for_hero_tower_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->min_floor_for_hero_tower_ranking(), output);
  }

  // optional int32 raid_guild_bonus_count_member_2 = 50;
  if (has_raid_guild_bonus_count_member_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->raid_guild_bonus_count_member_2(), output);
  }

  // optional int32 raid_guild_bonus_count_member_3 = 51;
  if (has_raid_guild_bonus_count_member_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->raid_guild_bonus_count_member_3(), output);
  }

  // optional int32 raid_guild_bonus_count_member_4 = 52;
  if (has_raid_guild_bonus_count_member_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->raid_guild_bonus_count_member_4(), output);
  }

  // optional int32 show_review_inducement_popup = 53;
  if (has_show_review_inducement_popup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->show_review_inducement_popup(), output);
  }

  // optional int32 max_open_stage_difficulty = 54;
  if (has_max_open_stage_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->max_open_stage_difficulty(), output);
  }

  // optional int32 item_random_option_change_cost_cash = 55;
  if (has_item_random_option_change_cost_cash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->item_random_option_change_cost_cash(), output);
  }

  // optional int32 event_dice_free_count = 56;
  if (has_event_dice_free_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->event_dice_free_count(), output);
  }

  // optional int32 event_dice_point_per_one_dice = 57;
  if (has_event_dice_point_per_one_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->event_dice_point_per_one_dice(), output);
  }

  // optional int32 max_costume_inventory_slot_count = 58;
  if (has_max_costume_inventory_slot_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->max_costume_inventory_slot_count(), output);
  }

  // optional int32 guild_master_change_period_day = 59;
  if (has_guild_master_change_period_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->guild_master_change_period_day(), output);
  }

  // optional int32 exchange_item_count_gold = 60;
  if (has_exchange_item_count_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->exchange_item_count_gold(), output);
  }

  // optional int32 exchange_item_count_gem = 61;
  if (has_exchange_item_count_gem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->exchange_item_count_gem(), output);
  }

  // optional int32 lobby_style = 62;
  if (has_lobby_style()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->lobby_style(), output);
  }

  // optional int32 advanced_rank_level = 63;
  if (has_advanced_rank_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->advanced_rank_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ConfigData)
}

::google::protobuf::uint8* ConfigData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ConfigData)
  // optional int32 skill_point_buy_price_gem = 1;
  if (has_skill_point_buy_price_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skill_point_buy_price_gem(), target);
  }

  // optional int32 max_skill_point_buy_count = 2;
  if (has_max_skill_point_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_skill_point_buy_count(), target);
  }

  // optional int32 skill_point_reset_price_gem = 3;
  if (has_skill_point_reset_price_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skill_point_reset_price_gem(), target);
  }

  // optional int32 need_cash_for_extend_inventory = 4;
  if (has_need_cash_for_extend_inventory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->need_cash_for_extend_inventory(), target);
  }

  // optional int32 increase_inventory_slot_per_buy_count = 5;
  if (has_increase_inventory_slot_per_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->increase_inventory_slot_per_buy_count(), target);
  }

  // optional int32 max_inventory_slot_count = 6;
  if (has_max_inventory_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_inventory_slot_count(), target);
  }

  // optional int32 max_friend_count = 7;
  if (has_max_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->max_friend_count(), target);
  }

  // optional int32 max_send_ask_friend = 8;
  if (has_max_send_ask_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->max_send_ask_friend(), target);
  }

  // optional int32 max_receive_ask_friend = 9;
  if (has_max_receive_ask_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_receive_ask_friend(), target);
  }

  // optional int32 cooltime_for_send_social_point = 10;
  if (has_cooltime_for_send_social_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cooltime_for_send_social_point(), target);
  }

  // optional int32 max_delete_friend_count_for_day = 11;
  if (has_max_delete_friend_count_for_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_delete_friend_count_for_day(), target);
  }

  // optional int32 max_social_point_value = 12;
  if (has_max_social_point_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->max_social_point_value(), target);
  }

  // optional int32 add_social_point_for_send_to_friend = 13;
  if (has_add_social_point_for_send_to_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->add_social_point_for_send_to_friend(), target);
  }

  // optional int32 add_social_point_for_receive_from_friend = 14;
  if (has_add_social_point_for_receive_from_friend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->add_social_point_for_receive_from_friend(), target);
  }

  // optional float stage_buff_rate_for_increase_exp = 15;
  if (has_stage_buff_rate_for_increase_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->stage_buff_rate_for_increase_exp(), target);
  }

  // optional float stage_buff_rate_for_increase_gold = 16;
  if (has_stage_buff_rate_for_increase_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->stage_buff_rate_for_increase_gold(), target);
  }

  // optional float stage_buff_rate_for_boost_game_speed = 17;
  if (has_stage_buff_rate_for_boost_game_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->stage_buff_rate_for_boost_game_speed(), target);
  }

  // optional int32 guild_set_up_gold_cost = 18;
  if (has_guild_set_up_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->guild_set_up_gold_cost(), target);
  }

  // optional int32 default_max_guild_member_count = 19;
  if (has_default_max_guild_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->default_max_guild_member_count(), target);
  }

  // optional int32 max_invite_guild_count_for_account = 20;
  if (has_max_invite_guild_count_for_account()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->max_invite_guild_count_for_account(), target);
  }

  // optional int32 invite_guild_expire_period_by_day = 21;
  if (has_invite_guild_expire_period_by_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->invite_guild_expire_period_by_day(), target);
  }

  // optional int32 max_raid_count_per_day = 22;
  if (has_max_raid_count_per_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->max_raid_count_per_day(), target);
  }

  // optional int32 update_guild_gold_cost = 23;
  if (has_update_guild_gold_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->update_guild_gold_cost(), target);
  }

  // optional int32 guild_master_logout_limit_period_day = 24;
  if (has_guild_master_logout_limit_period_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->guild_master_logout_limit_period_day(), target);
  }

  // optional int32 guild_battle_time_limit_sec_client = 25;
  if (has_guild_battle_time_limit_sec_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->guild_battle_time_limit_sec_client(), target);
  }

  // optional int32 hero_tower_sweep_reward_count_per_floor = 26;
  if (has_hero_tower_sweep_reward_count_per_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hero_tower_sweep_reward_count_per_floor(), target);
  }

  // optional int32 assault_resurrection_max_count = 27;
  if (has_assault_resurrection_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->assault_resurrection_max_count(), target);
  }

  // optional int32 pvp_match_point_max = 29;
  if (has_pvp_match_point_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->pvp_match_point_max(), target);
  }

  // optional int32 pvp_match_point_charge_period_second = 30;
  if (has_pvp_match_point_charge_period_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->pvp_match_point_charge_period_second(), target);
  }

  // optional int32 team_match_point_max = 31;
  if (has_team_match_point_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->team_match_point_max(), target);
  }

  // optional int32 team_match_point_charge_period_second = 32;
  if (has_team_match_point_charge_period_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->team_match_point_charge_period_second(), target);
  }

  // optional int32 item_random_option_change_cost_dark_crystal = 33;
  if (has_item_random_option_change_cost_dark_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->item_random_option_change_cost_dark_crystal(), target);
  }

  // optional int32 item_preset_max_count = 34;
  if (has_item_preset_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->item_preset_max_count(), target);
  }

  // optional int32 skill_quick_slot_max_count = 35;
  if (has_skill_quick_slot_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->skill_quick_slot_max_count(), target);
  }

  // optional int32 assault_mvp_point_to_open_reward = 36;
  if (has_assault_mvp_point_to_open_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->assault_mvp_point_to_open_reward(), target);
  }

  // optional int32 duel_reward_challenge_max_count = 37;
  if (has_duel_reward_challenge_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->duel_reward_challenge_max_count(), target);
  }

  // optional int32 guild_support_cool_time_hour = 38;
  if (has_guild_support_cool_time_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->guild_support_cool_time_hour(), target);
  }

  // optional int32 guild_support_max_count_for_day = 39;
  if (has_guild_support_max_count_for_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->guild_support_max_count_for_day(), target);
  }

  // optional int32 rest_max_time_second = 40;
  if (has_rest_max_time_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->rest_max_time_second(), target);
  }

  // optional int32 rest_time_second_per_one_point = 41;
  if (has_rest_time_second_per_one_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->rest_time_second_per_one_point(), target);
  }

  // optional int32 guild_mercenary_donation_max_count_for_day = 42;
  if (has_guild_mercenary_donation_max_count_for_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->guild_mercenary_donation_max_count_for_day(), target);
  }

  // optional int32 guild_rejoin_wait_time_min = 43;
  if (has_guild_rejoin_wait_time_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->guild_rejoin_wait_time_min(), target);
  }

  // optional int32 character_level_max = 44;
  if (has_character_level_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->character_level_max(), target);
  }

  // optional int32 match_continuous_win_count_for_bonus = 45;
  if (has_match_continuous_win_count_for_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->match_continuous_win_count_for_bonus(), target);
  }

  // optional int32 hero_tower_free_ticket_count_max = 46;
  if (has_hero_tower_free_ticket_count_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->hero_tower_free_ticket_count_max(), target);
  }

  // optional int32 counter_dungeon_daily_enter_count_max = 47;
  if (has_counter_dungeon_daily_enter_count_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->counter_dungeon_daily_enter_count_max(), target);
  }

  // optional int32 max_chat_block_count = 48;
  if (has_max_chat_block_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->max_chat_block_count(), target);
  }

  // optional int32 min_floor_for_hero_tower_ranking = 49;
  if (has_min_floor_for_hero_tower_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->min_floor_for_hero_tower_ranking(), target);
  }

  // optional int32 raid_guild_bonus_count_member_2 = 50;
  if (has_raid_guild_bonus_count_member_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->raid_guild_bonus_count_member_2(), target);
  }

  // optional int32 raid_guild_bonus_count_member_3 = 51;
  if (has_raid_guild_bonus_count_member_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->raid_guild_bonus_count_member_3(), target);
  }

  // optional int32 raid_guild_bonus_count_member_4 = 52;
  if (has_raid_guild_bonus_count_member_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->raid_guild_bonus_count_member_4(), target);
  }

  // optional int32 show_review_inducement_popup = 53;
  if (has_show_review_inducement_popup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->show_review_inducement_popup(), target);
  }

  // optional int32 max_open_stage_difficulty = 54;
  if (has_max_open_stage_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->max_open_stage_difficulty(), target);
  }

  // optional int32 item_random_option_change_cost_cash = 55;
  if (has_item_random_option_change_cost_cash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->item_random_option_change_cost_cash(), target);
  }

  // optional int32 event_dice_free_count = 56;
  if (has_event_dice_free_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->event_dice_free_count(), target);
  }

  // optional int32 event_dice_point_per_one_dice = 57;
  if (has_event_dice_point_per_one_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->event_dice_point_per_one_dice(), target);
  }

  // optional int32 max_costume_inventory_slot_count = 58;
  if (has_max_costume_inventory_slot_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->max_costume_inventory_slot_count(), target);
  }

  // optional int32 guild_master_change_period_day = 59;
  if (has_guild_master_change_period_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->guild_master_change_period_day(), target);
  }

  // optional int32 exchange_item_count_gold = 60;
  if (has_exchange_item_count_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->exchange_item_count_gold(), target);
  }

  // optional int32 exchange_item_count_gem = 61;
  if (has_exchange_item_count_gem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->exchange_item_count_gem(), target);
  }

  // optional int32 lobby_style = 62;
  if (has_lobby_style()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->lobby_style(), target);
  }

  // optional int32 advanced_rank_level = 63;
  if (has_advanced_rank_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->advanced_rank_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ConfigData)
  return target;
}

int ConfigData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skill_point_buy_price_gem = 1;
    if (has_skill_point_buy_price_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point_buy_price_gem());
    }

    // optional int32 max_skill_point_buy_count = 2;
    if (has_max_skill_point_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_skill_point_buy_count());
    }

    // optional int32 skill_point_reset_price_gem = 3;
    if (has_skill_point_reset_price_gem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_point_reset_price_gem());
    }

    // optional int32 need_cash_for_extend_inventory = 4;
    if (has_need_cash_for_extend_inventory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_cash_for_extend_inventory());
    }

    // optional int32 increase_inventory_slot_per_buy_count = 5;
    if (has_increase_inventory_slot_per_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->increase_inventory_slot_per_buy_count());
    }

    // optional int32 max_inventory_slot_count = 6;
    if (has_max_inventory_slot_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_inventory_slot_count());
    }

    // optional int32 max_friend_count = 7;
    if (has_max_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_friend_count());
    }

    // optional int32 max_send_ask_friend = 8;
    if (has_max_send_ask_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_send_ask_friend());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 max_receive_ask_friend = 9;
    if (has_max_receive_ask_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_receive_ask_friend());
    }

    // optional int32 cooltime_for_send_social_point = 10;
    if (has_cooltime_for_send_social_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cooltime_for_send_social_point());
    }

    // optional int32 max_delete_friend_count_for_day = 11;
    if (has_max_delete_friend_count_for_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_delete_friend_count_for_day());
    }

    // optional int32 max_social_point_value = 12;
    if (has_max_social_point_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_social_point_value());
    }

    // optional int32 add_social_point_for_send_to_friend = 13;
    if (has_add_social_point_for_send_to_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_social_point_for_send_to_friend());
    }

    // optional int32 add_social_point_for_receive_from_friend = 14;
    if (has_add_social_point_for_receive_from_friend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_social_point_for_receive_from_friend());
    }

    // optional float stage_buff_rate_for_increase_exp = 15;
    if (has_stage_buff_rate_for_increase_exp()) {
      total_size += 1 + 4;
    }

    // optional float stage_buff_rate_for_increase_gold = 16;
    if (has_stage_buff_rate_for_increase_gold()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float stage_buff_rate_for_boost_game_speed = 17;
    if (has_stage_buff_rate_for_boost_game_speed()) {
      total_size += 2 + 4;
    }

    // optional int32 guild_set_up_gold_cost = 18;
    if (has_guild_set_up_gold_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_set_up_gold_cost());
    }

    // optional int32 default_max_guild_member_count = 19;
    if (has_default_max_guild_member_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->default_max_guild_member_count());
    }

    // optional int32 max_invite_guild_count_for_account = 20;
    if (has_max_invite_guild_count_for_account()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_invite_guild_count_for_account());
    }

    // optional int32 invite_guild_expire_period_by_day = 21;
    if (has_invite_guild_expire_period_by_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_guild_expire_period_by_day());
    }

    // optional int32 max_raid_count_per_day = 22;
    if (has_max_raid_count_per_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_raid_count_per_day());
    }

    // optional int32 update_guild_gold_cost = 23;
    if (has_update_guild_gold_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->update_guild_gold_cost());
    }

    // optional int32 guild_master_logout_limit_period_day = 24;
    if (has_guild_master_logout_limit_period_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_master_logout_limit_period_day());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 guild_battle_time_limit_sec_client = 25;
    if (has_guild_battle_time_limit_sec_client()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_battle_time_limit_sec_client());
    }

    // optional int32 hero_tower_sweep_reward_count_per_floor = 26;
    if (has_hero_tower_sweep_reward_count_per_floor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_tower_sweep_reward_count_per_floor());
    }

    // optional int32 assault_resurrection_max_count = 27;
    if (has_assault_resurrection_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_resurrection_max_count());
    }

    // optional int32 pvp_match_point_max = 29;
    if (has_pvp_match_point_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_match_point_max());
    }

    // optional int32 pvp_match_point_charge_period_second = 30;
    if (has_pvp_match_point_charge_period_second()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvp_match_point_charge_period_second());
    }

    // optional int32 team_match_point_max = 31;
    if (has_team_match_point_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_match_point_max());
    }

    // optional int32 team_match_point_charge_period_second = 32;
    if (has_team_match_point_charge_period_second()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team_match_point_charge_period_second());
    }

    // optional int32 item_random_option_change_cost_dark_crystal = 33;
    if (has_item_random_option_change_cost_dark_crystal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_random_option_change_cost_dark_crystal());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 item_preset_max_count = 34;
    if (has_item_preset_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_preset_max_count());
    }

    // optional int32 skill_quick_slot_max_count = 35;
    if (has_skill_quick_slot_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_quick_slot_max_count());
    }

    // optional int32 assault_mvp_point_to_open_reward = 36;
    if (has_assault_mvp_point_to_open_reward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assault_mvp_point_to_open_reward());
    }

    // optional int32 duel_reward_challenge_max_count = 37;
    if (has_duel_reward_challenge_max_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duel_reward_challenge_max_count());
    }

    // optional int32 guild_support_cool_time_hour = 38;
    if (has_guild_support_cool_time_hour()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_support_cool_time_hour());
    }

    // optional int32 guild_support_max_count_for_day = 39;
    if (has_guild_support_max_count_for_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_support_max_count_for_day());
    }

    // optional int32 rest_max_time_second = 40;
    if (has_rest_max_time_second()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rest_max_time_second());
    }

    // optional int32 rest_time_second_per_one_point = 41;
    if (has_rest_time_second_per_one_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rest_time_second_per_one_point());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 guild_mercenary_donation_max_count_for_day = 42;
    if (has_guild_mercenary_donation_max_count_for_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_mercenary_donation_max_count_for_day());
    }

    // optional int32 guild_rejoin_wait_time_min = 43;
    if (has_guild_rejoin_wait_time_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_rejoin_wait_time_min());
    }

    // optional int32 character_level_max = 44;
    if (has_character_level_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level_max());
    }

    // optional int32 match_continuous_win_count_for_bonus = 45;
    if (has_match_continuous_win_count_for_bonus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_continuous_win_count_for_bonus());
    }

    // optional int32 hero_tower_free_ticket_count_max = 46;
    if (has_hero_tower_free_ticket_count_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_tower_free_ticket_count_max());
    }

    // optional int32 counter_dungeon_daily_enter_count_max = 47;
    if (has_counter_dungeon_daily_enter_count_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counter_dungeon_daily_enter_count_max());
    }

    // optional int32 max_chat_block_count = 48;
    if (has_max_chat_block_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_chat_block_count());
    }

    // optional int32 min_floor_for_hero_tower_ranking = 49;
    if (has_min_floor_for_hero_tower_ranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_floor_for_hero_tower_ranking());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 raid_guild_bonus_count_member_2 = 50;
    if (has_raid_guild_bonus_count_member_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_guild_bonus_count_member_2());
    }

    // optional int32 raid_guild_bonus_count_member_3 = 51;
    if (has_raid_guild_bonus_count_member_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_guild_bonus_count_member_3());
    }

    // optional int32 raid_guild_bonus_count_member_4 = 52;
    if (has_raid_guild_bonus_count_member_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raid_guild_bonus_count_member_4());
    }

    // optional int32 show_review_inducement_popup = 53;
    if (has_show_review_inducement_popup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->show_review_inducement_popup());
    }

    // optional int32 max_open_stage_difficulty = 54;
    if (has_max_open_stage_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_open_stage_difficulty());
    }

    // optional int32 item_random_option_change_cost_cash = 55;
    if (has_item_random_option_change_cost_cash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_random_option_change_cost_cash());
    }

    // optional int32 event_dice_free_count = 56;
    if (has_event_dice_free_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_dice_free_count());
    }

    // optional int32 event_dice_point_per_one_dice = 57;
    if (has_event_dice_point_per_one_dice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_dice_point_per_one_dice());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 max_costume_inventory_slot_count = 58;
    if (has_max_costume_inventory_slot_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_costume_inventory_slot_count());
    }

    // optional int32 guild_master_change_period_day = 59;
    if (has_guild_master_change_period_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_master_change_period_day());
    }

    // optional int32 exchange_item_count_gold = 60;
    if (has_exchange_item_count_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_item_count_gold());
    }

    // optional int32 exchange_item_count_gem = 61;
    if (has_exchange_item_count_gem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchange_item_count_gem());
    }

    // optional int32 lobby_style = 62;
    if (has_lobby_style()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lobby_style());
    }

    // optional int32 advanced_rank_level = 63;
    if (has_advanced_rank_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advanced_rank_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigData::MergeFrom(const ConfigData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_point_buy_price_gem()) {
      set_skill_point_buy_price_gem(from.skill_point_buy_price_gem());
    }
    if (from.has_max_skill_point_buy_count()) {
      set_max_skill_point_buy_count(from.max_skill_point_buy_count());
    }
    if (from.has_skill_point_reset_price_gem()) {
      set_skill_point_reset_price_gem(from.skill_point_reset_price_gem());
    }
    if (from.has_need_cash_for_extend_inventory()) {
      set_need_cash_for_extend_inventory(from.need_cash_for_extend_inventory());
    }
    if (from.has_increase_inventory_slot_per_buy_count()) {
      set_increase_inventory_slot_per_buy_count(from.increase_inventory_slot_per_buy_count());
    }
    if (from.has_max_inventory_slot_count()) {
      set_max_inventory_slot_count(from.max_inventory_slot_count());
    }
    if (from.has_max_friend_count()) {
      set_max_friend_count(from.max_friend_count());
    }
    if (from.has_max_send_ask_friend()) {
      set_max_send_ask_friend(from.max_send_ask_friend());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_max_receive_ask_friend()) {
      set_max_receive_ask_friend(from.max_receive_ask_friend());
    }
    if (from.has_cooltime_for_send_social_point()) {
      set_cooltime_for_send_social_point(from.cooltime_for_send_social_point());
    }
    if (from.has_max_delete_friend_count_for_day()) {
      set_max_delete_friend_count_for_day(from.max_delete_friend_count_for_day());
    }
    if (from.has_max_social_point_value()) {
      set_max_social_point_value(from.max_social_point_value());
    }
    if (from.has_add_social_point_for_send_to_friend()) {
      set_add_social_point_for_send_to_friend(from.add_social_point_for_send_to_friend());
    }
    if (from.has_add_social_point_for_receive_from_friend()) {
      set_add_social_point_for_receive_from_friend(from.add_social_point_for_receive_from_friend());
    }
    if (from.has_stage_buff_rate_for_increase_exp()) {
      set_stage_buff_rate_for_increase_exp(from.stage_buff_rate_for_increase_exp());
    }
    if (from.has_stage_buff_rate_for_increase_gold()) {
      set_stage_buff_rate_for_increase_gold(from.stage_buff_rate_for_increase_gold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_stage_buff_rate_for_boost_game_speed()) {
      set_stage_buff_rate_for_boost_game_speed(from.stage_buff_rate_for_boost_game_speed());
    }
    if (from.has_guild_set_up_gold_cost()) {
      set_guild_set_up_gold_cost(from.guild_set_up_gold_cost());
    }
    if (from.has_default_max_guild_member_count()) {
      set_default_max_guild_member_count(from.default_max_guild_member_count());
    }
    if (from.has_max_invite_guild_count_for_account()) {
      set_max_invite_guild_count_for_account(from.max_invite_guild_count_for_account());
    }
    if (from.has_invite_guild_expire_period_by_day()) {
      set_invite_guild_expire_period_by_day(from.invite_guild_expire_period_by_day());
    }
    if (from.has_max_raid_count_per_day()) {
      set_max_raid_count_per_day(from.max_raid_count_per_day());
    }
    if (from.has_update_guild_gold_cost()) {
      set_update_guild_gold_cost(from.update_guild_gold_cost());
    }
    if (from.has_guild_master_logout_limit_period_day()) {
      set_guild_master_logout_limit_period_day(from.guild_master_logout_limit_period_day());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guild_battle_time_limit_sec_client()) {
      set_guild_battle_time_limit_sec_client(from.guild_battle_time_limit_sec_client());
    }
    if (from.has_hero_tower_sweep_reward_count_per_floor()) {
      set_hero_tower_sweep_reward_count_per_floor(from.hero_tower_sweep_reward_count_per_floor());
    }
    if (from.has_assault_resurrection_max_count()) {
      set_assault_resurrection_max_count(from.assault_resurrection_max_count());
    }
    if (from.has_pvp_match_point_max()) {
      set_pvp_match_point_max(from.pvp_match_point_max());
    }
    if (from.has_pvp_match_point_charge_period_second()) {
      set_pvp_match_point_charge_period_second(from.pvp_match_point_charge_period_second());
    }
    if (from.has_team_match_point_max()) {
      set_team_match_point_max(from.team_match_point_max());
    }
    if (from.has_team_match_point_charge_period_second()) {
      set_team_match_point_charge_period_second(from.team_match_point_charge_period_second());
    }
    if (from.has_item_random_option_change_cost_dark_crystal()) {
      set_item_random_option_change_cost_dark_crystal(from.item_random_option_change_cost_dark_crystal());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_item_preset_max_count()) {
      set_item_preset_max_count(from.item_preset_max_count());
    }
    if (from.has_skill_quick_slot_max_count()) {
      set_skill_quick_slot_max_count(from.skill_quick_slot_max_count());
    }
    if (from.has_assault_mvp_point_to_open_reward()) {
      set_assault_mvp_point_to_open_reward(from.assault_mvp_point_to_open_reward());
    }
    if (from.has_duel_reward_challenge_max_count()) {
      set_duel_reward_challenge_max_count(from.duel_reward_challenge_max_count());
    }
    if (from.has_guild_support_cool_time_hour()) {
      set_guild_support_cool_time_hour(from.guild_support_cool_time_hour());
    }
    if (from.has_guild_support_max_count_for_day()) {
      set_guild_support_max_count_for_day(from.guild_support_max_count_for_day());
    }
    if (from.has_rest_max_time_second()) {
      set_rest_max_time_second(from.rest_max_time_second());
    }
    if (from.has_rest_time_second_per_one_point()) {
      set_rest_time_second_per_one_point(from.rest_time_second_per_one_point());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_guild_mercenary_donation_max_count_for_day()) {
      set_guild_mercenary_donation_max_count_for_day(from.guild_mercenary_donation_max_count_for_day());
    }
    if (from.has_guild_rejoin_wait_time_min()) {
      set_guild_rejoin_wait_time_min(from.guild_rejoin_wait_time_min());
    }
    if (from.has_character_level_max()) {
      set_character_level_max(from.character_level_max());
    }
    if (from.has_match_continuous_win_count_for_bonus()) {
      set_match_continuous_win_count_for_bonus(from.match_continuous_win_count_for_bonus());
    }
    if (from.has_hero_tower_free_ticket_count_max()) {
      set_hero_tower_free_ticket_count_max(from.hero_tower_free_ticket_count_max());
    }
    if (from.has_counter_dungeon_daily_enter_count_max()) {
      set_counter_dungeon_daily_enter_count_max(from.counter_dungeon_daily_enter_count_max());
    }
    if (from.has_max_chat_block_count()) {
      set_max_chat_block_count(from.max_chat_block_count());
    }
    if (from.has_min_floor_for_hero_tower_ranking()) {
      set_min_floor_for_hero_tower_ranking(from.min_floor_for_hero_tower_ranking());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_raid_guild_bonus_count_member_2()) {
      set_raid_guild_bonus_count_member_2(from.raid_guild_bonus_count_member_2());
    }
    if (from.has_raid_guild_bonus_count_member_3()) {
      set_raid_guild_bonus_count_member_3(from.raid_guild_bonus_count_member_3());
    }
    if (from.has_raid_guild_bonus_count_member_4()) {
      set_raid_guild_bonus_count_member_4(from.raid_guild_bonus_count_member_4());
    }
    if (from.has_show_review_inducement_popup()) {
      set_show_review_inducement_popup(from.show_review_inducement_popup());
    }
    if (from.has_max_open_stage_difficulty()) {
      set_max_open_stage_difficulty(from.max_open_stage_difficulty());
    }
    if (from.has_item_random_option_change_cost_cash()) {
      set_item_random_option_change_cost_cash(from.item_random_option_change_cost_cash());
    }
    if (from.has_event_dice_free_count()) {
      set_event_dice_free_count(from.event_dice_free_count());
    }
    if (from.has_event_dice_point_per_one_dice()) {
      set_event_dice_point_per_one_dice(from.event_dice_point_per_one_dice());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_max_costume_inventory_slot_count()) {
      set_max_costume_inventory_slot_count(from.max_costume_inventory_slot_count());
    }
    if (from.has_guild_master_change_period_day()) {
      set_guild_master_change_period_day(from.guild_master_change_period_day());
    }
    if (from.has_exchange_item_count_gold()) {
      set_exchange_item_count_gold(from.exchange_item_count_gold());
    }
    if (from.has_exchange_item_count_gem()) {
      set_exchange_item_count_gem(from.exchange_item_count_gem());
    }
    if (from.has_lobby_style()) {
      set_lobby_style(from.lobby_style());
    }
    if (from.has_advanced_rank_level()) {
      set_advanced_rank_level(from.advanced_rank_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigData::CopyFrom(const ConfigData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigData::IsInitialized() const {

  return true;
}

void ConfigData::Swap(ConfigData* other) {
  if (other != this) {
    std::swap(skill_point_buy_price_gem_, other->skill_point_buy_price_gem_);
    std::swap(max_skill_point_buy_count_, other->max_skill_point_buy_count_);
    std::swap(skill_point_reset_price_gem_, other->skill_point_reset_price_gem_);
    std::swap(need_cash_for_extend_inventory_, other->need_cash_for_extend_inventory_);
    std::swap(increase_inventory_slot_per_buy_count_, other->increase_inventory_slot_per_buy_count_);
    std::swap(max_inventory_slot_count_, other->max_inventory_slot_count_);
    std::swap(max_friend_count_, other->max_friend_count_);
    std::swap(max_send_ask_friend_, other->max_send_ask_friend_);
    std::swap(max_receive_ask_friend_, other->max_receive_ask_friend_);
    std::swap(cooltime_for_send_social_point_, other->cooltime_for_send_social_point_);
    std::swap(max_delete_friend_count_for_day_, other->max_delete_friend_count_for_day_);
    std::swap(max_social_point_value_, other->max_social_point_value_);
    std::swap(add_social_point_for_send_to_friend_, other->add_social_point_for_send_to_friend_);
    std::swap(add_social_point_for_receive_from_friend_, other->add_social_point_for_receive_from_friend_);
    std::swap(stage_buff_rate_for_increase_exp_, other->stage_buff_rate_for_increase_exp_);
    std::swap(stage_buff_rate_for_increase_gold_, other->stage_buff_rate_for_increase_gold_);
    std::swap(stage_buff_rate_for_boost_game_speed_, other->stage_buff_rate_for_boost_game_speed_);
    std::swap(guild_set_up_gold_cost_, other->guild_set_up_gold_cost_);
    std::swap(default_max_guild_member_count_, other->default_max_guild_member_count_);
    std::swap(max_invite_guild_count_for_account_, other->max_invite_guild_count_for_account_);
    std::swap(invite_guild_expire_period_by_day_, other->invite_guild_expire_period_by_day_);
    std::swap(max_raid_count_per_day_, other->max_raid_count_per_day_);
    std::swap(update_guild_gold_cost_, other->update_guild_gold_cost_);
    std::swap(guild_master_logout_limit_period_day_, other->guild_master_logout_limit_period_day_);
    std::swap(guild_battle_time_limit_sec_client_, other->guild_battle_time_limit_sec_client_);
    std::swap(hero_tower_sweep_reward_count_per_floor_, other->hero_tower_sweep_reward_count_per_floor_);
    std::swap(assault_resurrection_max_count_, other->assault_resurrection_max_count_);
    std::swap(pvp_match_point_max_, other->pvp_match_point_max_);
    std::swap(pvp_match_point_charge_period_second_, other->pvp_match_point_charge_period_second_);
    std::swap(team_match_point_max_, other->team_match_point_max_);
    std::swap(team_match_point_charge_period_second_, other->team_match_point_charge_period_second_);
    std::swap(item_random_option_change_cost_dark_crystal_, other->item_random_option_change_cost_dark_crystal_);
    std::swap(item_preset_max_count_, other->item_preset_max_count_);
    std::swap(skill_quick_slot_max_count_, other->skill_quick_slot_max_count_);
    std::swap(assault_mvp_point_to_open_reward_, other->assault_mvp_point_to_open_reward_);
    std::swap(duel_reward_challenge_max_count_, other->duel_reward_challenge_max_count_);
    std::swap(guild_support_cool_time_hour_, other->guild_support_cool_time_hour_);
    std::swap(guild_support_max_count_for_day_, other->guild_support_max_count_for_day_);
    std::swap(rest_max_time_second_, other->rest_max_time_second_);
    std::swap(rest_time_second_per_one_point_, other->rest_time_second_per_one_point_);
    std::swap(guild_mercenary_donation_max_count_for_day_, other->guild_mercenary_donation_max_count_for_day_);
    std::swap(guild_rejoin_wait_time_min_, other->guild_rejoin_wait_time_min_);
    std::swap(character_level_max_, other->character_level_max_);
    std::swap(match_continuous_win_count_for_bonus_, other->match_continuous_win_count_for_bonus_);
    std::swap(hero_tower_free_ticket_count_max_, other->hero_tower_free_ticket_count_max_);
    std::swap(counter_dungeon_daily_enter_count_max_, other->counter_dungeon_daily_enter_count_max_);
    std::swap(max_chat_block_count_, other->max_chat_block_count_);
    std::swap(min_floor_for_hero_tower_ranking_, other->min_floor_for_hero_tower_ranking_);
    std::swap(raid_guild_bonus_count_member_2_, other->raid_guild_bonus_count_member_2_);
    std::swap(raid_guild_bonus_count_member_3_, other->raid_guild_bonus_count_member_3_);
    std::swap(raid_guild_bonus_count_member_4_, other->raid_guild_bonus_count_member_4_);
    std::swap(show_review_inducement_popup_, other->show_review_inducement_popup_);
    std::swap(max_open_stage_difficulty_, other->max_open_stage_difficulty_);
    std::swap(item_random_option_change_cost_cash_, other->item_random_option_change_cost_cash_);
    std::swap(event_dice_free_count_, other->event_dice_free_count_);
    std::swap(event_dice_point_per_one_dice_, other->event_dice_point_per_one_dice_);
    std::swap(max_costume_inventory_slot_count_, other->max_costume_inventory_slot_count_);
    std::swap(guild_master_change_period_day_, other->guild_master_change_period_day_);
    std::swap(exchange_item_count_gold_, other->exchange_item_count_gold_);
    std::swap(exchange_item_count_gem_, other->exchange_item_count_gem_);
    std::swap(lobby_style_, other->lobby_style_);
    std::swap(advanced_rank_level_, other->advanced_rank_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigData_descriptor_;
  metadata.reflection = ConfigData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Shop_DrawPriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_DrawPriceType_descriptor_;
}
bool Shop_DrawPriceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_DrawPriceType Shop::DRAW_GEM;
const Shop_DrawPriceType Shop::DRAW_SOCIAL_POINT;
const Shop_DrawPriceType Shop::SHOP_TEN_LOTTERY_TICKET;
const Shop_DrawPriceType Shop::DrawPriceType_MIN;
const Shop_DrawPriceType Shop::DrawPriceType_MAX;
const int Shop::DrawPriceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Shop_MileageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_MileageType_descriptor_;
}
bool Shop_MileageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_MileageType Shop::MILEAGE_LOTTERY;
const Shop_MileageType Shop::MILEAGE_BLADE_POINT;
const Shop_MileageType Shop::MILEAGE_GEM;
const Shop_MileageType Shop::MILEAGE_GOLD;
const Shop_MileageType Shop::MILEAGE_DARK_CRYSTAL;
const Shop_MileageType Shop::MILEAGE_PACKAGE;
const Shop_MileageType Shop::MileageType_MIN;
const Shop_MileageType Shop::MileageType_MAX;
const int Shop::MileageType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Shop_BuyPriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_BuyPriceType_descriptor_;
}
bool Shop_BuyPriceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_BuyPriceType Shop::GEM;
const Shop_BuyPriceType Shop::SOCIAL_POINT;
const Shop_BuyPriceType Shop::DARK_CRYSTAL;
const Shop_BuyPriceType Shop::CASH;
const Shop_BuyPriceType Shop::GOLD;
const Shop_BuyPriceType Shop::FAME_POINT;
const Shop_BuyPriceType Shop::BuyPriceType_MIN;
const Shop_BuyPriceType Shop::BuyPriceType_MAX;
const int Shop::BuyPriceType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Shop_ProductType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_ProductType_descriptor_;
}
bool Shop_ProductType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_ProductType Shop::PRODUCT_NONE;
const Shop_ProductType Shop::PRODUCT_BLADE_POINT;
const Shop_ProductType Shop::PRODUCT_GEM;
const Shop_ProductType Shop::PRODUCT_GOLD;
const Shop_ProductType Shop::PRODUCT_ITEM;
const Shop_ProductType Shop::PRODUCT_GENERAL_LOTTERY;
const Shop_ProductType Shop::PRODUCT_SELECTIVE_LOTTERY;
const Shop_ProductType Shop::PRODUCT_PACKAGE;
const Shop_ProductType Shop::PRODUCT_DARK_CRYSTAL;
const Shop_ProductType Shop::PRODUCT_GOLD_BUFF_TICKET;
const Shop_ProductType Shop::PRODUCT_EXP_BUFF_TICKET;
const Shop_ProductType Shop::PRODUCT_STAGE_BOOST_TICKET;
const Shop_ProductType Shop::PRODUCT_SHOP_TEN_LOTTERY_TICKET;
const Shop_ProductType Shop::PRODUCT_SELECTIVE_AETHER_LOTTERY;
const Shop_ProductType Shop::PRODUCT_PREFIX_SELECTIVE_LOTTERY;
const Shop_ProductType Shop::PRODUCT_STAGE_AUTO_CLEAR_TICKET;
const Shop_ProductType Shop::PRODUCT_COSTUME;
const Shop_ProductType Shop::PRODUCT_TOTEM;
const Shop_ProductType Shop::PRODUCT_TOTEM_PREFIX_LOTTERY;
const Shop_ProductType Shop::ProductType_MIN;
const Shop_ProductType Shop::ProductType_MAX;
const int Shop::ProductType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Shop_MarkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_MarkType_descriptor_;
}
bool Shop_MarkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_MarkType Shop::MARK_NONE;
const Shop_MarkType Shop::MARK_NEW;
const Shop_MarkType Shop::MARK_HOT;
const Shop_MarkType Shop::MARK_HIT;
const Shop_MarkType Shop::MARK_LIMITED;
const Shop_MarkType Shop::MarkType_MIN;
const Shop_MarkType Shop::MarkType_MAX;
const int Shop::MarkType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Shop_ShopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_ShopType_descriptor_;
}
bool Shop_ShopType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_ShopType Shop::SHOP_PACKAGE;
const Shop_ShopType Shop::SHOP_DARK_CRYSTAL;
const Shop_ShopType Shop::SHOP_GOODS;
const Shop_ShopType Shop::SHOP_FAME_POINT;
const Shop_ShopType Shop::ShopType_MIN;
const Shop_ShopType Shop::ShopType_MAX;
const int Shop::ShopType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Shop_RestrictType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_RestrictType_descriptor_;
}
bool Shop_RestrictType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Shop_RestrictType Shop::SHOP_NONE;
const Shop_RestrictType Shop::SHOP_DAY;
const Shop_RestrictType Shop::SHOP_WEEK;
const Shop_RestrictType Shop::SHOP_MONTH;
const Shop_RestrictType Shop::SHOP_NUMBER;
const Shop_RestrictType Shop::RestrictType_MIN;
const Shop_RestrictType Shop::RestrictType_MAX;
const int Shop::RestrictType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Shop_PeriodicPackageState::kPackageIdFieldNumber;
const int Shop_PeriodicPackageState::kEndPayTimeFieldNumber;
#endif  // !_MSC_VER

Shop_PeriodicPackageState::Shop_PeriodicPackageState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Shop.PeriodicPackageState)
}

void Shop_PeriodicPackageState::InitAsDefaultInstance() {
}

Shop_PeriodicPackageState::Shop_PeriodicPackageState(const Shop_PeriodicPackageState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Shop.PeriodicPackageState)
}

void Shop_PeriodicPackageState::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0;
  end_pay_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_PeriodicPackageState::~Shop_PeriodicPackageState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Shop.PeriodicPackageState)
  SharedDtor();
}

void Shop_PeriodicPackageState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_PeriodicPackageState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_PeriodicPackageState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_PeriodicPackageState_descriptor_;
}

const Shop_PeriodicPackageState& Shop_PeriodicPackageState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Shop_PeriodicPackageState* Shop_PeriodicPackageState::default_instance_ = NULL;

Shop_PeriodicPackageState* Shop_PeriodicPackageState::New() const {
  return new Shop_PeriodicPackageState;
}

void Shop_PeriodicPackageState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Shop_PeriodicPackageState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(end_pay_time_, package_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_PeriodicPackageState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Shop.PeriodicPackageState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_end_pay_time;
        break;
      }

      // required int64 end_pay_time = 2;
      case 2: {
        if (tag == 16) {
         parse_end_pay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_pay_time_)));
          set_has_end_pay_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Shop.PeriodicPackageState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Shop.PeriodicPackageState)
  return false;
#undef DO_
}

void Shop_PeriodicPackageState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Shop.PeriodicPackageState)
  // required int32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_id(), output);
  }

  // required int64 end_pay_time = 2;
  if (has_end_pay_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end_pay_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Shop.PeriodicPackageState)
}

::google::protobuf::uint8* Shop_PeriodicPackageState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Shop.PeriodicPackageState)
  // required int32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_id(), target);
  }

  // required int64 end_pay_time = 2;
  if (has_end_pay_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end_pay_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Shop.PeriodicPackageState)
  return target;
}

int Shop_PeriodicPackageState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required int64 end_pay_time = 2;
    if (has_end_pay_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_pay_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_PeriodicPackageState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_PeriodicPackageState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_PeriodicPackageState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_PeriodicPackageState::MergeFrom(const Shop_PeriodicPackageState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_end_pay_time()) {
      set_end_pay_time(from.end_pay_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_PeriodicPackageState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_PeriodicPackageState::CopyFrom(const Shop_PeriodicPackageState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_PeriodicPackageState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Shop_PeriodicPackageState::Swap(Shop_PeriodicPackageState* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(end_pay_time_, other->end_pay_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_PeriodicPackageState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_PeriodicPackageState_descriptor_;
  metadata.reflection = Shop_PeriodicPackageState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Shop_FlatRatePackageBonusState::kCurrentIndexFieldNumber;
const int Shop_FlatRatePackageBonusState::kWeeklyStateFieldNumber;
const int Shop_FlatRatePackageBonusState::kMonthlyStateFieldNumber;
const int Shop_FlatRatePackageBonusState::kRewardStateFieldNumber;
#endif  // !_MSC_VER

Shop_FlatRatePackageBonusState::Shop_FlatRatePackageBonusState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
}

void Shop_FlatRatePackageBonusState::InitAsDefaultInstance() {
}

Shop_FlatRatePackageBonusState::Shop_FlatRatePackageBonusState(const Shop_FlatRatePackageBonusState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
}

void Shop_FlatRatePackageBonusState::SharedCtor() {
  _cached_size_ = 0;
  current_index_ = 0;
  weekly_state_ = false;
  monthly_state_ = false;
  reward_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_FlatRatePackageBonusState::~Shop_FlatRatePackageBonusState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  SharedDtor();
}

void Shop_FlatRatePackageBonusState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_FlatRatePackageBonusState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_FlatRatePackageBonusState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_FlatRatePackageBonusState_descriptor_;
}

const Shop_FlatRatePackageBonusState& Shop_FlatRatePackageBonusState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Shop_FlatRatePackageBonusState* Shop_FlatRatePackageBonusState::default_instance_ = NULL;

Shop_FlatRatePackageBonusState* Shop_FlatRatePackageBonusState::New() const {
  return new Shop_FlatRatePackageBonusState;
}

void Shop_FlatRatePackageBonusState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Shop_FlatRatePackageBonusState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(current_index_, reward_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_FlatRatePackageBonusState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 current_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_index_)));
          set_has_current_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_weekly_state;
        break;
      }

      // required bool weekly_state = 2;
      case 2: {
        if (tag == 16) {
         parse_weekly_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &weekly_state_)));
          set_has_weekly_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_monthly_state;
        break;
      }

      // required bool monthly_state = 3;
      case 3: {
        if (tag == 24) {
         parse_monthly_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &monthly_state_)));
          set_has_monthly_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reward_state;
        break;
      }

      // required bool reward_state = 4;
      case 4: {
        if (tag == 32) {
         parse_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reward_state_)));
          set_has_reward_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  return false;
#undef DO_
}

void Shop_FlatRatePackageBonusState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  // required int32 current_index = 1;
  if (has_current_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->current_index(), output);
  }

  // required bool weekly_state = 2;
  if (has_weekly_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->weekly_state(), output);
  }

  // required bool monthly_state = 3;
  if (has_monthly_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->monthly_state(), output);
  }

  // required bool reward_state = 4;
  if (has_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->reward_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
}

::google::protobuf::uint8* Shop_FlatRatePackageBonusState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  // required int32 current_index = 1;
  if (has_current_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->current_index(), target);
  }

  // required bool weekly_state = 2;
  if (has_weekly_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->weekly_state(), target);
  }

  // required bool monthly_state = 3;
  if (has_monthly_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->monthly_state(), target);
  }

  // required bool reward_state = 4;
  if (has_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->reward_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Shop.FlatRatePackageBonusState)
  return target;
}

int Shop_FlatRatePackageBonusState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 current_index = 1;
    if (has_current_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_index());
    }

    // required bool weekly_state = 2;
    if (has_weekly_state()) {
      total_size += 1 + 1;
    }

    // required bool monthly_state = 3;
    if (has_monthly_state()) {
      total_size += 1 + 1;
    }

    // required bool reward_state = 4;
    if (has_reward_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_FlatRatePackageBonusState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_FlatRatePackageBonusState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_FlatRatePackageBonusState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_FlatRatePackageBonusState::MergeFrom(const Shop_FlatRatePackageBonusState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_index()) {
      set_current_index(from.current_index());
    }
    if (from.has_weekly_state()) {
      set_weekly_state(from.weekly_state());
    }
    if (from.has_monthly_state()) {
      set_monthly_state(from.monthly_state());
    }
    if (from.has_reward_state()) {
      set_reward_state(from.reward_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_FlatRatePackageBonusState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_FlatRatePackageBonusState::CopyFrom(const Shop_FlatRatePackageBonusState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_FlatRatePackageBonusState::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Shop_FlatRatePackageBonusState::Swap(Shop_FlatRatePackageBonusState* other) {
  if (other != this) {
    std::swap(current_index_, other->current_index_);
    std::swap(weekly_state_, other->weekly_state_);
    std::swap(monthly_state_, other->monthly_state_);
    std::swap(reward_state_, other->reward_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_FlatRatePackageBonusState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_FlatRatePackageBonusState_descriptor_;
  metadata.reflection = Shop_FlatRatePackageBonusState_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Shop_LevelUpPackageMission::kPackageIdFieldNumber;
const int Shop_LevelUpPackageMission::kCharacterTypeFieldNumber;
const int Shop_LevelUpPackageMission::kLevelFieldNumber;
const int Shop_LevelUpPackageMission::kStateFieldNumber;
#endif  // !_MSC_VER

Shop_LevelUpPackageMission::Shop_LevelUpPackageMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Shop.LevelUpPackageMission)
}

void Shop_LevelUpPackageMission::InitAsDefaultInstance() {
}

Shop_LevelUpPackageMission::Shop_LevelUpPackageMission(const Shop_LevelUpPackageMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Shop.LevelUpPackageMission)
}

void Shop_LevelUpPackageMission::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0;
  character_type_ = 1;
  level_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_LevelUpPackageMission::~Shop_LevelUpPackageMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Shop.LevelUpPackageMission)
  SharedDtor();
}

void Shop_LevelUpPackageMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_LevelUpPackageMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_LevelUpPackageMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_LevelUpPackageMission_descriptor_;
}

const Shop_LevelUpPackageMission& Shop_LevelUpPackageMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Shop_LevelUpPackageMission* Shop_LevelUpPackageMission::default_instance_ = NULL;

Shop_LevelUpPackageMission* Shop_LevelUpPackageMission::New() const {
  return new Shop_LevelUpPackageMission;
}

void Shop_LevelUpPackageMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Shop_LevelUpPackageMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(level_, state_);
    package_id_ = 0;
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_LevelUpPackageMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Shop.LevelUpPackageMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Shop.LevelUpPackageMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Shop.LevelUpPackageMission)
  return false;
#undef DO_
}

void Shop_LevelUpPackageMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Shop.LevelUpPackageMission)
  // required int32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_id(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Shop.LevelUpPackageMission)
}

::google::protobuf::uint8* Shop_LevelUpPackageMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Shop.LevelUpPackageMission)
  // required int32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_id(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Shop.LevelUpPackageMission)
  return target;
}

int Shop_LevelUpPackageMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_LevelUpPackageMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_LevelUpPackageMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_LevelUpPackageMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_LevelUpPackageMission::MergeFrom(const Shop_LevelUpPackageMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_LevelUpPackageMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_LevelUpPackageMission::CopyFrom(const Shop_LevelUpPackageMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_LevelUpPackageMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Shop_LevelUpPackageMission::Swap(Shop_LevelUpPackageMission* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_LevelUpPackageMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_LevelUpPackageMission_descriptor_;
  metadata.reflection = Shop_LevelUpPackageMission_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Shop_ReachLevelPackageMission::kPackageIdFieldNumber;
const int Shop_ReachLevelPackageMission::kCharacterTypeFieldNumber;
const int Shop_ReachLevelPackageMission::kLevelFieldNumber;
const int Shop_ReachLevelPackageMission::kStateFieldNumber;
const int Shop_ReachLevelPackageMission::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

Shop_ReachLevelPackageMission::Shop_ReachLevelPackageMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Shop.ReachLevelPackageMission)
}

void Shop_ReachLevelPackageMission::InitAsDefaultInstance() {
}

Shop_ReachLevelPackageMission::Shop_ReachLevelPackageMission(const Shop_ReachLevelPackageMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Shop.ReachLevelPackageMission)
}

void Shop_ReachLevelPackageMission::SharedCtor() {
  _cached_size_ = 0;
  package_id_ = 0;
  character_type_ = 1;
  level_ = 0;
  state_ = 0;
  expire_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_ReachLevelPackageMission::~Shop_ReachLevelPackageMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  SharedDtor();
}

void Shop_ReachLevelPackageMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop_ReachLevelPackageMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_ReachLevelPackageMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_ReachLevelPackageMission_descriptor_;
}

const Shop_ReachLevelPackageMission& Shop_ReachLevelPackageMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Shop_ReachLevelPackageMission* Shop_ReachLevelPackageMission::default_instance_ = NULL;

Shop_ReachLevelPackageMission* Shop_ReachLevelPackageMission::New() const {
  return new Shop_ReachLevelPackageMission;
}

void Shop_ReachLevelPackageMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Shop_ReachLevelPackageMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(level_, expire_time_);
    package_id_ = 0;
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_ReachLevelPackageMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 package_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &package_id_)));
          set_has_package_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required int32 state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_expire_time;
        break;
      }

      // required int64 expire_time = 5;
      case 5: {
        if (tag == 40) {
         parse_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
          set_has_expire_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  return false;
#undef DO_
}

void Shop_ReachLevelPackageMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  // required int32 package_id = 1;
  if (has_package_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->package_id(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->character_type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

  // required int64 expire_time = 5;
  if (has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->expire_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Shop.ReachLevelPackageMission)
}

::google::protobuf::uint8* Shop_ReachLevelPackageMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  // required int32 package_id = 1;
  if (has_package_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->package_id(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 2;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->character_type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state(), target);
  }

  // required int64 expire_time = 5;
  if (has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->expire_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Shop.ReachLevelPackageMission)
  return target;
}

int Shop_ReachLevelPackageMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 package_id = 1;
    if (has_package_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->package_id());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 2;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int64 expire_time = 5;
    if (has_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expire_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_ReachLevelPackageMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_ReachLevelPackageMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_ReachLevelPackageMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_ReachLevelPackageMission::MergeFrom(const Shop_ReachLevelPackageMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_id()) {
      set_package_id(from.package_id());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_expire_time()) {
      set_expire_time(from.expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_ReachLevelPackageMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_ReachLevelPackageMission::CopyFrom(const Shop_ReachLevelPackageMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_ReachLevelPackageMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Shop_ReachLevelPackageMission::Swap(Shop_ReachLevelPackageMission* other) {
  if (other != this) {
    std::swap(package_id_, other->package_id_);
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(state_, other->state_);
    std::swap(expire_time_, other->expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_ReachLevelPackageMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_ReachLevelPackageMission_descriptor_;
  metadata.reflection = Shop_ReachLevelPackageMission_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Shop_BuyResultInfo::kAddProductsFieldNumber;
const int Shop_BuyResultInfo::kShopBuyManagesFieldNumber;
const int Shop_BuyResultInfo::kBuyProductTypeFieldNumber;
const int Shop_BuyResultInfo::kPeriodicPackageStateFieldNumber;
const int Shop_BuyResultInfo::kFlatRatePackageBonusStateFieldNumber;
const int Shop_BuyResultInfo::kLevelUpPackageMissionsFieldNumber;
const int Shop_BuyResultInfo::kReachLevelPackageMissionFieldNumber;
const int Shop_BuyResultInfo::kMileageTypeFieldNumber;
const int Shop_BuyResultInfo::kCurrentMileageFieldNumber;
const int Shop_BuyResultInfo::kCostumesFieldNumber;
const int Shop_BuyResultInfo::kTotemsFieldNumber;
#endif  // !_MSC_VER

Shop_BuyResultInfo::Shop_BuyResultInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Shop.BuyResultInfo)
}

void Shop_BuyResultInfo::InitAsDefaultInstance() {
  periodic_package_state_ = const_cast< ::b2::protocol::commondata::Shop_PeriodicPackageState*>(&::b2::protocol::commondata::Shop_PeriodicPackageState::default_instance());
  flat_rate_package_bonus_state_ = const_cast< ::b2::protocol::commondata::Shop_FlatRatePackageBonusState*>(&::b2::protocol::commondata::Shop_FlatRatePackageBonusState::default_instance());
  reach_level_package_mission_ = const_cast< ::b2::protocol::commondata::Shop_ReachLevelPackageMission*>(&::b2::protocol::commondata::Shop_ReachLevelPackageMission::default_instance());
}

Shop_BuyResultInfo::Shop_BuyResultInfo(const Shop_BuyResultInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Shop.BuyResultInfo)
}

void Shop_BuyResultInfo::SharedCtor() {
  _cached_size_ = 0;
  buy_product_type_ = 0;
  periodic_package_state_ = NULL;
  flat_rate_package_bonus_state_ = NULL;
  reach_level_package_mission_ = NULL;
  mileage_type_ = 1;
  current_mileage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop_BuyResultInfo::~Shop_BuyResultInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Shop.BuyResultInfo)
  SharedDtor();
}

void Shop_BuyResultInfo::SharedDtor() {
  if (this != default_instance_) {
    delete periodic_package_state_;
    delete flat_rate_package_bonus_state_;
    delete reach_level_package_mission_;
  }
}

void Shop_BuyResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop_BuyResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_BuyResultInfo_descriptor_;
}

const Shop_BuyResultInfo& Shop_BuyResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Shop_BuyResultInfo* Shop_BuyResultInfo::default_instance_ = NULL;

Shop_BuyResultInfo* Shop_BuyResultInfo::New() const {
  return new Shop_BuyResultInfo;
}

void Shop_BuyResultInfo::Clear() {
  if (_has_bits_[0 / 32] & 220) {
    buy_product_type_ = 0;
    if (has_periodic_package_state()) {
      if (periodic_package_state_ != NULL) periodic_package_state_->::b2::protocol::commondata::Shop_PeriodicPackageState::Clear();
    }
    if (has_flat_rate_package_bonus_state()) {
      if (flat_rate_package_bonus_state_ != NULL) flat_rate_package_bonus_state_->::b2::protocol::commondata::Shop_FlatRatePackageBonusState::Clear();
    }
    if (has_reach_level_package_mission()) {
      if (reach_level_package_mission_ != NULL) reach_level_package_mission_->::b2::protocol::commondata::Shop_ReachLevelPackageMission::Clear();
    }
    mileage_type_ = 1;
  }
  current_mileage_ = 0;
  add_products_.Clear();
  shop_buy_manages_.Clear();
  level_up_package_missions_.Clear();
  costumes_.Clear();
  totems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop_BuyResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Shop.BuyResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .b2.protocol.commondata.ShopProduct add_products = 1;
      case 1: {
        if (tag == 10) {
         parse_add_products:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_products()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_add_products;
        if (input->ExpectTag(18)) goto parse_shop_buy_manages;
        break;
      }

      // repeated .b2.protocol.commondata.ShopBuyManage shop_buy_manages = 2;
      case 2: {
        if (tag == 18) {
         parse_shop_buy_manages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop_buy_manages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_shop_buy_manages;
        if (input->ExpectTag(24)) goto parse_buy_product_type;
        break;
      }

      // optional .b2.protocol.commondata.Shop.ProductType buy_product_type = 3;
      case 3: {
        if (tag == 24) {
         parse_buy_product_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_ProductType_IsValid(value)) {
            set_buy_product_type(static_cast< ::b2::protocol::commondata::Shop_ProductType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_periodic_package_state;
        break;
      }

      // optional .b2.protocol.commondata.Shop.PeriodicPackageState periodic_package_state = 4;
      case 4: {
        if (tag == 34) {
         parse_periodic_package_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_periodic_package_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_flat_rate_package_bonus_state;
        break;
      }

      // optional .b2.protocol.commondata.Shop.FlatRatePackageBonusState flat_rate_package_bonus_state = 5;
      case 5: {
        if (tag == 42) {
         parse_flat_rate_package_bonus_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flat_rate_package_bonus_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_level_up_package_missions;
        break;
      }

      // repeated .b2.protocol.commondata.Shop.LevelUpPackageMission level_up_package_missions = 6;
      case 6: {
        if (tag == 50) {
         parse_level_up_package_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_up_package_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_level_up_package_missions;
        if (input->ExpectTag(58)) goto parse_reach_level_package_mission;
        break;
      }

      // optional .b2.protocol.commondata.Shop.ReachLevelPackageMission reach_level_package_mission = 7;
      case 7: {
        if (tag == 58) {
         parse_reach_level_package_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reach_level_package_mission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mileage_type;
        break;
      }

      // optional .b2.protocol.commondata.Shop.MileageType mileage_type = 12;
      case 12: {
        if (tag == 96) {
         parse_mileage_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_MileageType_IsValid(value)) {
            set_mileage_type(static_cast< ::b2::protocol::commondata::Shop_MileageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_current_mileage;
        break;
      }

      // optional int32 current_mileage = 13;
      case 13: {
        if (tag == 104) {
         parse_current_mileage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_mileage_)));
          set_has_current_mileage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_costumes;
        break;
      }

      // repeated .b2.protocol.commondata.Costume costumes = 20;
      case 20: {
        if (tag == 162) {
         parse_costumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_costumes;
        if (input->ExpectTag(242)) goto parse_totems;
        break;
      }

      // repeated .b2.protocol.commondata.Totem totems = 30;
      case 30: {
        if (tag == 242) {
         parse_totems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_totems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Shop.BuyResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Shop.BuyResultInfo)
  return false;
#undef DO_
}

void Shop_BuyResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Shop.BuyResultInfo)
  // repeated .b2.protocol.commondata.ShopProduct add_products = 1;
  for (int i = 0; i < this->add_products_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->add_products(i), output);
  }

  // repeated .b2.protocol.commondata.ShopBuyManage shop_buy_manages = 2;
  for (int i = 0; i < this->shop_buy_manages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop_buy_manages(i), output);
  }

  // optional .b2.protocol.commondata.Shop.ProductType buy_product_type = 3;
  if (has_buy_product_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->buy_product_type(), output);
  }

  // optional .b2.protocol.commondata.Shop.PeriodicPackageState periodic_package_state = 4;
  if (has_periodic_package_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->periodic_package_state(), output);
  }

  // optional .b2.protocol.commondata.Shop.FlatRatePackageBonusState flat_rate_package_bonus_state = 5;
  if (has_flat_rate_package_bonus_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->flat_rate_package_bonus_state(), output);
  }

  // repeated .b2.protocol.commondata.Shop.LevelUpPackageMission level_up_package_missions = 6;
  for (int i = 0; i < this->level_up_package_missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->level_up_package_missions(i), output);
  }

  // optional .b2.protocol.commondata.Shop.ReachLevelPackageMission reach_level_package_mission = 7;
  if (has_reach_level_package_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->reach_level_package_mission(), output);
  }

  // optional .b2.protocol.commondata.Shop.MileageType mileage_type = 12;
  if (has_mileage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->mileage_type(), output);
  }

  // optional int32 current_mileage = 13;
  if (has_current_mileage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->current_mileage(), output);
  }

  // repeated .b2.protocol.commondata.Costume costumes = 20;
  for (int i = 0; i < this->costumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->costumes(i), output);
  }

  // repeated .b2.protocol.commondata.Totem totems = 30;
  for (int i = 0; i < this->totems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->totems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Shop.BuyResultInfo)
}

::google::protobuf::uint8* Shop_BuyResultInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Shop.BuyResultInfo)
  // repeated .b2.protocol.commondata.ShopProduct add_products = 1;
  for (int i = 0; i < this->add_products_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->add_products(i), target);
  }

  // repeated .b2.protocol.commondata.ShopBuyManage shop_buy_manages = 2;
  for (int i = 0; i < this->shop_buy_manages_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop_buy_manages(i), target);
  }

  // optional .b2.protocol.commondata.Shop.ProductType buy_product_type = 3;
  if (has_buy_product_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->buy_product_type(), target);
  }

  // optional .b2.protocol.commondata.Shop.PeriodicPackageState periodic_package_state = 4;
  if (has_periodic_package_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->periodic_package_state(), target);
  }

  // optional .b2.protocol.commondata.Shop.FlatRatePackageBonusState flat_rate_package_bonus_state = 5;
  if (has_flat_rate_package_bonus_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->flat_rate_package_bonus_state(), target);
  }

  // repeated .b2.protocol.commondata.Shop.LevelUpPackageMission level_up_package_missions = 6;
  for (int i = 0; i < this->level_up_package_missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->level_up_package_missions(i), target);
  }

  // optional .b2.protocol.commondata.Shop.ReachLevelPackageMission reach_level_package_mission = 7;
  if (has_reach_level_package_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->reach_level_package_mission(), target);
  }

  // optional .b2.protocol.commondata.Shop.MileageType mileage_type = 12;
  if (has_mileage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->mileage_type(), target);
  }

  // optional int32 current_mileage = 13;
  if (has_current_mileage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->current_mileage(), target);
  }

  // repeated .b2.protocol.commondata.Costume costumes = 20;
  for (int i = 0; i < this->costumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->costumes(i), target);
  }

  // repeated .b2.protocol.commondata.Totem totems = 30;
  for (int i = 0; i < this->totems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->totems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Shop.BuyResultInfo)
  return target;
}

int Shop_BuyResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .b2.protocol.commondata.Shop.ProductType buy_product_type = 3;
    if (has_buy_product_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->buy_product_type());
    }

    // optional .b2.protocol.commondata.Shop.PeriodicPackageState periodic_package_state = 4;
    if (has_periodic_package_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->periodic_package_state());
    }

    // optional .b2.protocol.commondata.Shop.FlatRatePackageBonusState flat_rate_package_bonus_state = 5;
    if (has_flat_rate_package_bonus_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flat_rate_package_bonus_state());
    }

    // optional .b2.protocol.commondata.Shop.ReachLevelPackageMission reach_level_package_mission = 7;
    if (has_reach_level_package_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reach_level_package_mission());
    }

    // optional .b2.protocol.commondata.Shop.MileageType mileage_type = 12;
    if (has_mileage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mileage_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 current_mileage = 13;
    if (has_current_mileage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_mileage());
    }

  }
  // repeated .b2.protocol.commondata.ShopProduct add_products = 1;
  total_size += 1 * this->add_products_size();
  for (int i = 0; i < this->add_products_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->add_products(i));
  }

  // repeated .b2.protocol.commondata.ShopBuyManage shop_buy_manages = 2;
  total_size += 1 * this->shop_buy_manages_size();
  for (int i = 0; i < this->shop_buy_manages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop_buy_manages(i));
  }

  // repeated .b2.protocol.commondata.Shop.LevelUpPackageMission level_up_package_missions = 6;
  total_size += 1 * this->level_up_package_missions_size();
  for (int i = 0; i < this->level_up_package_missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_up_package_missions(i));
  }

  // repeated .b2.protocol.commondata.Costume costumes = 20;
  total_size += 2 * this->costumes_size();
  for (int i = 0; i < this->costumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costumes(i));
  }

  // repeated .b2.protocol.commondata.Totem totems = 30;
  total_size += 2 * this->totems_size();
  for (int i = 0; i < this->totems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop_BuyResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop_BuyResultInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop_BuyResultInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop_BuyResultInfo::MergeFrom(const Shop_BuyResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  add_products_.MergeFrom(from.add_products_);
  shop_buy_manages_.MergeFrom(from.shop_buy_manages_);
  level_up_package_missions_.MergeFrom(from.level_up_package_missions_);
  costumes_.MergeFrom(from.costumes_);
  totems_.MergeFrom(from.totems_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_buy_product_type()) {
      set_buy_product_type(from.buy_product_type());
    }
    if (from.has_periodic_package_state()) {
      mutable_periodic_package_state()->::b2::protocol::commondata::Shop_PeriodicPackageState::MergeFrom(from.periodic_package_state());
    }
    if (from.has_flat_rate_package_bonus_state()) {
      mutable_flat_rate_package_bonus_state()->::b2::protocol::commondata::Shop_FlatRatePackageBonusState::MergeFrom(from.flat_rate_package_bonus_state());
    }
    if (from.has_reach_level_package_mission()) {
      mutable_reach_level_package_mission()->::b2::protocol::commondata::Shop_ReachLevelPackageMission::MergeFrom(from.reach_level_package_mission());
    }
    if (from.has_mileage_type()) {
      set_mileage_type(from.mileage_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_current_mileage()) {
      set_current_mileage(from.current_mileage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop_BuyResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop_BuyResultInfo::CopyFrom(const Shop_BuyResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop_BuyResultInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->add_products())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->shop_buy_manages())) return false;
  if (has_periodic_package_state()) {
    if (!this->periodic_package_state().IsInitialized()) return false;
  }
  if (has_flat_rate_package_bonus_state()) {
    if (!this->flat_rate_package_bonus_state().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->level_up_package_missions())) return false;
  if (has_reach_level_package_mission()) {
    if (!this->reach_level_package_mission().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->costumes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->totems())) return false;
  return true;
}

void Shop_BuyResultInfo::Swap(Shop_BuyResultInfo* other) {
  if (other != this) {
    add_products_.Swap(&other->add_products_);
    shop_buy_manages_.Swap(&other->shop_buy_manages_);
    std::swap(buy_product_type_, other->buy_product_type_);
    std::swap(periodic_package_state_, other->periodic_package_state_);
    std::swap(flat_rate_package_bonus_state_, other->flat_rate_package_bonus_state_);
    level_up_package_missions_.Swap(&other->level_up_package_missions_);
    std::swap(reach_level_package_mission_, other->reach_level_package_mission_);
    std::swap(mileage_type_, other->mileage_type_);
    std::swap(current_mileage_, other->current_mileage_);
    costumes_.Swap(&other->costumes_);
    totems_.Swap(&other->totems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop_BuyResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_BuyResultInfo_descriptor_;
  metadata.reflection = Shop_BuyResultInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
#endif  // !_MSC_VER

Shop::Shop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.Shop)
}

void Shop::InitAsDefaultInstance() {
}

Shop::Shop(const Shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.Shop)
}

void Shop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop::~Shop() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.Shop)
  SharedDtor();
}

void Shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_descriptor_;
}

const Shop& Shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

Shop* Shop::default_instance_ = NULL;

Shop* Shop::New() const {
  return new Shop;
}

void Shop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.Shop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.Shop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.Shop)
  return false;
#undef DO_
}

void Shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.Shop)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.Shop)
}

::google::protobuf::uint8* Shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.Shop)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.Shop)
  return target;
}

int Shop::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop::MergeFrom(const Shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop::CopyFrom(const Shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop::IsInitialized() const {

  return true;
}

void Shop::Swap(Shop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_descriptor_;
  metadata.reflection = Shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MagicShop::kIdFieldNumber;
const int MagicShop::kIsPurchasedFieldNumber;
#endif  // !_MSC_VER

MagicShop::MagicShop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MagicShop)
}

void MagicShop::InitAsDefaultInstance() {
}

MagicShop::MagicShop(const MagicShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MagicShop)
}

void MagicShop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  is_purchased_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MagicShop::~MagicShop() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MagicShop)
  SharedDtor();
}

void MagicShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MagicShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MagicShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicShop_descriptor_;
}

const MagicShop& MagicShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MagicShop* MagicShop::default_instance_ = NULL;

MagicShop* MagicShop::New() const {
  return new MagicShop;
}

void MagicShop::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MagicShop*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, is_purchased_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MagicShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MagicShop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_purchased;
        break;
      }

      // required bool is_purchased = 4;
      case 4: {
        if (tag == 32) {
         parse_is_purchased:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_purchased_)));
          set_has_is_purchased();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MagicShop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MagicShop)
  return false;
#undef DO_
}

void MagicShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MagicShop)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool is_purchased = 4;
  if (has_is_purchased()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_purchased(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MagicShop)
}

::google::protobuf::uint8* MagicShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MagicShop)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required bool is_purchased = 4;
  if (has_is_purchased()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_purchased(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MagicShop)
  return target;
}

int MagicShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool is_purchased = 4;
    if (has_is_purchased()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MagicShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MagicShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MagicShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MagicShop::MergeFrom(const MagicShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_purchased()) {
      set_is_purchased(from.is_purchased());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MagicShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicShop::CopyFrom(const MagicShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicShop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MagicShop::Swap(MagicShop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_purchased_, other->is_purchased_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MagicShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicShop_descriptor_;
  metadata.reflection = MagicShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopLottery::kDrawPriceTypeFieldNumber;
const int ShopLottery::kIsContinuousFieldNumber;
const int ShopLottery::kNextFreeTimeFieldNumber;
const int ShopLottery::kLotteryCountFieldNumber;
#endif  // !_MSC_VER

ShopLottery::ShopLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ShopLottery)
}

void ShopLottery::InitAsDefaultInstance() {
}

ShopLottery::ShopLottery(const ShopLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ShopLottery)
}

void ShopLottery::SharedCtor() {
  _cached_size_ = 0;
  draw_price_type_ = 1;
  is_continuous_ = false;
  next_free_time_ = GOOGLE_LONGLONG(0);
  lottery_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopLottery::~ShopLottery() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ShopLottery)
  SharedDtor();
}

void ShopLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopLottery_descriptor_;
}

const ShopLottery& ShopLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ShopLottery* ShopLottery::default_instance_ = NULL;

ShopLottery* ShopLottery::New() const {
  return new ShopLottery;
}

void ShopLottery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopLottery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(is_continuous_, lottery_count_);
    draw_price_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ShopLottery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_DrawPriceType_IsValid(value)) {
            set_draw_price_type(static_cast< ::b2::protocol::commondata::Shop_DrawPriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_continuous;
        break;
      }

      // required bool is_continuous = 2;
      case 2: {
        if (tag == 16) {
         parse_is_continuous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continuous_)));
          set_has_is_continuous();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_next_free_time;
        break;
      }

      // required int64 next_free_time = 3;
      case 3: {
        if (tag == 24) {
         parse_next_free_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_free_time_)));
          set_has_next_free_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lottery_count;
        break;
      }

      // required int32 lottery_count = 4;
      case 4: {
        if (tag == 32) {
         parse_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_count_)));
          set_has_lottery_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ShopLottery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ShopLottery)
  return false;
#undef DO_
}

void ShopLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ShopLottery)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->draw_price_type(), output);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_continuous(), output);
  }

  // required int64 next_free_time = 3;
  if (has_next_free_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->next_free_time(), output);
  }

  // required int32 lottery_count = 4;
  if (has_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lottery_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ShopLottery)
}

::google::protobuf::uint8* ShopLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ShopLottery)
  // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
  if (has_draw_price_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->draw_price_type(), target);
  }

  // required bool is_continuous = 2;
  if (has_is_continuous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_continuous(), target);
  }

  // required int64 next_free_time = 3;
  if (has_next_free_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->next_free_time(), target);
  }

  // required int32 lottery_count = 4;
  if (has_lottery_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lottery_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ShopLottery)
  return target;
}

int ShopLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.DrawPriceType draw_price_type = 1;
    if (has_draw_price_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->draw_price_type());
    }

    // required bool is_continuous = 2;
    if (has_is_continuous()) {
      total_size += 1 + 1;
    }

    // required int64 next_free_time = 3;
    if (has_next_free_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_free_time());
    }

    // required int32 lottery_count = 4;
    if (has_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopLottery::MergeFrom(const ShopLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_draw_price_type()) {
      set_draw_price_type(from.draw_price_type());
    }
    if (from.has_is_continuous()) {
      set_is_continuous(from.is_continuous());
    }
    if (from.has_next_free_time()) {
      set_next_free_time(from.next_free_time());
    }
    if (from.has_lottery_count()) {
      set_lottery_count(from.lottery_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopLottery::CopyFrom(const ShopLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ShopLottery::Swap(ShopLottery* other) {
  if (other != this) {
    std::swap(draw_price_type_, other->draw_price_type_);
    std::swap(is_continuous_, other->is_continuous_);
    std::swap(next_free_time_, other->next_free_time_);
    std::swap(lottery_count_, other->lottery_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopLottery_descriptor_;
  metadata.reflection = ShopLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopProduct::kProductTypeFieldNumber;
const int ShopProduct::kProductIdFieldNumber;
const int ShopProduct::kProductCountFieldNumber;
#endif  // !_MSC_VER

ShopProduct::ShopProduct()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ShopProduct)
}

void ShopProduct::InitAsDefaultInstance() {
}

ShopProduct::ShopProduct(const ShopProduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ShopProduct)
}

void ShopProduct::SharedCtor() {
  _cached_size_ = 0;
  product_type_ = 0;
  product_id_ = 0;
  product_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopProduct::~ShopProduct() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ShopProduct)
  SharedDtor();
}

void ShopProduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopProduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopProduct_descriptor_;
}

const ShopProduct& ShopProduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ShopProduct* ShopProduct::default_instance_ = NULL;

ShopProduct* ShopProduct::New() const {
  return new ShopProduct;
}

void ShopProduct::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopProduct*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(product_type_, product_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ShopProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.ProductType product_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_ProductType_IsValid(value)) {
            set_product_type(static_cast< ::b2::protocol::commondata::Shop_ProductType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_product_id;
        break;
      }

      // required int32 product_id = 2;
      case 2: {
        if (tag == 16) {
         parse_product_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_product_count;
        break;
      }

      // required int32 product_count = 3;
      case 3: {
        if (tag == 24) {
         parse_product_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_count_)));
          set_has_product_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ShopProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ShopProduct)
  return false;
#undef DO_
}

void ShopProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ShopProduct)
  // required .b2.protocol.commondata.Shop.ProductType product_type = 1;
  if (has_product_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->product_type(), output);
  }

  // required int32 product_id = 2;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->product_id(), output);
  }

  // required int32 product_count = 3;
  if (has_product_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->product_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ShopProduct)
}

::google::protobuf::uint8* ShopProduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ShopProduct)
  // required .b2.protocol.commondata.Shop.ProductType product_type = 1;
  if (has_product_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->product_type(), target);
  }

  // required int32 product_id = 2;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->product_id(), target);
  }

  // required int32 product_count = 3;
  if (has_product_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->product_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ShopProduct)
  return target;
}

int ShopProduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.ProductType product_type = 1;
    if (has_product_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->product_type());
    }

    // required int32 product_id = 2;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // required int32 product_count = 3;
    if (has_product_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopProduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopProduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopProduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopProduct::MergeFrom(const ShopProduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_type()) {
      set_product_type(from.product_type());
    }
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_product_count()) {
      set_product_count(from.product_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopProduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopProduct::CopyFrom(const ShopProduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopProduct::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShopProduct::Swap(ShopProduct* other) {
  if (other != this) {
    std::swap(product_type_, other->product_type_);
    std::swap(product_id_, other->product_id_);
    std::swap(product_count_, other->product_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopProduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopProduct_descriptor_;
  metadata.reflection = ShopProduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopMileage::kShopMileageTypeFieldNumber;
const int ShopMileage::kMileageFieldNumber;
const int ShopMileage::kRewardIndexFieldNumber;
#endif  // !_MSC_VER

ShopMileage::ShopMileage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ShopMileage)
}

void ShopMileage::InitAsDefaultInstance() {
}

ShopMileage::ShopMileage(const ShopMileage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ShopMileage)
}

void ShopMileage::SharedCtor() {
  _cached_size_ = 0;
  shop_mileage_type_ = 1;
  mileage_ = 0;
  reward_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopMileage::~ShopMileage() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ShopMileage)
  SharedDtor();
}

void ShopMileage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopMileage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopMileage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopMileage_descriptor_;
}

const ShopMileage& ShopMileage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ShopMileage* ShopMileage::default_instance_ = NULL;

ShopMileage* ShopMileage::New() const {
  return new ShopMileage;
}

void ShopMileage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopMileage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(mileage_, reward_index_);
    shop_mileage_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopMileage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ShopMileage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Shop.MileageType shop_mileage_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_MileageType_IsValid(value)) {
            set_shop_mileage_type(static_cast< ::b2::protocol::commondata::Shop_MileageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mileage;
        break;
      }

      // required int32 mileage = 2;
      case 2: {
        if (tag == 16) {
         parse_mileage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mileage_)));
          set_has_mileage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_index;
        break;
      }

      // required int32 reward_index = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_index_)));
          set_has_reward_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ShopMileage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ShopMileage)
  return false;
#undef DO_
}

void ShopMileage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ShopMileage)
  // required .b2.protocol.commondata.Shop.MileageType shop_mileage_type = 1;
  if (has_shop_mileage_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shop_mileage_type(), output);
  }

  // required int32 mileage = 2;
  if (has_mileage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mileage(), output);
  }

  // required int32 reward_index = 3;
  if (has_reward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ShopMileage)
}

::google::protobuf::uint8* ShopMileage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ShopMileage)
  // required .b2.protocol.commondata.Shop.MileageType shop_mileage_type = 1;
  if (has_shop_mileage_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shop_mileage_type(), target);
  }

  // required int32 mileage = 2;
  if (has_mileage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mileage(), target);
  }

  // required int32 reward_index = 3;
  if (has_reward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ShopMileage)
  return target;
}

int ShopMileage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Shop.MileageType shop_mileage_type = 1;
    if (has_shop_mileage_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shop_mileage_type());
    }

    // required int32 mileage = 2;
    if (has_mileage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mileage());
    }

    // required int32 reward_index = 3;
    if (has_reward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopMileage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopMileage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopMileage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopMileage::MergeFrom(const ShopMileage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shop_mileage_type()) {
      set_shop_mileage_type(from.shop_mileage_type());
    }
    if (from.has_mileage()) {
      set_mileage(from.mileage());
    }
    if (from.has_reward_index()) {
      set_reward_index(from.reward_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopMileage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopMileage::CopyFrom(const ShopMileage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopMileage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShopMileage::Swap(ShopMileage* other) {
  if (other != this) {
    std::swap(shop_mileage_type_, other->shop_mileage_type_);
    std::swap(mileage_, other->mileage_);
    std::swap(reward_index_, other->reward_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopMileage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopMileage_descriptor_;
  metadata.reflection = ShopMileage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopBuyManage::kProductIdFieldNumber;
const int ShopBuyManage::kBuyCountFieldNumber;
const int ShopBuyManage::kUpdatedTimeFieldNumber;
#endif  // !_MSC_VER

ShopBuyManage::ShopBuyManage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ShopBuyManage)
}

void ShopBuyManage::InitAsDefaultInstance() {
}

ShopBuyManage::ShopBuyManage(const ShopBuyManage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ShopBuyManage)
}

void ShopBuyManage::SharedCtor() {
  _cached_size_ = 0;
  product_id_ = 0;
  buy_count_ = 0;
  updated_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopBuyManage::~ShopBuyManage() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ShopBuyManage)
  SharedDtor();
}

void ShopBuyManage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopBuyManage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopBuyManage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopBuyManage_descriptor_;
}

const ShopBuyManage& ShopBuyManage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ShopBuyManage* ShopBuyManage::default_instance_ = NULL;

ShopBuyManage* ShopBuyManage::New() const {
  return new ShopBuyManage;
}

void ShopBuyManage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopBuyManage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(product_id_, updated_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopBuyManage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ShopBuyManage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 product_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_buy_count;
        break;
      }

      // required int32 buy_count = 2;
      case 2: {
        if (tag == 16) {
         parse_buy_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_count_)));
          set_has_buy_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_updated_time;
        break;
      }

      // required int64 updated_time = 3;
      case 3: {
        if (tag == 24) {
         parse_updated_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updated_time_)));
          set_has_updated_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ShopBuyManage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ShopBuyManage)
  return false;
#undef DO_
}

void ShopBuyManage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ShopBuyManage)
  // required int32 product_id = 1;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->product_id(), output);
  }

  // required int32 buy_count = 2;
  if (has_buy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy_count(), output);
  }

  // required int64 updated_time = 3;
  if (has_updated_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->updated_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ShopBuyManage)
}

::google::protobuf::uint8* ShopBuyManage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ShopBuyManage)
  // required int32 product_id = 1;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->product_id(), target);
  }

  // required int32 buy_count = 2;
  if (has_buy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy_count(), target);
  }

  // required int64 updated_time = 3;
  if (has_updated_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->updated_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ShopBuyManage)
  return target;
}

int ShopBuyManage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 product_id = 1;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // required int32 buy_count = 2;
    if (has_buy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_count());
    }

    // required int64 updated_time = 3;
    if (has_updated_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updated_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopBuyManage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopBuyManage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopBuyManage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopBuyManage::MergeFrom(const ShopBuyManage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_buy_count()) {
      set_buy_count(from.buy_count());
    }
    if (from.has_updated_time()) {
      set_updated_time(from.updated_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopBuyManage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopBuyManage::CopyFrom(const ShopBuyManage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopBuyManage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShopBuyManage::Swap(ShopBuyManage* other) {
  if (other != this) {
    std::swap(product_id_, other->product_id_);
    std::swap(buy_count_, other->buy_count_);
    std::swap(updated_time_, other->updated_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopBuyManage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopBuyManage_descriptor_;
  metadata.reflection = ShopBuyManage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopProductMark::kProductIdFieldNumber;
const int ShopProductMark::kMarkTypeFieldNumber;
const int ShopProductMark::kSalesStartTimeFieldNumber;
const int ShopProductMark::kSalesEndTimeFieldNumber;
#endif  // !_MSC_VER

ShopProductMark::ShopProductMark()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ShopProductMark)
}

void ShopProductMark::InitAsDefaultInstance() {
}

ShopProductMark::ShopProductMark(const ShopProductMark& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ShopProductMark)
}

void ShopProductMark::SharedCtor() {
  _cached_size_ = 0;
  product_id_ = 0;
  mark_type_ = 0;
  sales_start_time_ = GOOGLE_LONGLONG(0);
  sales_end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopProductMark::~ShopProductMark() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ShopProductMark)
  SharedDtor();
}

void ShopProductMark::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopProductMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopProductMark::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopProductMark_descriptor_;
}

const ShopProductMark& ShopProductMark::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ShopProductMark* ShopProductMark::default_instance_ = NULL;

ShopProductMark* ShopProductMark::New() const {
  return new ShopProductMark;
}

void ShopProductMark::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopProductMark*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(product_id_, sales_end_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopProductMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ShopProductMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 product_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mark_type;
        break;
      }

      // required .b2.protocol.commondata.Shop.MarkType mark_type = 2;
      case 2: {
        if (tag == 16) {
         parse_mark_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Shop_MarkType_IsValid(value)) {
            set_mark_type(static_cast< ::b2::protocol::commondata::Shop_MarkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sales_start_time;
        break;
      }

      // optional int64 sales_start_time = 10;
      case 10: {
        if (tag == 80) {
         parse_sales_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sales_start_time_)));
          set_has_sales_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sales_end_time;
        break;
      }

      // optional int64 sales_end_time = 11;
      case 11: {
        if (tag == 88) {
         parse_sales_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sales_end_time_)));
          set_has_sales_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ShopProductMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ShopProductMark)
  return false;
#undef DO_
}

void ShopProductMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ShopProductMark)
  // required int32 product_id = 1;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->product_id(), output);
  }

  // required .b2.protocol.commondata.Shop.MarkType mark_type = 2;
  if (has_mark_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mark_type(), output);
  }

  // optional int64 sales_start_time = 10;
  if (has_sales_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sales_start_time(), output);
  }

  // optional int64 sales_end_time = 11;
  if (has_sales_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->sales_end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ShopProductMark)
}

::google::protobuf::uint8* ShopProductMark::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ShopProductMark)
  // required int32 product_id = 1;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->product_id(), target);
  }

  // required .b2.protocol.commondata.Shop.MarkType mark_type = 2;
  if (has_mark_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mark_type(), target);
  }

  // optional int64 sales_start_time = 10;
  if (has_sales_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sales_start_time(), target);
  }

  // optional int64 sales_end_time = 11;
  if (has_sales_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->sales_end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ShopProductMark)
  return target;
}

int ShopProductMark::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 product_id = 1;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // required .b2.protocol.commondata.Shop.MarkType mark_type = 2;
    if (has_mark_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mark_type());
    }

    // optional int64 sales_start_time = 10;
    if (has_sales_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sales_start_time());
    }

    // optional int64 sales_end_time = 11;
    if (has_sales_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sales_end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopProductMark::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopProductMark* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopProductMark*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopProductMark::MergeFrom(const ShopProductMark& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_mark_type()) {
      set_mark_type(from.mark_type());
    }
    if (from.has_sales_start_time()) {
      set_sales_start_time(from.sales_start_time());
    }
    if (from.has_sales_end_time()) {
      set_sales_end_time(from.sales_end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopProductMark::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopProductMark::CopyFrom(const ShopProductMark& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopProductMark::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopProductMark::Swap(ShopProductMark* other) {
  if (other != this) {
    std::swap(product_id_, other->product_id_);
    std::swap(mark_type_, other->mark_type_);
    std::swap(sales_start_time_, other->sales_start_time_);
    std::swap(sales_end_time_, other->sales_end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopProductMark::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopProductMark_descriptor_;
  metadata.reflection = ShopProductMark_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MarketPurchaseInfo_STATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketPurchaseInfo_STATE_descriptor_;
}
bool MarketPurchaseInfo_STATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MarketPurchaseInfo_STATE MarketPurchaseInfo::REGISTERED;
const MarketPurchaseInfo_STATE MarketPurchaseInfo::VERIFIED;
const MarketPurchaseInfo_STATE MarketPurchaseInfo::COMPLETED;
const MarketPurchaseInfo_STATE MarketPurchaseInfo::STATE_MIN;
const MarketPurchaseInfo_STATE MarketPurchaseInfo::STATE_MAX;
const int MarketPurchaseInfo::STATE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MarketPurchaseInfo::kProductIdFieldNumber;
const int MarketPurchaseInfo::kMarketProductIdFieldNumber;
const int MarketPurchaseInfo::kDeveloperPayloadFieldNumber;
const int MarketPurchaseInfo::kPurchaseStateFieldNumber;
const int MarketPurchaseInfo::kBonusIncreaseRateFieldNumber;
#endif  // !_MSC_VER

MarketPurchaseInfo::MarketPurchaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MarketPurchaseInfo)
}

void MarketPurchaseInfo::InitAsDefaultInstance() {
}

MarketPurchaseInfo::MarketPurchaseInfo(const MarketPurchaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MarketPurchaseInfo)
}

void MarketPurchaseInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  product_id_ = 0;
  market_product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  developer_payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  purchase_state_ = 1;
  bonus_increase_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketPurchaseInfo::~MarketPurchaseInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MarketPurchaseInfo)
  SharedDtor();
}

void MarketPurchaseInfo::SharedDtor() {
  if (market_product_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete market_product_id_;
  }
  if (developer_payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete developer_payload_;
  }
  if (this != default_instance_) {
  }
}

void MarketPurchaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketPurchaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketPurchaseInfo_descriptor_;
}

const MarketPurchaseInfo& MarketPurchaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MarketPurchaseInfo* MarketPurchaseInfo::default_instance_ = NULL;

MarketPurchaseInfo* MarketPurchaseInfo::New() const {
  return new MarketPurchaseInfo;
}

void MarketPurchaseInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    product_id_ = 0;
    if (has_market_product_id()) {
      if (market_product_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        market_product_id_->clear();
      }
    }
    if (has_developer_payload()) {
      if (developer_payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        developer_payload_->clear();
      }
    }
    purchase_state_ = 1;
    bonus_increase_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketPurchaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MarketPurchaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 product_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_id_)));
          set_has_product_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_market_product_id;
        break;
      }

      // required string market_product_id = 2;
      case 2: {
        if (tag == 18) {
         parse_market_product_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_market_product_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->market_product_id().data(), this->market_product_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "market_product_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_developer_payload;
        break;
      }

      // required string developer_payload = 3;
      case 3: {
        if (tag == 26) {
         parse_developer_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_developer_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->developer_payload().data(), this->developer_payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "developer_payload");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_purchase_state;
        break;
      }

      // required .b2.protocol.commondata.MarketPurchaseInfo.STATE purchase_state = 4;
      case 4: {
        if (tag == 32) {
         parse_purchase_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MarketPurchaseInfo_STATE_IsValid(value)) {
            set_purchase_state(static_cast< ::b2::protocol::commondata::MarketPurchaseInfo_STATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bonus_increase_rate;
        break;
      }

      // required int32 bonus_increase_rate = 5;
      case 5: {
        if (tag == 40) {
         parse_bonus_increase_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_increase_rate_)));
          set_has_bonus_increase_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MarketPurchaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MarketPurchaseInfo)
  return false;
#undef DO_
}

void MarketPurchaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MarketPurchaseInfo)
  // required int32 product_id = 1;
  if (has_product_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->product_id(), output);
  }

  // required string market_product_id = 2;
  if (has_market_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->market_product_id().data(), this->market_product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "market_product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->market_product_id(), output);
  }

  // required string developer_payload = 3;
  if (has_developer_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->developer_payload().data(), this->developer_payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "developer_payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->developer_payload(), output);
  }

  // required .b2.protocol.commondata.MarketPurchaseInfo.STATE purchase_state = 4;
  if (has_purchase_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->purchase_state(), output);
  }

  // required int32 bonus_increase_rate = 5;
  if (has_bonus_increase_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bonus_increase_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MarketPurchaseInfo)
}

::google::protobuf::uint8* MarketPurchaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MarketPurchaseInfo)
  // required int32 product_id = 1;
  if (has_product_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->product_id(), target);
  }

  // required string market_product_id = 2;
  if (has_market_product_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->market_product_id().data(), this->market_product_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "market_product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->market_product_id(), target);
  }

  // required string developer_payload = 3;
  if (has_developer_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->developer_payload().data(), this->developer_payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "developer_payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->developer_payload(), target);
  }

  // required .b2.protocol.commondata.MarketPurchaseInfo.STATE purchase_state = 4;
  if (has_purchase_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->purchase_state(), target);
  }

  // required int32 bonus_increase_rate = 5;
  if (has_bonus_increase_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bonus_increase_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MarketPurchaseInfo)
  return target;
}

int MarketPurchaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 product_id = 1;
    if (has_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_id());
    }

    // required string market_product_id = 2;
    if (has_market_product_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->market_product_id());
    }

    // required string developer_payload = 3;
    if (has_developer_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->developer_payload());
    }

    // required .b2.protocol.commondata.MarketPurchaseInfo.STATE purchase_state = 4;
    if (has_purchase_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->purchase_state());
    }

    // required int32 bonus_increase_rate = 5;
    if (has_bonus_increase_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_increase_rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketPurchaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketPurchaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketPurchaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketPurchaseInfo::MergeFrom(const MarketPurchaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_product_id()) {
      set_product_id(from.product_id());
    }
    if (from.has_market_product_id()) {
      set_market_product_id(from.market_product_id());
    }
    if (from.has_developer_payload()) {
      set_developer_payload(from.developer_payload());
    }
    if (from.has_purchase_state()) {
      set_purchase_state(from.purchase_state());
    }
    if (from.has_bonus_increase_rate()) {
      set_bonus_increase_rate(from.bonus_increase_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketPurchaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketPurchaseInfo::CopyFrom(const MarketPurchaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPurchaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MarketPurchaseInfo::Swap(MarketPurchaseInfo* other) {
  if (other != this) {
    std::swap(product_id_, other->product_id_);
    std::swap(market_product_id_, other->market_product_id_);
    std::swap(developer_payload_, other->developer_payload_);
    std::swap(purchase_state_, other->purchase_state_);
    std::swap(bonus_increase_rate_, other->bonus_increase_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketPurchaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketPurchaseInfo_descriptor_;
  metadata.reflection = MarketPurchaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectionItem::kItemTemplateIdFieldNumber;
const int CollectionItem::kCollectStateFieldNumber;
const int CollectionItem::kIsNewItemFieldNumber;
#endif  // !_MSC_VER

CollectionItem::CollectionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.CollectionItem)
}

void CollectionItem::InitAsDefaultInstance() {
}

CollectionItem::CollectionItem(const CollectionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.CollectionItem)
}

void CollectionItem::SharedCtor() {
  _cached_size_ = 0;
  item_template_id_ = 0;
  collect_state_ = 1;
  is_new_item_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionItem::~CollectionItem() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.CollectionItem)
  SharedDtor();
}

void CollectionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionItem_descriptor_;
}

const CollectionItem& CollectionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

CollectionItem* CollectionItem::default_instance_ = NULL;

CollectionItem* CollectionItem::New() const {
  return new CollectionItem;
}

void CollectionItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_template_id_ = 0;
    collect_state_ = 1;
    is_new_item_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.CollectionItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_collect_state;
        break;
      }

      // required .b2.protocol.commondata.CollectionItemState collect_state = 2;
      case 2: {
        if (tag == 16) {
         parse_collect_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::CollectionItemState_IsValid(value)) {
            set_collect_state(static_cast< ::b2::protocol::commondata::CollectionItemState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_new_item;
        break;
      }

      // required bool is_new_item = 3;
      case 3: {
        if (tag == 24) {
         parse_is_new_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_item_)));
          set_has_is_new_item();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.CollectionItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.CollectionItem)
  return false;
#undef DO_
}

void CollectionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.CollectionItem)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_template_id(), output);
  }

  // required .b2.protocol.commondata.CollectionItemState collect_state = 2;
  if (has_collect_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->collect_state(), output);
  }

  // required bool is_new_item = 3;
  if (has_is_new_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_new_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.CollectionItem)
}

::google::protobuf::uint8* CollectionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.CollectionItem)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_template_id(), target);
  }

  // required .b2.protocol.commondata.CollectionItemState collect_state = 2;
  if (has_collect_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->collect_state(), target);
  }

  // required bool is_new_item = 3;
  if (has_is_new_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_new_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.CollectionItem)
  return target;
}

int CollectionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_template_id = 1;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required .b2.protocol.commondata.CollectionItemState collect_state = 2;
    if (has_collect_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->collect_state());
    }

    // required bool is_new_item = 3;
    if (has_is_new_item()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectionItem::MergeFrom(const CollectionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_collect_state()) {
      set_collect_state(from.collect_state());
    }
    if (from.has_is_new_item()) {
      set_is_new_item(from.is_new_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionItem::CopyFrom(const CollectionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CollectionItem::Swap(CollectionItem* other) {
  if (other != this) {
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(collect_state_, other->collect_state_);
    std::swap(is_new_item_, other->is_new_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionItem_descriptor_;
  metadata.reflection = CollectionItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectionSetItem::kGroupIdFieldNumber;
const int CollectionSetItem::kGradeFieldNumber;
const int CollectionSetItem::kCharacterTypeFieldNumber;
#endif  // !_MSC_VER

CollectionSetItem::CollectionSetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.CollectionSetItem)
}

void CollectionSetItem::InitAsDefaultInstance() {
}

CollectionSetItem::CollectionSetItem(const CollectionSetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.CollectionSetItem)
}

void CollectionSetItem::SharedCtor() {
  _cached_size_ = 0;
  group_id_ = 1;
  grade_ = 0;
  character_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionSetItem::~CollectionSetItem() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.CollectionSetItem)
  SharedDtor();
}

void CollectionSetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectionSetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionSetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionSetItem_descriptor_;
}

const CollectionSetItem& CollectionSetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

CollectionSetItem* CollectionSetItem::default_instance_ = NULL;

CollectionSetItem* CollectionSetItem::New() const {
  return new CollectionSetItem;
}

void CollectionSetItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    group_id_ = 1;
    grade_ = 0;
    character_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectionSetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.CollectionSetItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.GroupPrefix group_id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::GroupPrefix_IsValid(value)) {
            set_group_id(static_cast< ::b2::protocol::commondata::GroupPrefix >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_grade;
        break;
      }

      // required int32 grade = 2;
      case 2: {
        if (tag == 16) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE character_type = 3;
      case 3: {
        if (tag == 24) {
         parse_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.CollectionSetItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.CollectionSetItem)
  return false;
#undef DO_
}

void CollectionSetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.CollectionSetItem)
  // required .b2.protocol.commondata.GroupPrefix group_id = 1;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->group_id(), output);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->grade(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 3;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->character_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.CollectionSetItem)
}

::google::protobuf::uint8* CollectionSetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.CollectionSetItem)
  // required .b2.protocol.commondata.GroupPrefix group_id = 1;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->group_id(), target);
  }

  // required int32 grade = 2;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->grade(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE character_type = 3;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->character_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.CollectionSetItem)
  return target;
}

int CollectionSetItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.GroupPrefix group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_id());
    }

    // required int32 grade = 2;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required .b2.protocol.commondata.Character.TYPE character_type = 3;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionSetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectionSetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectionSetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectionSetItem::MergeFrom(const CollectionSetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectionSetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionSetItem::CopyFrom(const CollectionSetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionSetItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CollectionSetItem::Swap(CollectionSetItem* other) {
  if (other != this) {
    std::swap(group_id_, other->group_id_);
    std::swap(grade_, other->grade_);
    std::swap(character_type_, other->character_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectionSetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionSetItem_descriptor_;
  metadata.reflection = CollectionSetItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaidRankingReward::kRankingFieldNumber;
const int RaidRankingReward::kItemTemplateIdFieldNumber;
const int RaidRankingReward::kItemCountFieldNumber;
const int RaidRankingReward::kIsBonusFieldNumber;
#endif  // !_MSC_VER

RaidRankingReward::RaidRankingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RaidRankingReward)
}

void RaidRankingReward::InitAsDefaultInstance() {
}

RaidRankingReward::RaidRankingReward(const RaidRankingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RaidRankingReward)
}

void RaidRankingReward::SharedCtor() {
  _cached_size_ = 0;
  ranking_ = 0;
  item_template_id_ = 0;
  item_count_ = 0;
  is_bonus_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaidRankingReward::~RaidRankingReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RaidRankingReward)
  SharedDtor();
}

void RaidRankingReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaidRankingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaidRankingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaidRankingReward_descriptor_;
}

const RaidRankingReward& RaidRankingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RaidRankingReward* RaidRankingReward::default_instance_ = NULL;

RaidRankingReward* RaidRankingReward::New() const {
  return new RaidRankingReward;
}

void RaidRankingReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RaidRankingReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ranking_, is_bonus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaidRankingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RaidRankingReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ranking = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_template_id;
        break;
      }

      // required int32 item_template_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_count;
        break;
      }

      // required int32 item_count = 3;
      case 3: {
        if (tag == 24) {
         parse_item_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_count_)));
          set_has_item_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_bonus;
        break;
      }

      // required bool is_bonus = 4;
      case 4: {
        if (tag == 32) {
         parse_is_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bonus_)));
          set_has_is_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RaidRankingReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RaidRankingReward)
  return false;
#undef DO_
}

void RaidRankingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RaidRankingReward)
  // required int32 ranking = 1;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ranking(), output);
  }

  // required int32 item_template_id = 2;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_template_id(), output);
  }

  // required int32 item_count = 3;
  if (has_item_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_count(), output);
  }

  // required bool is_bonus = 4;
  if (has_is_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_bonus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RaidRankingReward)
}

::google::protobuf::uint8* RaidRankingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RaidRankingReward)
  // required int32 ranking = 1;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ranking(), target);
  }

  // required int32 item_template_id = 2;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_template_id(), target);
  }

  // required int32 item_count = 3;
  if (has_item_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_count(), target);
  }

  // required bool is_bonus = 4;
  if (has_is_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_bonus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RaidRankingReward)
  return target;
}

int RaidRankingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ranking = 1;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int32 item_template_id = 2;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required int32 item_count = 3;
    if (has_item_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_count());
    }

    // required bool is_bonus = 4;
    if (has_is_bonus()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaidRankingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaidRankingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaidRankingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaidRankingReward::MergeFrom(const RaidRankingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_item_count()) {
      set_item_count(from.item_count());
    }
    if (from.has_is_bonus()) {
      set_is_bonus(from.is_bonus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaidRankingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaidRankingReward::CopyFrom(const RaidRankingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaidRankingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RaidRankingReward::Swap(RaidRankingReward* other) {
  if (other != this) {
    std::swap(ranking_, other->ranking_);
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(item_count_, other->item_count_);
    std::swap(is_bonus_, other->is_bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaidRankingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaidRankingReward_descriptor_;
  metadata.reflection = RaidRankingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventAttendanceStatus::kEventIdFieldNumber;
const int EventAttendanceStatus::kAttendanceDayFieldNumber;
const int EventAttendanceStatus::kLastAttendanceTimeFieldNumber;
const int EventAttendanceStatus::kNextAttendanceTimeFieldNumber;
#endif  // !_MSC_VER

EventAttendanceStatus::EventAttendanceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.EventAttendanceStatus)
}

void EventAttendanceStatus::InitAsDefaultInstance() {
}

EventAttendanceStatus::EventAttendanceStatus(const EventAttendanceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.EventAttendanceStatus)
}

void EventAttendanceStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  attendance_day_ = 0;
  last_attendance_time_ = GOOGLE_LONGLONG(0);
  next_attendance_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventAttendanceStatus::~EventAttendanceStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.EventAttendanceStatus)
  SharedDtor();
}

void EventAttendanceStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventAttendanceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventAttendanceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventAttendanceStatus_descriptor_;
}

const EventAttendanceStatus& EventAttendanceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

EventAttendanceStatus* EventAttendanceStatus::default_instance_ = NULL;

EventAttendanceStatus* EventAttendanceStatus::New() const {
  return new EventAttendanceStatus;
}

void EventAttendanceStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EventAttendanceStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, next_attendance_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventAttendanceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.EventAttendanceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attendance_day;
        break;
      }

      // required int32 attendance_day = 2;
      case 2: {
        if (tag == 16) {
         parse_attendance_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attendance_day_)));
          set_has_attendance_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_last_attendance_time;
        break;
      }

      // required int64 last_attendance_time = 3;
      case 3: {
        if (tag == 24) {
         parse_last_attendance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_attendance_time_)));
          set_has_last_attendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_next_attendance_time;
        break;
      }

      // required int64 next_attendance_time = 4;
      case 4: {
        if (tag == 32) {
         parse_next_attendance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_attendance_time_)));
          set_has_next_attendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.EventAttendanceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.EventAttendanceStatus)
  return false;
#undef DO_
}

void EventAttendanceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.EventAttendanceStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 attendance_day = 2;
  if (has_attendance_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attendance_day(), output);
  }

  // required int64 last_attendance_time = 3;
  if (has_last_attendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_attendance_time(), output);
  }

  // required int64 next_attendance_time = 4;
  if (has_next_attendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->next_attendance_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.EventAttendanceStatus)
}

::google::protobuf::uint8* EventAttendanceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.EventAttendanceStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 attendance_day = 2;
  if (has_attendance_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attendance_day(), target);
  }

  // required int64 last_attendance_time = 3;
  if (has_last_attendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_attendance_time(), target);
  }

  // required int64 next_attendance_time = 4;
  if (has_next_attendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->next_attendance_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.EventAttendanceStatus)
  return target;
}

int EventAttendanceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 attendance_day = 2;
    if (has_attendance_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attendance_day());
    }

    // required int64 last_attendance_time = 3;
    if (has_last_attendance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_attendance_time());
    }

    // required int64 next_attendance_time = 4;
    if (has_next_attendance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_attendance_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventAttendanceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventAttendanceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventAttendanceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventAttendanceStatus::MergeFrom(const EventAttendanceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_attendance_day()) {
      set_attendance_day(from.attendance_day());
    }
    if (from.has_last_attendance_time()) {
      set_last_attendance_time(from.last_attendance_time());
    }
    if (from.has_next_attendance_time()) {
      set_next_attendance_time(from.next_attendance_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventAttendanceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAttendanceStatus::CopyFrom(const EventAttendanceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAttendanceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void EventAttendanceStatus::Swap(EventAttendanceStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(attendance_day_, other->attendance_day_);
    std::swap(last_attendance_time_, other->last_attendance_time_);
    std::swap(next_attendance_time_, other->next_attendance_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventAttendanceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventAttendanceStatus_descriptor_;
  metadata.reflection = EventAttendanceStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginnerAttendanceStatus::kAttendanceDayFieldNumber;
const int BeginnerAttendanceStatus::kLastAttendanceTimeFieldNumber;
const int BeginnerAttendanceStatus::kNextAttendanceTimeFieldNumber;
const int BeginnerAttendanceStatus::kTotalAttendanceDaysFieldNumber;
const int BeginnerAttendanceStatus::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

BeginnerAttendanceStatus::BeginnerAttendanceStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.BeginnerAttendanceStatus)
}

void BeginnerAttendanceStatus::InitAsDefaultInstance() {
}

BeginnerAttendanceStatus::BeginnerAttendanceStatus(const BeginnerAttendanceStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.BeginnerAttendanceStatus)
}

void BeginnerAttendanceStatus::SharedCtor() {
  _cached_size_ = 0;
  attendance_day_ = 0;
  last_attendance_time_ = GOOGLE_LONGLONG(0);
  next_attendance_time_ = GOOGLE_LONGLONG(0);
  total_attendance_days_ = 0;
  finish_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginnerAttendanceStatus::~BeginnerAttendanceStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.BeginnerAttendanceStatus)
  SharedDtor();
}

void BeginnerAttendanceStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginnerAttendanceStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginnerAttendanceStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginnerAttendanceStatus_descriptor_;
}

const BeginnerAttendanceStatus& BeginnerAttendanceStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

BeginnerAttendanceStatus* BeginnerAttendanceStatus::default_instance_ = NULL;

BeginnerAttendanceStatus* BeginnerAttendanceStatus::New() const {
  return new BeginnerAttendanceStatus;
}

void BeginnerAttendanceStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeginnerAttendanceStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(last_attendance_time_, finish_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginnerAttendanceStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.BeginnerAttendanceStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 attendance_day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attendance_day_)));
          set_has_attendance_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_attendance_time;
        break;
      }

      // required int64 last_attendance_time = 2;
      case 2: {
        if (tag == 16) {
         parse_last_attendance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_attendance_time_)));
          set_has_last_attendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_next_attendance_time;
        break;
      }

      // required int64 next_attendance_time = 3;
      case 3: {
        if (tag == 24) {
         parse_next_attendance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_attendance_time_)));
          set_has_next_attendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_attendance_days;
        break;
      }

      // required int32 total_attendance_days = 5;
      case 5: {
        if (tag == 40) {
         parse_total_attendance_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_attendance_days_)));
          set_has_total_attendance_days();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_finish_time;
        break;
      }

      // required int64 finish_time = 6;
      case 6: {
        if (tag == 48) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.BeginnerAttendanceStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.BeginnerAttendanceStatus)
  return false;
#undef DO_
}

void BeginnerAttendanceStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.BeginnerAttendanceStatus)
  // required int32 attendance_day = 1;
  if (has_attendance_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attendance_day(), output);
  }

  // required int64 last_attendance_time = 2;
  if (has_last_attendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_attendance_time(), output);
  }

  // required int64 next_attendance_time = 3;
  if (has_next_attendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->next_attendance_time(), output);
  }

  // required int32 total_attendance_days = 5;
  if (has_total_attendance_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_attendance_days(), output);
  }

  // required int64 finish_time = 6;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->finish_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.BeginnerAttendanceStatus)
}

::google::protobuf::uint8* BeginnerAttendanceStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.BeginnerAttendanceStatus)
  // required int32 attendance_day = 1;
  if (has_attendance_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attendance_day(), target);
  }

  // required int64 last_attendance_time = 2;
  if (has_last_attendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_attendance_time(), target);
  }

  // required int64 next_attendance_time = 3;
  if (has_next_attendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->next_attendance_time(), target);
  }

  // required int32 total_attendance_days = 5;
  if (has_total_attendance_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_attendance_days(), target);
  }

  // required int64 finish_time = 6;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->finish_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.BeginnerAttendanceStatus)
  return target;
}

int BeginnerAttendanceStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 attendance_day = 1;
    if (has_attendance_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attendance_day());
    }

    // required int64 last_attendance_time = 2;
    if (has_last_attendance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_attendance_time());
    }

    // required int64 next_attendance_time = 3;
    if (has_next_attendance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_attendance_time());
    }

    // required int32 total_attendance_days = 5;
    if (has_total_attendance_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_attendance_days());
    }

    // required int64 finish_time = 6;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->finish_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginnerAttendanceStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginnerAttendanceStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginnerAttendanceStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginnerAttendanceStatus::MergeFrom(const BeginnerAttendanceStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attendance_day()) {
      set_attendance_day(from.attendance_day());
    }
    if (from.has_last_attendance_time()) {
      set_last_attendance_time(from.last_attendance_time());
    }
    if (from.has_next_attendance_time()) {
      set_next_attendance_time(from.next_attendance_time());
    }
    if (from.has_total_attendance_days()) {
      set_total_attendance_days(from.total_attendance_days());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginnerAttendanceStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginnerAttendanceStatus::CopyFrom(const BeginnerAttendanceStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginnerAttendanceStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BeginnerAttendanceStatus::Swap(BeginnerAttendanceStatus* other) {
  if (other != this) {
    std::swap(attendance_day_, other->attendance_day_);
    std::swap(last_attendance_time_, other->last_attendance_time_);
    std::swap(next_attendance_time_, other->next_attendance_time_);
    std::swap(total_attendance_days_, other->total_attendance_days_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginnerAttendanceStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginnerAttendanceStatus_descriptor_;
  metadata.reflection = BeginnerAttendanceStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DuelRewardBoxStatus::kIsRewardStateFieldNumber;
const int DuelRewardBoxStatus::kBoxGradeFieldNumber;
const int DuelRewardBoxStatus::kWinCountFieldNumber;
const int DuelRewardBoxStatus::kUpgradeWinCountFieldNumber;
const int DuelRewardBoxStatus::kDefeatCountFieldNumber;
#endif  // !_MSC_VER

DuelRewardBoxStatus::DuelRewardBoxStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DuelRewardBoxStatus)
}

void DuelRewardBoxStatus::InitAsDefaultInstance() {
}

DuelRewardBoxStatus::DuelRewardBoxStatus(const DuelRewardBoxStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DuelRewardBoxStatus)
}

void DuelRewardBoxStatus::SharedCtor() {
  _cached_size_ = 0;
  is_reward_state_ = false;
  box_grade_ = 0;
  win_count_ = 0;
  upgrade_win_count_ = 0;
  defeat_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DuelRewardBoxStatus::~DuelRewardBoxStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DuelRewardBoxStatus)
  SharedDtor();
}

void DuelRewardBoxStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DuelRewardBoxStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DuelRewardBoxStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DuelRewardBoxStatus_descriptor_;
}

const DuelRewardBoxStatus& DuelRewardBoxStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DuelRewardBoxStatus* DuelRewardBoxStatus::default_instance_ = NULL;

DuelRewardBoxStatus* DuelRewardBoxStatus::New() const {
  return new DuelRewardBoxStatus;
}

void DuelRewardBoxStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DuelRewardBoxStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(is_reward_state_, defeat_count_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DuelRewardBoxStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DuelRewardBoxStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_reward_state = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reward_state_)));
          set_has_is_reward_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_box_grade;
        break;
      }

      // required .b2.protocol.commondata.RewardBoxGrade box_grade = 2;
      case 2: {
        if (tag == 16) {
         parse_box_grade:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::RewardBoxGrade_IsValid(value)) {
            set_box_grade(static_cast< ::b2::protocol::commondata::RewardBoxGrade >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_win_count;
        break;
      }

      // required int32 win_count = 3;
      case 3: {
        if (tag == 24) {
         parse_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_count_)));
          set_has_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_upgrade_win_count;
        break;
      }

      // required int32 upgrade_win_count = 4;
      case 4: {
        if (tag == 32) {
         parse_upgrade_win_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrade_win_count_)));
          set_has_upgrade_win_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_defeat_count;
        break;
      }

      // required int32 defeat_count = 5;
      case 5: {
        if (tag == 40) {
         parse_defeat_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defeat_count_)));
          set_has_defeat_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DuelRewardBoxStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DuelRewardBoxStatus)
  return false;
#undef DO_
}

void DuelRewardBoxStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DuelRewardBoxStatus)
  // required bool is_reward_state = 1;
  if (has_is_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_reward_state(), output);
  }

  // required .b2.protocol.commondata.RewardBoxGrade box_grade = 2;
  if (has_box_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->box_grade(), output);
  }

  // required int32 win_count = 3;
  if (has_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_count(), output);
  }

  // required int32 upgrade_win_count = 4;
  if (has_upgrade_win_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->upgrade_win_count(), output);
  }

  // required int32 defeat_count = 5;
  if (has_defeat_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->defeat_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DuelRewardBoxStatus)
}

::google::protobuf::uint8* DuelRewardBoxStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DuelRewardBoxStatus)
  // required bool is_reward_state = 1;
  if (has_is_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_reward_state(), target);
  }

  // required .b2.protocol.commondata.RewardBoxGrade box_grade = 2;
  if (has_box_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->box_grade(), target);
  }

  // required int32 win_count = 3;
  if (has_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_count(), target);
  }

  // required int32 upgrade_win_count = 4;
  if (has_upgrade_win_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->upgrade_win_count(), target);
  }

  // required int32 defeat_count = 5;
  if (has_defeat_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->defeat_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DuelRewardBoxStatus)
  return target;
}

int DuelRewardBoxStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_reward_state = 1;
    if (has_is_reward_state()) {
      total_size += 1 + 1;
    }

    // required .b2.protocol.commondata.RewardBoxGrade box_grade = 2;
    if (has_box_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->box_grade());
    }

    // required int32 win_count = 3;
    if (has_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_count());
    }

    // required int32 upgrade_win_count = 4;
    if (has_upgrade_win_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrade_win_count());
    }

    // required int32 defeat_count = 5;
    if (has_defeat_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defeat_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DuelRewardBoxStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DuelRewardBoxStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DuelRewardBoxStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DuelRewardBoxStatus::MergeFrom(const DuelRewardBoxStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_reward_state()) {
      set_is_reward_state(from.is_reward_state());
    }
    if (from.has_box_grade()) {
      set_box_grade(from.box_grade());
    }
    if (from.has_win_count()) {
      set_win_count(from.win_count());
    }
    if (from.has_upgrade_win_count()) {
      set_upgrade_win_count(from.upgrade_win_count());
    }
    if (from.has_defeat_count()) {
      set_defeat_count(from.defeat_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DuelRewardBoxStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DuelRewardBoxStatus::CopyFrom(const DuelRewardBoxStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuelRewardBoxStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DuelRewardBoxStatus::Swap(DuelRewardBoxStatus* other) {
  if (other != this) {
    std::swap(is_reward_state_, other->is_reward_state_);
    std::swap(box_grade_, other->box_grade_);
    std::swap(win_count_, other->win_count_);
    std::swap(upgrade_win_count_, other->upgrade_win_count_);
    std::swap(defeat_count_, other->defeat_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DuelRewardBoxStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DuelRewardBoxStatus_descriptor_;
  metadata.reflection = DuelRewardBoxStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MatchResult_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchResult_TYPE_descriptor_;
}
bool MatchResult_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MatchResult_TYPE MatchResult::WIN;
const MatchResult_TYPE MatchResult::LOSE;
const MatchResult_TYPE MatchResult::DRAW;
const MatchResult_TYPE MatchResult::TYPE_MIN;
const MatchResult_TYPE MatchResult::TYPE_MAX;
const int MatchResult::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MatchResult::kAccountIdFieldNumber;
const int MatchResult::kMatchTokenFieldNumber;
const int MatchResult::kResultFieldNumber;
#endif  // !_MSC_VER

MatchResult::MatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.MatchResult)
}

void MatchResult::InitAsDefaultInstance() {
}

MatchResult::MatchResult(const MatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.MatchResult)
}

void MatchResult::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  match_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchResult::~MatchResult() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.MatchResult)
  SharedDtor();
}

void MatchResult::SharedDtor() {
  if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete match_token_;
  }
  if (this != default_instance_) {
  }
}

void MatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchResult_descriptor_;
}

const MatchResult& MatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

MatchResult* MatchResult::default_instance_ = NULL;

MatchResult* MatchResult::New() const {
  return new MatchResult;
}

void MatchResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_match_token()) {
      if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        match_token_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.MatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_match_token;
        break;
      }

      // required string match_token = 2;
      case 2: {
        if (tag == 18) {
         parse_match_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_token().data(), this->match_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "match_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required .b2.protocol.commondata.MatchResult.TYPE result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchResult_TYPE_IsValid(value)) {
            set_result(static_cast< ::b2::protocol::commondata::MatchResult_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.MatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.MatchResult)
  return false;
#undef DO_
}

void MatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.MatchResult)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required string match_token = 2;
  if (has_match_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_token().data(), this->match_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->match_token(), output);
  }

  // required .b2.protocol.commondata.MatchResult.TYPE result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.MatchResult)
}

::google::protobuf::uint8* MatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.MatchResult)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required string match_token = 2;
  if (has_match_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_token().data(), this->match_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->match_token(), target);
  }

  // required .b2.protocol.commondata.MatchResult.TYPE result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.MatchResult)
  return target;
}

int MatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required string match_token = 2;
    if (has_match_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_token());
    }

    // required .b2.protocol.commondata.MatchResult.TYPE result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchResult::MergeFrom(const MatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_match_token()) {
      set_match_token(from.match_token());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchResult::CopyFrom(const MatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MatchResult::Swap(MatchResult* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(match_token_, other->match_token_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchResult_descriptor_;
  metadata.reflection = MatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitySkillMission::kMainCharacterTypeFieldNumber;
const int UnitySkillMission::kUnityCharacterTypeFieldNumber;
const int UnitySkillMission::kStepFieldNumber;
const int UnitySkillMission::kStateFieldNumber;
#endif  // !_MSC_VER

UnitySkillMission::UnitySkillMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.UnitySkillMission)
}

void UnitySkillMission::InitAsDefaultInstance() {
}

UnitySkillMission::UnitySkillMission(const UnitySkillMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.UnitySkillMission)
}

void UnitySkillMission::SharedCtor() {
  _cached_size_ = 0;
  main_character_type_ = 1;
  unity_character_type_ = 1;
  step_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitySkillMission::~UnitySkillMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.UnitySkillMission)
  SharedDtor();
}

void UnitySkillMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitySkillMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitySkillMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitySkillMission_descriptor_;
}

const UnitySkillMission& UnitySkillMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

UnitySkillMission* UnitySkillMission::default_instance_ = NULL;

UnitySkillMission* UnitySkillMission::New() const {
  return new UnitySkillMission;
}

void UnitySkillMission::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    main_character_type_ = 1;
    unity_character_type_ = 1;
    step_ = 0;
    state_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitySkillMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.UnitySkillMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_main_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unity_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_unity_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_unity_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionStateType_IsValid(value)) {
            set_state(static_cast< ::b2::protocol::commondata::MissionInfo_MissionStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.UnitySkillMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.UnitySkillMission)
  return false;
#undef DO_
}

void UnitySkillMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.UnitySkillMission)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->main_character_type(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unity_character_type(), output);
  }

  // required int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.UnitySkillMission)
}

::google::protobuf::uint8* UnitySkillMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.UnitySkillMission)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->main_character_type(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unity_character_type(), target);
  }

  // required int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.UnitySkillMission)
  return target;
}

int UnitySkillMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
    if (has_main_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_character_type());
    }

    // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
    if (has_unity_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unity_character_type());
    }

    // required int32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitySkillMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitySkillMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitySkillMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitySkillMission::MergeFrom(const UnitySkillMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_character_type()) {
      set_main_character_type(from.main_character_type());
    }
    if (from.has_unity_character_type()) {
      set_unity_character_type(from.unity_character_type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitySkillMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitySkillMission::CopyFrom(const UnitySkillMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitySkillMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UnitySkillMission::Swap(UnitySkillMission* other) {
  if (other != this) {
    std::swap(main_character_type_, other->main_character_type_);
    std::swap(unity_character_type_, other->unity_character_type_);
    std::swap(step_, other->step_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitySkillMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitySkillMission_descriptor_;
  metadata.reflection = UnitySkillMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitySkill::kMainCharacterTypeFieldNumber;
const int UnitySkill::kUnityCharacterTypeFieldNumber;
const int UnitySkill::kStepFieldNumber;
#endif  // !_MSC_VER

UnitySkill::UnitySkill()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.UnitySkill)
}

void UnitySkill::InitAsDefaultInstance() {
}

UnitySkill::UnitySkill(const UnitySkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.UnitySkill)
}

void UnitySkill::SharedCtor() {
  _cached_size_ = 0;
  main_character_type_ = 1;
  unity_character_type_ = 1;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitySkill::~UnitySkill() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.UnitySkill)
  SharedDtor();
}

void UnitySkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitySkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitySkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitySkill_descriptor_;
}

const UnitySkill& UnitySkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

UnitySkill* UnitySkill::default_instance_ = NULL;

UnitySkill* UnitySkill::New() const {
  return new UnitySkill;
}

void UnitySkill::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    main_character_type_ = 1;
    unity_character_type_ = 1;
    step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitySkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.UnitySkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_main_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unity_character_type;
        break;
      }

      // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
      case 2: {
        if (tag == 16) {
         parse_unity_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_unity_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_step;
        break;
      }

      // required int32 step = 3;
      case 3: {
        if (tag == 24) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.UnitySkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.UnitySkill)
  return false;
#undef DO_
}

void UnitySkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.UnitySkill)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->main_character_type(), output);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unity_character_type(), output);
  }

  // required int32 step = 3;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.UnitySkill)
}

::google::protobuf::uint8* UnitySkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.UnitySkill)
  // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
  if (has_main_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->main_character_type(), target);
  }

  // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
  if (has_unity_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unity_character_type(), target);
  }

  // required int32 step = 3;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.UnitySkill)
  return target;
}

int UnitySkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE main_character_type = 1;
    if (has_main_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_character_type());
    }

    // required .b2.protocol.commondata.Character.TYPE unity_character_type = 2;
    if (has_unity_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unity_character_type());
    }

    // required int32 step = 3;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitySkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitySkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitySkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitySkill::MergeFrom(const UnitySkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_character_type()) {
      set_main_character_type(from.main_character_type());
    }
    if (from.has_unity_character_type()) {
      set_unity_character_type(from.unity_character_type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitySkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitySkill::CopyFrom(const UnitySkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitySkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UnitySkill::Swap(UnitySkill* other) {
  if (other != this) {
    std::swap(main_character_type_, other->main_character_type_);
    std::swap(unity_character_type_, other->unity_character_type_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitySkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitySkill_descriptor_;
  metadata.reflection = UnitySkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitySkillAwakenMission::kCharacterTypeFieldNumber;
const int UnitySkillAwakenMission::kMissionIdFieldNumber;
const int UnitySkillAwakenMission::kTryCountFieldNumber;
const int UnitySkillAwakenMission::kCompletedFieldNumber;
#endif  // !_MSC_VER

UnitySkillAwakenMission::UnitySkillAwakenMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.UnitySkillAwakenMission)
}

void UnitySkillAwakenMission::InitAsDefaultInstance() {
}

UnitySkillAwakenMission::UnitySkillAwakenMission(const UnitySkillAwakenMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.UnitySkillAwakenMission)
}

void UnitySkillAwakenMission::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  mission_id_ = 0;
  try_count_ = 0;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitySkillAwakenMission::~UnitySkillAwakenMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.UnitySkillAwakenMission)
  SharedDtor();
}

void UnitySkillAwakenMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnitySkillAwakenMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitySkillAwakenMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitySkillAwakenMission_descriptor_;
}

const UnitySkillAwakenMission& UnitySkillAwakenMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

UnitySkillAwakenMission* UnitySkillAwakenMission::default_instance_ = NULL;

UnitySkillAwakenMission* UnitySkillAwakenMission::New() const {
  return new UnitySkillAwakenMission;
}

void UnitySkillAwakenMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnitySkillAwakenMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(mission_id_, completed_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitySkillAwakenMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.UnitySkillAwakenMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // required int32 mission_id = 2;
      case 2: {
        if (tag == 16) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_try_count;
        break;
      }

      // required int32 try_count = 3;
      case 3: {
        if (tag == 24) {
         parse_try_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &try_count_)));
          set_has_try_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_completed;
        break;
      }

      // required bool completed = 4;
      case 4: {
        if (tag == 32) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.UnitySkillAwakenMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.UnitySkillAwakenMission)
  return false;
#undef DO_
}

void UnitySkillAwakenMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.UnitySkillAwakenMission)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mission_id(), output);
  }

  // required int32 try_count = 3;
  if (has_try_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->try_count(), output);
  }

  // required bool completed = 4;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->completed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.UnitySkillAwakenMission)
}

::google::protobuf::uint8* UnitySkillAwakenMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.UnitySkillAwakenMission)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mission_id(), target);
  }

  // required int32 try_count = 3;
  if (has_try_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->try_count(), target);
  }

  // required bool completed = 4;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->completed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.UnitySkillAwakenMission)
  return target;
}

int UnitySkillAwakenMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_id());
    }

    // required int32 try_count = 3;
    if (has_try_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->try_count());
    }

    // required bool completed = 4;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitySkillAwakenMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitySkillAwakenMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnitySkillAwakenMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitySkillAwakenMission::MergeFrom(const UnitySkillAwakenMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
    if (from.has_try_count()) {
      set_try_count(from.try_count());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitySkillAwakenMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitySkillAwakenMission::CopyFrom(const UnitySkillAwakenMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitySkillAwakenMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UnitySkillAwakenMission::Swap(UnitySkillAwakenMission* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(try_count_, other->try_count_);
    std::swap(completed_, other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnitySkillAwakenMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitySkillAwakenMission_descriptor_;
  metadata.reflection = UnitySkillAwakenMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentsModeInfo::kModeFieldNumber;
const int ContentsModeInfo::kStateFieldNumber;
#endif  // !_MSC_VER

ContentsModeInfo::ContentsModeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ContentsModeInfo)
}

void ContentsModeInfo::InitAsDefaultInstance() {
}

ContentsModeInfo::ContentsModeInfo(const ContentsModeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ContentsModeInfo)
}

void ContentsModeInfo::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentsModeInfo::~ContentsModeInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ContentsModeInfo)
  SharedDtor();
}

void ContentsModeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContentsModeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentsModeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentsModeInfo_descriptor_;
}

const ContentsModeInfo& ContentsModeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ContentsModeInfo* ContentsModeInfo::default_instance_ = NULL;

ContentsModeInfo* ContentsModeInfo::New() const {
  return new ContentsModeInfo;
}

void ContentsModeInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mode_ = 1;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentsModeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ContentsModeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.ContentsMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsMode_IsValid(value)) {
            set_mode(static_cast< ::b2::protocol::commondata::ContentsMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required .b2.protocol.commondata.ContentsModeState state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsModeState_IsValid(value)) {
            set_state(static_cast< ::b2::protocol::commondata::ContentsModeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ContentsModeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ContentsModeInfo)
  return false;
#undef DO_
}

void ContentsModeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ContentsModeInfo)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // required .b2.protocol.commondata.ContentsModeState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ContentsModeInfo)
}

::google::protobuf::uint8* ContentsModeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ContentsModeInfo)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // required .b2.protocol.commondata.ContentsModeState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ContentsModeInfo)
  return target;
}

int ContentsModeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.ContentsMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required .b2.protocol.commondata.ContentsModeState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentsModeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentsModeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentsModeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentsModeInfo::MergeFrom(const ContentsModeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentsModeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentsModeInfo::CopyFrom(const ContentsModeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentsModeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ContentsModeInfo::Swap(ContentsModeInfo* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentsModeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentsModeInfo_descriptor_;
  metadata.reflection = ContentsModeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContentsOpen::kModeIdFieldNumber;
const int ContentsOpen::kOpenedFieldNumber;
const int ContentsOpen::kStageIdFieldNumber;
const int ContentsOpen::kTutorialIdFieldNumber;
#endif  // !_MSC_VER

ContentsOpen::ContentsOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.ContentsOpen)
}

void ContentsOpen::InitAsDefaultInstance() {
}

ContentsOpen::ContentsOpen(const ContentsOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.ContentsOpen)
}

void ContentsOpen::SharedCtor() {
  _cached_size_ = 0;
  mode_id_ = 0;
  opened_ = false;
  stage_id_ = 0;
  tutorial_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContentsOpen::~ContentsOpen() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.ContentsOpen)
  SharedDtor();
}

void ContentsOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContentsOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContentsOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContentsOpen_descriptor_;
}

const ContentsOpen& ContentsOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

ContentsOpen* ContentsOpen::default_instance_ = NULL;

ContentsOpen* ContentsOpen::New() const {
  return new ContentsOpen;
}

void ContentsOpen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ContentsOpen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mode_id_, tutorial_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContentsOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.ContentsOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mode_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_id_)));
          set_has_mode_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_opened;
        break;
      }

      // required bool opened = 2;
      case 2: {
        if (tag == 16) {
         parse_opened:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &opened_)));
          set_has_opened();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stage_id;
        break;
      }

      // required int32 stage_id = 3;
      case 3: {
        if (tag == 24) {
         parse_stage_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tutorial_id;
        break;
      }

      // required int32 tutorial_id = 4;
      case 4: {
        if (tag == 32) {
         parse_tutorial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tutorial_id_)));
          set_has_tutorial_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.ContentsOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.ContentsOpen)
  return false;
#undef DO_
}

void ContentsOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.ContentsOpen)
  // required int32 mode_id = 1;
  if (has_mode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode_id(), output);
  }

  // required bool opened = 2;
  if (has_opened()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->opened(), output);
  }

  // required int32 stage_id = 3;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stage_id(), output);
  }

  // required int32 tutorial_id = 4;
  if (has_tutorial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tutorial_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.ContentsOpen)
}

::google::protobuf::uint8* ContentsOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.ContentsOpen)
  // required int32 mode_id = 1;
  if (has_mode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode_id(), target);
  }

  // required bool opened = 2;
  if (has_opened()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->opened(), target);
  }

  // required int32 stage_id = 3;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stage_id(), target);
  }

  // required int32 tutorial_id = 4;
  if (has_tutorial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tutorial_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.ContentsOpen)
  return target;
}

int ContentsOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mode_id = 1;
    if (has_mode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode_id());
    }

    // required bool opened = 2;
    if (has_opened()) {
      total_size += 1 + 1;
    }

    // required int32 stage_id = 3;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

    // required int32 tutorial_id = 4;
    if (has_tutorial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorial_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContentsOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContentsOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContentsOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContentsOpen::MergeFrom(const ContentsOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode_id()) {
      set_mode_id(from.mode_id());
    }
    if (from.has_opened()) {
      set_opened(from.opened());
    }
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
    if (from.has_tutorial_id()) {
      set_tutorial_id(from.tutorial_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContentsOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContentsOpen::CopyFrom(const ContentsOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContentsOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ContentsOpen::Swap(ContentsOpen* other) {
  if (other != this) {
    std::swap(mode_id_, other->mode_id_);
    std::swap(opened_, other->opened_);
    std::swap(stage_id_, other->stage_id_);
    std::swap(tutorial_id_, other->tutorial_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContentsOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContentsOpen_descriptor_;
  metadata.reflection = ContentsOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterPower::kCharacterTypeFieldNumber;
const int CharacterPower::kTotalPowerFieldNumber;
#endif  // !_MSC_VER

CharacterPower::CharacterPower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.CharacterPower)
}

void CharacterPower::InitAsDefaultInstance() {
}

CharacterPower::CharacterPower(const CharacterPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.CharacterPower)
}

void CharacterPower::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  total_power_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterPower::~CharacterPower() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.CharacterPower)
  SharedDtor();
}

void CharacterPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterPower_descriptor_;
}

const CharacterPower& CharacterPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

CharacterPower* CharacterPower::default_instance_ = NULL;

CharacterPower* CharacterPower::New() const {
  return new CharacterPower;
}

void CharacterPower::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    character_type_ = 1;
    total_power_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.CharacterPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_total_power;
        break;
      }

      // required int32 total_power = 2;
      case 2: {
        if (tag == 16) {
         parse_total_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_power_)));
          set_has_total_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.CharacterPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.CharacterPower)
  return false;
#undef DO_
}

void CharacterPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.CharacterPower)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 total_power = 2;
  if (has_total_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.CharacterPower)
}

::google::protobuf::uint8* CharacterPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.CharacterPower)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 total_power = 2;
  if (has_total_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.CharacterPower)
  return target;
}

int CharacterPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 total_power = 2;
    if (has_total_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterPower::MergeFrom(const CharacterPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_total_power()) {
      set_total_power(from.total_power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterPower::CopyFrom(const CharacterPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterPower::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharacterPower::Swap(CharacterPower* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(total_power_, other->total_power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterPower_descriptor_;
  metadata.reflection = CharacterPower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssaultBattleInfo::kKillCountFieldNumber;
const int AssaultBattleInfo::kDeathCountFieldNumber;
const int AssaultBattleInfo::kDamageFieldNumber;
#endif  // !_MSC_VER

AssaultBattleInfo::AssaultBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.AssaultBattleInfo)
}

void AssaultBattleInfo::InitAsDefaultInstance() {
}

AssaultBattleInfo::AssaultBattleInfo(const AssaultBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.AssaultBattleInfo)
}

void AssaultBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  kill_count_ = 0;
  death_count_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssaultBattleInfo::~AssaultBattleInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.AssaultBattleInfo)
  SharedDtor();
}

void AssaultBattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssaultBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssaultBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssaultBattleInfo_descriptor_;
}

const AssaultBattleInfo& AssaultBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

AssaultBattleInfo* AssaultBattleInfo::default_instance_ = NULL;

AssaultBattleInfo* AssaultBattleInfo::New() const {
  return new AssaultBattleInfo;
}

void AssaultBattleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AssaultBattleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(kill_count_, damage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssaultBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.AssaultBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 kill_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_count_)));
          set_has_kill_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_death_count;
        break;
      }

      // optional int32 death_count = 2;
      case 2: {
        if (tag == 16) {
         parse_death_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_count_)));
          set_has_death_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional int32 damage = 3;
      case 3: {
        if (tag == 24) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.AssaultBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.AssaultBattleInfo)
  return false;
#undef DO_
}

void AssaultBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.AssaultBattleInfo)
  // optional int32 kill_count = 1;
  if (has_kill_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kill_count(), output);
  }

  // optional int32 death_count = 2;
  if (has_death_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->death_count(), output);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.AssaultBattleInfo)
}

::google::protobuf::uint8* AssaultBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.AssaultBattleInfo)
  // optional int32 kill_count = 1;
  if (has_kill_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kill_count(), target);
  }

  // optional int32 death_count = 2;
  if (has_death_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->death_count(), target);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.AssaultBattleInfo)
  return target;
}

int AssaultBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 kill_count = 1;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill_count());
    }

    // optional int32 death_count = 2;
    if (has_death_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_count());
    }

    // optional int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssaultBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssaultBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssaultBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssaultBattleInfo::MergeFrom(const AssaultBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kill_count()) {
      set_kill_count(from.kill_count());
    }
    if (from.has_death_count()) {
      set_death_count(from.death_count());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssaultBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssaultBattleInfo::CopyFrom(const AssaultBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssaultBattleInfo::IsInitialized() const {

  return true;
}

void AssaultBattleInfo::Swap(AssaultBattleInfo* other) {
  if (other != this) {
    std::swap(kill_count_, other->kill_count_);
    std::swap(death_count_, other->death_count_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssaultBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssaultBattleInfo_descriptor_;
  metadata.reflection = AssaultBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomCharacter::kCharacterTypeFieldNumber;
const int RoomCharacter::kCharacterPowerFieldNumber;
const int RoomCharacter::kCharacterLevelFieldNumber;
#endif  // !_MSC_VER

RoomCharacter::RoomCharacter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.RoomCharacter)
}

void RoomCharacter::InitAsDefaultInstance() {
}

RoomCharacter::RoomCharacter(const RoomCharacter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.RoomCharacter)
}

void RoomCharacter::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  character_power_ = 0;
  character_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomCharacter::~RoomCharacter() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.RoomCharacter)
  SharedDtor();
}

void RoomCharacter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCharacter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCharacter_descriptor_;
}

const RoomCharacter& RoomCharacter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

RoomCharacter* RoomCharacter::default_instance_ = NULL;

RoomCharacter* RoomCharacter::New() const {
  return new RoomCharacter;
}

void RoomCharacter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomCharacter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(character_power_, character_level_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.RoomCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_character_power;
        break;
      }

      // optional int32 character_power = 2;
      case 2: {
        if (tag == 16) {
         parse_character_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_power_)));
          set_has_character_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_character_level;
        break;
      }

      // optional int32 character_level = 3;
      case 3: {
        if (tag == 24) {
         parse_character_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &character_level_)));
          set_has_character_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.RoomCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.RoomCharacter)
  return false;
#undef DO_
}

void RoomCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.RoomCharacter)
  // optional .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // optional int32 character_power = 2;
  if (has_character_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->character_power(), output);
  }

  // optional int32 character_level = 3;
  if (has_character_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->character_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.RoomCharacter)
}

::google::protobuf::uint8* RoomCharacter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.RoomCharacter)
  // optional .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // optional int32 character_power = 2;
  if (has_character_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->character_power(), target);
  }

  // optional int32 character_level = 3;
  if (has_character_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->character_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.RoomCharacter)
  return target;
}

int RoomCharacter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // optional int32 character_power = 2;
    if (has_character_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_power());
    }

    // optional int32 character_level = 3;
    if (has_character_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->character_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCharacter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomCharacter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomCharacter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomCharacter::MergeFrom(const RoomCharacter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_character_power()) {
      set_character_power(from.character_power());
    }
    if (from.has_character_level()) {
      set_character_level(from.character_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomCharacter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCharacter::CopyFrom(const RoomCharacter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCharacter::IsInitialized() const {

  return true;
}

void RoomCharacter::Swap(RoomCharacter* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(character_power_, other->character_power_);
    std::swap(character_level_, other->character_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomCharacter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCharacter_descriptor_;
  metadata.reflection = RoomCharacter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminMessage::kMessageFieldNumber;
const int AdminMessage::kDisplayTimeFieldNumber;
#endif  // !_MSC_VER

AdminMessage::AdminMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.AdminMessage)
}

void AdminMessage::InitAsDefaultInstance() {
}

AdminMessage::AdminMessage(const AdminMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.AdminMessage)
}

void AdminMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminMessage::~AdminMessage() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.AdminMessage)
  SharedDtor();
}

void AdminMessage::SharedDtor() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void AdminMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminMessage_descriptor_;
}

const AdminMessage& AdminMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

AdminMessage* AdminMessage::default_instance_ = NULL;

AdminMessage* AdminMessage::New() const {
  return new AdminMessage;
}

void AdminMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
    display_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.AdminMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_display_time;
        break;
      }

      // required int32 display_time = 2;
      case 2: {
        if (tag == 16) {
         parse_display_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_time_)));
          set_has_display_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.AdminMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.AdminMessage)
  return false;
#undef DO_
}

void AdminMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.AdminMessage)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // required int32 display_time = 2;
  if (has_display_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->display_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.AdminMessage)
}

::google::protobuf::uint8* AdminMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.AdminMessage)
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // required int32 display_time = 2;
  if (has_display_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->display_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.AdminMessage)
  return target;
}

int AdminMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // required int32 display_time = 2;
    if (has_display_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminMessage::MergeFrom(const AdminMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_display_time()) {
      set_display_time(from.display_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminMessage::CopyFrom(const AdminMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AdminMessage::Swap(AdminMessage* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(display_time_, other->display_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminMessage_descriptor_;
  metadata.reflection = AdminMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointEventStatus::kEventIdFieldNumber;
const int PointEventStatus::kPointFieldNumber;
const int PointEventStatus::kRewardStateValueFieldNumber;
#endif  // !_MSC_VER

PointEventStatus::PointEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.PointEventStatus)
}

void PointEventStatus::InitAsDefaultInstance() {
}

PointEventStatus::PointEventStatus(const PointEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.PointEventStatus)
}

void PointEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  point_ = 0;
  reward_state_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointEventStatus::~PointEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.PointEventStatus)
  SharedDtor();
}

void PointEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointEventStatus_descriptor_;
}

const PointEventStatus& PointEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

PointEventStatus* PointEventStatus::default_instance_ = NULL;

PointEventStatus* PointEventStatus::New() const {
  return new PointEventStatus;
}

void PointEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, reward_state_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.PointEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required int32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_state_value;
        break;
      }

      // required int32 reward_state_value = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_state_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_state_value_)));
          set_has_reward_state_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.PointEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.PointEventStatus)
  return false;
#undef DO_
}

void PointEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.PointEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // required int32 reward_state_value = 3;
  if (has_reward_state_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_state_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.PointEventStatus)
}

::google::protobuf::uint8* PointEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.PointEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // required int32 reward_state_value = 3;
  if (has_reward_state_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_state_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.PointEventStatus)
  return target;
}

int PointEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required int32 reward_state_value = 3;
    if (has_reward_state_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_state_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointEventStatus::MergeFrom(const PointEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_reward_state_value()) {
      set_reward_state_value(from.reward_state_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointEventStatus::CopyFrom(const PointEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PointEventStatus::Swap(PointEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(point_, other->point_);
    std::swap(reward_state_value_, other->reward_state_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointEventStatus_descriptor_;
  metadata.reflection = PointEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointShopEventStatus::kEventIdFieldNumber;
const int PointShopEventStatus::kPointFieldNumber;
#endif  // !_MSC_VER

PointShopEventStatus::PointShopEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.PointShopEventStatus)
}

void PointShopEventStatus::InitAsDefaultInstance() {
}

PointShopEventStatus::PointShopEventStatus(const PointShopEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.PointShopEventStatus)
}

void PointShopEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointShopEventStatus::~PointShopEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.PointShopEventStatus)
  SharedDtor();
}

void PointShopEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointShopEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointShopEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointShopEventStatus_descriptor_;
}

const PointShopEventStatus& PointShopEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

PointShopEventStatus* PointShopEventStatus::default_instance_ = NULL;

PointShopEventStatus* PointShopEventStatus::New() const {
  return new PointShopEventStatus;
}

void PointShopEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointShopEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointShopEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.PointShopEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required int32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.PointShopEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.PointShopEventStatus)
  return false;
#undef DO_
}

void PointShopEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.PointShopEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.PointShopEventStatus)
}

::google::protobuf::uint8* PointShopEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.PointShopEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.PointShopEventStatus)
  return target;
}

int PointShopEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointShopEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointShopEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointShopEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointShopEventStatus::MergeFrom(const PointShopEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointShopEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointShopEventStatus::CopyFrom(const PointShopEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointShopEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PointShopEventStatus::Swap(PointShopEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointShopEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointShopEventStatus_descriptor_;
  metadata.reflection = PointShopEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointShopEventRewardHistory::kEventIdFieldNumber;
const int PointShopEventRewardHistory::kIndexFieldNumber;
const int PointShopEventRewardHistory::kTotalRewardCountFieldNumber;
#endif  // !_MSC_VER

PointShopEventRewardHistory::PointShopEventRewardHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.PointShopEventRewardHistory)
}

void PointShopEventRewardHistory::InitAsDefaultInstance() {
}

PointShopEventRewardHistory::PointShopEventRewardHistory(const PointShopEventRewardHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.PointShopEventRewardHistory)
}

void PointShopEventRewardHistory::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  total_reward_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointShopEventRewardHistory::~PointShopEventRewardHistory() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.PointShopEventRewardHistory)
  SharedDtor();
}

void PointShopEventRewardHistory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointShopEventRewardHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointShopEventRewardHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointShopEventRewardHistory_descriptor_;
}

const PointShopEventRewardHistory& PointShopEventRewardHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

PointShopEventRewardHistory* PointShopEventRewardHistory::default_instance_ = NULL;

PointShopEventRewardHistory* PointShopEventRewardHistory::New() const {
  return new PointShopEventRewardHistory;
}

void PointShopEventRewardHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PointShopEventRewardHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, total_reward_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointShopEventRewardHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.PointShopEventRewardHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_reward_count;
        break;
      }

      // required int32 total_reward_count = 3;
      case 3: {
        if (tag == 24) {
         parse_total_reward_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_reward_count_)));
          set_has_total_reward_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.PointShopEventRewardHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.PointShopEventRewardHistory)
  return false;
#undef DO_
}

void PointShopEventRewardHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.PointShopEventRewardHistory)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 total_reward_count = 3;
  if (has_total_reward_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_reward_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.PointShopEventRewardHistory)
}

::google::protobuf::uint8* PointShopEventRewardHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.PointShopEventRewardHistory)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 total_reward_count = 3;
  if (has_total_reward_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_reward_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.PointShopEventRewardHistory)
  return target;
}

int PointShopEventRewardHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 total_reward_count = 3;
    if (has_total_reward_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_reward_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointShopEventRewardHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointShopEventRewardHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointShopEventRewardHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointShopEventRewardHistory::MergeFrom(const PointShopEventRewardHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_total_reward_count()) {
      set_total_reward_count(from.total_reward_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointShopEventRewardHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointShopEventRewardHistory::CopyFrom(const PointShopEventRewardHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointShopEventRewardHistory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PointShopEventRewardHistory::Swap(PointShopEventRewardHistory* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(total_reward_count_, other->total_reward_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointShopEventRewardHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointShopEventRewardHistory_descriptor_;
  metadata.reflection = PointShopEventRewardHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GemPurchaseEventStatus::kEventIdFieldNumber;
const int GemPurchaseEventStatus::kGemCountFieldNumber;
const int GemPurchaseEventStatus::kRewardStateValueFieldNumber;
#endif  // !_MSC_VER

GemPurchaseEventStatus::GemPurchaseEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.GemPurchaseEventStatus)
}

void GemPurchaseEventStatus::InitAsDefaultInstance() {
}

GemPurchaseEventStatus::GemPurchaseEventStatus(const GemPurchaseEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.GemPurchaseEventStatus)
}

void GemPurchaseEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  gem_count_ = 0;
  reward_state_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GemPurchaseEventStatus::~GemPurchaseEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.GemPurchaseEventStatus)
  SharedDtor();
}

void GemPurchaseEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GemPurchaseEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GemPurchaseEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GemPurchaseEventStatus_descriptor_;
}

const GemPurchaseEventStatus& GemPurchaseEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

GemPurchaseEventStatus* GemPurchaseEventStatus::default_instance_ = NULL;

GemPurchaseEventStatus* GemPurchaseEventStatus::New() const {
  return new GemPurchaseEventStatus;
}

void GemPurchaseEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GemPurchaseEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, reward_state_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GemPurchaseEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.GemPurchaseEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gem_count;
        break;
      }

      // required int32 gem_count = 2;
      case 2: {
        if (tag == 16) {
         parse_gem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gem_count_)));
          set_has_gem_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_state_value;
        break;
      }

      // required int32 reward_state_value = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_state_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_state_value_)));
          set_has_reward_state_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.GemPurchaseEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.GemPurchaseEventStatus)
  return false;
#undef DO_
}

void GemPurchaseEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.GemPurchaseEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 gem_count = 2;
  if (has_gem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gem_count(), output);
  }

  // required int32 reward_state_value = 3;
  if (has_reward_state_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_state_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.GemPurchaseEventStatus)
}

::google::protobuf::uint8* GemPurchaseEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.GemPurchaseEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 gem_count = 2;
  if (has_gem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gem_count(), target);
  }

  // required int32 reward_state_value = 3;
  if (has_reward_state_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_state_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.GemPurchaseEventStatus)
  return target;
}

int GemPurchaseEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 gem_count = 2;
    if (has_gem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gem_count());
    }

    // required int32 reward_state_value = 3;
    if (has_reward_state_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_state_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GemPurchaseEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GemPurchaseEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GemPurchaseEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GemPurchaseEventStatus::MergeFrom(const GemPurchaseEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_gem_count()) {
      set_gem_count(from.gem_count());
    }
    if (from.has_reward_state_value()) {
      set_reward_state_value(from.reward_state_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GemPurchaseEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GemPurchaseEventStatus::CopyFrom(const GemPurchaseEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GemPurchaseEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GemPurchaseEventStatus::Swap(GemPurchaseEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(gem_count_, other->gem_count_);
    std::swap(reward_state_value_, other->reward_state_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GemPurchaseEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GemPurchaseEventStatus_descriptor_;
  metadata.reflection = GemPurchaseEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelUpEventInfo::kEventIdFieldNumber;
const int LevelUpEventInfo::kIndexFieldNumber;
const int LevelUpEventInfo::kStateFieldNumber;
#endif  // !_MSC_VER

LevelUpEventInfo::LevelUpEventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.LevelUpEventInfo)
}

void LevelUpEventInfo::InitAsDefaultInstance() {
}

LevelUpEventInfo::LevelUpEventInfo(const LevelUpEventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.LevelUpEventInfo)
}

void LevelUpEventInfo::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelUpEventInfo::~LevelUpEventInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.LevelUpEventInfo)
  SharedDtor();
}

void LevelUpEventInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelUpEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelUpEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelUpEventInfo_descriptor_;
}

const LevelUpEventInfo& LevelUpEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

LevelUpEventInfo* LevelUpEventInfo::default_instance_ = NULL;

LevelUpEventInfo* LevelUpEventInfo::New() const {
  return new LevelUpEventInfo;
}

void LevelUpEventInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LevelUpEventInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelUpEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.LevelUpEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.LevelUpEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.LevelUpEventInfo)
  return false;
#undef DO_
}

void LevelUpEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.LevelUpEventInfo)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.LevelUpEventInfo)
}

::google::protobuf::uint8* LevelUpEventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.LevelUpEventInfo)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.LevelUpEventInfo)
  return target;
}

int LevelUpEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelUpEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelUpEventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelUpEventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelUpEventInfo::MergeFrom(const LevelUpEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelUpEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelUpEventInfo::CopyFrom(const LevelUpEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelUpEventInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LevelUpEventInfo::Swap(LevelUpEventInfo* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelUpEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelUpEventInfo_descriptor_;
  metadata.reflection = LevelUpEventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeasonMissionInfo::kEventIdFieldNumber;
const int SeasonMissionInfo::kDayFieldNumber;
const int SeasonMissionInfo::kIndexFieldNumber;
const int SeasonMissionInfo::kProgressCountFieldNumber;
const int SeasonMissionInfo::kStateFieldNumber;
#endif  // !_MSC_VER

SeasonMissionInfo::SeasonMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.SeasonMissionInfo)
}

void SeasonMissionInfo::InitAsDefaultInstance() {
}

SeasonMissionInfo::SeasonMissionInfo(const SeasonMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.SeasonMissionInfo)
}

void SeasonMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  day_ = 0;
  index_ = 0;
  progress_count_ = 0;
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeasonMissionInfo::~SeasonMissionInfo() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.SeasonMissionInfo)
  SharedDtor();
}

void SeasonMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeasonMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeasonMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeasonMissionInfo_descriptor_;
}

const SeasonMissionInfo& SeasonMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

SeasonMissionInfo* SeasonMissionInfo::default_instance_ = NULL;

SeasonMissionInfo* SeasonMissionInfo::New() const {
  return new SeasonMissionInfo;
}

void SeasonMissionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeasonMissionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(event_id_, progress_count_);
    state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeasonMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.SeasonMissionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // required int32 day = 2;
      case 2: {
        if (tag == 16) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress_count;
        break;
      }

      // required int32 progress_count = 4;
      case 4: {
        if (tag == 32) {
         parse_progress_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_count_)));
          set_has_progress_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MissionInfo_MissionStateType_IsValid(value)) {
            set_state(static_cast< ::b2::protocol::commondata::MissionInfo_MissionStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.SeasonMissionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.SeasonMissionInfo)
  return false;
#undef DO_
}

void SeasonMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.SeasonMissionInfo)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // required int32 progress_count = 4;
  if (has_progress_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->progress_count(), output);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.SeasonMissionInfo)
}

::google::protobuf::uint8* SeasonMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.SeasonMissionInfo)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // required int32 progress_count = 4;
  if (has_progress_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->progress_count(), target);
  }

  // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.SeasonMissionInfo)
  return target;
}

int SeasonMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 progress_count = 4;
    if (has_progress_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress_count());
    }

    // required .b2.protocol.commondata.MissionInfo.MissionStateType state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeasonMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeasonMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeasonMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeasonMissionInfo::MergeFrom(const SeasonMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_progress_count()) {
      set_progress_count(from.progress_count());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeasonMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeasonMissionInfo::CopyFrom(const SeasonMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeasonMissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SeasonMissionInfo::Swap(SeasonMissionInfo* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(day_, other->day_);
    std::swap(index_, other->index_);
    std::swap(progress_count_, other->progress_count_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeasonMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeasonMissionInfo_descriptor_;
  metadata.reflection = SeasonMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeasonMissionEventStatus::kEventIdFieldNumber;
const int SeasonMissionEventStatus::kAttendanceDayFieldNumber;
const int SeasonMissionEventStatus::kNextAttendanceTimeFieldNumber;
#endif  // !_MSC_VER

SeasonMissionEventStatus::SeasonMissionEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.SeasonMissionEventStatus)
}

void SeasonMissionEventStatus::InitAsDefaultInstance() {
}

SeasonMissionEventStatus::SeasonMissionEventStatus(const SeasonMissionEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.SeasonMissionEventStatus)
}

void SeasonMissionEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  attendance_day_ = 0;
  next_attendance_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeasonMissionEventStatus::~SeasonMissionEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.SeasonMissionEventStatus)
  SharedDtor();
}

void SeasonMissionEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeasonMissionEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeasonMissionEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeasonMissionEventStatus_descriptor_;
}

const SeasonMissionEventStatus& SeasonMissionEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

SeasonMissionEventStatus* SeasonMissionEventStatus::default_instance_ = NULL;

SeasonMissionEventStatus* SeasonMissionEventStatus::New() const {
  return new SeasonMissionEventStatus;
}

void SeasonMissionEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SeasonMissionEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, next_attendance_time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeasonMissionEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.SeasonMissionEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attendance_day;
        break;
      }

      // required int32 attendance_day = 2;
      case 2: {
        if (tag == 16) {
         parse_attendance_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attendance_day_)));
          set_has_attendance_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_next_attendance_time;
        break;
      }

      // required int64 next_attendance_time = 3;
      case 3: {
        if (tag == 24) {
         parse_next_attendance_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &next_attendance_time_)));
          set_has_next_attendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.SeasonMissionEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.SeasonMissionEventStatus)
  return false;
#undef DO_
}

void SeasonMissionEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.SeasonMissionEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 attendance_day = 2;
  if (has_attendance_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attendance_day(), output);
  }

  // required int64 next_attendance_time = 3;
  if (has_next_attendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->next_attendance_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.SeasonMissionEventStatus)
}

::google::protobuf::uint8* SeasonMissionEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.SeasonMissionEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 attendance_day = 2;
  if (has_attendance_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attendance_day(), target);
  }

  // required int64 next_attendance_time = 3;
  if (has_next_attendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->next_attendance_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.SeasonMissionEventStatus)
  return target;
}

int SeasonMissionEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 attendance_day = 2;
    if (has_attendance_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attendance_day());
    }

    // required int64 next_attendance_time = 3;
    if (has_next_attendance_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->next_attendance_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeasonMissionEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeasonMissionEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeasonMissionEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeasonMissionEventStatus::MergeFrom(const SeasonMissionEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_attendance_day()) {
      set_attendance_day(from.attendance_day());
    }
    if (from.has_next_attendance_time()) {
      set_next_attendance_time(from.next_attendance_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeasonMissionEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeasonMissionEventStatus::CopyFrom(const SeasonMissionEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeasonMissionEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SeasonMissionEventStatus::Swap(SeasonMissionEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(attendance_day_, other->attendance_day_);
    std::swap(next_attendance_time_, other->next_attendance_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeasonMissionEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeasonMissionEventStatus_descriptor_;
  metadata.reflection = SeasonMissionEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageClearEventStatus::kEventIdFieldNumber;
const int StageClearEventStatus::kIndexFieldNumber;
const int StageClearEventStatus::kStateFieldNumber;
#endif  // !_MSC_VER

StageClearEventStatus::StageClearEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.StageClearEventStatus)
}

void StageClearEventStatus::InitAsDefaultInstance() {
}

StageClearEventStatus::StageClearEventStatus(const StageClearEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.StageClearEventStatus)
}

void StageClearEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  index_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageClearEventStatus::~StageClearEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.StageClearEventStatus)
  SharedDtor();
}

void StageClearEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageClearEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageClearEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageClearEventStatus_descriptor_;
}

const StageClearEventStatus& StageClearEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

StageClearEventStatus* StageClearEventStatus::default_instance_ = NULL;

StageClearEventStatus* StageClearEventStatus::New() const {
  return new StageClearEventStatus;
}

void StageClearEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageClearEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageClearEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.StageClearEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.StageClearEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.StageClearEventStatus)
  return false;
#undef DO_
}

void StageClearEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.StageClearEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // required int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.StageClearEventStatus)
}

::google::protobuf::uint8* StageClearEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.StageClearEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // required int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.StageClearEventStatus)
  return target;
}

int StageClearEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageClearEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageClearEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageClearEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageClearEventStatus::MergeFrom(const StageClearEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageClearEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageClearEventStatus::CopyFrom(const StageClearEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageClearEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StageClearEventStatus::Swap(StageClearEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(index_, other->index_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageClearEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageClearEventStatus_descriptor_;
  metadata.reflection = StageClearEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockChatUser::kAccountIdFieldNumber;
const int BlockChatUser::kNicknameFieldNumber;
#endif  // !_MSC_VER

BlockChatUser::BlockChatUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.BlockChatUser)
}

void BlockChatUser::InitAsDefaultInstance() {
}

BlockChatUser::BlockChatUser(const BlockChatUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.BlockChatUser)
}

void BlockChatUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockChatUser::~BlockChatUser() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.BlockChatUser)
  SharedDtor();
}

void BlockChatUser::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (this != default_instance_) {
  }
}

void BlockChatUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockChatUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockChatUser_descriptor_;
}

const BlockChatUser& BlockChatUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

BlockChatUser* BlockChatUser::default_instance_ = NULL;

BlockChatUser* BlockChatUser::New() const {
  return new BlockChatUser;
}

void BlockChatUser::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockChatUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.BlockChatUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.BlockChatUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.BlockChatUser)
  return false;
#undef DO_
}

void BlockChatUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.BlockChatUser)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.BlockChatUser)
}

::google::protobuf::uint8* BlockChatUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.BlockChatUser)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.BlockChatUser)
  return target;
}

int BlockChatUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockChatUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockChatUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockChatUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockChatUser::MergeFrom(const BlockChatUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockChatUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockChatUser::CopyFrom(const BlockChatUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockChatUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BlockChatUser::Swap(BlockChatUser* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockChatUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockChatUser_descriptor_;
  metadata.reflection = BlockChatUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TenLotteryEventStatus::kEventIdFieldNumber;
const int TenLotteryEventStatus::kLotteryCountFieldNumber;
const int TenLotteryEventStatus::kRewardedIndexsFieldNumber;
#endif  // !_MSC_VER

TenLotteryEventStatus::TenLotteryEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.TenLotteryEventStatus)
}

void TenLotteryEventStatus::InitAsDefaultInstance() {
}

TenLotteryEventStatus::TenLotteryEventStatus(const TenLotteryEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.TenLotteryEventStatus)
}

void TenLotteryEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  lottery_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TenLotteryEventStatus::~TenLotteryEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.TenLotteryEventStatus)
  SharedDtor();
}

void TenLotteryEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TenLotteryEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TenLotteryEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TenLotteryEventStatus_descriptor_;
}

const TenLotteryEventStatus& TenLotteryEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

TenLotteryEventStatus* TenLotteryEventStatus::default_instance_ = NULL;

TenLotteryEventStatus* TenLotteryEventStatus::New() const {
  return new TenLotteryEventStatus;
}

void TenLotteryEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TenLotteryEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, lottery_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rewarded_indexs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TenLotteryEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.TenLotteryEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lottery_count;
        break;
      }

      // required int32 lottery_count = 2;
      case 2: {
        if (tag == 16) {
         parse_lottery_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lottery_count_)));
          set_has_lottery_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewarded_indexs;
        break;
      }

      // repeated int32 rewarded_indexs = 3;
      case 3: {
        if (tag == 24) {
         parse_rewarded_indexs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_rewarded_indexs())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewarded_indexs())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewarded_indexs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.TenLotteryEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.TenLotteryEventStatus)
  return false;
#undef DO_
}

void TenLotteryEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.TenLotteryEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 lottery_count = 2;
  if (has_lottery_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lottery_count(), output);
  }

  // repeated int32 rewarded_indexs = 3;
  for (int i = 0; i < this->rewarded_indexs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->rewarded_indexs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.TenLotteryEventStatus)
}

::google::protobuf::uint8* TenLotteryEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.TenLotteryEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 lottery_count = 2;
  if (has_lottery_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lottery_count(), target);
  }

  // repeated int32 rewarded_indexs = 3;
  for (int i = 0; i < this->rewarded_indexs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->rewarded_indexs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.TenLotteryEventStatus)
  return target;
}

int TenLotteryEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 lottery_count = 2;
    if (has_lottery_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lottery_count());
    }

  }
  // repeated int32 rewarded_indexs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewarded_indexs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewarded_indexs(i));
    }
    total_size += 1 * this->rewarded_indexs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TenLotteryEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TenLotteryEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TenLotteryEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TenLotteryEventStatus::MergeFrom(const TenLotteryEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewarded_indexs_.MergeFrom(from.rewarded_indexs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_lottery_count()) {
      set_lottery_count(from.lottery_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TenLotteryEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TenLotteryEventStatus::CopyFrom(const TenLotteryEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TenLotteryEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TenLotteryEventStatus::Swap(TenLotteryEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(lottery_count_, other->lottery_count_);
    rewarded_indexs_.Swap(&other->rewarded_indexs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TenLotteryEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TenLotteryEventStatus_descriptor_;
  metadata.reflection = TenLotteryEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallOfFame::kModeFieldNumber;
const int HallOfFame::kRankingFieldNumber;
const int HallOfFame::kAccountIdFieldNumber;
const int HallOfFame::kPraisedCountFieldNumber;
const int HallOfFame::kMatchGradeFieldNumber;
const int HallOfFame::kMatchStartCountFieldNumber;
const int HallOfFame::kMvpCountFieldNumber;
#endif  // !_MSC_VER

HallOfFame::HallOfFame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.HallOfFame)
}

void HallOfFame::InitAsDefaultInstance() {
}

HallOfFame::HallOfFame(const HallOfFame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.HallOfFame)
}

void HallOfFame::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ranking_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  praised_count_ = 0;
  match_grade_ = 0;
  match_start_count_ = 0;
  mvp_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallOfFame::~HallOfFame() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.HallOfFame)
  SharedDtor();
}

void HallOfFame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HallOfFame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallOfFame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallOfFame_descriptor_;
}

const HallOfFame& HallOfFame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

HallOfFame* HallOfFame::default_instance_ = NULL;

HallOfFame* HallOfFame::New() const {
  return new HallOfFame;
}

void HallOfFame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HallOfFame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(ranking_, mvp_count_);
    mode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallOfFame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.HallOfFame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.ContentsMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsMode_IsValid(value)) {
            set_mode(static_cast< ::b2::protocol::commondata::ContentsMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_account_id;
        break;
      }

      // required int64 account_id = 3;
      case 3: {
        if (tag == 24) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_praised_count;
        break;
      }

      // required int32 praised_count = 4;
      case 4: {
        if (tag == 32) {
         parse_praised_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &praised_count_)));
          set_has_praised_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_match_grade;
        break;
      }

      // required int32 match_grade = 10;
      case 10: {
        if (tag == 80) {
         parse_match_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_grade_)));
          set_has_match_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_match_start_count;
        break;
      }

      // required int32 match_start_count = 11;
      case 11: {
        if (tag == 88) {
         parse_match_start_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_start_count_)));
          set_has_match_start_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mvp_count;
        break;
      }

      // required int32 mvp_count = 12;
      case 12: {
        if (tag == 96) {
         parse_mvp_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mvp_count_)));
          set_has_mvp_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.HallOfFame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.HallOfFame)
  return false;
#undef DO_
}

void HallOfFame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.HallOfFame)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // required int32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking(), output);
  }

  // required int64 account_id = 3;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->account_id(), output);
  }

  // required int32 praised_count = 4;
  if (has_praised_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->praised_count(), output);
  }

  // required int32 match_grade = 10;
  if (has_match_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->match_grade(), output);
  }

  // required int32 match_start_count = 11;
  if (has_match_start_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->match_start_count(), output);
  }

  // required int32 mvp_count = 12;
  if (has_mvp_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mvp_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.HallOfFame)
}

::google::protobuf::uint8* HallOfFame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.HallOfFame)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // required int32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking(), target);
  }

  // required int64 account_id = 3;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->account_id(), target);
  }

  // required int32 praised_count = 4;
  if (has_praised_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->praised_count(), target);
  }

  // required int32 match_grade = 10;
  if (has_match_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->match_grade(), target);
  }

  // required int32 match_start_count = 11;
  if (has_match_start_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->match_start_count(), target);
  }

  // required int32 mvp_count = 12;
  if (has_mvp_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mvp_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.HallOfFame)
  return target;
}

int HallOfFame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.ContentsMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required int32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // required int64 account_id = 3;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required int32 praised_count = 4;
    if (has_praised_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->praised_count());
    }

    // required int32 match_grade = 10;
    if (has_match_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_grade());
    }

    // required int32 match_start_count = 11;
    if (has_match_start_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_start_count());
    }

    // required int32 mvp_count = 12;
    if (has_mvp_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mvp_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallOfFame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallOfFame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallOfFame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallOfFame::MergeFrom(const HallOfFame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_praised_count()) {
      set_praised_count(from.praised_count());
    }
    if (from.has_match_grade()) {
      set_match_grade(from.match_grade());
    }
    if (from.has_match_start_count()) {
      set_match_start_count(from.match_start_count());
    }
    if (from.has_mvp_count()) {
      set_mvp_count(from.mvp_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallOfFame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallOfFame::CopyFrom(const HallOfFame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallOfFame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void HallOfFame::Swap(HallOfFame* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(ranking_, other->ranking_);
    std::swap(account_id_, other->account_id_);
    std::swap(praised_count_, other->praised_count_);
    std::swap(match_grade_, other->match_grade_);
    std::swap(match_start_count_, other->match_start_count_);
    std::swap(mvp_count_, other->mvp_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallOfFame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallOfFame_descriptor_;
  metadata.reflection = HallOfFame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallOfFameUser::kUserFieldNumber;
const int HallOfFameUser::kEquipItemsFieldNumber;
const int HallOfFameUser::kEquipCostumesFieldNumber;
const int HallOfFameUser::kEquipTotemsFieldNumber;
const int HallOfFameUser::kWingGradeFieldNumber;
const int HallOfFameUser::kWingLevelFieldNumber;
const int HallOfFameUser::kWingVisibleFieldNumber;
const int HallOfFameUser::kHelmetVisibleFieldNumber;
const int HallOfFameUser::kCostumeWeaponVisibleFieldNumber;
const int HallOfFameUser::kCostumeHatVisibleFieldNumber;
const int HallOfFameUser::kCostumeArmorVisibleFieldNumber;
#endif  // !_MSC_VER

HallOfFameUser::HallOfFameUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.HallOfFameUser)
}

void HallOfFameUser::InitAsDefaultInstance() {
  user_ = const_cast< ::b2::protocol::commondata::User*>(&::b2::protocol::commondata::User::default_instance());
}

HallOfFameUser::HallOfFameUser(const HallOfFameUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.HallOfFameUser)
}

void HallOfFameUser::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  wing_grade_ = 0;
  wing_level_ = 0;
  wing_visible_ = false;
  helmet_visible_ = false;
  costume_weapon_visible_ = false;
  costume_hat_visible_ = false;
  costume_armor_visible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallOfFameUser::~HallOfFameUser() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.HallOfFameUser)
  SharedDtor();
}

void HallOfFameUser::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void HallOfFameUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallOfFameUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallOfFameUser_descriptor_;
}

const HallOfFameUser& HallOfFameUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

HallOfFameUser* HallOfFameUser::default_instance_ = NULL;

HallOfFameUser* HallOfFameUser::New() const {
  return new HallOfFameUser;
}

void HallOfFameUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HallOfFameUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 241) {
    ZR_(wing_grade_, helmet_visible_);
    if (has_user()) {
      if (user_ != NULL) user_->::b2::protocol::commondata::User::Clear();
    }
  }
  ZR_(costume_weapon_visible_, costume_armor_visible_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_items_.Clear();
  equip_costumes_.Clear();
  equip_totems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallOfFameUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.HallOfFameUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.User user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip_items;
        break;
      }

      // repeated .b2.protocol.commondata.Item equip_items = 3;
      case 3: {
        if (tag == 26) {
         parse_equip_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_equip_items;
        if (input->ExpectTag(34)) goto parse_equip_costumes;
        break;
      }

      // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
      case 4: {
        if (tag == 34) {
         parse_equip_costumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_costumes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_equip_costumes;
        if (input->ExpectTag(42)) goto parse_equip_totems;
        break;
      }

      // repeated .b2.protocol.commondata.Totem equip_totems = 5;
      case 5: {
        if (tag == 42) {
         parse_equip_totems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_totems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_equip_totems;
        if (input->ExpectTag(80)) goto parse_wing_grade;
        break;
      }

      // optional int32 wing_grade = 10;
      case 10: {
        if (tag == 80) {
         parse_wing_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_grade_)));
          set_has_wing_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_wing_Level;
        break;
      }

      // optional int32 wing_Level = 11;
      case 11: {
        if (tag == 88) {
         parse_wing_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wing_level_)));
          set_has_wing_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_wing_visible;
        break;
      }

      // optional bool wing_visible = 12;
      case 12: {
        if (tag == 96) {
         parse_wing_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wing_visible_)));
          set_has_wing_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_helmet_visible;
        break;
      }

      // optional bool helmet_visible = 13;
      case 13: {
        if (tag == 104) {
         parse_helmet_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &helmet_visible_)));
          set_has_helmet_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_costume_weapon_visible;
        break;
      }

      // optional bool costume_weapon_visible = 14;
      case 14: {
        if (tag == 112) {
         parse_costume_weapon_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costume_weapon_visible_)));
          set_has_costume_weapon_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_costume_hat_visible;
        break;
      }

      // optional bool costume_hat_visible = 15;
      case 15: {
        if (tag == 120) {
         parse_costume_hat_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costume_hat_visible_)));
          set_has_costume_hat_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_costume_armor_visible;
        break;
      }

      // optional bool costume_armor_visible = 16;
      case 16: {
        if (tag == 128) {
         parse_costume_armor_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &costume_armor_visible_)));
          set_has_costume_armor_visible();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.HallOfFameUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.HallOfFameUser)
  return false;
#undef DO_
}

void HallOfFameUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.HallOfFameUser)
  // required .b2.protocol.commondata.User user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // repeated .b2.protocol.commondata.Item equip_items = 3;
  for (int i = 0; i < this->equip_items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equip_items(i), output);
  }

  // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
  for (int i = 0; i < this->equip_costumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equip_costumes(i), output);
  }

  // repeated .b2.protocol.commondata.Totem equip_totems = 5;
  for (int i = 0; i < this->equip_totems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->equip_totems(i), output);
  }

  // optional int32 wing_grade = 10;
  if (has_wing_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->wing_grade(), output);
  }

  // optional int32 wing_Level = 11;
  if (has_wing_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wing_level(), output);
  }

  // optional bool wing_visible = 12;
  if (has_wing_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->wing_visible(), output);
  }

  // optional bool helmet_visible = 13;
  if (has_helmet_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->helmet_visible(), output);
  }

  // optional bool costume_weapon_visible = 14;
  if (has_costume_weapon_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->costume_weapon_visible(), output);
  }

  // optional bool costume_hat_visible = 15;
  if (has_costume_hat_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->costume_hat_visible(), output);
  }

  // optional bool costume_armor_visible = 16;
  if (has_costume_armor_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->costume_armor_visible(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.HallOfFameUser)
}

::google::protobuf::uint8* HallOfFameUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.HallOfFameUser)
  // required .b2.protocol.commondata.User user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // repeated .b2.protocol.commondata.Item equip_items = 3;
  for (int i = 0; i < this->equip_items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equip_items(i), target);
  }

  // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
  for (int i = 0; i < this->equip_costumes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->equip_costumes(i), target);
  }

  // repeated .b2.protocol.commondata.Totem equip_totems = 5;
  for (int i = 0; i < this->equip_totems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->equip_totems(i), target);
  }

  // optional int32 wing_grade = 10;
  if (has_wing_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->wing_grade(), target);
  }

  // optional int32 wing_Level = 11;
  if (has_wing_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wing_level(), target);
  }

  // optional bool wing_visible = 12;
  if (has_wing_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->wing_visible(), target);
  }

  // optional bool helmet_visible = 13;
  if (has_helmet_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->helmet_visible(), target);
  }

  // optional bool costume_weapon_visible = 14;
  if (has_costume_weapon_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->costume_weapon_visible(), target);
  }

  // optional bool costume_hat_visible = 15;
  if (has_costume_hat_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->costume_hat_visible(), target);
  }

  // optional bool costume_armor_visible = 16;
  if (has_costume_armor_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->costume_armor_visible(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.HallOfFameUser)
  return target;
}

int HallOfFameUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.User user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional int32 wing_grade = 10;
    if (has_wing_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_grade());
    }

    // optional int32 wing_Level = 11;
    if (has_wing_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wing_level());
    }

    // optional bool wing_visible = 12;
    if (has_wing_visible()) {
      total_size += 1 + 1;
    }

    // optional bool helmet_visible = 13;
    if (has_helmet_visible()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool costume_weapon_visible = 14;
    if (has_costume_weapon_visible()) {
      total_size += 1 + 1;
    }

    // optional bool costume_hat_visible = 15;
    if (has_costume_hat_visible()) {
      total_size += 1 + 1;
    }

    // optional bool costume_armor_visible = 16;
    if (has_costume_armor_visible()) {
      total_size += 2 + 1;
    }

  }
  // repeated .b2.protocol.commondata.Item equip_items = 3;
  total_size += 1 * this->equip_items_size();
  for (int i = 0; i < this->equip_items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_items(i));
  }

  // repeated .b2.protocol.commondata.Costume equip_costumes = 4;
  total_size += 1 * this->equip_costumes_size();
  for (int i = 0; i < this->equip_costumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_costumes(i));
  }

  // repeated .b2.protocol.commondata.Totem equip_totems = 5;
  total_size += 1 * this->equip_totems_size();
  for (int i = 0; i < this->equip_totems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_totems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallOfFameUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallOfFameUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallOfFameUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallOfFameUser::MergeFrom(const HallOfFameUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_items_.MergeFrom(from.equip_items_);
  equip_costumes_.MergeFrom(from.equip_costumes_);
  equip_totems_.MergeFrom(from.equip_totems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::b2::protocol::commondata::User::MergeFrom(from.user());
    }
    if (from.has_wing_grade()) {
      set_wing_grade(from.wing_grade());
    }
    if (from.has_wing_level()) {
      set_wing_level(from.wing_level());
    }
    if (from.has_wing_visible()) {
      set_wing_visible(from.wing_visible());
    }
    if (from.has_helmet_visible()) {
      set_helmet_visible(from.helmet_visible());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_costume_weapon_visible()) {
      set_costume_weapon_visible(from.costume_weapon_visible());
    }
    if (from.has_costume_hat_visible()) {
      set_costume_hat_visible(from.costume_hat_visible());
    }
    if (from.has_costume_armor_visible()) {
      set_costume_armor_visible(from.costume_armor_visible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallOfFameUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallOfFameUser::CopyFrom(const HallOfFameUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallOfFameUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_costumes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->equip_totems())) return false;
  return true;
}

void HallOfFameUser::Swap(HallOfFameUser* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    equip_items_.Swap(&other->equip_items_);
    equip_costumes_.Swap(&other->equip_costumes_);
    equip_totems_.Swap(&other->equip_totems_);
    std::swap(wing_grade_, other->wing_grade_);
    std::swap(wing_level_, other->wing_level_);
    std::swap(wing_visible_, other->wing_visible_);
    std::swap(helmet_visible_, other->helmet_visible_);
    std::swap(costume_weapon_visible_, other->costume_weapon_visible_);
    std::swap(costume_hat_visible_, other->costume_hat_visible_);
    std::swap(costume_armor_visible_, other->costume_armor_visible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallOfFameUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallOfFameUser_descriptor_;
  metadata.reflection = HallOfFameUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallOfFameReward::kModeFieldNumber;
const int HallOfFameReward::kRankingFieldNumber;
const int HallOfFameReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

HallOfFameReward::HallOfFameReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.HallOfFameReward)
}

void HallOfFameReward::InitAsDefaultInstance() {
}

HallOfFameReward::HallOfFameReward(const HallOfFameReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.HallOfFameReward)
}

void HallOfFameReward::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallOfFameReward::~HallOfFameReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.HallOfFameReward)
  SharedDtor();
}

void HallOfFameReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HallOfFameReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallOfFameReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallOfFameReward_descriptor_;
}

const HallOfFameReward& HallOfFameReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

HallOfFameReward* HallOfFameReward::default_instance_ = NULL;

HallOfFameReward* HallOfFameReward::New() const {
  return new HallOfFameReward;
}

void HallOfFameReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    mode_ = 1;
    ranking_ = 0;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallOfFameReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.HallOfFameReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.ContentsMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsMode_IsValid(value)) {
            set_mode(static_cast< ::b2::protocol::commondata::ContentsMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }

      // repeated .b2.protocol.commondata.Reward rewards = 3;
      case 3: {
        if (tag == 26) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.HallOfFameReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.HallOfFameReward)
  return false;
#undef DO_
}

void HallOfFameReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.HallOfFameReward)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // required int32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking(), output);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.HallOfFameReward)
}

::google::protobuf::uint8* HallOfFameReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.HallOfFameReward)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // required int32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking(), target);
  }

  // repeated .b2.protocol.commondata.Reward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.HallOfFameReward)
  return target;
}

int HallOfFameReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.ContentsMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required int32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  // repeated .b2.protocol.commondata.Reward rewards = 3;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallOfFameReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallOfFameReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallOfFameReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallOfFameReward::MergeFrom(const HallOfFameReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallOfFameReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallOfFameReward::CopyFrom(const HallOfFameReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallOfFameReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rewards())) return false;
  return true;
}

void HallOfFameReward::Swap(HallOfFameReward* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(ranking_, other->ranking_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallOfFameReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallOfFameReward_descriptor_;
  metadata.reflection = HallOfFameReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HallOfFamePraise::kModeFieldNumber;
const int HallOfFamePraise::kPraiseCountFieldNumber;
const int HallOfFamePraise::kMaxCountFieldNumber;
const int HallOfFamePraise::kTargetAccountIdFieldNumber;
#endif  // !_MSC_VER

HallOfFamePraise::HallOfFamePraise()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.HallOfFamePraise)
}

void HallOfFamePraise::InitAsDefaultInstance() {
}

HallOfFamePraise::HallOfFamePraise(const HallOfFamePraise& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.HallOfFamePraise)
}

void HallOfFamePraise::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 1;
  praise_count_ = 0;
  max_count_ = 0;
  target_account_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HallOfFamePraise::~HallOfFamePraise() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.HallOfFamePraise)
  SharedDtor();
}

void HallOfFamePraise::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HallOfFamePraise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HallOfFamePraise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HallOfFamePraise_descriptor_;
}

const HallOfFamePraise& HallOfFamePraise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

HallOfFamePraise* HallOfFamePraise::default_instance_ = NULL;

HallOfFamePraise* HallOfFamePraise::New() const {
  return new HallOfFamePraise;
}

void HallOfFamePraise::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HallOfFamePraise*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(praise_count_, max_count_);
    mode_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HallOfFamePraise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.HallOfFamePraise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.ContentsMode mode = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ContentsMode_IsValid(value)) {
            set_mode(static_cast< ::b2::protocol::commondata::ContentsMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_praise_count;
        break;
      }

      // required int32 praise_count = 2;
      case 2: {
        if (tag == 16) {
         parse_praise_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &praise_count_)));
          set_has_praise_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_max_count;
        break;
      }

      // required int32 max_count = 3;
      case 3: {
        if (tag == 24) {
         parse_max_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_count_)));
          set_has_max_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_target_account_id;
        break;
      }

      // required int64 target_account_id = 4;
      case 4: {
        if (tag == 32) {
         parse_target_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_account_id_)));
          set_has_target_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.HallOfFamePraise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.HallOfFamePraise)
  return false;
#undef DO_
}

void HallOfFamePraise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.HallOfFamePraise)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // required int32 praise_count = 2;
  if (has_praise_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->praise_count(), output);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_count(), output);
  }

  // required int64 target_account_id = 4;
  if (has_target_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->target_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.HallOfFamePraise)
}

::google::protobuf::uint8* HallOfFamePraise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.HallOfFamePraise)
  // required .b2.protocol.commondata.ContentsMode mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // required int32 praise_count = 2;
  if (has_praise_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->praise_count(), target);
  }

  // required int32 max_count = 3;
  if (has_max_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_count(), target);
  }

  // required int64 target_account_id = 4;
  if (has_target_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->target_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.HallOfFamePraise)
  return target;
}

int HallOfFamePraise::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.ContentsMode mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

    // required int32 praise_count = 2;
    if (has_praise_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->praise_count());
    }

    // required int32 max_count = 3;
    if (has_max_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_count());
    }

    // required int64 target_account_id = 4;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HallOfFamePraise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HallOfFamePraise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HallOfFamePraise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HallOfFamePraise::MergeFrom(const HallOfFamePraise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_praise_count()) {
      set_praise_count(from.praise_count());
    }
    if (from.has_max_count()) {
      set_max_count(from.max_count());
    }
    if (from.has_target_account_id()) {
      set_target_account_id(from.target_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HallOfFamePraise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HallOfFamePraise::CopyFrom(const HallOfFamePraise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HallOfFamePraise::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void HallOfFamePraise::Swap(HallOfFamePraise* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(praise_count_, other->praise_count_);
    std::swap(max_count_, other->max_count_);
    std::swap(target_account_id_, other->target_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HallOfFamePraise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HallOfFamePraise_descriptor_;
  metadata.reflection = HallOfFamePraise_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpendGemEventStatus::kEventIdFieldNumber;
const int SpendGemEventStatus::kSpendGemCountFieldNumber;
const int SpendGemEventStatus::kRewardStateValueFieldNumber;
#endif  // !_MSC_VER

SpendGemEventStatus::SpendGemEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.SpendGemEventStatus)
}

void SpendGemEventStatus::InitAsDefaultInstance() {
}

SpendGemEventStatus::SpendGemEventStatus(const SpendGemEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.SpendGemEventStatus)
}

void SpendGemEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  spend_gem_count_ = 0;
  reward_state_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpendGemEventStatus::~SpendGemEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.SpendGemEventStatus)
  SharedDtor();
}

void SpendGemEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpendGemEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpendGemEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpendGemEventStatus_descriptor_;
}

const SpendGemEventStatus& SpendGemEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

SpendGemEventStatus* SpendGemEventStatus::default_instance_ = NULL;

SpendGemEventStatus* SpendGemEventStatus::New() const {
  return new SpendGemEventStatus;
}

void SpendGemEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpendGemEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, reward_state_value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpendGemEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.SpendGemEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_spend_gem_count;
        break;
      }

      // required int32 spend_gem_count = 2;
      case 2: {
        if (tag == 16) {
         parse_spend_gem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spend_gem_count_)));
          set_has_spend_gem_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reward_state_value;
        break;
      }

      // required int32 reward_state_value = 3;
      case 3: {
        if (tag == 24) {
         parse_reward_state_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_state_value_)));
          set_has_reward_state_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.SpendGemEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.SpendGemEventStatus)
  return false;
#undef DO_
}

void SpendGemEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.SpendGemEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 spend_gem_count = 2;
  if (has_spend_gem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->spend_gem_count(), output);
  }

  // required int32 reward_state_value = 3;
  if (has_reward_state_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward_state_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.SpendGemEventStatus)
}

::google::protobuf::uint8* SpendGemEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.SpendGemEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 spend_gem_count = 2;
  if (has_spend_gem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->spend_gem_count(), target);
  }

  // required int32 reward_state_value = 3;
  if (has_reward_state_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward_state_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.SpendGemEventStatus)
  return target;
}

int SpendGemEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 spend_gem_count = 2;
    if (has_spend_gem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spend_gem_count());
    }

    // required int32 reward_state_value = 3;
    if (has_reward_state_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_state_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpendGemEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpendGemEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpendGemEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpendGemEventStatus::MergeFrom(const SpendGemEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_spend_gem_count()) {
      set_spend_gem_count(from.spend_gem_count());
    }
    if (from.has_reward_state_value()) {
      set_reward_state_value(from.reward_state_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpendGemEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpendGemEventStatus::CopyFrom(const SpendGemEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendGemEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SpendGemEventStatus::Swap(SpendGemEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(spend_gem_count_, other->spend_gem_count_);
    std::swap(reward_state_value_, other->reward_state_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpendGemEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpendGemEventStatus_descriptor_;
  metadata.reflection = SpendGemEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TenLotterySavingsStatus::kEventIdFieldNumber;
const int TenLotterySavingsStatus::kCurrentPointFieldNumber;
#endif  // !_MSC_VER

TenLotterySavingsStatus::TenLotterySavingsStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.TenLotterySavingsStatus)
}

void TenLotterySavingsStatus::InitAsDefaultInstance() {
}

TenLotterySavingsStatus::TenLotterySavingsStatus(const TenLotterySavingsStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.TenLotterySavingsStatus)
}

void TenLotterySavingsStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  current_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TenLotterySavingsStatus::~TenLotterySavingsStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.TenLotterySavingsStatus)
  SharedDtor();
}

void TenLotterySavingsStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TenLotterySavingsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TenLotterySavingsStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TenLotterySavingsStatus_descriptor_;
}

const TenLotterySavingsStatus& TenLotterySavingsStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

TenLotterySavingsStatus* TenLotterySavingsStatus::default_instance_ = NULL;

TenLotterySavingsStatus* TenLotterySavingsStatus::New() const {
  return new TenLotterySavingsStatus;
}

void TenLotterySavingsStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TenLotterySavingsStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_id_, current_point_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TenLotterySavingsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.TenLotterySavingsStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_point;
        break;
      }

      // required int32 current_point = 2;
      case 2: {
        if (tag == 16) {
         parse_current_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_point_)));
          set_has_current_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.TenLotterySavingsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.TenLotterySavingsStatus)
  return false;
#undef DO_
}

void TenLotterySavingsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.TenLotterySavingsStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 current_point = 2;
  if (has_current_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.TenLotterySavingsStatus)
}

::google::protobuf::uint8* TenLotterySavingsStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.TenLotterySavingsStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 current_point = 2;
  if (has_current_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.TenLotterySavingsStatus)
  return target;
}

int TenLotterySavingsStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 current_point = 2;
    if (has_current_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TenLotterySavingsStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TenLotterySavingsStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TenLotterySavingsStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TenLotterySavingsStatus::MergeFrom(const TenLotterySavingsStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_current_point()) {
      set_current_point(from.current_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TenLotterySavingsStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TenLotterySavingsStatus::CopyFrom(const TenLotterySavingsStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TenLotterySavingsStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TenLotterySavingsStatus::Swap(TenLotterySavingsStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(current_point_, other->current_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TenLotterySavingsStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TenLotterySavingsStatus_descriptor_;
  metadata.reflection = TenLotterySavingsStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiceEventMission::kEventTypeFieldNumber;
const int DiceEventMission::kProgressCountFieldNumber;
const int DiceEventMission::kStateFieldNumber;
#endif  // !_MSC_VER

DiceEventMission::DiceEventMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DiceEventMission)
}

void DiceEventMission::InitAsDefaultInstance() {
}

DiceEventMission::DiceEventMission(const DiceEventMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DiceEventMission)
}

void DiceEventMission::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  progress_count_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiceEventMission::~DiceEventMission() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DiceEventMission)
  SharedDtor();
}

void DiceEventMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiceEventMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiceEventMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiceEventMission_descriptor_;
}

const DiceEventMission& DiceEventMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DiceEventMission* DiceEventMission::default_instance_ = NULL;

DiceEventMission* DiceEventMission::New() const {
  return new DiceEventMission;
}

void DiceEventMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiceEventMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(event_type_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiceEventMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DiceEventMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_progress_count;
        break;
      }

      // required int32 progress_count = 2;
      case 2: {
        if (tag == 16) {
         parse_progress_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_count_)));
          set_has_progress_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DiceEventMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DiceEventMission)
  return false;
#undef DO_
}

void DiceEventMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DiceEventMission)
  // required int32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }

  // required int32 progress_count = 2;
  if (has_progress_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress_count(), output);
  }

  // required int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DiceEventMission)
}

::google::protobuf::uint8* DiceEventMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DiceEventMission)
  // required int32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }

  // required int32 progress_count = 2;
  if (has_progress_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress_count(), target);
  }

  // required int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DiceEventMission)
  return target;
}

int DiceEventMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // required int32 progress_count = 2;
    if (has_progress_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress_count());
    }

    // required int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiceEventMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiceEventMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiceEventMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiceEventMission::MergeFrom(const DiceEventMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_progress_count()) {
      set_progress_count(from.progress_count());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiceEventMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceEventMission::CopyFrom(const DiceEventMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceEventMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DiceEventMission::Swap(DiceEventMission* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(progress_count_, other->progress_count_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiceEventMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiceEventMission_descriptor_;
  metadata.reflection = DiceEventMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DiceEventStatus::kEventIdFieldNumber;
const int DiceEventStatus::kPointFieldNumber;
const int DiceEventStatus::kFreeDiceFieldNumber;
const int DiceEventStatus::kPositionFieldNumber;
const int DiceEventStatus::kMissionsFieldNumber;
const int DiceEventStatus::kFinishCountFieldNumber;
const int DiceEventStatus::kBuyPointCountFieldNumber;
const int DiceEventStatus::kRollDiceCountFieldNumber;
const int DiceEventStatus::kMileageRewardValueFieldNumber;
#endif  // !_MSC_VER

DiceEventStatus::DiceEventStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DiceEventStatus)
}

void DiceEventStatus::InitAsDefaultInstance() {
}

DiceEventStatus::DiceEventStatus(const DiceEventStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DiceEventStatus)
}

void DiceEventStatus::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0;
  point_ = 0;
  free_dice_ = 0;
  position_ = 0;
  finish_count_ = 0;
  buy_point_count_ = 0;
  roll_dice_count_ = 0;
  mileage_reward_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DiceEventStatus::~DiceEventStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DiceEventStatus)
  SharedDtor();
}

void DiceEventStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DiceEventStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiceEventStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DiceEventStatus_descriptor_;
}

const DiceEventStatus& DiceEventStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DiceEventStatus* DiceEventStatus::default_instance_ = NULL;

DiceEventStatus* DiceEventStatus::New() const {
  return new DiceEventStatus;
}

void DiceEventStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DiceEventStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(event_id_, position_);
    ZR_(finish_count_, roll_dice_count_);
  }
  mileage_reward_value_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DiceEventStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DiceEventStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // required int32 point = 2;
      case 2: {
        if (tag == 16) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_free_dice;
        break;
      }

      // required int32 free_dice = 3;
      case 3: {
        if (tag == 24) {
         parse_free_dice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_dice_)));
          set_has_free_dice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // required int32 position = 4;
      case 4: {
        if (tag == 32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_missions;
        break;
      }

      // repeated .b2.protocol.commondata.DiceEventMission missions = 5;
      case 5: {
        if (tag == 42) {
         parse_missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_missions;
        if (input->ExpectTag(48)) goto parse_finish_count;
        break;
      }

      // required int32 finish_count = 6;
      case 6: {
        if (tag == 48) {
         parse_finish_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_count_)));
          set_has_finish_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_buy_point_count;
        break;
      }

      // required int32 buy_point_count = 7;
      case 7: {
        if (tag == 56) {
         parse_buy_point_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_point_count_)));
          set_has_buy_point_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_roll_dice_count;
        break;
      }

      // required int32 roll_dice_count = 8;
      case 8: {
        if (tag == 64) {
         parse_roll_dice_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_dice_count_)));
          set_has_roll_dice_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mileage_reward_value;
        break;
      }

      // required int32 mileage_reward_value = 9;
      case 9: {
        if (tag == 72) {
         parse_mileage_reward_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mileage_reward_value_)));
          set_has_mileage_reward_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DiceEventStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DiceEventStatus)
  return false;
#undef DO_
}

void DiceEventStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DiceEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_id(), output);
  }

  // required int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // required int32 free_dice = 3;
  if (has_free_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->free_dice(), output);
  }

  // required int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // repeated .b2.protocol.commondata.DiceEventMission missions = 5;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->missions(i), output);
  }

  // required int32 finish_count = 6;
  if (has_finish_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->finish_count(), output);
  }

  // required int32 buy_point_count = 7;
  if (has_buy_point_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->buy_point_count(), output);
  }

  // required int32 roll_dice_count = 8;
  if (has_roll_dice_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roll_dice_count(), output);
  }

  // required int32 mileage_reward_value = 9;
  if (has_mileage_reward_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mileage_reward_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DiceEventStatus)
}

::google::protobuf::uint8* DiceEventStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DiceEventStatus)
  // required int32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_id(), target);
  }

  // required int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // required int32 free_dice = 3;
  if (has_free_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->free_dice(), target);
  }

  // required int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // repeated .b2.protocol.commondata.DiceEventMission missions = 5;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->missions(i), target);
  }

  // required int32 finish_count = 6;
  if (has_finish_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->finish_count(), target);
  }

  // required int32 buy_point_count = 7;
  if (has_buy_point_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->buy_point_count(), target);
  }

  // required int32 roll_dice_count = 8;
  if (has_roll_dice_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->roll_dice_count(), target);
  }

  // required int32 mileage_reward_value = 9;
  if (has_mileage_reward_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mileage_reward_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DiceEventStatus)
  return target;
}

int DiceEventStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_id());
    }

    // required int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // required int32 free_dice = 3;
    if (has_free_dice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free_dice());
    }

    // required int32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // required int32 finish_count = 6;
    if (has_finish_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_count());
    }

    // required int32 buy_point_count = 7;
    if (has_buy_point_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_point_count());
    }

    // required int32 roll_dice_count = 8;
    if (has_roll_dice_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_dice_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 mileage_reward_value = 9;
    if (has_mileage_reward_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mileage_reward_value());
    }

  }
  // repeated .b2.protocol.commondata.DiceEventMission missions = 5;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiceEventStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DiceEventStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DiceEventStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DiceEventStatus::MergeFrom(const DiceEventStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_free_dice()) {
      set_free_dice(from.free_dice());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_finish_count()) {
      set_finish_count(from.finish_count());
    }
    if (from.has_buy_point_count()) {
      set_buy_point_count(from.buy_point_count());
    }
    if (from.has_roll_dice_count()) {
      set_roll_dice_count(from.roll_dice_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mileage_reward_value()) {
      set_mileage_reward_value(from.mileage_reward_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DiceEventStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiceEventStatus::CopyFrom(const DiceEventStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiceEventStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->missions())) return false;
  return true;
}

void DiceEventStatus::Swap(DiceEventStatus* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(point_, other->point_);
    std::swap(free_dice_, other->free_dice_);
    std::swap(position_, other->position_);
    missions_.Swap(&other->missions_);
    std::swap(finish_count_, other->finish_count_);
    std::swap(buy_point_count_, other->buy_point_count_);
    std::swap(roll_dice_count_, other->roll_dice_count_);
    std::swap(mileage_reward_value_, other->mileage_reward_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DiceEventStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DiceEventStatus_descriptor_;
  metadata.reflection = DiceEventStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonationPointRewardState::kIndexFieldNumber;
const int DonationPointRewardState::kRewardedFieldNumber;
#endif  // !_MSC_VER

DonationPointRewardState::DonationPointRewardState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DonationPointRewardState)
}

void DonationPointRewardState::InitAsDefaultInstance() {
}

DonationPointRewardState::DonationPointRewardState(const DonationPointRewardState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DonationPointRewardState)
}

void DonationPointRewardState::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  rewarded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonationPointRewardState::~DonationPointRewardState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DonationPointRewardState)
  SharedDtor();
}

void DonationPointRewardState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonationPointRewardState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonationPointRewardState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationPointRewardState_descriptor_;
}

const DonationPointRewardState& DonationPointRewardState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DonationPointRewardState* DonationPointRewardState::default_instance_ = NULL;

DonationPointRewardState* DonationPointRewardState::New() const {
  return new DonationPointRewardState;
}

void DonationPointRewardState::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DonationPointRewardState*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, rewarded_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonationPointRewardState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DonationPointRewardState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rewarded;
        break;
      }

      // required bool rewarded = 2;
      case 2: {
        if (tag == 16) {
         parse_rewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewarded_)));
          set_has_rewarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DonationPointRewardState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DonationPointRewardState)
  return false;
#undef DO_
}

void DonationPointRewardState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DonationPointRewardState)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required bool rewarded = 2;
  if (has_rewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->rewarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DonationPointRewardState)
}

::google::protobuf::uint8* DonationPointRewardState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DonationPointRewardState)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required bool rewarded = 2;
  if (has_rewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->rewarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DonationPointRewardState)
  return target;
}

int DonationPointRewardState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required bool rewarded = 2;
    if (has_rewarded()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonationPointRewardState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonationPointRewardState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonationPointRewardState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonationPointRewardState::MergeFrom(const DonationPointRewardState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rewarded()) {
      set_rewarded(from.rewarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonationPointRewardState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonationPointRewardState::CopyFrom(const DonationPointRewardState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonationPointRewardState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DonationPointRewardState::Swap(DonationPointRewardState* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(rewarded_, other->rewarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonationPointRewardState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonationPointRewardState_descriptor_;
  metadata.reflection = DonationPointRewardState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DonationPresent::kItemTemplateIdFieldNumber;
const int DonationPresent::kAmountFieldNumber;
const int DonationPresent::kDonationConsumableTypeFieldNumber;
#endif  // !_MSC_VER

DonationPresent::DonationPresent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DonationPresent)
}

void DonationPresent::InitAsDefaultInstance() {
}

DonationPresent::DonationPresent(const DonationPresent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DonationPresent)
}

void DonationPresent::SharedCtor() {
  _cached_size_ = 0;
  item_template_id_ = 0;
  amount_ = 0;
  donation_consumable_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonationPresent::~DonationPresent() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DonationPresent)
  SharedDtor();
}

void DonationPresent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonationPresent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonationPresent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationPresent_descriptor_;
}

const DonationPresent& DonationPresent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DonationPresent* DonationPresent::default_instance_ = NULL;

DonationPresent* DonationPresent::New() const {
  return new DonationPresent;
}

void DonationPresent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DonationPresent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(item_template_id_, amount_);
    donation_consumable_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonationPresent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DonationPresent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // required int32 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_donation_consumable_type;
        break;
      }

      // required .b2.protocol.commondata.DonationConsumableType donation_consumable_type = 3;
      case 3: {
        if (tag == 24) {
         parse_donation_consumable_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DonationConsumableType_IsValid(value)) {
            set_donation_consumable_type(static_cast< ::b2::protocol::commondata::DonationConsumableType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DonationPresent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DonationPresent)
  return false;
#undef DO_
}

void DonationPresent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DonationPresent)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_template_id(), output);
  }

  // required int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // required .b2.protocol.commondata.DonationConsumableType donation_consumable_type = 3;
  if (has_donation_consumable_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->donation_consumable_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DonationPresent)
}

::google::protobuf::uint8* DonationPresent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DonationPresent)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_template_id(), target);
  }

  // required int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // required .b2.protocol.commondata.DonationConsumableType donation_consumable_type = 3;
  if (has_donation_consumable_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->donation_consumable_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DonationPresent)
  return target;
}

int DonationPresent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_template_id = 1;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // required .b2.protocol.commondata.DonationConsumableType donation_consumable_type = 3;
    if (has_donation_consumable_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->donation_consumable_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonationPresent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonationPresent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonationPresent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonationPresent::MergeFrom(const DonationPresent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_donation_consumable_type()) {
      set_donation_consumable_type(from.donation_consumable_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonationPresent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonationPresent::CopyFrom(const DonationPresent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonationPresent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DonationPresent::Swap(DonationPresent* other) {
  if (other != this) {
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(amount_, other->amount_);
    std::swap(donation_consumable_type_, other->donation_consumable_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonationPresent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonationPresent_descriptor_;
  metadata.reflection = DonationPresent_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DonationJobState_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationJobState_TYPE_descriptor_;
}
bool DonationJobState_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DonationJobState_TYPE DonationJobState::START;
const DonationJobState_TYPE DonationJobState::END;
const DonationJobState_TYPE DonationJobState::REWARDED;
const DonationJobState_TYPE DonationJobState::TYPE_MIN;
const DonationJobState_TYPE DonationJobState::TYPE_MAX;
const int DonationJobState::TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DonationJobState::kDonationIdFieldNumber;
const int DonationJobState::kCurrentStateFieldNumber;
const int DonationJobState::kCompletedFieldNumber;
#endif  // !_MSC_VER

DonationJobState::DonationJobState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.DonationJobState)
}

void DonationJobState::InitAsDefaultInstance() {
}

DonationJobState::DonationJobState(const DonationJobState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.DonationJobState)
}

void DonationJobState::SharedCtor() {
  _cached_size_ = 0;
  donation_id_ = 0;
  current_state_ = 1;
  completed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DonationJobState::~DonationJobState() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.DonationJobState)
  SharedDtor();
}

void DonationJobState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DonationJobState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DonationJobState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DonationJobState_descriptor_;
}

const DonationJobState& DonationJobState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

DonationJobState* DonationJobState::default_instance_ = NULL;

DonationJobState* DonationJobState::New() const {
  return new DonationJobState;
}

void DonationJobState::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    donation_id_ = 0;
    current_state_ = 1;
    completed_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DonationJobState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.DonationJobState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 donation_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donation_id_)));
          set_has_donation_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_state;
        break;
      }

      // required .b2.protocol.commondata.DonationJobState.TYPE current_state = 2;
      case 2: {
        if (tag == 16) {
         parse_current_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::DonationJobState_TYPE_IsValid(value)) {
            set_current_state(static_cast< ::b2::protocol::commondata::DonationJobState_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_completed;
        break;
      }

      // required bool completed = 3;
      case 3: {
        if (tag == 24) {
         parse_completed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
          set_has_completed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.DonationJobState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.DonationJobState)
  return false;
#undef DO_
}

void DonationJobState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.DonationJobState)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donation_id(), output);
  }

  // required .b2.protocol.commondata.DonationJobState.TYPE current_state = 2;
  if (has_current_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->current_state(), output);
  }

  // required bool completed = 3;
  if (has_completed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.DonationJobState)
}

::google::protobuf::uint8* DonationJobState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.DonationJobState)
  // required int32 donation_id = 1;
  if (has_donation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donation_id(), target);
  }

  // required .b2.protocol.commondata.DonationJobState.TYPE current_state = 2;
  if (has_current_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->current_state(), target);
  }

  // required bool completed = 3;
  if (has_completed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.DonationJobState)
  return target;
}

int DonationJobState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 donation_id = 1;
    if (has_donation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donation_id());
    }

    // required .b2.protocol.commondata.DonationJobState.TYPE current_state = 2;
    if (has_current_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->current_state());
    }

    // required bool completed = 3;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DonationJobState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DonationJobState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DonationJobState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DonationJobState::MergeFrom(const DonationJobState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donation_id()) {
      set_donation_id(from.donation_id());
    }
    if (from.has_current_state()) {
      set_current_state(from.current_state());
    }
    if (from.has_completed()) {
      set_completed(from.completed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DonationJobState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DonationJobState::CopyFrom(const DonationJobState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DonationJobState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DonationJobState::Swap(DonationJobState* other) {
  if (other != this) {
    std::swap(donation_id_, other->donation_id_);
    std::swap(current_state_, other->current_state_);
    std::swap(completed_, other->completed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DonationJobState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DonationJobState_descriptor_;
  metadata.reflection = DonationJobState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactoryLimitStatus::kLimitIdFieldNumber;
const int FactoryLimitStatus::kLimitTypeFieldNumber;
const int FactoryLimitStatus::kLimitTimeTypeFieldNumber;
const int FactoryLimitStatus::kLeftCountFieldNumber;
#endif  // !_MSC_VER

FactoryLimitStatus::FactoryLimitStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.FactoryLimitStatus)
}

void FactoryLimitStatus::InitAsDefaultInstance() {
}

FactoryLimitStatus::FactoryLimitStatus(const FactoryLimitStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.FactoryLimitStatus)
}

void FactoryLimitStatus::SharedCtor() {
  _cached_size_ = 0;
  limit_id_ = 0;
  limit_type_ = 1;
  limit_time_type_ = 1;
  left_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactoryLimitStatus::~FactoryLimitStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.FactoryLimitStatus)
  SharedDtor();
}

void FactoryLimitStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactoryLimitStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryLimitStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryLimitStatus_descriptor_;
}

const FactoryLimitStatus& FactoryLimitStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

FactoryLimitStatus* FactoryLimitStatus::default_instance_ = NULL;

FactoryLimitStatus* FactoryLimitStatus::New() const {
  return new FactoryLimitStatus;
}

void FactoryLimitStatus::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    limit_id_ = 0;
    limit_type_ = 1;
    limit_time_type_ = 1;
    left_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactoryLimitStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.FactoryLimitStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 limit_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_id_)));
          set_has_limit_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_limit_type;
        break;
      }

      // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
      case 2: {
        if (tag == 16) {
         parse_limit_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FactoryLimitType_IsValid(value)) {
            set_limit_type(static_cast< ::b2::protocol::commondata::FactoryLimitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit_time_type;
        break;
      }

      // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 3;
      case 3: {
        if (tag == 24) {
         parse_limit_time_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FactoryLimitTimeType_IsValid(value)) {
            set_limit_time_type(static_cast< ::b2::protocol::commondata::FactoryLimitTimeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_left_count;
        break;
      }

      // required int32 left_count = 4;
      case 4: {
        if (tag == 32) {
         parse_left_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_count_)));
          set_has_left_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.FactoryLimitStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.FactoryLimitStatus)
  return false;
#undef DO_
}

void FactoryLimitStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.FactoryLimitStatus)
  // required int32 limit_id = 1;
  if (has_limit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->limit_id(), output);
  }

  // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
  if (has_limit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->limit_type(), output);
  }

  // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 3;
  if (has_limit_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->limit_time_type(), output);
  }

  // required int32 left_count = 4;
  if (has_left_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.FactoryLimitStatus)
}

::google::protobuf::uint8* FactoryLimitStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.FactoryLimitStatus)
  // required int32 limit_id = 1;
  if (has_limit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->limit_id(), target);
  }

  // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
  if (has_limit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->limit_type(), target);
  }

  // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 3;
  if (has_limit_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->limit_time_type(), target);
  }

  // required int32 left_count = 4;
  if (has_left_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.FactoryLimitStatus)
  return target;
}

int FactoryLimitStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 limit_id = 1;
    if (has_limit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit_id());
    }

    // required .b2.protocol.commondata.FactoryLimitType limit_type = 2;
    if (has_limit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->limit_type());
    }

    // required .b2.protocol.commondata.FactoryLimitTimeType limit_time_type = 3;
    if (has_limit_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->limit_time_type());
    }

    // required int32 left_count = 4;
    if (has_left_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryLimitStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactoryLimitStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactoryLimitStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactoryLimitStatus::MergeFrom(const FactoryLimitStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_limit_id()) {
      set_limit_id(from.limit_id());
    }
    if (from.has_limit_type()) {
      set_limit_type(from.limit_type());
    }
    if (from.has_limit_time_type()) {
      set_limit_time_type(from.limit_time_type());
    }
    if (from.has_left_count()) {
      set_left_count(from.left_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactoryLimitStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryLimitStatus::CopyFrom(const FactoryLimitStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryLimitStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FactoryLimitStatus::Swap(FactoryLimitStatus* other) {
  if (other != this) {
    std::swap(limit_id_, other->limit_id_);
    std::swap(limit_type_, other->limit_type_);
    std::swap(limit_time_type_, other->limit_time_type_);
    std::swap(left_count_, other->left_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactoryLimitStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactoryLimitStatus_descriptor_;
  metadata.reflection = FactoryLimitStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactoryPeriodicStatus::kFactoryIdFieldNumber;
const int FactoryPeriodicStatus::kPreviewTimeFieldNumber;
const int FactoryPeriodicStatus::kStartTimeFieldNumber;
const int FactoryPeriodicStatus::kEndTimeFieldNumber;
#endif  // !_MSC_VER

FactoryPeriodicStatus::FactoryPeriodicStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.FactoryPeriodicStatus)
}

void FactoryPeriodicStatus::InitAsDefaultInstance() {
}

FactoryPeriodicStatus::FactoryPeriodicStatus(const FactoryPeriodicStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.FactoryPeriodicStatus)
}

void FactoryPeriodicStatus::SharedCtor() {
  _cached_size_ = 0;
  factory_id_ = 0;
  preview_time_ = GOOGLE_LONGLONG(0);
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactoryPeriodicStatus::~FactoryPeriodicStatus() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.FactoryPeriodicStatus)
  SharedDtor();
}

void FactoryPeriodicStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactoryPeriodicStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryPeriodicStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryPeriodicStatus_descriptor_;
}

const FactoryPeriodicStatus& FactoryPeriodicStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

FactoryPeriodicStatus* FactoryPeriodicStatus::default_instance_ = NULL;

FactoryPeriodicStatus* FactoryPeriodicStatus::New() const {
  return new FactoryPeriodicStatus;
}

void FactoryPeriodicStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FactoryPeriodicStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(preview_time_, factory_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactoryPeriodicStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.FactoryPeriodicStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 factory_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factory_id_)));
          set_has_factory_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_preview_time;
        break;
      }

      // required int64 preview_time = 2;
      case 2: {
        if (tag == 16) {
         parse_preview_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preview_time_)));
          set_has_preview_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // required int64 start_time = 3;
      case 3: {
        if (tag == 24) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required int64 end_time = 4;
      case 4: {
        if (tag == 32) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.FactoryPeriodicStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.FactoryPeriodicStatus)
  return false;
#undef DO_
}

void FactoryPeriodicStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.FactoryPeriodicStatus)
  // required int32 factory_id = 1;
  if (has_factory_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factory_id(), output);
  }

  // required int64 preview_time = 2;
  if (has_preview_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->preview_time(), output);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.FactoryPeriodicStatus)
}

::google::protobuf::uint8* FactoryPeriodicStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.FactoryPeriodicStatus)
  // required int32 factory_id = 1;
  if (has_factory_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factory_id(), target);
  }

  // required int64 preview_time = 2;
  if (has_preview_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->preview_time(), target);
  }

  // required int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // required int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.FactoryPeriodicStatus)
  return target;
}

int FactoryPeriodicStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 factory_id = 1;
    if (has_factory_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factory_id());
    }

    // required int64 preview_time = 2;
    if (has_preview_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preview_time());
    }

    // required int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // required int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryPeriodicStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactoryPeriodicStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactoryPeriodicStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactoryPeriodicStatus::MergeFrom(const FactoryPeriodicStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_id()) {
      set_factory_id(from.factory_id());
    }
    if (from.has_preview_time()) {
      set_preview_time(from.preview_time());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactoryPeriodicStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryPeriodicStatus::CopyFrom(const FactoryPeriodicStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryPeriodicStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FactoryPeriodicStatus::Swap(FactoryPeriodicStatus* other) {
  if (other != this) {
    std::swap(factory_id_, other->factory_id_);
    std::swap(preview_time_, other->preview_time_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactoryPeriodicStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactoryPeriodicStatus_descriptor_;
  metadata.reflection = FactoryPeriodicStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactoryResult::kFactoryResultTypeFieldNumber;
const int FactoryResult::kMakeItemFieldNumber;
const int FactoryResult::kBonusItemFieldNumber;
const int FactoryResult::kRefundItemFieldNumber;
#endif  // !_MSC_VER

FactoryResult::FactoryResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.FactoryResult)
}

void FactoryResult::InitAsDefaultInstance() {
  make_item_ = const_cast< ::b2::protocol::commondata::Item*>(&::b2::protocol::commondata::Item::default_instance());
  bonus_item_ = const_cast< ::b2::protocol::commondata::Item*>(&::b2::protocol::commondata::Item::default_instance());
}

FactoryResult::FactoryResult(const FactoryResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.FactoryResult)
}

void FactoryResult::SharedCtor() {
  _cached_size_ = 0;
  factory_result_type_ = 1;
  make_item_ = NULL;
  bonus_item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactoryResult::~FactoryResult() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.FactoryResult)
  SharedDtor();
}

void FactoryResult::SharedDtor() {
  if (this != default_instance_) {
    delete make_item_;
    delete bonus_item_;
  }
}

void FactoryResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactoryResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactoryResult_descriptor_;
}

const FactoryResult& FactoryResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

FactoryResult* FactoryResult::default_instance_ = NULL;

FactoryResult* FactoryResult::New() const {
  return new FactoryResult;
}

void FactoryResult::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    factory_result_type_ = 1;
    if (has_make_item()) {
      if (make_item_ != NULL) make_item_->::b2::protocol::commondata::Item::Clear();
    }
    if (has_bonus_item()) {
      if (bonus_item_ != NULL) bonus_item_->::b2::protocol::commondata::Item::Clear();
    }
  }
  refund_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactoryResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.FactoryResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.FactoryResultType factory_result_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::FactoryResultType_IsValid(value)) {
            set_factory_result_type(static_cast< ::b2::protocol::commondata::FactoryResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_make_item;
        break;
      }

      // optional .b2.protocol.commondata.Item make_item = 2;
      case 2: {
        if (tag == 18) {
         parse_make_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_make_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bonus_item;
        break;
      }

      // optional .b2.protocol.commondata.Item bonus_item = 3;
      case 3: {
        if (tag == 26) {
         parse_bonus_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bonus_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refund_item;
        break;
      }

      // repeated .b2.protocol.commondata.Item refund_item = 4;
      case 4: {
        if (tag == 34) {
         parse_refund_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refund_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_refund_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.FactoryResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.FactoryResult)
  return false;
#undef DO_
}

void FactoryResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.FactoryResult)
  // required .b2.protocol.commondata.FactoryResultType factory_result_type = 1;
  if (has_factory_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->factory_result_type(), output);
  }

  // optional .b2.protocol.commondata.Item make_item = 2;
  if (has_make_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->make_item(), output);
  }

  // optional .b2.protocol.commondata.Item bonus_item = 3;
  if (has_bonus_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bonus_item(), output);
  }

  // repeated .b2.protocol.commondata.Item refund_item = 4;
  for (int i = 0; i < this->refund_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->refund_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.FactoryResult)
}

::google::protobuf::uint8* FactoryResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.FactoryResult)
  // required .b2.protocol.commondata.FactoryResultType factory_result_type = 1;
  if (has_factory_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->factory_result_type(), target);
  }

  // optional .b2.protocol.commondata.Item make_item = 2;
  if (has_make_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->make_item(), target);
  }

  // optional .b2.protocol.commondata.Item bonus_item = 3;
  if (has_bonus_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bonus_item(), target);
  }

  // repeated .b2.protocol.commondata.Item refund_item = 4;
  for (int i = 0; i < this->refund_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->refund_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.FactoryResult)
  return target;
}

int FactoryResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.FactoryResultType factory_result_type = 1;
    if (has_factory_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->factory_result_type());
    }

    // optional .b2.protocol.commondata.Item make_item = 2;
    if (has_make_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->make_item());
    }

    // optional .b2.protocol.commondata.Item bonus_item = 3;
    if (has_bonus_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bonus_item());
    }

  }
  // repeated .b2.protocol.commondata.Item refund_item = 4;
  total_size += 1 * this->refund_item_size();
  for (int i = 0; i < this->refund_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refund_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactoryResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactoryResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactoryResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactoryResult::MergeFrom(const FactoryResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  refund_item_.MergeFrom(from.refund_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory_result_type()) {
      set_factory_result_type(from.factory_result_type());
    }
    if (from.has_make_item()) {
      mutable_make_item()->::b2::protocol::commondata::Item::MergeFrom(from.make_item());
    }
    if (from.has_bonus_item()) {
      mutable_bonus_item()->::b2::protocol::commondata::Item::MergeFrom(from.bonus_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactoryResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactoryResult::CopyFrom(const FactoryResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactoryResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_make_item()) {
    if (!this->make_item().IsInitialized()) return false;
  }
  if (has_bonus_item()) {
    if (!this->bonus_item().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->refund_item())) return false;
  return true;
}

void FactoryResult::Swap(FactoryResult* other) {
  if (other != this) {
    std::swap(factory_result_type_, other->factory_result_type_);
    std::swap(make_item_, other->make_item_);
    std::swap(bonus_item_, other->bonus_item_);
    refund_item_.Swap(&other->refund_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactoryResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactoryResult_descriptor_;
  metadata.reflection = FactoryResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsealBoxReward::kRewardTypeFieldNumber;
const int UnsealBoxReward::kAmountFieldNumber;
const int UnsealBoxReward::kTemplateIdFieldNumber;
const int UnsealBoxReward::kEffectGradeFieldNumber;
const int UnsealBoxReward::kItemFieldNumber;
const int UnsealBoxReward::kTotemFieldNumber;
const int UnsealBoxReward::kAetherFieldNumber;
#endif  // !_MSC_VER

UnsealBoxReward::UnsealBoxReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.UnsealBoxReward)
}

void UnsealBoxReward::InitAsDefaultInstance() {
  item_ = const_cast< ::b2::protocol::commondata::Item*>(&::b2::protocol::commondata::Item::default_instance());
  totem_ = const_cast< ::b2::protocol::commondata::Totem*>(&::b2::protocol::commondata::Totem::default_instance());
  aether_ = const_cast< ::b2::protocol::commondata::Aether*>(&::b2::protocol::commondata::Aether::default_instance());
}

UnsealBoxReward::UnsealBoxReward(const UnsealBoxReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.UnsealBoxReward)
}

void UnsealBoxReward::SharedCtor() {
  _cached_size_ = 0;
  reward_type_ = 1;
  amount_ = 0;
  template_id_ = GOOGLE_LONGLONG(0);
  effect_grade_ = 0;
  item_ = NULL;
  totem_ = NULL;
  aether_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsealBoxReward::~UnsealBoxReward() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.UnsealBoxReward)
  SharedDtor();
}

void UnsealBoxReward::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete totem_;
    delete aether_;
  }
}

void UnsealBoxReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsealBoxReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsealBoxReward_descriptor_;
}

const UnsealBoxReward& UnsealBoxReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

UnsealBoxReward* UnsealBoxReward::default_instance_ = NULL;

UnsealBoxReward* UnsealBoxReward::New() const {
  return new UnsealBoxReward;
}

void UnsealBoxReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnsealBoxReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(amount_, template_id_);
    reward_type_ = 1;
    effect_grade_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::b2::protocol::commondata::Item::Clear();
    }
    if (has_totem()) {
      if (totem_ != NULL) totem_->::b2::protocol::commondata::Totem::Clear();
    }
    if (has_aether()) {
      if (aether_ != NULL) aether_->::b2::protocol::commondata::Aether::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsealBoxReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.UnsealBoxReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.RewardType reward_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::RewardType_IsValid(value)) {
            set_reward_type(static_cast< ::b2::protocol::commondata::RewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_amount;
        break;
      }

      // optional int32 amount = 2;
      case 2: {
        if (tag == 16) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_template_id;
        break;
      }

      // optional int64 template_id = 3;
      case 3: {
        if (tag == 24) {
         parse_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_effect_grade;
        break;
      }

      // optional int32 effect_grade = 4;
      case 4: {
        if (tag == 32) {
         parse_effect_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effect_grade_)));
          set_has_effect_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // optional .b2.protocol.commondata.Item item = 5;
      case 5: {
        if (tag == 42) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_totem;
        break;
      }

      // optional .b2.protocol.commondata.Totem totem = 6;
      case 6: {
        if (tag == 50) {
         parse_totem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_totem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_aether;
        break;
      }

      // optional .b2.protocol.commondata.Aether aether = 7;
      case 7: {
        if (tag == 58) {
         parse_aether:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aether()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.UnsealBoxReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.UnsealBoxReward)
  return false;
#undef DO_
}

void UnsealBoxReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.UnsealBoxReward)
  // required .b2.protocol.commondata.RewardType reward_type = 1;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reward_type(), output);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->amount(), output);
  }

  // optional int64 template_id = 3;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->template_id(), output);
  }

  // optional int32 effect_grade = 4;
  if (has_effect_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->effect_grade(), output);
  }

  // optional .b2.protocol.commondata.Item item = 5;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(), output);
  }

  // optional .b2.protocol.commondata.Totem totem = 6;
  if (has_totem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->totem(), output);
  }

  // optional .b2.protocol.commondata.Aether aether = 7;
  if (has_aether()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->aether(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.UnsealBoxReward)
}

::google::protobuf::uint8* UnsealBoxReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.UnsealBoxReward)
  // required .b2.protocol.commondata.RewardType reward_type = 1;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reward_type(), target);
  }

  // optional int32 amount = 2;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->amount(), target);
  }

  // optional int64 template_id = 3;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->template_id(), target);
  }

  // optional int32 effect_grade = 4;
  if (has_effect_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->effect_grade(), target);
  }

  // optional .b2.protocol.commondata.Item item = 5;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(), target);
  }

  // optional .b2.protocol.commondata.Totem totem = 6;
  if (has_totem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->totem(), target);
  }

  // optional .b2.protocol.commondata.Aether aether = 7;
  if (has_aether()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->aether(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.UnsealBoxReward)
  return target;
}

int UnsealBoxReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.RewardType reward_type = 1;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // optional int32 amount = 2;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int64 template_id = 3;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->template_id());
    }

    // optional int32 effect_grade = 4;
    if (has_effect_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effect_grade());
    }

    // optional .b2.protocol.commondata.Item item = 5;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .b2.protocol.commondata.Totem totem = 6;
    if (has_totem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->totem());
    }

    // optional .b2.protocol.commondata.Aether aether = 7;
    if (has_aether()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aether());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsealBoxReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsealBoxReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsealBoxReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsealBoxReward::MergeFrom(const UnsealBoxReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_effect_grade()) {
      set_effect_grade(from.effect_grade());
    }
    if (from.has_item()) {
      mutable_item()->::b2::protocol::commondata::Item::MergeFrom(from.item());
    }
    if (from.has_totem()) {
      mutable_totem()->::b2::protocol::commondata::Totem::MergeFrom(from.totem());
    }
    if (from.has_aether()) {
      mutable_aether()->::b2::protocol::commondata::Aether::MergeFrom(from.aether());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsealBoxReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsealBoxReward::CopyFrom(const UnsealBoxReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsealBoxReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  if (has_totem()) {
    if (!this->totem().IsInitialized()) return false;
  }
  if (has_aether()) {
    if (!this->aether().IsInitialized()) return false;
  }
  return true;
}

void UnsealBoxReward::Swap(UnsealBoxReward* other) {
  if (other != this) {
    std::swap(reward_type_, other->reward_type_);
    std::swap(amount_, other->amount_);
    std::swap(template_id_, other->template_id_);
    std::swap(effect_grade_, other->effect_grade_);
    std::swap(item_, other->item_);
    std::swap(totem_, other->totem_);
    std::swap(aether_, other->aether_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsealBoxReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsealBoxReward_descriptor_;
  metadata.reflection = UnsealBoxReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldLocation::kChannelEndpointFieldNumber;
const int WorldLocation::kWorldIdFieldNumber;
#endif  // !_MSC_VER

WorldLocation::WorldLocation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.commondata.WorldLocation)
}

void WorldLocation::InitAsDefaultInstance() {
  channel_endpoint_ = const_cast< ::b2::protocol::commondata::Endpoint*>(&::b2::protocol::commondata::Endpoint::default_instance());
}

WorldLocation::WorldLocation(const WorldLocation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.commondata.WorldLocation)
}

void WorldLocation::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_endpoint_ = NULL;
  world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldLocation::~WorldLocation() {
  // @@protoc_insertion_point(destructor:b2.protocol.commondata.WorldLocation)
  SharedDtor();
}

void WorldLocation::SharedDtor() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (this != default_instance_) {
    delete channel_endpoint_;
  }
}

void WorldLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldLocation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldLocation_descriptor_;
}

const WorldLocation& WorldLocation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CommonData_2eproto();
  return *default_instance_;
}

WorldLocation* WorldLocation::default_instance_ = NULL;

WorldLocation* WorldLocation::New() const {
  return new WorldLocation;
}

void WorldLocation::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_endpoint()) {
      if (channel_endpoint_ != NULL) channel_endpoint_->::b2::protocol::commondata::Endpoint::Clear();
    }
    if (has_world_id()) {
      if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        world_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.commondata.WorldLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channel_endpoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_world_id;
        break;
      }

      // required string world_id = 2;
      case 2: {
        if (tag == 18) {
         parse_world_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world_id().data(), this->world_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "world_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.commondata.WorldLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.commondata.WorldLocation)
  return false;
#undef DO_
}

void WorldLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.commondata.WorldLocation)
  // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
  if (has_channel_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channel_endpoint(), output);
  }

  // required string world_id = 2;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->world_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.commondata.WorldLocation)
}

::google::protobuf::uint8* WorldLocation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.commondata.WorldLocation)
  // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
  if (has_channel_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->channel_endpoint(), target);
  }

  // required string world_id = 2;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->world_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.commondata.WorldLocation)
  return target;
}

int WorldLocation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Endpoint channel_endpoint = 1;
    if (has_channel_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channel_endpoint());
    }

    // required string world_id = 2;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->world_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldLocation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldLocation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldLocation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldLocation::MergeFrom(const WorldLocation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_endpoint()) {
      mutable_channel_endpoint()->::b2::protocol::commondata::Endpoint::MergeFrom(from.channel_endpoint());
    }
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldLocation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldLocation::CopyFrom(const WorldLocation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldLocation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_channel_endpoint()) {
    if (!this->channel_endpoint().IsInitialized()) return false;
  }
  return true;
}

void WorldLocation::Swap(WorldLocation* other) {
  if (other != this) {
    std::swap(channel_endpoint_, other->channel_endpoint_);
    std::swap(world_id_, other->world_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldLocation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldLocation_descriptor_;
  metadata.reflection = WorldLocation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commondata
}  // namespace protocol
}  // namespace b2

// @@protoc_insertion_point(global_scope)
