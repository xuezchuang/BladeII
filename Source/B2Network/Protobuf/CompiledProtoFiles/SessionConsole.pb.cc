// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SessionConsole.proto




#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SessionConsole.pb.h"



#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#pragma warning(disable:4125)
#pragma warning(disable:4996)

#ifdef _SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING
#pragma message("_SILENCE_CXX17_ITERATOR_BASE_CLASS_DEPRECATION_WARNING is defined!")
#else
#pragma message("NOT DEFINED")
#endif


namespace b2 {
namespace protocol {
namespace session {

namespace {

const ::google::protobuf::Descriptor* DeleteAccountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteAccountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteAccountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteAccountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddItemToInventoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddItemToInventoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddItemToInventoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddItemToInventoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseCashPaidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseCashPaidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseCashPaidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseCashPaidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseDarkCrystalPaidRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseDarkCrystalPaidRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseDarkCrystalPaidResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseDarkCrystalPaidResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseMoneyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseMoneyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseMoneyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseMoneyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetItemLevelupRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetItemLevelupRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetItemLevelupResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetItemLevelupResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCharacterLevelExpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCharacterLevelExpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCharacterLevelExpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCharacterLevelExpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBladePointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBladePointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetBladePointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetBladePointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseRankPromotionPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseRankPromotionPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseRankPromotionPointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseRankPromotionPointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddMailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddMailResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeRankingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeRankingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeRankingResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeRankingResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceClearStageRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceClearStageRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceClearStageResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceClearStageResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetQuestStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetQuestStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetQuestStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetQuestStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseHeroPieceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseHeroPieceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseHeroPieceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseHeroPieceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseSocialPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseSocialPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncreaseSocialPointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncreaseSocialPointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceClearHeroTowerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceClearHeroTowerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceClearHeroTowerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceClearHeroTowerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareSweepHeroTowerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareSweepHeroTowerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareSweepHeroTowerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareSweepHeroTowerResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceStartCounterDungeonRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceStartCounterDungeonRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceStartCounterDungeonResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceStartCounterDungeonResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareGuildRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareGuildRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareGuildResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareGuildResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildBattleStateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildBattleStateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildBattleStateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildBattleStateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetAttendanceTimeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetAttendanceTimeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetAttendanceTimeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetAttendanceTimeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetEventAttendanceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetEventAttendanceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetEventAttendanceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetEventAttendanceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetDailyPlayTimeRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetDailyPlayTimeRecordRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetDailyPlayTimeRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetDailyPlayTimeRecordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeQuestIdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeQuestIdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeQuestIdResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeQuestIdResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeQuestCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeQuestCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeQuestCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeQuestCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAetherToInventoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAetherToInventoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAetherToInventoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAetherToInventoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceUpdateAetherRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceUpdateAetherRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForceUpdateAetherResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForceUpdateAetherResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrepareFriendRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareFriendRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PrepareFriendRequest_JOB_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PrepareFriendResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrepareFriendResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildLevelExpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildLevelExpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetGuildLevelExpResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetGuildLevelExpResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetTeamMatchPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetTeamMatchPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetTeamMatchPointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetTeamMatchPointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCharacterRankInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCharacterRankInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCharacterRankInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCharacterRankInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCharacterRelicRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCharacterRelicRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetCharacterRelicResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetCharacterRelicResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTutorialProgressRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTutorialProgressRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTutorialProgressResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTutorialProgressResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetMatchSeasonRewardRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMatchSeasonRewardRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetMatchSeasonRewardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetMatchSeasonRewardResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetStageBoostCountRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetStageBoostCountRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetStageBoostCountResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetStageBoostCountResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetPvPMatchPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetPvPMatchPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetPvPMatchPointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetPvPMatchPointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipMatchTutorialRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipMatchTutorialRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkipMatchTutorialResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkipMatchTutorialResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDebugModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDebugModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDebugModeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDebugModeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCostumeToInventoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCostumeToInventoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddCostumeToInventoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddCostumeToInventoryResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTotemToInventoryRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTotemToInventoryRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTotemToInventoryResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTotemToInventoryResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SessionConsole_2eproto() {
  protobuf_AddDesc_SessionConsole_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SessionConsole.proto");
  GOOGLE_CHECK(file != NULL);
  DeleteAccountRequest_descriptor_ = file->message_type(0);
  static const int DeleteAccountRequest_offsets_[1] = {
  };
  DeleteAccountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteAccountRequest_descriptor_,
      DeleteAccountRequest::default_instance_,
      DeleteAccountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAccountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAccountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteAccountRequest));
  DeleteAccountResponse_descriptor_ = file->message_type(1);
  static const int DeleteAccountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAccountResponse, result_),
  };
  DeleteAccountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteAccountResponse_descriptor_,
      DeleteAccountResponse::default_instance_,
      DeleteAccountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAccountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAccountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteAccountResponse));
  AddItemToInventoryRequest_descriptor_ = file->message_type(2);
  static const int AddItemToInventoryRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryRequest, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryRequest, item_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryRequest, item_amount_),
  };
  AddItemToInventoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddItemToInventoryRequest_descriptor_,
      AddItemToInventoryRequest::default_instance_,
      AddItemToInventoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddItemToInventoryRequest));
  AddItemToInventoryResponse_descriptor_ = file->message_type(3);
  static const int AddItemToInventoryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryResponse, items_),
  };
  AddItemToInventoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddItemToInventoryResponse_descriptor_,
      AddItemToInventoryResponse::default_instance_,
      AddItemToInventoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddItemToInventoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddItemToInventoryResponse));
  IncreaseCashPaidRequest_descriptor_ = file->message_type(4);
  static const int IncreaseCashPaidRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidRequest, cash_paid_),
  };
  IncreaseCashPaidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseCashPaidRequest_descriptor_,
      IncreaseCashPaidRequest::default_instance_,
      IncreaseCashPaidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseCashPaidRequest));
  IncreaseCashPaidResponse_descriptor_ = file->message_type(5);
  static const int IncreaseCashPaidResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidResponse, cash_paid_),
  };
  IncreaseCashPaidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseCashPaidResponse_descriptor_,
      IncreaseCashPaidResponse::default_instance_,
      IncreaseCashPaidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseCashPaidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseCashPaidResponse));
  IncreaseDarkCrystalPaidRequest_descriptor_ = file->message_type(6);
  static const int IncreaseDarkCrystalPaidRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidRequest, dark_crystal_paid_),
  };
  IncreaseDarkCrystalPaidRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseDarkCrystalPaidRequest_descriptor_,
      IncreaseDarkCrystalPaidRequest::default_instance_,
      IncreaseDarkCrystalPaidRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseDarkCrystalPaidRequest));
  IncreaseDarkCrystalPaidResponse_descriptor_ = file->message_type(7);
  static const int IncreaseDarkCrystalPaidResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidResponse, dark_crystal_paid_),
  };
  IncreaseDarkCrystalPaidResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseDarkCrystalPaidResponse_descriptor_,
      IncreaseDarkCrystalPaidResponse::default_instance_,
      IncreaseDarkCrystalPaidResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseDarkCrystalPaidResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseDarkCrystalPaidResponse));
  IncreaseMoneyRequest_descriptor_ = file->message_type(8);
  static const int IncreaseMoneyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyRequest, money_),
  };
  IncreaseMoneyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseMoneyRequest_descriptor_,
      IncreaseMoneyRequest::default_instance_,
      IncreaseMoneyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseMoneyRequest));
  IncreaseMoneyResponse_descriptor_ = file->message_type(9);
  static const int IncreaseMoneyResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyResponse, money_),
  };
  IncreaseMoneyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseMoneyResponse_descriptor_,
      IncreaseMoneyResponse::default_instance_,
      IncreaseMoneyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseMoneyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseMoneyResponse));
  SetItemLevelupRequest_descriptor_ = file->message_type(10);
  static const int SetItemLevelupRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupRequest, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupRequest, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupRequest, enhance_level_),
  };
  SetItemLevelupRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetItemLevelupRequest_descriptor_,
      SetItemLevelupRequest::default_instance_,
      SetItemLevelupRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetItemLevelupRequest));
  SetItemLevelupResponse_descriptor_ = file->message_type(11);
  static const int SetItemLevelupResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupResponse, item_),
  };
  SetItemLevelupResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetItemLevelupResponse_descriptor_,
      SetItemLevelupResponse::default_instance_,
      SetItemLevelupResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetItemLevelupResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetItemLevelupResponse));
  SetCharacterLevelExpRequest_descriptor_ = file->message_type(12);
  static const int SetCharacterLevelExpRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpRequest, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpRequest, exp_),
  };
  SetCharacterLevelExpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCharacterLevelExpRequest_descriptor_,
      SetCharacterLevelExpRequest::default_instance_,
      SetCharacterLevelExpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCharacterLevelExpRequest));
  SetCharacterLevelExpResponse_descriptor_ = file->message_type(13);
  static const int SetCharacterLevelExpResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpResponse, character_),
  };
  SetCharacterLevelExpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCharacterLevelExpResponse_descriptor_,
      SetCharacterLevelExpResponse::default_instance_,
      SetCharacterLevelExpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterLevelExpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCharacterLevelExpResponse));
  SetBladePointRequest_descriptor_ = file->message_type(14);
  static const int SetBladePointRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointRequest, blade_point_),
  };
  SetBladePointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBladePointRequest_descriptor_,
      SetBladePointRequest::default_instance_,
      SetBladePointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBladePointRequest));
  SetBladePointResponse_descriptor_ = file->message_type(15);
  static const int SetBladePointResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointResponse, blade_point_),
  };
  SetBladePointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetBladePointResponse_descriptor_,
      SetBladePointResponse::default_instance_,
      SetBladePointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBladePointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetBladePointResponse));
  IncreaseRankPromotionPointRequest_descriptor_ = file->message_type(16);
  static const int IncreaseRankPromotionPointRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointRequest, rank_promotion_point_),
  };
  IncreaseRankPromotionPointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseRankPromotionPointRequest_descriptor_,
      IncreaseRankPromotionPointRequest::default_instance_,
      IncreaseRankPromotionPointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseRankPromotionPointRequest));
  IncreaseRankPromotionPointResponse_descriptor_ = file->message_type(17);
  static const int IncreaseRankPromotionPointResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointResponse, rank_promotion_point_),
  };
  IncreaseRankPromotionPointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseRankPromotionPointResponse_descriptor_,
      IncreaseRankPromotionPointResponse::default_instance_,
      IncreaseRankPromotionPointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseRankPromotionPointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseRankPromotionPointResponse));
  AddMailRequest_descriptor_ = file->message_type(18);
  static const int AddMailRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, mail_category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, source_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, sender_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, item_template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, general_lottery_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, fixed_grade_lottery_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, selective_lottery_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, selective_item_lottery_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, prefix_selective_lottery_id_),
  };
  AddMailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMailRequest_descriptor_,
      AddMailRequest::default_instance_,
      AddMailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMailRequest));
  AddMailResponse_descriptor_ = file->message_type(19);
  static const int AddMailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResponse, mail_id_),
  };
  AddMailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddMailResponse_descriptor_,
      AddMailResponse::default_instance_,
      AddMailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMailResponse));
  MakeRankingRequest_descriptor_ = file->message_type(20);
  static const int MakeRankingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingRequest, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingRequest, ranking_),
  };
  MakeRankingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeRankingRequest_descriptor_,
      MakeRankingRequest::default_instance_,
      MakeRankingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeRankingRequest));
  MakeRankingResponse_descriptor_ = file->message_type(21);
  static const int MakeRankingResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingResponse, result_),
  };
  MakeRankingResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeRankingResponse_descriptor_,
      MakeRankingResponse::default_instance_,
      MakeRankingResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeRankingResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeRankingResponse));
  ForceClearStageRequest_descriptor_ = file->message_type(22);
  static const int ForceClearStageRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearStageRequest, stage_id_),
  };
  ForceClearStageRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceClearStageRequest_descriptor_,
      ForceClearStageRequest::default_instance_,
      ForceClearStageRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearStageRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearStageRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceClearStageRequest));
  ForceClearStageResponse_descriptor_ = file->message_type(23);
  static const int ForceClearStageResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearStageResponse, result_),
  };
  ForceClearStageResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceClearStageResponse_descriptor_,
      ForceClearStageResponse::default_instance_,
      ForceClearStageResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearStageResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearStageResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceClearStageResponse));
  SetQuestStateRequest_descriptor_ = file->message_type(24);
  static const int SetQuestStateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateRequest, quest_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateRequest, quest_state_),
  };
  SetQuestStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetQuestStateRequest_descriptor_,
      SetQuestStateRequest::default_instance_,
      SetQuestStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetQuestStateRequest));
  SetQuestStateResponse_descriptor_ = file->message_type(25);
  static const int SetQuestStateResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateResponse, result_),
  };
  SetQuestStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetQuestStateResponse_descriptor_,
      SetQuestStateResponse::default_instance_,
      SetQuestStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetQuestStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetQuestStateResponse));
  IncreaseHeroPieceRequest_descriptor_ = file->message_type(26);
  static const int IncreaseHeroPieceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceRequest, hero_piece_),
  };
  IncreaseHeroPieceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseHeroPieceRequest_descriptor_,
      IncreaseHeroPieceRequest::default_instance_,
      IncreaseHeroPieceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseHeroPieceRequest));
  IncreaseHeroPieceResponse_descriptor_ = file->message_type(27);
  static const int IncreaseHeroPieceResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceResponse, current_hero_piece_),
  };
  IncreaseHeroPieceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseHeroPieceResponse_descriptor_,
      IncreaseHeroPieceResponse::default_instance_,
      IncreaseHeroPieceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseHeroPieceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseHeroPieceResponse));
  IncreaseSocialPointRequest_descriptor_ = file->message_type(28);
  static const int IncreaseSocialPointRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointRequest, social_point_),
  };
  IncreaseSocialPointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseSocialPointRequest_descriptor_,
      IncreaseSocialPointRequest::default_instance_,
      IncreaseSocialPointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseSocialPointRequest));
  IncreaseSocialPointResponse_descriptor_ = file->message_type(29);
  static const int IncreaseSocialPointResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointResponse, current_social_point_),
  };
  IncreaseSocialPointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncreaseSocialPointResponse_descriptor_,
      IncreaseSocialPointResponse::default_instance_,
      IncreaseSocialPointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncreaseSocialPointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncreaseSocialPointResponse));
  ForceClearHeroTowerRequest_descriptor_ = file->message_type(30);
  static const int ForceClearHeroTowerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerRequest, floor_),
  };
  ForceClearHeroTowerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceClearHeroTowerRequest_descriptor_,
      ForceClearHeroTowerRequest::default_instance_,
      ForceClearHeroTowerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceClearHeroTowerRequest));
  ForceClearHeroTowerResponse_descriptor_ = file->message_type(31);
  static const int ForceClearHeroTowerResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, start_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, max_clear_floor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, main_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, tag_character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, daily_try_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, daily_max_free_try_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, daily_left_free_try_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, current_hero_piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, is_sweep_),
  };
  ForceClearHeroTowerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceClearHeroTowerResponse_descriptor_,
      ForceClearHeroTowerResponse::default_instance_,
      ForceClearHeroTowerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceClearHeroTowerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceClearHeroTowerResponse));
  PrepareSweepHeroTowerRequest_descriptor_ = file->message_type(32);
  static const int PrepareSweepHeroTowerRequest_offsets_[1] = {
  };
  PrepareSweepHeroTowerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareSweepHeroTowerRequest_descriptor_,
      PrepareSweepHeroTowerRequest::default_instance_,
      PrepareSweepHeroTowerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSweepHeroTowerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSweepHeroTowerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareSweepHeroTowerRequest));
  PrepareSweepHeroTowerResponse_descriptor_ = file->message_type(33);
  static const int PrepareSweepHeroTowerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSweepHeroTowerResponse, result_),
  };
  PrepareSweepHeroTowerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareSweepHeroTowerResponse_descriptor_,
      PrepareSweepHeroTowerResponse::default_instance_,
      PrepareSweepHeroTowerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSweepHeroTowerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareSweepHeroTowerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareSweepHeroTowerResponse));
  ForceStartCounterDungeonRequest_descriptor_ = file->message_type(34);
  static const int ForceStartCounterDungeonRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonRequest, dungeon_id_),
  };
  ForceStartCounterDungeonRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceStartCounterDungeonRequest_descriptor_,
      ForceStartCounterDungeonRequest::default_instance_,
      ForceStartCounterDungeonRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceStartCounterDungeonRequest));
  ForceStartCounterDungeonResponse_descriptor_ = file->message_type(35);
  static const int ForceStartCounterDungeonResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonResponse, play_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonResponse, drop_gold_),
  };
  ForceStartCounterDungeonResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceStartCounterDungeonResponse_descriptor_,
      ForceStartCounterDungeonResponse::default_instance_,
      ForceStartCounterDungeonResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceStartCounterDungeonResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceStartCounterDungeonResponse));
  PrepareGuildRequest_descriptor_ = file->message_type(36);
  static const int PrepareGuildRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildRequest, member_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildRequest, add_guild_count_),
  };
  PrepareGuildRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareGuildRequest_descriptor_,
      PrepareGuildRequest::default_instance_,
      PrepareGuildRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareGuildRequest));
  PrepareGuildResponse_descriptor_ = file->message_type(37);
  static const int PrepareGuildResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildResponse, result_),
  };
  PrepareGuildResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareGuildResponse_descriptor_,
      PrepareGuildResponse::default_instance_,
      PrepareGuildResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareGuildResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareGuildResponse));
  SetGuildBattleStateRequest_descriptor_ = file->message_type(38);
  static const int SetGuildBattleStateRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateRequest, is_new_season_),
  };
  SetGuildBattleStateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildBattleStateRequest_descriptor_,
      SetGuildBattleStateRequest::default_instance_,
      SetGuildBattleStateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildBattleStateRequest));
  SetGuildBattleStateResponse_descriptor_ = file->message_type(39);
  static const int SetGuildBattleStateResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateResponse, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateResponse, state_message_),
  };
  SetGuildBattleStateResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildBattleStateResponse_descriptor_,
      SetGuildBattleStateResponse::default_instance_,
      SetGuildBattleStateResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildBattleStateResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildBattleStateResponse));
  ResetAttendanceTimeRequest_descriptor_ = file->message_type(40);
  static const int ResetAttendanceTimeRequest_offsets_[1] = {
  };
  ResetAttendanceTimeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetAttendanceTimeRequest_descriptor_,
      ResetAttendanceTimeRequest::default_instance_,
      ResetAttendanceTimeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAttendanceTimeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAttendanceTimeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetAttendanceTimeRequest));
  ResetAttendanceTimeResponse_descriptor_ = file->message_type(41);
  static const int ResetAttendanceTimeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAttendanceTimeResponse, result_),
  };
  ResetAttendanceTimeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetAttendanceTimeResponse_descriptor_,
      ResetAttendanceTimeResponse::default_instance_,
      ResetAttendanceTimeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAttendanceTimeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAttendanceTimeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetAttendanceTimeResponse));
  ResetEventAttendanceRequest_descriptor_ = file->message_type(42);
  static const int ResetEventAttendanceRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEventAttendanceRequest, is_only_attendance_time_),
  };
  ResetEventAttendanceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetEventAttendanceRequest_descriptor_,
      ResetEventAttendanceRequest::default_instance_,
      ResetEventAttendanceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEventAttendanceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEventAttendanceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetEventAttendanceRequest));
  ResetEventAttendanceResponse_descriptor_ = file->message_type(43);
  static const int ResetEventAttendanceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEventAttendanceResponse, result_),
  };
  ResetEventAttendanceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetEventAttendanceResponse_descriptor_,
      ResetEventAttendanceResponse::default_instance_,
      ResetEventAttendanceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEventAttendanceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetEventAttendanceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetEventAttendanceResponse));
  ResetDailyPlayTimeRecordRequest_descriptor_ = file->message_type(44);
  static const int ResetDailyPlayTimeRecordRequest_offsets_[1] = {
  };
  ResetDailyPlayTimeRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetDailyPlayTimeRecordRequest_descriptor_,
      ResetDailyPlayTimeRecordRequest::default_instance_,
      ResetDailyPlayTimeRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetDailyPlayTimeRecordRequest));
  ResetDailyPlayTimeRecordResponse_descriptor_ = file->message_type(45);
  static const int ResetDailyPlayTimeRecordResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordResponse, daily_play_time_in_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordResponse, daily_play_time_reward_index_),
  };
  ResetDailyPlayTimeRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetDailyPlayTimeRecordResponse_descriptor_,
      ResetDailyPlayTimeRecordResponse::default_instance_,
      ResetDailyPlayTimeRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetDailyPlayTimeRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetDailyPlayTimeRecordResponse));
  ChangeQuestIdRequest_descriptor_ = file->message_type(46);
  static const int ChangeQuestIdRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdRequest, slot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdRequest, quest_id_),
  };
  ChangeQuestIdRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeQuestIdRequest_descriptor_,
      ChangeQuestIdRequest::default_instance_,
      ChangeQuestIdRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeQuestIdRequest));
  ChangeQuestIdResponse_descriptor_ = file->message_type(47);
  static const int ChangeQuestIdResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdResponse, result_),
  };
  ChangeQuestIdResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeQuestIdResponse_descriptor_,
      ChangeQuestIdResponse::default_instance_,
      ChangeQuestIdResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestIdResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeQuestIdResponse));
  ChangeQuestCountRequest_descriptor_ = file->message_type(48);
  static const int ChangeQuestCountRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountRequest, slot_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountRequest, count_),
  };
  ChangeQuestCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeQuestCountRequest_descriptor_,
      ChangeQuestCountRequest::default_instance_,
      ChangeQuestCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeQuestCountRequest));
  ChangeQuestCountResponse_descriptor_ = file->message_type(49);
  static const int ChangeQuestCountResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountResponse, result_),
  };
  ChangeQuestCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeQuestCountResponse_descriptor_,
      ChangeQuestCountResponse::default_instance_,
      ChangeQuestCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeQuestCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeQuestCountResponse));
  DeleteItemRequest_descriptor_ = file->message_type(50);
  static const int DeleteItemRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemRequest, item_id_),
  };
  DeleteItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteItemRequest_descriptor_,
      DeleteItemRequest::default_instance_,
      DeleteItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteItemRequest));
  DeleteItemResponse_descriptor_ = file->message_type(51);
  static const int DeleteItemResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemResponse, item_id_),
  };
  DeleteItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteItemResponse_descriptor_,
      DeleteItemResponse::default_instance_,
      DeleteItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteItemResponse));
  AddAetherToInventoryRequest_descriptor_ = file->message_type(52);
  static const int AddAetherToInventoryRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryRequest, aether_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryRequest, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryRequest, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryRequest, tier_type_),
  };
  AddAetherToInventoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAetherToInventoryRequest_descriptor_,
      AddAetherToInventoryRequest::default_instance_,
      AddAetherToInventoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAetherToInventoryRequest));
  AddAetherToInventoryResponse_descriptor_ = file->message_type(53);
  static const int AddAetherToInventoryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryResponse, aether_),
  };
  AddAetherToInventoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAetherToInventoryResponse_descriptor_,
      AddAetherToInventoryResponse::default_instance_,
      AddAetherToInventoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAetherToInventoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAetherToInventoryResponse));
  ForceUpdateAetherRequest_descriptor_ = file->message_type(54);
  static const int ForceUpdateAetherRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherRequest, aether_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherRequest, grade_),
  };
  ForceUpdateAetherRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceUpdateAetherRequest_descriptor_,
      ForceUpdateAetherRequest::default_instance_,
      ForceUpdateAetherRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceUpdateAetherRequest));
  ForceUpdateAetherResponse_descriptor_ = file->message_type(55);
  static const int ForceUpdateAetherResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherResponse, updated_aether_),
  };
  ForceUpdateAetherResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForceUpdateAetherResponse_descriptor_,
      ForceUpdateAetherResponse::default_instance_,
      ForceUpdateAetherResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForceUpdateAetherResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForceUpdateAetherResponse));
  PrepareFriendRequest_descriptor_ = file->message_type(56);
  static const int PrepareFriendRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendRequest, friend_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendRequest, job_type_),
  };
  PrepareFriendRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareFriendRequest_descriptor_,
      PrepareFriendRequest::default_instance_,
      PrepareFriendRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareFriendRequest));
  PrepareFriendRequest_JOB_descriptor_ = PrepareFriendRequest_descriptor_->enum_type(0);
  PrepareFriendResponse_descriptor_ = file->message_type(57);
  static const int PrepareFriendResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendResponse, new_friend_count_),
  };
  PrepareFriendResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrepareFriendResponse_descriptor_,
      PrepareFriendResponse::default_instance_,
      PrepareFriendResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrepareFriendResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrepareFriendResponse));
  SetGuildLevelExpRequest_descriptor_ = file->message_type(58);
  static const int SetGuildLevelExpRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpRequest, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpRequest, exp_),
  };
  SetGuildLevelExpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildLevelExpRequest_descriptor_,
      SetGuildLevelExpRequest::default_instance_,
      SetGuildLevelExpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildLevelExpRequest));
  SetGuildLevelExpResponse_descriptor_ = file->message_type(59);
  static const int SetGuildLevelExpResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpResponse, guild_),
  };
  SetGuildLevelExpResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetGuildLevelExpResponse_descriptor_,
      SetGuildLevelExpResponse::default_instance_,
      SetGuildLevelExpResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetGuildLevelExpResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetGuildLevelExpResponse));
  ResetTeamMatchPointRequest_descriptor_ = file->message_type(60);
  static const int ResetTeamMatchPointRequest_offsets_[1] = {
  };
  ResetTeamMatchPointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetTeamMatchPointRequest_descriptor_,
      ResetTeamMatchPointRequest::default_instance_,
      ResetTeamMatchPointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTeamMatchPointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTeamMatchPointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetTeamMatchPointRequest));
  ResetTeamMatchPointResponse_descriptor_ = file->message_type(61);
  static const int ResetTeamMatchPointResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTeamMatchPointResponse, result_),
  };
  ResetTeamMatchPointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetTeamMatchPointResponse_descriptor_,
      ResetTeamMatchPointResponse::default_instance_,
      ResetTeamMatchPointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTeamMatchPointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetTeamMatchPointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetTeamMatchPointResponse));
  SetCharacterRankInfoRequest_descriptor_ = file->message_type(62);
  static const int SetCharacterRankInfoRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoRequest, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoRequest, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoRequest, node_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoRequest, node_state_),
  };
  SetCharacterRankInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCharacterRankInfoRequest_descriptor_,
      SetCharacterRankInfoRequest::default_instance_,
      SetCharacterRankInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCharacterRankInfoRequest));
  SetCharacterRankInfoResponse_descriptor_ = file->message_type(63);
  static const int SetCharacterRankInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoResponse, character_),
  };
  SetCharacterRankInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCharacterRankInfoResponse_descriptor_,
      SetCharacterRankInfoResponse::default_instance_,
      SetCharacterRankInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRankInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCharacterRankInfoResponse));
  SetCharacterRelicRequest_descriptor_ = file->message_type(64);
  static const int SetCharacterRelicRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicRequest, character_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicRequest, relic_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicRequest, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicRequest, enhance_level_),
  };
  SetCharacterRelicRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCharacterRelicRequest_descriptor_,
      SetCharacterRelicRequest::default_instance_,
      SetCharacterRelicRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCharacterRelicRequest));
  SetCharacterRelicResponse_descriptor_ = file->message_type(65);
  static const int SetCharacterRelicResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicResponse, relic_),
  };
  SetCharacterRelicResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetCharacterRelicResponse_descriptor_,
      SetCharacterRelicResponse::default_instance_,
      SetCharacterRelicResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetCharacterRelicResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetCharacterRelicResponse));
  SetTutorialProgressRequest_descriptor_ = file->message_type(66);
  static const int SetTutorialProgressRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressRequest, tutorial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressRequest, is_item_prepared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressRequest, is_lottery_drawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressRequest, is_finished_),
  };
  SetTutorialProgressRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTutorialProgressRequest_descriptor_,
      SetTutorialProgressRequest::default_instance_,
      SetTutorialProgressRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTutorialProgressRequest));
  SetTutorialProgressResponse_descriptor_ = file->message_type(67);
  static const int SetTutorialProgressResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, tutorial_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, is_item_prepared_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, is_lottery_drawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, is_finished_),
  };
  SetTutorialProgressResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTutorialProgressResponse_descriptor_,
      SetTutorialProgressResponse::default_instance_,
      SetTutorialProgressResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTutorialProgressResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTutorialProgressResponse));
  SetMatchSeasonRewardRequest_descriptor_ = file->message_type(68);
  static const int SetMatchSeasonRewardRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardRequest, match_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardRequest, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardRequest, point_),
  };
  SetMatchSeasonRewardRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetMatchSeasonRewardRequest_descriptor_,
      SetMatchSeasonRewardRequest::default_instance_,
      SetMatchSeasonRewardRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetMatchSeasonRewardRequest));
  SetMatchSeasonRewardResponse_descriptor_ = file->message_type(69);
  static const int SetMatchSeasonRewardResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardResponse, result_),
  };
  SetMatchSeasonRewardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetMatchSeasonRewardResponse_descriptor_,
      SetMatchSeasonRewardResponse::default_instance_,
      SetMatchSeasonRewardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetMatchSeasonRewardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetMatchSeasonRewardResponse));
  SetStageBoostCountRequest_descriptor_ = file->message_type(70);
  static const int SetStageBoostCountRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountRequest, stage_boost_ticket_),
  };
  SetStageBoostCountRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetStageBoostCountRequest_descriptor_,
      SetStageBoostCountRequest::default_instance_,
      SetStageBoostCountRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetStageBoostCountRequest));
  SetStageBoostCountResponse_descriptor_ = file->message_type(71);
  static const int SetStageBoostCountResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountResponse, stage_boost_ticket_),
  };
  SetStageBoostCountResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetStageBoostCountResponse_descriptor_,
      SetStageBoostCountResponse::default_instance_,
      SetStageBoostCountResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetStageBoostCountResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetStageBoostCountResponse));
  ResetPvPMatchPointRequest_descriptor_ = file->message_type(72);
  static const int ResetPvPMatchPointRequest_offsets_[1] = {
  };
  ResetPvPMatchPointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetPvPMatchPointRequest_descriptor_,
      ResetPvPMatchPointRequest::default_instance_,
      ResetPvPMatchPointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvPMatchPointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvPMatchPointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetPvPMatchPointRequest));
  ResetPvPMatchPointResponse_descriptor_ = file->message_type(73);
  static const int ResetPvPMatchPointResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvPMatchPointResponse, result_),
  };
  ResetPvPMatchPointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetPvPMatchPointResponse_descriptor_,
      ResetPvPMatchPointResponse::default_instance_,
      ResetPvPMatchPointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvPMatchPointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetPvPMatchPointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetPvPMatchPointResponse));
  SkipMatchTutorialRequest_descriptor_ = file->message_type(74);
  static const int SkipMatchTutorialRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipMatchTutorialRequest, match_type_),
  };
  SkipMatchTutorialRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkipMatchTutorialRequest_descriptor_,
      SkipMatchTutorialRequest::default_instance_,
      SkipMatchTutorialRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipMatchTutorialRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipMatchTutorialRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkipMatchTutorialRequest));
  SkipMatchTutorialResponse_descriptor_ = file->message_type(75);
  static const int SkipMatchTutorialResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipMatchTutorialResponse, result_),
  };
  SkipMatchTutorialResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkipMatchTutorialResponse_descriptor_,
      SkipMatchTutorialResponse::default_instance_,
      SkipMatchTutorialResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipMatchTutorialResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkipMatchTutorialResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkipMatchTutorialResponse));
  SetDebugModeRequest_descriptor_ = file->message_type(76);
  static const int SetDebugModeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDebugModeRequest, skip_keep_alive_check_),
  };
  SetDebugModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDebugModeRequest_descriptor_,
      SetDebugModeRequest::default_instance_,
      SetDebugModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDebugModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDebugModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDebugModeRequest));
  SetDebugModeResponse_descriptor_ = file->message_type(77);
  static const int SetDebugModeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDebugModeResponse, result_),
  };
  SetDebugModeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDebugModeResponse_descriptor_,
      SetDebugModeResponse::default_instance_,
      SetDebugModeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDebugModeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDebugModeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDebugModeResponse));
  AddCostumeToInventoryRequest_descriptor_ = file->message_type(78);
  static const int AddCostumeToInventoryRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryRequest, template_id_),
  };
  AddCostumeToInventoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCostumeToInventoryRequest_descriptor_,
      AddCostumeToInventoryRequest::default_instance_,
      AddCostumeToInventoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCostumeToInventoryRequest));
  AddCostumeToInventoryResponse_descriptor_ = file->message_type(79);
  static const int AddCostumeToInventoryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryResponse, costume_),
  };
  AddCostumeToInventoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddCostumeToInventoryResponse_descriptor_,
      AddCostumeToInventoryResponse::default_instance_,
      AddCostumeToInventoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCostumeToInventoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddCostumeToInventoryResponse));
  AddTotemToInventoryRequest_descriptor_ = file->message_type(80);
  static const int AddTotemToInventoryRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryRequest, template_id_),
  };
  AddTotemToInventoryRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTotemToInventoryRequest_descriptor_,
      AddTotemToInventoryRequest::default_instance_,
      AddTotemToInventoryRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTotemToInventoryRequest));
  AddTotemToInventoryResponse_descriptor_ = file->message_type(81);
  static const int AddTotemToInventoryResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryResponse, totems_),
  };
  AddTotemToInventoryResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTotemToInventoryResponse_descriptor_,
      AddTotemToInventoryResponse::default_instance_,
      AddTotemToInventoryResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTotemToInventoryResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTotemToInventoryResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SessionConsole_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteAccountRequest_descriptor_, &DeleteAccountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteAccountResponse_descriptor_, &DeleteAccountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddItemToInventoryRequest_descriptor_, &AddItemToInventoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddItemToInventoryResponse_descriptor_, &AddItemToInventoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseCashPaidRequest_descriptor_, &IncreaseCashPaidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseCashPaidResponse_descriptor_, &IncreaseCashPaidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseDarkCrystalPaidRequest_descriptor_, &IncreaseDarkCrystalPaidRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseDarkCrystalPaidResponse_descriptor_, &IncreaseDarkCrystalPaidResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseMoneyRequest_descriptor_, &IncreaseMoneyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseMoneyResponse_descriptor_, &IncreaseMoneyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetItemLevelupRequest_descriptor_, &SetItemLevelupRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetItemLevelupResponse_descriptor_, &SetItemLevelupResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCharacterLevelExpRequest_descriptor_, &SetCharacterLevelExpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCharacterLevelExpResponse_descriptor_, &SetCharacterLevelExpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBladePointRequest_descriptor_, &SetBladePointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetBladePointResponse_descriptor_, &SetBladePointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseRankPromotionPointRequest_descriptor_, &IncreaseRankPromotionPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseRankPromotionPointResponse_descriptor_, &IncreaseRankPromotionPointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMailRequest_descriptor_, &AddMailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMailResponse_descriptor_, &AddMailResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeRankingRequest_descriptor_, &MakeRankingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeRankingResponse_descriptor_, &MakeRankingResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceClearStageRequest_descriptor_, &ForceClearStageRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceClearStageResponse_descriptor_, &ForceClearStageResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetQuestStateRequest_descriptor_, &SetQuestStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetQuestStateResponse_descriptor_, &SetQuestStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseHeroPieceRequest_descriptor_, &IncreaseHeroPieceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseHeroPieceResponse_descriptor_, &IncreaseHeroPieceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseSocialPointRequest_descriptor_, &IncreaseSocialPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncreaseSocialPointResponse_descriptor_, &IncreaseSocialPointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceClearHeroTowerRequest_descriptor_, &ForceClearHeroTowerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceClearHeroTowerResponse_descriptor_, &ForceClearHeroTowerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareSweepHeroTowerRequest_descriptor_, &PrepareSweepHeroTowerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareSweepHeroTowerResponse_descriptor_, &PrepareSweepHeroTowerResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceStartCounterDungeonRequest_descriptor_, &ForceStartCounterDungeonRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceStartCounterDungeonResponse_descriptor_, &ForceStartCounterDungeonResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareGuildRequest_descriptor_, &PrepareGuildRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareGuildResponse_descriptor_, &PrepareGuildResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildBattleStateRequest_descriptor_, &SetGuildBattleStateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildBattleStateResponse_descriptor_, &SetGuildBattleStateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetAttendanceTimeRequest_descriptor_, &ResetAttendanceTimeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetAttendanceTimeResponse_descriptor_, &ResetAttendanceTimeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetEventAttendanceRequest_descriptor_, &ResetEventAttendanceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetEventAttendanceResponse_descriptor_, &ResetEventAttendanceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetDailyPlayTimeRecordRequest_descriptor_, &ResetDailyPlayTimeRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetDailyPlayTimeRecordResponse_descriptor_, &ResetDailyPlayTimeRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeQuestIdRequest_descriptor_, &ChangeQuestIdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeQuestIdResponse_descriptor_, &ChangeQuestIdResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeQuestCountRequest_descriptor_, &ChangeQuestCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeQuestCountResponse_descriptor_, &ChangeQuestCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteItemRequest_descriptor_, &DeleteItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteItemResponse_descriptor_, &DeleteItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAetherToInventoryRequest_descriptor_, &AddAetherToInventoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAetherToInventoryResponse_descriptor_, &AddAetherToInventoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceUpdateAetherRequest_descriptor_, &ForceUpdateAetherRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForceUpdateAetherResponse_descriptor_, &ForceUpdateAetherResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareFriendRequest_descriptor_, &PrepareFriendRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrepareFriendResponse_descriptor_, &PrepareFriendResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildLevelExpRequest_descriptor_, &SetGuildLevelExpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetGuildLevelExpResponse_descriptor_, &SetGuildLevelExpResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetTeamMatchPointRequest_descriptor_, &ResetTeamMatchPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetTeamMatchPointResponse_descriptor_, &ResetTeamMatchPointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCharacterRankInfoRequest_descriptor_, &SetCharacterRankInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCharacterRankInfoResponse_descriptor_, &SetCharacterRankInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCharacterRelicRequest_descriptor_, &SetCharacterRelicRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetCharacterRelicResponse_descriptor_, &SetCharacterRelicResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTutorialProgressRequest_descriptor_, &SetTutorialProgressRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTutorialProgressResponse_descriptor_, &SetTutorialProgressResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetMatchSeasonRewardRequest_descriptor_, &SetMatchSeasonRewardRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetMatchSeasonRewardResponse_descriptor_, &SetMatchSeasonRewardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetStageBoostCountRequest_descriptor_, &SetStageBoostCountRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetStageBoostCountResponse_descriptor_, &SetStageBoostCountResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetPvPMatchPointRequest_descriptor_, &ResetPvPMatchPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetPvPMatchPointResponse_descriptor_, &ResetPvPMatchPointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkipMatchTutorialRequest_descriptor_, &SkipMatchTutorialRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkipMatchTutorialResponse_descriptor_, &SkipMatchTutorialResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDebugModeRequest_descriptor_, &SetDebugModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDebugModeResponse_descriptor_, &SetDebugModeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCostumeToInventoryRequest_descriptor_, &AddCostumeToInventoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddCostumeToInventoryResponse_descriptor_, &AddCostumeToInventoryResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTotemToInventoryRequest_descriptor_, &AddTotemToInventoryRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTotemToInventoryResponse_descriptor_, &AddTotemToInventoryResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SessionConsole_2eproto() {
  delete DeleteAccountRequest::default_instance_;
  delete DeleteAccountRequest_reflection_;
  delete DeleteAccountResponse::default_instance_;
  delete DeleteAccountResponse_reflection_;
  delete AddItemToInventoryRequest::default_instance_;
  delete AddItemToInventoryRequest_reflection_;
  delete AddItemToInventoryResponse::default_instance_;
  delete AddItemToInventoryResponse_reflection_;
  delete IncreaseCashPaidRequest::default_instance_;
  delete IncreaseCashPaidRequest_reflection_;
  delete IncreaseCashPaidResponse::default_instance_;
  delete IncreaseCashPaidResponse_reflection_;
  delete IncreaseDarkCrystalPaidRequest::default_instance_;
  delete IncreaseDarkCrystalPaidRequest_reflection_;
  delete IncreaseDarkCrystalPaidResponse::default_instance_;
  delete IncreaseDarkCrystalPaidResponse_reflection_;
  delete IncreaseMoneyRequest::default_instance_;
  delete IncreaseMoneyRequest_reflection_;
  delete IncreaseMoneyResponse::default_instance_;
  delete IncreaseMoneyResponse_reflection_;
  delete SetItemLevelupRequest::default_instance_;
  delete SetItemLevelupRequest_reflection_;
  delete SetItemLevelupResponse::default_instance_;
  delete SetItemLevelupResponse_reflection_;
  delete SetCharacterLevelExpRequest::default_instance_;
  delete SetCharacterLevelExpRequest_reflection_;
  delete SetCharacterLevelExpResponse::default_instance_;
  delete SetCharacterLevelExpResponse_reflection_;
  delete SetBladePointRequest::default_instance_;
  delete SetBladePointRequest_reflection_;
  delete SetBladePointResponse::default_instance_;
  delete SetBladePointResponse_reflection_;
  delete IncreaseRankPromotionPointRequest::default_instance_;
  delete IncreaseRankPromotionPointRequest_reflection_;
  delete IncreaseRankPromotionPointResponse::default_instance_;
  delete IncreaseRankPromotionPointResponse_reflection_;
  delete AddMailRequest::default_instance_;
  delete AddMailRequest_reflection_;
  delete AddMailResponse::default_instance_;
  delete AddMailResponse_reflection_;
  delete MakeRankingRequest::default_instance_;
  delete MakeRankingRequest_reflection_;
  delete MakeRankingResponse::default_instance_;
  delete MakeRankingResponse_reflection_;
  delete ForceClearStageRequest::default_instance_;
  delete ForceClearStageRequest_reflection_;
  delete ForceClearStageResponse::default_instance_;
  delete ForceClearStageResponse_reflection_;
  delete SetQuestStateRequest::default_instance_;
  delete SetQuestStateRequest_reflection_;
  delete SetQuestStateResponse::default_instance_;
  delete SetQuestStateResponse_reflection_;
  delete IncreaseHeroPieceRequest::default_instance_;
  delete IncreaseHeroPieceRequest_reflection_;
  delete IncreaseHeroPieceResponse::default_instance_;
  delete IncreaseHeroPieceResponse_reflection_;
  delete IncreaseSocialPointRequest::default_instance_;
  delete IncreaseSocialPointRequest_reflection_;
  delete IncreaseSocialPointResponse::default_instance_;
  delete IncreaseSocialPointResponse_reflection_;
  delete ForceClearHeroTowerRequest::default_instance_;
  delete ForceClearHeroTowerRequest_reflection_;
  delete ForceClearHeroTowerResponse::default_instance_;
  delete ForceClearHeroTowerResponse_reflection_;
  delete PrepareSweepHeroTowerRequest::default_instance_;
  delete PrepareSweepHeroTowerRequest_reflection_;
  delete PrepareSweepHeroTowerResponse::default_instance_;
  delete PrepareSweepHeroTowerResponse_reflection_;
  delete ForceStartCounterDungeonRequest::default_instance_;
  delete ForceStartCounterDungeonRequest_reflection_;
  delete ForceStartCounterDungeonResponse::default_instance_;
  delete ForceStartCounterDungeonResponse_reflection_;
  delete PrepareGuildRequest::default_instance_;
  delete PrepareGuildRequest_reflection_;
  delete PrepareGuildResponse::default_instance_;
  delete PrepareGuildResponse_reflection_;
  delete SetGuildBattleStateRequest::default_instance_;
  delete SetGuildBattleStateRequest_reflection_;
  delete SetGuildBattleStateResponse::default_instance_;
  delete SetGuildBattleStateResponse_reflection_;
  delete ResetAttendanceTimeRequest::default_instance_;
  delete ResetAttendanceTimeRequest_reflection_;
  delete ResetAttendanceTimeResponse::default_instance_;
  delete ResetAttendanceTimeResponse_reflection_;
  delete ResetEventAttendanceRequest::default_instance_;
  delete ResetEventAttendanceRequest_reflection_;
  delete ResetEventAttendanceResponse::default_instance_;
  delete ResetEventAttendanceResponse_reflection_;
  delete ResetDailyPlayTimeRecordRequest::default_instance_;
  delete ResetDailyPlayTimeRecordRequest_reflection_;
  delete ResetDailyPlayTimeRecordResponse::default_instance_;
  delete ResetDailyPlayTimeRecordResponse_reflection_;
  delete ChangeQuestIdRequest::default_instance_;
  delete ChangeQuestIdRequest_reflection_;
  delete ChangeQuestIdResponse::default_instance_;
  delete ChangeQuestIdResponse_reflection_;
  delete ChangeQuestCountRequest::default_instance_;
  delete ChangeQuestCountRequest_reflection_;
  delete ChangeQuestCountResponse::default_instance_;
  delete ChangeQuestCountResponse_reflection_;
  delete DeleteItemRequest::default_instance_;
  delete DeleteItemRequest_reflection_;
  delete DeleteItemResponse::default_instance_;
  delete DeleteItemResponse_reflection_;
  delete AddAetherToInventoryRequest::default_instance_;
  delete AddAetherToInventoryRequest_reflection_;
  delete AddAetherToInventoryResponse::default_instance_;
  delete AddAetherToInventoryResponse_reflection_;
  delete ForceUpdateAetherRequest::default_instance_;
  delete ForceUpdateAetherRequest_reflection_;
  delete ForceUpdateAetherResponse::default_instance_;
  delete ForceUpdateAetherResponse_reflection_;
  delete PrepareFriendRequest::default_instance_;
  delete PrepareFriendRequest_reflection_;
  delete PrepareFriendResponse::default_instance_;
  delete PrepareFriendResponse_reflection_;
  delete SetGuildLevelExpRequest::default_instance_;
  delete SetGuildLevelExpRequest_reflection_;
  delete SetGuildLevelExpResponse::default_instance_;
  delete SetGuildLevelExpResponse_reflection_;
  delete ResetTeamMatchPointRequest::default_instance_;
  delete ResetTeamMatchPointRequest_reflection_;
  delete ResetTeamMatchPointResponse::default_instance_;
  delete ResetTeamMatchPointResponse_reflection_;
  delete SetCharacterRankInfoRequest::default_instance_;
  delete SetCharacterRankInfoRequest_reflection_;
  delete SetCharacterRankInfoResponse::default_instance_;
  delete SetCharacterRankInfoResponse_reflection_;
  delete SetCharacterRelicRequest::default_instance_;
  delete SetCharacterRelicRequest_reflection_;
  delete SetCharacterRelicResponse::default_instance_;
  delete SetCharacterRelicResponse_reflection_;
  delete SetTutorialProgressRequest::default_instance_;
  delete SetTutorialProgressRequest_reflection_;
  delete SetTutorialProgressResponse::default_instance_;
  delete SetTutorialProgressResponse_reflection_;
  delete SetMatchSeasonRewardRequest::default_instance_;
  delete SetMatchSeasonRewardRequest_reflection_;
  delete SetMatchSeasonRewardResponse::default_instance_;
  delete SetMatchSeasonRewardResponse_reflection_;
  delete SetStageBoostCountRequest::default_instance_;
  delete SetStageBoostCountRequest_reflection_;
  delete SetStageBoostCountResponse::default_instance_;
  delete SetStageBoostCountResponse_reflection_;
  delete ResetPvPMatchPointRequest::default_instance_;
  delete ResetPvPMatchPointRequest_reflection_;
  delete ResetPvPMatchPointResponse::default_instance_;
  delete ResetPvPMatchPointResponse_reflection_;
  delete SkipMatchTutorialRequest::default_instance_;
  delete SkipMatchTutorialRequest_reflection_;
  delete SkipMatchTutorialResponse::default_instance_;
  delete SkipMatchTutorialResponse_reflection_;
  delete SetDebugModeRequest::default_instance_;
  delete SetDebugModeRequest_reflection_;
  delete SetDebugModeResponse::default_instance_;
  delete SetDebugModeResponse_reflection_;
  delete AddCostumeToInventoryRequest::default_instance_;
  delete AddCostumeToInventoryRequest_reflection_;
  delete AddCostumeToInventoryResponse::default_instance_;
  delete AddCostumeToInventoryResponse_reflection_;
  delete AddTotemToInventoryRequest::default_instance_;
  delete AddTotemToInventoryRequest_reflection_;
  delete AddTotemToInventoryResponse::default_instance_;
  delete AddTotemToInventoryResponse_reflection_;
}

void protobuf_AddDesc_SessionConsole_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::b2::protocol::commondata::protobuf_AddDesc_CommonData_2eproto();
  static const char descriptor[] = {
      "\n\024SessionConsole.proto\022\023b2.protocol.sess"
      "ion\032\020CommonData.proto\"\026\n\024DeleteAccountRe"
      "quest\"G\n\025DeleteAccountResponse\022.\n\006result"
      "\030\001 \002(\0132\036.b2.protocol.commondata.Result\"\205"
      "\001\n\031AddItemToInventoryRequest\022\030\n\020item_tem"
      "plate_id\030\001 \002(\005\0229\n\014item_quality\030\002 \002(\0162#.b"
      "2.protocol.commondata.ItemQuality\022\023\n\013ite"
      "m_amount\030\003 \001(\005\"y\n\032AddItemToInventoryResp"
      "onse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.commo"
      "ndata.Result\022+\n\005items\030\002 \003(\0132\034.b2.protoco"
      "l.commondata.Item\",\n\027IncreaseCashPaidReq"
      "uest\022\021\n\tcash_paid\030\001 \002(\005\"]\n\030IncreaseCashP"
      "aidResponse\022.\n\006result\030\001 \002(\0132\036.b2.protoco"
      "l.commondata.Result\022\021\n\tcash_paid\030\002 \001(\005\";"
      "\n\036IncreaseDarkCrystalPaidRequest\022\031\n\021dark"
      "_crystal_paid\030\001 \002(\005\"l\n\037IncreaseDarkCryst"
      "alPaidResponse\022.\n\006result\030\001 \002(\0132\036.b2.prot"
      "ocol.commondata.Result\022\031\n\021dark_crystal_p"
      "aid\030\002 \001(\005\"%\n\024IncreaseMoneyRequest\022\r\n\005mon"
      "ey\030\001 \002(\005\"V\n\025IncreaseMoneyResponse\022.\n\006res"
      "ult\030\001 \002(\0132\036.b2.protocol.commondata.Resul"
      "t\022\r\n\005money\030\002 \001(\005\"[\n\025SetItemLevelupReques"
      "t\022\017\n\007item_id\030\001 \002(\003\022\r\n\005level\030\002 \002(\005\022\013\n\003exp"
      "\030\003 \002(\002\022\025\n\renhance_level\030\004 \002(\005\"t\n\026SetItem"
      "LevelupResponse\022.\n\006result\030\001 \002(\0132\036.b2.pro"
      "tocol.commondata.Result\022*\n\004item\030\002 \001(\0132\034."
      "b2.protocol.commondata.Item\"y\n\033SetCharac"
      "terLevelExpRequest\022>\n\016character_type\030\001 \002"
      "(\0162&.b2.protocol.commondata.Character.TY"
      "PE\022\r\n\005level\030\002 \002(\005\022\013\n\003exp\030\003 \002(\005\"\204\001\n\034SetCh"
      "aracterLevelExpResponse\022.\n\006result\030\001 \002(\0132"
      "\036.b2.protocol.commondata.Result\0224\n\tchara"
      "cter\030\002 \001(\0132!.b2.protocol.commondata.Char"
      "acter\"+\n\024SetBladePointRequest\022\023\n\013blade_p"
      "oint\030\001 \002(\005\"\\\n\025SetBladePointResponse\022.\n\006r"
      "esult\030\001 \002(\0132\036.b2.protocol.commondata.Res"
      "ult\022\023\n\013blade_point\030\002 \001(\005\"A\n!IncreaseRank"
      "PromotionPointRequest\022\034\n\024rank_promotion_"
      "point\030\001 \002(\005\"r\n\"IncreaseRankPromotionPoin"
      "tResponse\022.\n\006result\030\001 \002(\0132\036.b2.protocol."
      "commondata.Result\022\034\n\024rank_promotion_poin"
      "t\030\002 \001(\005\"\327\003\n\016AddMailRequest\022;\n\rmail_categ"
      "ory\030\001 \002(\0162$.b2.protocol.commondata.MailC"
      "ategory\022B\n\013attach_type\030\002 \002(\0162-.b2.protoc"
      "ol.commondata.MailPresentAttachType\022;\n\013s"
      "ource_type\030\003 \002(\0162&.b2.protocol.commondat"
      "a.MailSourceType\022;\n\013sender_type\030\004 \002(\0162&."
      "b2.protocol.commondata.MailSenderType\022\016\n"
      "\006amount\030\005 \002(\005\022\030\n\020item_template_id\030\006 \001(\005\022"
      "\032\n\022general_lottery_id\030\007 \001(\005\022\036\n\026fixed_gra"
      "de_lottery_id\030\010 \001(\005\022\034\n\024selective_lottery"
      "_id\030\t \001(\005\022!\n\031selective_item_lottery_id\030\n"
      " \001(\005\022#\n\033prefix_selective_lottery_id\030\013 \001("
      "\005\"R\n\017AddMailResponse\022.\n\006result\030\001 \002(\0132\036.b"
      "2.protocol.commondata.Result\022\017\n\007mail_id\030"
      "\002 \001(\003\"a\n\022MakeRankingRequest\022:\n\nmatch_typ"
      "e\030\001 \002(\0162&.b2.protocol.commondata.MatchIn"
      "fo.TYPE\022\017\n\007ranking\030\002 \002(\005\"E\n\023MakeRankingR"
      "esponse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.co"
      "mmondata.Result\"*\n\026ForceClearStageReques"
      "t\022\020\n\010stage_id\030\001 \002(\005\"I\n\027ForceClearStageRe"
      "sponse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.com"
      "mondata.Result\"=\n\024SetQuestStateRequest\022\020"
      "\n\010quest_id\030\001 \002(\005\022\023\n\013quest_state\030\002 \002(\005\"G\n"
      "\025SetQuestStateResponse\022.\n\006result\030\001 \002(\0132\036"
      ".b2.protocol.commondata.Result\".\n\030Increa"
      "seHeroPieceRequest\022\022\n\nhero_piece\030\001 \002(\005\"g"
      "\n\031IncreaseHeroPieceResponse\022.\n\006result\030\001 "
      "\002(\0132\036.b2.protocol.commondata.Result\022\032\n\022c"
      "urrent_hero_piece\030\002 \001(\005\"2\n\032IncreaseSocia"
      "lPointRequest\022\024\n\014social_point\030\001 \002(\005\"k\n\033I"
      "ncreaseSocialPointResponse\022.\n\006result\030\001 \002"
      "(\0132\036.b2.protocol.commondata.Result\022\034\n\024cu"
      "rrent_social_point\030\002 \001(\005\"+\n\032ForceClearHe"
      "roTowerRequest\022\r\n\005floor\030\001 \002(\005\"\220\003\n\033ForceC"
      "learHeroTowerResponse\022.\n\006result\030\001 \002(\0132\036."
      "b2.protocol.commondata.Result\022\023\n\013start_f"
      "loor\030\n \001(\005\022\027\n\017max_clear_floor\030\013 \001(\005\022C\n\023m"
      "ain_character_type\030\014 \001(\0162&.b2.protocol.c"
      "ommondata.Character.TYPE\022B\n\022tag_characte"
      "r_type\030\r \001(\0162&.b2.protocol.commondata.Ch"
      "aracter.TYPE\022\027\n\017daily_try_count\030\016 \001(\005\022 \n"
      "\030daily_max_free_try_count\030\017 \001(\005\022!\n\031daily"
      "_left_free_try_count\030\020 \001(\005\022\032\n\022current_he"
      "ro_piece\030\021 \001(\005\022\020\n\010is_sweep\030\036 \001(\010\"\036\n\034Prep"
      "areSweepHeroTowerRequest\"O\n\035PrepareSweep"
      "HeroTowerResponse\022.\n\006result\030\001 \002(\0132\036.b2.p"
      "rotocol.commondata.Result\"5\n\037ForceStartC"
      "ounterDungeonRequest\022\022\n\ndungeon_id\030\001 \002(\005"
      "\"y\n ForceStartCounterDungeonResponse\022.\n\006"
      "result\030\001 \002(\0132\036.b2.protocol.commondata.Re"
      "sult\022\022\n\nplay_token\030\002 \001(\t\022\021\n\tdrop_gold\030\003 "
      "\001(\005\"D\n\023PrepareGuildRequest\022\024\n\014member_cou"
      "nt\030\001 \002(\005\022\027\n\017add_guild_count\030\002 \002(\005\"F\n\024Pre"
      "pareGuildResponse\022.\n\006result\030\001 \002(\0132\036.b2.p"
      "rotocol.commondata.Result\"3\n\032SetGuildBat"
      "tleStateRequest\022\025\n\ris_new_season\030\001 \002(\010\"\235"
      "\001\n\033SetGuildBattleStateResponse\022.\n\006result"
      "\030\001 \002(\0132\036.b2.protocol.commondata.Result\0227"
      "\n\005state\030\013 \001(\0132(.b2.protocol.commondata.G"
      "uildBattleState\022\025\n\rstate_message\030\014 \001(\t\"\034"
      "\n\032ResetAttendanceTimeRequest\"M\n\033ResetAtt"
      "endanceTimeResponse\022.\n\006result\030\001 \002(\0132\036.b2"
      ".protocol.commondata.Result\">\n\033ResetEven"
      "tAttendanceRequest\022\037\n\027is_only_attendance"
      "_time\030\001 \001(\010\"N\n\034ResetEventAttendanceRespo"
      "nse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.common"
      "data.Result\"!\n\037ResetDailyPlayTimeRecordR"
      "equest\"\230\001\n ResetDailyPlayTimeRecordRespo"
      "nse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.common"
      "data.Result\022\036\n\026daily_play_time_in_sec\030\002 "
      "\001(\005\022$\n\034daily_play_time_reward_index\030\003 \001("
      "\005\"l\n\024ChangeQuestIdRequest\022B\n\tslot_type\030\001"
      " \002(\0162/.b2.protocol.commondata.QuestInfo."
      "QuestSlotType\022\020\n\010quest_id\030\002 \002(\005\"G\n\025Chang"
      "eQuestIdResponse\022.\n\006result\030\001 \002(\0132\036.b2.pr"
      "otocol.commondata.Result\"l\n\027ChangeQuestC"
      "ountRequest\022B\n\tslot_type\030\001 \002(\0162/.b2.prot"
      "ocol.commondata.QuestInfo.QuestSlotType\022"
      "\r\n\005count\030\002 \002(\005\"J\n\030ChangeQuestCountRespon"
      "se\022.\n\006result\030\001 \002(\0132\036.b2.protocol.commond"
      "ata.Result\"$\n\021DeleteItemRequest\022\017\n\007item_"
      "id\030\001 \001(\003\"U\n\022DeleteItemResponse\022.\n\006result"
      "\030\001 \002(\0132\036.b2.protocol.commondata.Result\022\017"
      "\n\007item_id\030\002 \001(\003\"\254\001\n\033AddAetherToInventory"
      "Request\0228\n\013aether_type\030\001 \002(\0162#.b2.protoc"
      "ol.commondata.Aether.TYPE\022\014\n\004slot\030\002 \001(\005\022"
      "\r\n\005grade\030\003 \001(\005\0226\n\ttier_type\030\004 \002(\0162#.b2.p"
      "rotocol.commondata.Aether.TIER\"~\n\034AddAet"
      "herToInventoryResponse\022.\n\006result\030\001 \002(\0132\036"
      ".b2.protocol.commondata.Result\022.\n\006aether"
      "\030\002 \001(\0132\036.b2.protocol.commondata.Aether\"~"
      "\n\030ForceUpdateAetherRequest\022\021\n\taether_id\030"
      "\001 \002(\003\0221\n\004type\030\002 \002(\0162#.b2.protocol.common"
      "data.Aether.TYPE\022\r\n\005level\030\003 \002(\005\022\r\n\005grade"
      "\030\004 \002(\005\"\203\001\n\031ForceUpdateAetherResponse\022.\n\006"
      "result\030\001 \002(\0132\036.b2.protocol.commondata.Re"
      "sult\0226\n\016updated_aether\030\002 \001(\0132\036.b2.protoc"
      "ol.commondata.Aether\"\220\001\n\024PrepareFriendRe"
      "quest\022\024\n\014friend_count\030\001 \002(\005\022\?\n\010job_type\030"
      "\002 \001(\0162-.b2.protocol.session.PrepareFrien"
      "dRequest.JOB\"!\n\003JOB\022\010\n\004NONE\020\000\022\020\n\014MATCH_R"
      "ECORD\020\001\"a\n\025PrepareFriendResponse\022.\n\006resu"
      "lt\030\001 \002(\0132\036.b2.protocol.commondata.Result"
      "\022\030\n\020new_friend_count\030\002 \001(\005\"5\n\027SetGuildLe"
      "velExpRequest\022\r\n\005level\030\001 \002(\005\022\013\n\003exp\030\002 \002("
      "\005\"x\n\030SetGuildLevelExpResponse\022.\n\006result\030"
      "\001 \002(\0132\036.b2.protocol.commondata.Result\022,\n"
      "\005guild\030\002 \001(\0132\035.b2.protocol.commondata.Gu"
      "ild\"\034\n\032ResetTeamMatchPointRequest\"M\n\033Res"
      "etTeamMatchPointResponse\022.\n\006result\030\001 \002(\013"
      "2\036.b2.protocol.commondata.Result\"\223\001\n\033Set"
      "CharacterRankInfoRequest\022>\n\016character_ty"
      "pe\030\001 \002(\0162&.b2.protocol.commondata.Charac"
      "ter.TYPE\022\014\n\004rank\030\002 \002(\005\022\022\n\nnode_index\030\003 \002"
      "(\005\022\022\n\nnode_state\030\004 \002(\010\"\204\001\n\034SetCharacterR"
      "ankInfoResponse\022.\n\006result\030\001 \002(\0132\036.b2.pro"
      "tocol.commondata.Result\0224\n\tcharacter\030\002 \001"
      "(\0132!.b2.protocol.commondata.Character\"\222\001"
      "\n\030SetCharacterRelicRequest\022>\n\016character_"
      "type\030\001 \002(\0162&.b2.protocol.commondata.Char"
      "acter.TYPE\022\020\n\010relic_id\030\002 \002(\005\022\r\n\005grade\030\003 "
      "\002(\005\022\025\n\renhance_level\030\004 \002(\005\"y\n\031SetCharact"
      "erRelicResponse\022.\n\006result\030\001 \002(\0132\036.b2.pro"
      "tocol.commondata.Result\022,\n\005relic\030\002 \001(\0132\035"
      ".b2.protocol.commondata.Relic\"z\n\032SetTuto"
      "rialProgressRequest\022\023\n\013tutorial_id\030\001 \002(\005"
      "\022\030\n\020is_item_prepared\030\002 \002(\010\022\030\n\020is_lottery"
      "_drawn\030\003 \002(\010\022\023\n\013is_finished\030\004 \002(\010\"\253\001\n\033Se"
      "tTutorialProgressResponse\022.\n\006result\030\001 \002("
      "\0132\036.b2.protocol.commondata.Result\022\023\n\013tut"
      "orial_id\030\013 \001(\005\022\030\n\020is_item_prepared\030\014 \001(\010"
      "\022\030\n\020is_lottery_drawn\030\r \001(\010\022\023\n\013is_finishe"
      "d\030\016 \001(\010\"y\n\033SetMatchSeasonRewardRequest\022:"
      "\n\nmatch_type\030\001 \002(\0162&.b2.protocol.commond"
      "ata.MatchInfo.TYPE\022\017\n\007ranking\030\002 \001(\005\022\r\n\005p"
      "oint\030\003 \001(\005\"N\n\034SetMatchSeasonRewardRespon"
      "se\022.\n\006result\030\001 \002(\0132\036.b2.protocol.commond"
      "ata.Result\"7\n\031SetStageBoostCountRequest\022"
      "\032\n\022stage_boost_ticket\030\001 \002(\005\"h\n\032SetStageB"
      "oostCountResponse\022.\n\006result\030\001 \002(\0132\036.b2.p"
      "rotocol.commondata.Result\022\032\n\022stage_boost"
      "_ticket\030\002 \001(\005\"\033\n\031ResetPvPMatchPointReque"
      "st\"L\n\032ResetPvPMatchPointResponse\022.\n\006resu"
      "lt\030\001 \002(\0132\036.b2.protocol.commondata.Result"
      "\"V\n\030SkipMatchTutorialRequest\022:\n\nmatch_ty"
      "pe\030\001 \002(\0162&.b2.protocol.commondata.MatchI"
      "nfo.TYPE\"K\n\031SkipMatchTutorialResponse\022.\n"
      "\006result\030\001 \002(\0132\036.b2.protocol.commondata.R"
      "esult\"4\n\023SetDebugModeRequest\022\035\n\025skip_kee"
      "p_alive_check\030\001 \001(\010\"F\n\024SetDebugModeRespo"
      "nse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.common"
      "data.Result\"3\n\034AddCostumeToInventoryRequ"
      "est\022\023\n\013template_id\030\001 \002(\005\"\201\001\n\035AddCostumeT"
      "oInventoryResponse\022.\n\006result\030\001 \002(\0132\036.b2."
      "protocol.commondata.Result\0220\n\007costume\030\002 "
      "\001(\0132\037.b2.protocol.commondata.Costume\"1\n\032"
      "AddTotemToInventoryRequest\022\023\n\013template_i"
      "d\030\001 \002(\005\"|\n\033AddTotemToInventoryResponse\022."
      "\n\006result\030\001 \002(\0132\036.b2.protocol.commondata."
      "Result\022-\n\006totems\030\002 \003(\0132\035.b2.protocol.com"
      "mondata.TotemB\035\n\033com.a2q.b2.protocol.con"
      "sole"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8084);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SessionConsole.proto", &protobuf_RegisterTypes);
  DeleteAccountRequest::default_instance_ = new DeleteAccountRequest();
  DeleteAccountResponse::default_instance_ = new DeleteAccountResponse();
  AddItemToInventoryRequest::default_instance_ = new AddItemToInventoryRequest();
  AddItemToInventoryResponse::default_instance_ = new AddItemToInventoryResponse();
  IncreaseCashPaidRequest::default_instance_ = new IncreaseCashPaidRequest();
  IncreaseCashPaidResponse::default_instance_ = new IncreaseCashPaidResponse();
  IncreaseDarkCrystalPaidRequest::default_instance_ = new IncreaseDarkCrystalPaidRequest();
  IncreaseDarkCrystalPaidResponse::default_instance_ = new IncreaseDarkCrystalPaidResponse();
  IncreaseMoneyRequest::default_instance_ = new IncreaseMoneyRequest();
  IncreaseMoneyResponse::default_instance_ = new IncreaseMoneyResponse();
  SetItemLevelupRequest::default_instance_ = new SetItemLevelupRequest();
  SetItemLevelupResponse::default_instance_ = new SetItemLevelupResponse();
  SetCharacterLevelExpRequest::default_instance_ = new SetCharacterLevelExpRequest();
  SetCharacterLevelExpResponse::default_instance_ = new SetCharacterLevelExpResponse();
  SetBladePointRequest::default_instance_ = new SetBladePointRequest();
  SetBladePointResponse::default_instance_ = new SetBladePointResponse();
  IncreaseRankPromotionPointRequest::default_instance_ = new IncreaseRankPromotionPointRequest();
  IncreaseRankPromotionPointResponse::default_instance_ = new IncreaseRankPromotionPointResponse();
  AddMailRequest::default_instance_ = new AddMailRequest();
  AddMailResponse::default_instance_ = new AddMailResponse();
  MakeRankingRequest::default_instance_ = new MakeRankingRequest();
  MakeRankingResponse::default_instance_ = new MakeRankingResponse();
  ForceClearStageRequest::default_instance_ = new ForceClearStageRequest();
  ForceClearStageResponse::default_instance_ = new ForceClearStageResponse();
  SetQuestStateRequest::default_instance_ = new SetQuestStateRequest();
  SetQuestStateResponse::default_instance_ = new SetQuestStateResponse();
  IncreaseHeroPieceRequest::default_instance_ = new IncreaseHeroPieceRequest();
  IncreaseHeroPieceResponse::default_instance_ = new IncreaseHeroPieceResponse();
  IncreaseSocialPointRequest::default_instance_ = new IncreaseSocialPointRequest();
  IncreaseSocialPointResponse::default_instance_ = new IncreaseSocialPointResponse();
  ForceClearHeroTowerRequest::default_instance_ = new ForceClearHeroTowerRequest();
  ForceClearHeroTowerResponse::default_instance_ = new ForceClearHeroTowerResponse();
  PrepareSweepHeroTowerRequest::default_instance_ = new PrepareSweepHeroTowerRequest();
  PrepareSweepHeroTowerResponse::default_instance_ = new PrepareSweepHeroTowerResponse();
  ForceStartCounterDungeonRequest::default_instance_ = new ForceStartCounterDungeonRequest();
  ForceStartCounterDungeonResponse::default_instance_ = new ForceStartCounterDungeonResponse();
  PrepareGuildRequest::default_instance_ = new PrepareGuildRequest();
  PrepareGuildResponse::default_instance_ = new PrepareGuildResponse();
  SetGuildBattleStateRequest::default_instance_ = new SetGuildBattleStateRequest();
  SetGuildBattleStateResponse::default_instance_ = new SetGuildBattleStateResponse();
  ResetAttendanceTimeRequest::default_instance_ = new ResetAttendanceTimeRequest();
  ResetAttendanceTimeResponse::default_instance_ = new ResetAttendanceTimeResponse();
  ResetEventAttendanceRequest::default_instance_ = new ResetEventAttendanceRequest();
  ResetEventAttendanceResponse::default_instance_ = new ResetEventAttendanceResponse();
  ResetDailyPlayTimeRecordRequest::default_instance_ = new ResetDailyPlayTimeRecordRequest();
  ResetDailyPlayTimeRecordResponse::default_instance_ = new ResetDailyPlayTimeRecordResponse();
  ChangeQuestIdRequest::default_instance_ = new ChangeQuestIdRequest();
  ChangeQuestIdResponse::default_instance_ = new ChangeQuestIdResponse();
  ChangeQuestCountRequest::default_instance_ = new ChangeQuestCountRequest();
  ChangeQuestCountResponse::default_instance_ = new ChangeQuestCountResponse();
  DeleteItemRequest::default_instance_ = new DeleteItemRequest();
  DeleteItemResponse::default_instance_ = new DeleteItemResponse();
  AddAetherToInventoryRequest::default_instance_ = new AddAetherToInventoryRequest();
  AddAetherToInventoryResponse::default_instance_ = new AddAetherToInventoryResponse();
  ForceUpdateAetherRequest::default_instance_ = new ForceUpdateAetherRequest();
  ForceUpdateAetherResponse::default_instance_ = new ForceUpdateAetherResponse();
  PrepareFriendRequest::default_instance_ = new PrepareFriendRequest();
  PrepareFriendResponse::default_instance_ = new PrepareFriendResponse();
  SetGuildLevelExpRequest::default_instance_ = new SetGuildLevelExpRequest();
  SetGuildLevelExpResponse::default_instance_ = new SetGuildLevelExpResponse();
  ResetTeamMatchPointRequest::default_instance_ = new ResetTeamMatchPointRequest();
  ResetTeamMatchPointResponse::default_instance_ = new ResetTeamMatchPointResponse();
  SetCharacterRankInfoRequest::default_instance_ = new SetCharacterRankInfoRequest();
  SetCharacterRankInfoResponse::default_instance_ = new SetCharacterRankInfoResponse();
  SetCharacterRelicRequest::default_instance_ = new SetCharacterRelicRequest();
  SetCharacterRelicResponse::default_instance_ = new SetCharacterRelicResponse();
  SetTutorialProgressRequest::default_instance_ = new SetTutorialProgressRequest();
  SetTutorialProgressResponse::default_instance_ = new SetTutorialProgressResponse();
  SetMatchSeasonRewardRequest::default_instance_ = new SetMatchSeasonRewardRequest();
  SetMatchSeasonRewardResponse::default_instance_ = new SetMatchSeasonRewardResponse();
  SetStageBoostCountRequest::default_instance_ = new SetStageBoostCountRequest();
  SetStageBoostCountResponse::default_instance_ = new SetStageBoostCountResponse();
  ResetPvPMatchPointRequest::default_instance_ = new ResetPvPMatchPointRequest();
  ResetPvPMatchPointResponse::default_instance_ = new ResetPvPMatchPointResponse();
  SkipMatchTutorialRequest::default_instance_ = new SkipMatchTutorialRequest();
  SkipMatchTutorialResponse::default_instance_ = new SkipMatchTutorialResponse();
  SetDebugModeRequest::default_instance_ = new SetDebugModeRequest();
  SetDebugModeResponse::default_instance_ = new SetDebugModeResponse();
  AddCostumeToInventoryRequest::default_instance_ = new AddCostumeToInventoryRequest();
  AddCostumeToInventoryResponse::default_instance_ = new AddCostumeToInventoryResponse();
  AddTotemToInventoryRequest::default_instance_ = new AddTotemToInventoryRequest();
  AddTotemToInventoryResponse::default_instance_ = new AddTotemToInventoryResponse();
  DeleteAccountRequest::default_instance_->InitAsDefaultInstance();
  DeleteAccountResponse::default_instance_->InitAsDefaultInstance();
  AddItemToInventoryRequest::default_instance_->InitAsDefaultInstance();
  AddItemToInventoryResponse::default_instance_->InitAsDefaultInstance();
  IncreaseCashPaidRequest::default_instance_->InitAsDefaultInstance();
  IncreaseCashPaidResponse::default_instance_->InitAsDefaultInstance();
  IncreaseDarkCrystalPaidRequest::default_instance_->InitAsDefaultInstance();
  IncreaseDarkCrystalPaidResponse::default_instance_->InitAsDefaultInstance();
  IncreaseMoneyRequest::default_instance_->InitAsDefaultInstance();
  IncreaseMoneyResponse::default_instance_->InitAsDefaultInstance();
  SetItemLevelupRequest::default_instance_->InitAsDefaultInstance();
  SetItemLevelupResponse::default_instance_->InitAsDefaultInstance();
  SetCharacterLevelExpRequest::default_instance_->InitAsDefaultInstance();
  SetCharacterLevelExpResponse::default_instance_->InitAsDefaultInstance();
  SetBladePointRequest::default_instance_->InitAsDefaultInstance();
  SetBladePointResponse::default_instance_->InitAsDefaultInstance();
  IncreaseRankPromotionPointRequest::default_instance_->InitAsDefaultInstance();
  IncreaseRankPromotionPointResponse::default_instance_->InitAsDefaultInstance();
  AddMailRequest::default_instance_->InitAsDefaultInstance();
  AddMailResponse::default_instance_->InitAsDefaultInstance();
  MakeRankingRequest::default_instance_->InitAsDefaultInstance();
  MakeRankingResponse::default_instance_->InitAsDefaultInstance();
  ForceClearStageRequest::default_instance_->InitAsDefaultInstance();
  ForceClearStageResponse::default_instance_->InitAsDefaultInstance();
  SetQuestStateRequest::default_instance_->InitAsDefaultInstance();
  SetQuestStateResponse::default_instance_->InitAsDefaultInstance();
  IncreaseHeroPieceRequest::default_instance_->InitAsDefaultInstance();
  IncreaseHeroPieceResponse::default_instance_->InitAsDefaultInstance();
  IncreaseSocialPointRequest::default_instance_->InitAsDefaultInstance();
  IncreaseSocialPointResponse::default_instance_->InitAsDefaultInstance();
  ForceClearHeroTowerRequest::default_instance_->InitAsDefaultInstance();
  ForceClearHeroTowerResponse::default_instance_->InitAsDefaultInstance();
  PrepareSweepHeroTowerRequest::default_instance_->InitAsDefaultInstance();
  PrepareSweepHeroTowerResponse::default_instance_->InitAsDefaultInstance();
  ForceStartCounterDungeonRequest::default_instance_->InitAsDefaultInstance();
  ForceStartCounterDungeonResponse::default_instance_->InitAsDefaultInstance();
  PrepareGuildRequest::default_instance_->InitAsDefaultInstance();
  PrepareGuildResponse::default_instance_->InitAsDefaultInstance();
  SetGuildBattleStateRequest::default_instance_->InitAsDefaultInstance();
  SetGuildBattleStateResponse::default_instance_->InitAsDefaultInstance();
  ResetAttendanceTimeRequest::default_instance_->InitAsDefaultInstance();
  ResetAttendanceTimeResponse::default_instance_->InitAsDefaultInstance();
  ResetEventAttendanceRequest::default_instance_->InitAsDefaultInstance();
  ResetEventAttendanceResponse::default_instance_->InitAsDefaultInstance();
  ResetDailyPlayTimeRecordRequest::default_instance_->InitAsDefaultInstance();
  ResetDailyPlayTimeRecordResponse::default_instance_->InitAsDefaultInstance();
  ChangeQuestIdRequest::default_instance_->InitAsDefaultInstance();
  ChangeQuestIdResponse::default_instance_->InitAsDefaultInstance();
  ChangeQuestCountRequest::default_instance_->InitAsDefaultInstance();
  ChangeQuestCountResponse::default_instance_->InitAsDefaultInstance();
  DeleteItemRequest::default_instance_->InitAsDefaultInstance();
  DeleteItemResponse::default_instance_->InitAsDefaultInstance();
  AddAetherToInventoryRequest::default_instance_->InitAsDefaultInstance();
  AddAetherToInventoryResponse::default_instance_->InitAsDefaultInstance();
  ForceUpdateAetherRequest::default_instance_->InitAsDefaultInstance();
  ForceUpdateAetherResponse::default_instance_->InitAsDefaultInstance();
  PrepareFriendRequest::default_instance_->InitAsDefaultInstance();
  PrepareFriendResponse::default_instance_->InitAsDefaultInstance();
  SetGuildLevelExpRequest::default_instance_->InitAsDefaultInstance();
  SetGuildLevelExpResponse::default_instance_->InitAsDefaultInstance();
  ResetTeamMatchPointRequest::default_instance_->InitAsDefaultInstance();
  ResetTeamMatchPointResponse::default_instance_->InitAsDefaultInstance();
  SetCharacterRankInfoRequest::default_instance_->InitAsDefaultInstance();
  SetCharacterRankInfoResponse::default_instance_->InitAsDefaultInstance();
  SetCharacterRelicRequest::default_instance_->InitAsDefaultInstance();
  SetCharacterRelicResponse::default_instance_->InitAsDefaultInstance();
  SetTutorialProgressRequest::default_instance_->InitAsDefaultInstance();
  SetTutorialProgressResponse::default_instance_->InitAsDefaultInstance();
  SetMatchSeasonRewardRequest::default_instance_->InitAsDefaultInstance();
  SetMatchSeasonRewardResponse::default_instance_->InitAsDefaultInstance();
  SetStageBoostCountRequest::default_instance_->InitAsDefaultInstance();
  SetStageBoostCountResponse::default_instance_->InitAsDefaultInstance();
  ResetPvPMatchPointRequest::default_instance_->InitAsDefaultInstance();
  ResetPvPMatchPointResponse::default_instance_->InitAsDefaultInstance();
  SkipMatchTutorialRequest::default_instance_->InitAsDefaultInstance();
  SkipMatchTutorialResponse::default_instance_->InitAsDefaultInstance();
  SetDebugModeRequest::default_instance_->InitAsDefaultInstance();
  SetDebugModeResponse::default_instance_->InitAsDefaultInstance();
  AddCostumeToInventoryRequest::default_instance_->InitAsDefaultInstance();
  AddCostumeToInventoryResponse::default_instance_->InitAsDefaultInstance();
  AddTotemToInventoryRequest::default_instance_->InitAsDefaultInstance();
  AddTotemToInventoryResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SessionConsole_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SessionConsole_2eproto {
  StaticDescriptorInitializer_SessionConsole_2eproto() {
    protobuf_AddDesc_SessionConsole_2eproto();
  }
} static_descriptor_initializer_SessionConsole_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DeleteAccountRequest::DeleteAccountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.DeleteAccountRequest)
}

void DeleteAccountRequest::InitAsDefaultInstance() {
}

DeleteAccountRequest::DeleteAccountRequest(const DeleteAccountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.DeleteAccountRequest)
}

void DeleteAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteAccountRequest::~DeleteAccountRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.DeleteAccountRequest)
  SharedDtor();
}

void DeleteAccountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAccountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteAccountRequest_descriptor_;
}

const DeleteAccountRequest& DeleteAccountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

DeleteAccountRequest* DeleteAccountRequest::default_instance_ = NULL;

DeleteAccountRequest* DeleteAccountRequest::New() const {
  return new DeleteAccountRequest;
}

void DeleteAccountRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.DeleteAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.DeleteAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.DeleteAccountRequest)
  return false;
#undef DO_
}

void DeleteAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.DeleteAccountRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.DeleteAccountRequest)
}

::google::protobuf::uint8* DeleteAccountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.DeleteAccountRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.DeleteAccountRequest)
  return target;
}

int DeleteAccountRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteAccountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteAccountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteAccountRequest::MergeFrom(const DeleteAccountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAccountRequest::CopyFrom(const DeleteAccountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAccountRequest::IsInitialized() const {

  return true;
}

void DeleteAccountRequest::Swap(DeleteAccountRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteAccountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteAccountRequest_descriptor_;
  metadata.reflection = DeleteAccountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteAccountResponse::kResultFieldNumber;
#endif  // !_MSC_VER

DeleteAccountResponse::DeleteAccountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.DeleteAccountResponse)
}

void DeleteAccountResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

DeleteAccountResponse::DeleteAccountResponse(const DeleteAccountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.DeleteAccountResponse)
}

void DeleteAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteAccountResponse::~DeleteAccountResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.DeleteAccountResponse)
  SharedDtor();
}

void DeleteAccountResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DeleteAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAccountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteAccountResponse_descriptor_;
}

const DeleteAccountResponse& DeleteAccountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

DeleteAccountResponse* DeleteAccountResponse::default_instance_ = NULL;

DeleteAccountResponse* DeleteAccountResponse::New() const {
  return new DeleteAccountResponse;
}

void DeleteAccountResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.DeleteAccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.DeleteAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.DeleteAccountResponse)
  return false;
#undef DO_
}

void DeleteAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.DeleteAccountResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.DeleteAccountResponse)
}

::google::protobuf::uint8* DeleteAccountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.DeleteAccountResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.DeleteAccountResponse)
  return target;
}

int DeleteAccountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteAccountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteAccountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteAccountResponse::MergeFrom(const DeleteAccountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAccountResponse::CopyFrom(const DeleteAccountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAccountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DeleteAccountResponse::Swap(DeleteAccountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteAccountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteAccountResponse_descriptor_;
  metadata.reflection = DeleteAccountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddItemToInventoryRequest::kItemTemplateIdFieldNumber;
const int AddItemToInventoryRequest::kItemQualityFieldNumber;
const int AddItemToInventoryRequest::kItemAmountFieldNumber;
#endif  // !_MSC_VER

AddItemToInventoryRequest::AddItemToInventoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddItemToInventoryRequest)
}

void AddItemToInventoryRequest::InitAsDefaultInstance() {
}

AddItemToInventoryRequest::AddItemToInventoryRequest(const AddItemToInventoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddItemToInventoryRequest)
}

void AddItemToInventoryRequest::SharedCtor() {
  _cached_size_ = 0;
  item_template_id_ = 0;
  item_quality_ = 1;
  item_amount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddItemToInventoryRequest::~AddItemToInventoryRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddItemToInventoryRequest)
  SharedDtor();
}

void AddItemToInventoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddItemToInventoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemToInventoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddItemToInventoryRequest_descriptor_;
}

const AddItemToInventoryRequest& AddItemToInventoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddItemToInventoryRequest* AddItemToInventoryRequest::default_instance_ = NULL;

AddItemToInventoryRequest* AddItemToInventoryRequest::New() const {
  return new AddItemToInventoryRequest;
}

void AddItemToInventoryRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    item_template_id_ = 0;
    item_quality_ = 1;
    item_amount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddItemToInventoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddItemToInventoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 item_template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_quality;
        break;
      }

      // required .b2.protocol.commondata.ItemQuality item_quality = 2;
      case 2: {
        if (tag == 16) {
         parse_item_quality:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ItemQuality_IsValid(value)) {
            set_item_quality(static_cast< ::b2::protocol::commondata::ItemQuality >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_item_amount;
        break;
      }

      // optional int32 item_amount = 3;
      case 3: {
        if (tag == 24) {
         parse_item_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_amount_)));
          set_has_item_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddItemToInventoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddItemToInventoryRequest)
  return false;
#undef DO_
}

void AddItemToInventoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddItemToInventoryRequest)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_template_id(), output);
  }

  // required .b2.protocol.commondata.ItemQuality item_quality = 2;
  if (has_item_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->item_quality(), output);
  }

  // optional int32 item_amount = 3;
  if (has_item_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddItemToInventoryRequest)
}

::google::protobuf::uint8* AddItemToInventoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddItemToInventoryRequest)
  // required int32 item_template_id = 1;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_template_id(), target);
  }

  // required .b2.protocol.commondata.ItemQuality item_quality = 2;
  if (has_item_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->item_quality(), target);
  }

  // optional int32 item_amount = 3;
  if (has_item_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddItemToInventoryRequest)
  return target;
}

int AddItemToInventoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 item_template_id = 1;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // required .b2.protocol.commondata.ItemQuality item_quality = 2;
    if (has_item_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_quality());
    }

    // optional int32 item_amount = 3;
    if (has_item_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemToInventoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddItemToInventoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddItemToInventoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddItemToInventoryRequest::MergeFrom(const AddItemToInventoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_item_quality()) {
      set_item_quality(from.item_quality());
    }
    if (from.has_item_amount()) {
      set_item_amount(from.item_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddItemToInventoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemToInventoryRequest::CopyFrom(const AddItemToInventoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemToInventoryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddItemToInventoryRequest::Swap(AddItemToInventoryRequest* other) {
  if (other != this) {
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(item_quality_, other->item_quality_);
    std::swap(item_amount_, other->item_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddItemToInventoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddItemToInventoryRequest_descriptor_;
  metadata.reflection = AddItemToInventoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddItemToInventoryResponse::kResultFieldNumber;
const int AddItemToInventoryResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

AddItemToInventoryResponse::AddItemToInventoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddItemToInventoryResponse)
}

void AddItemToInventoryResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

AddItemToInventoryResponse::AddItemToInventoryResponse(const AddItemToInventoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddItemToInventoryResponse)
}

void AddItemToInventoryResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddItemToInventoryResponse::~AddItemToInventoryResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddItemToInventoryResponse)
  SharedDtor();
}

void AddItemToInventoryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddItemToInventoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddItemToInventoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddItemToInventoryResponse_descriptor_;
}

const AddItemToInventoryResponse& AddItemToInventoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddItemToInventoryResponse* AddItemToInventoryResponse::default_instance_ = NULL;

AddItemToInventoryResponse* AddItemToInventoryResponse::New() const {
  return new AddItemToInventoryResponse;
}

void AddItemToInventoryResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddItemToInventoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddItemToInventoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .b2.protocol.commondata.Item items = 2;
      case 2: {
        if (tag == 18) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddItemToInventoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddItemToInventoryResponse)
  return false;
#undef DO_
}

void AddItemToInventoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddItemToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .b2.protocol.commondata.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddItemToInventoryResponse)
}

::google::protobuf::uint8* AddItemToInventoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddItemToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .b2.protocol.commondata.Item items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddItemToInventoryResponse)
  return target;
}

int AddItemToInventoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .b2.protocol.commondata.Item items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddItemToInventoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddItemToInventoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddItemToInventoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddItemToInventoryResponse::MergeFrom(const AddItemToInventoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddItemToInventoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddItemToInventoryResponse::CopyFrom(const AddItemToInventoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddItemToInventoryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void AddItemToInventoryResponse::Swap(AddItemToInventoryResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddItemToInventoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddItemToInventoryResponse_descriptor_;
  metadata.reflection = AddItemToInventoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseCashPaidRequest::kCashPaidFieldNumber;
#endif  // !_MSC_VER

IncreaseCashPaidRequest::IncreaseCashPaidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseCashPaidRequest)
}

void IncreaseCashPaidRequest::InitAsDefaultInstance() {
}

IncreaseCashPaidRequest::IncreaseCashPaidRequest(const IncreaseCashPaidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseCashPaidRequest)
}

void IncreaseCashPaidRequest::SharedCtor() {
  _cached_size_ = 0;
  cash_paid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseCashPaidRequest::~IncreaseCashPaidRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseCashPaidRequest)
  SharedDtor();
}

void IncreaseCashPaidRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncreaseCashPaidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseCashPaidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseCashPaidRequest_descriptor_;
}

const IncreaseCashPaidRequest& IncreaseCashPaidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseCashPaidRequest* IncreaseCashPaidRequest::default_instance_ = NULL;

IncreaseCashPaidRequest* IncreaseCashPaidRequest::New() const {
  return new IncreaseCashPaidRequest;
}

void IncreaseCashPaidRequest::Clear() {
  cash_paid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseCashPaidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseCashPaidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 cash_paid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_paid_)));
          set_has_cash_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseCashPaidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseCashPaidRequest)
  return false;
#undef DO_
}

void IncreaseCashPaidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseCashPaidRequest)
  // required int32 cash_paid = 1;
  if (has_cash_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cash_paid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseCashPaidRequest)
}

::google::protobuf::uint8* IncreaseCashPaidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseCashPaidRequest)
  // required int32 cash_paid = 1;
  if (has_cash_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cash_paid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseCashPaidRequest)
  return target;
}

int IncreaseCashPaidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 cash_paid = 1;
    if (has_cash_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash_paid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseCashPaidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseCashPaidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseCashPaidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseCashPaidRequest::MergeFrom(const IncreaseCashPaidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cash_paid()) {
      set_cash_paid(from.cash_paid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseCashPaidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseCashPaidRequest::CopyFrom(const IncreaseCashPaidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseCashPaidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncreaseCashPaidRequest::Swap(IncreaseCashPaidRequest* other) {
  if (other != this) {
    std::swap(cash_paid_, other->cash_paid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseCashPaidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseCashPaidRequest_descriptor_;
  metadata.reflection = IncreaseCashPaidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseCashPaidResponse::kResultFieldNumber;
const int IncreaseCashPaidResponse::kCashPaidFieldNumber;
#endif  // !_MSC_VER

IncreaseCashPaidResponse::IncreaseCashPaidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseCashPaidResponse)
}

void IncreaseCashPaidResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

IncreaseCashPaidResponse::IncreaseCashPaidResponse(const IncreaseCashPaidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseCashPaidResponse)
}

void IncreaseCashPaidResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  cash_paid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseCashPaidResponse::~IncreaseCashPaidResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseCashPaidResponse)
  SharedDtor();
}

void IncreaseCashPaidResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void IncreaseCashPaidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseCashPaidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseCashPaidResponse_descriptor_;
}

const IncreaseCashPaidResponse& IncreaseCashPaidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseCashPaidResponse* IncreaseCashPaidResponse::default_instance_ = NULL;

IncreaseCashPaidResponse* IncreaseCashPaidResponse::New() const {
  return new IncreaseCashPaidResponse;
}

void IncreaseCashPaidResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    cash_paid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseCashPaidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseCashPaidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cash_paid;
        break;
      }

      // optional int32 cash_paid = 2;
      case 2: {
        if (tag == 16) {
         parse_cash_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cash_paid_)));
          set_has_cash_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseCashPaidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseCashPaidResponse)
  return false;
#undef DO_
}

void IncreaseCashPaidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseCashPaidResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 cash_paid = 2;
  if (has_cash_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cash_paid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseCashPaidResponse)
}

::google::protobuf::uint8* IncreaseCashPaidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseCashPaidResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 cash_paid = 2;
  if (has_cash_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cash_paid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseCashPaidResponse)
  return target;
}

int IncreaseCashPaidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 cash_paid = 2;
    if (has_cash_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cash_paid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseCashPaidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseCashPaidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseCashPaidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseCashPaidResponse::MergeFrom(const IncreaseCashPaidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_cash_paid()) {
      set_cash_paid(from.cash_paid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseCashPaidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseCashPaidResponse::CopyFrom(const IncreaseCashPaidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseCashPaidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void IncreaseCashPaidResponse::Swap(IncreaseCashPaidResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cash_paid_, other->cash_paid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseCashPaidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseCashPaidResponse_descriptor_;
  metadata.reflection = IncreaseCashPaidResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseDarkCrystalPaidRequest::kDarkCrystalPaidFieldNumber;
#endif  // !_MSC_VER

IncreaseDarkCrystalPaidRequest::IncreaseDarkCrystalPaidRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
}

void IncreaseDarkCrystalPaidRequest::InitAsDefaultInstance() {
}

IncreaseDarkCrystalPaidRequest::IncreaseDarkCrystalPaidRequest(const IncreaseDarkCrystalPaidRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
}

void IncreaseDarkCrystalPaidRequest::SharedCtor() {
  _cached_size_ = 0;
  dark_crystal_paid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseDarkCrystalPaidRequest::~IncreaseDarkCrystalPaidRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  SharedDtor();
}

void IncreaseDarkCrystalPaidRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncreaseDarkCrystalPaidRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseDarkCrystalPaidRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseDarkCrystalPaidRequest_descriptor_;
}

const IncreaseDarkCrystalPaidRequest& IncreaseDarkCrystalPaidRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseDarkCrystalPaidRequest* IncreaseDarkCrystalPaidRequest::default_instance_ = NULL;

IncreaseDarkCrystalPaidRequest* IncreaseDarkCrystalPaidRequest::New() const {
  return new IncreaseDarkCrystalPaidRequest;
}

void IncreaseDarkCrystalPaidRequest::Clear() {
  dark_crystal_paid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseDarkCrystalPaidRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dark_crystal_paid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dark_crystal_paid_)));
          set_has_dark_crystal_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  return false;
#undef DO_
}

void IncreaseDarkCrystalPaidRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  // required int32 dark_crystal_paid = 1;
  if (has_dark_crystal_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dark_crystal_paid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
}

::google::protobuf::uint8* IncreaseDarkCrystalPaidRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  // required int32 dark_crystal_paid = 1;
  if (has_dark_crystal_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dark_crystal_paid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseDarkCrystalPaidRequest)
  return target;
}

int IncreaseDarkCrystalPaidRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dark_crystal_paid = 1;
    if (has_dark_crystal_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dark_crystal_paid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseDarkCrystalPaidRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseDarkCrystalPaidRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseDarkCrystalPaidRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseDarkCrystalPaidRequest::MergeFrom(const IncreaseDarkCrystalPaidRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dark_crystal_paid()) {
      set_dark_crystal_paid(from.dark_crystal_paid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseDarkCrystalPaidRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseDarkCrystalPaidRequest::CopyFrom(const IncreaseDarkCrystalPaidRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseDarkCrystalPaidRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncreaseDarkCrystalPaidRequest::Swap(IncreaseDarkCrystalPaidRequest* other) {
  if (other != this) {
    std::swap(dark_crystal_paid_, other->dark_crystal_paid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseDarkCrystalPaidRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseDarkCrystalPaidRequest_descriptor_;
  metadata.reflection = IncreaseDarkCrystalPaidRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseDarkCrystalPaidResponse::kResultFieldNumber;
const int IncreaseDarkCrystalPaidResponse::kDarkCrystalPaidFieldNumber;
#endif  // !_MSC_VER

IncreaseDarkCrystalPaidResponse::IncreaseDarkCrystalPaidResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
}

void IncreaseDarkCrystalPaidResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

IncreaseDarkCrystalPaidResponse::IncreaseDarkCrystalPaidResponse(const IncreaseDarkCrystalPaidResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
}

void IncreaseDarkCrystalPaidResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  dark_crystal_paid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseDarkCrystalPaidResponse::~IncreaseDarkCrystalPaidResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  SharedDtor();
}

void IncreaseDarkCrystalPaidResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void IncreaseDarkCrystalPaidResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseDarkCrystalPaidResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseDarkCrystalPaidResponse_descriptor_;
}

const IncreaseDarkCrystalPaidResponse& IncreaseDarkCrystalPaidResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseDarkCrystalPaidResponse* IncreaseDarkCrystalPaidResponse::default_instance_ = NULL;

IncreaseDarkCrystalPaidResponse* IncreaseDarkCrystalPaidResponse::New() const {
  return new IncreaseDarkCrystalPaidResponse;
}

void IncreaseDarkCrystalPaidResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    dark_crystal_paid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseDarkCrystalPaidResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dark_crystal_paid;
        break;
      }

      // optional int32 dark_crystal_paid = 2;
      case 2: {
        if (tag == 16) {
         parse_dark_crystal_paid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dark_crystal_paid_)));
          set_has_dark_crystal_paid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  return false;
#undef DO_
}

void IncreaseDarkCrystalPaidResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 dark_crystal_paid = 2;
  if (has_dark_crystal_paid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dark_crystal_paid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
}

::google::protobuf::uint8* IncreaseDarkCrystalPaidResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 dark_crystal_paid = 2;
  if (has_dark_crystal_paid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dark_crystal_paid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseDarkCrystalPaidResponse)
  return target;
}

int IncreaseDarkCrystalPaidResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 dark_crystal_paid = 2;
    if (has_dark_crystal_paid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dark_crystal_paid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseDarkCrystalPaidResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseDarkCrystalPaidResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseDarkCrystalPaidResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseDarkCrystalPaidResponse::MergeFrom(const IncreaseDarkCrystalPaidResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_dark_crystal_paid()) {
      set_dark_crystal_paid(from.dark_crystal_paid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseDarkCrystalPaidResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseDarkCrystalPaidResponse::CopyFrom(const IncreaseDarkCrystalPaidResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseDarkCrystalPaidResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void IncreaseDarkCrystalPaidResponse::Swap(IncreaseDarkCrystalPaidResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(dark_crystal_paid_, other->dark_crystal_paid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseDarkCrystalPaidResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseDarkCrystalPaidResponse_descriptor_;
  metadata.reflection = IncreaseDarkCrystalPaidResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseMoneyRequest::kMoneyFieldNumber;
#endif  // !_MSC_VER

IncreaseMoneyRequest::IncreaseMoneyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseMoneyRequest)
}

void IncreaseMoneyRequest::InitAsDefaultInstance() {
}

IncreaseMoneyRequest::IncreaseMoneyRequest(const IncreaseMoneyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseMoneyRequest)
}

void IncreaseMoneyRequest::SharedCtor() {
  _cached_size_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseMoneyRequest::~IncreaseMoneyRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseMoneyRequest)
  SharedDtor();
}

void IncreaseMoneyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncreaseMoneyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseMoneyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseMoneyRequest_descriptor_;
}

const IncreaseMoneyRequest& IncreaseMoneyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseMoneyRequest* IncreaseMoneyRequest::default_instance_ = NULL;

IncreaseMoneyRequest* IncreaseMoneyRequest::New() const {
  return new IncreaseMoneyRequest;
}

void IncreaseMoneyRequest::Clear() {
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseMoneyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseMoneyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 money = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseMoneyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseMoneyRequest)
  return false;
#undef DO_
}

void IncreaseMoneyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseMoneyRequest)
  // required int32 money = 1;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseMoneyRequest)
}

::google::protobuf::uint8* IncreaseMoneyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseMoneyRequest)
  // required int32 money = 1;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseMoneyRequest)
  return target;
}

int IncreaseMoneyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 money = 1;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseMoneyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseMoneyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseMoneyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseMoneyRequest::MergeFrom(const IncreaseMoneyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseMoneyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseMoneyRequest::CopyFrom(const IncreaseMoneyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseMoneyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncreaseMoneyRequest::Swap(IncreaseMoneyRequest* other) {
  if (other != this) {
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseMoneyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseMoneyRequest_descriptor_;
  metadata.reflection = IncreaseMoneyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseMoneyResponse::kResultFieldNumber;
const int IncreaseMoneyResponse::kMoneyFieldNumber;
#endif  // !_MSC_VER

IncreaseMoneyResponse::IncreaseMoneyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseMoneyResponse)
}

void IncreaseMoneyResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

IncreaseMoneyResponse::IncreaseMoneyResponse(const IncreaseMoneyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseMoneyResponse)
}

void IncreaseMoneyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseMoneyResponse::~IncreaseMoneyResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseMoneyResponse)
  SharedDtor();
}

void IncreaseMoneyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void IncreaseMoneyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseMoneyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseMoneyResponse_descriptor_;
}

const IncreaseMoneyResponse& IncreaseMoneyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseMoneyResponse* IncreaseMoneyResponse::default_instance_ = NULL;

IncreaseMoneyResponse* IncreaseMoneyResponse::New() const {
  return new IncreaseMoneyResponse;
}

void IncreaseMoneyResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseMoneyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseMoneyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (tag == 16) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseMoneyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseMoneyResponse)
  return false;
#undef DO_
}

void IncreaseMoneyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseMoneyResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseMoneyResponse)
}

::google::protobuf::uint8* IncreaseMoneyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseMoneyResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseMoneyResponse)
  return target;
}

int IncreaseMoneyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseMoneyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseMoneyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseMoneyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseMoneyResponse::MergeFrom(const IncreaseMoneyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseMoneyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseMoneyResponse::CopyFrom(const IncreaseMoneyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseMoneyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void IncreaseMoneyResponse::Swap(IncreaseMoneyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseMoneyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseMoneyResponse_descriptor_;
  metadata.reflection = IncreaseMoneyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetItemLevelupRequest::kItemIdFieldNumber;
const int SetItemLevelupRequest::kLevelFieldNumber;
const int SetItemLevelupRequest::kExpFieldNumber;
const int SetItemLevelupRequest::kEnhanceLevelFieldNumber;
#endif  // !_MSC_VER

SetItemLevelupRequest::SetItemLevelupRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetItemLevelupRequest)
}

void SetItemLevelupRequest::InitAsDefaultInstance() {
}

SetItemLevelupRequest::SetItemLevelupRequest(const SetItemLevelupRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetItemLevelupRequest)
}

void SetItemLevelupRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  exp_ = 0;
  enhance_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetItemLevelupRequest::~SetItemLevelupRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetItemLevelupRequest)
  SharedDtor();
}

void SetItemLevelupRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetItemLevelupRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetItemLevelupRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetItemLevelupRequest_descriptor_;
}

const SetItemLevelupRequest& SetItemLevelupRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetItemLevelupRequest* SetItemLevelupRequest::default_instance_ = NULL;

SetItemLevelupRequest* SetItemLevelupRequest::New() const {
  return new SetItemLevelupRequest;
}

void SetItemLevelupRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetItemLevelupRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(item_id_, enhance_level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetItemLevelupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetItemLevelupRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_exp;
        break;
      }

      // required float exp = 3;
      case 3: {
        if (tag == 29) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 4;
      case 4: {
        if (tag == 32) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetItemLevelupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetItemLevelupRequest)
  return false;
#undef DO_
}

void SetItemLevelupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetItemLevelupRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required float exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->exp(), output);
  }

  // required int32 enhance_level = 4;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enhance_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetItemLevelupRequest)
}

::google::protobuf::uint8* SetItemLevelupRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetItemLevelupRequest)
  // required int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required float exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->exp(), target);
  }

  // required int32 enhance_level = 4;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enhance_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetItemLevelupRequest)
  return target;
}

int SetItemLevelupRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required float exp = 3;
    if (has_exp()) {
      total_size += 1 + 4;
    }

    // required int32 enhance_level = 4;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetItemLevelupRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetItemLevelupRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetItemLevelupRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetItemLevelupRequest::MergeFrom(const SetItemLevelupRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetItemLevelupRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetItemLevelupRequest::CopyFrom(const SetItemLevelupRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetItemLevelupRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SetItemLevelupRequest::Swap(SetItemLevelupRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetItemLevelupRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetItemLevelupRequest_descriptor_;
  metadata.reflection = SetItemLevelupRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetItemLevelupResponse::kResultFieldNumber;
const int SetItemLevelupResponse::kItemFieldNumber;
#endif  // !_MSC_VER

SetItemLevelupResponse::SetItemLevelupResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetItemLevelupResponse)
}

void SetItemLevelupResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  item_ = const_cast< ::b2::protocol::commondata::Item*>(&::b2::protocol::commondata::Item::default_instance());
}

SetItemLevelupResponse::SetItemLevelupResponse(const SetItemLevelupResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetItemLevelupResponse)
}

void SetItemLevelupResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetItemLevelupResponse::~SetItemLevelupResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetItemLevelupResponse)
  SharedDtor();
}

void SetItemLevelupResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete item_;
  }
}

void SetItemLevelupResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetItemLevelupResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetItemLevelupResponse_descriptor_;
}

const SetItemLevelupResponse& SetItemLevelupResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetItemLevelupResponse* SetItemLevelupResponse::default_instance_ = NULL;

SetItemLevelupResponse* SetItemLevelupResponse::New() const {
  return new SetItemLevelupResponse;
}

void SetItemLevelupResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::b2::protocol::commondata::Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetItemLevelupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetItemLevelupResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // optional .b2.protocol.commondata.Item item = 2;
      case 2: {
        if (tag == 18) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetItemLevelupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetItemLevelupResponse)
  return false;
#undef DO_
}

void SetItemLevelupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetItemLevelupResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Item item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetItemLevelupResponse)
}

::google::protobuf::uint8* SetItemLevelupResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetItemLevelupResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Item item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetItemLevelupResponse)
  return target;
}

int SetItemLevelupResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Item item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetItemLevelupResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetItemLevelupResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetItemLevelupResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetItemLevelupResponse::MergeFrom(const SetItemLevelupResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_item()) {
      mutable_item()->::b2::protocol::commondata::Item::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetItemLevelupResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetItemLevelupResponse::CopyFrom(const SetItemLevelupResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetItemLevelupResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void SetItemLevelupResponse::Swap(SetItemLevelupResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetItemLevelupResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetItemLevelupResponse_descriptor_;
  metadata.reflection = SetItemLevelupResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCharacterLevelExpRequest::kCharacterTypeFieldNumber;
const int SetCharacterLevelExpRequest::kLevelFieldNumber;
const int SetCharacterLevelExpRequest::kExpFieldNumber;
#endif  // !_MSC_VER

SetCharacterLevelExpRequest::SetCharacterLevelExpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetCharacterLevelExpRequest)
}

void SetCharacterLevelExpRequest::InitAsDefaultInstance() {
}

SetCharacterLevelExpRequest::SetCharacterLevelExpRequest(const SetCharacterLevelExpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetCharacterLevelExpRequest)
}

void SetCharacterLevelExpRequest::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCharacterLevelExpRequest::~SetCharacterLevelExpRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetCharacterLevelExpRequest)
  SharedDtor();
}

void SetCharacterLevelExpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetCharacterLevelExpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCharacterLevelExpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCharacterLevelExpRequest_descriptor_;
}

const SetCharacterLevelExpRequest& SetCharacterLevelExpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetCharacterLevelExpRequest* SetCharacterLevelExpRequest::default_instance_ = NULL;

SetCharacterLevelExpRequest* SetCharacterLevelExpRequest::New() const {
  return new SetCharacterLevelExpRequest;
}

void SetCharacterLevelExpRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetCharacterLevelExpRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(level_, exp_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCharacterLevelExpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetCharacterLevelExpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required int32 exp = 3;
      case 3: {
        if (tag == 24) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetCharacterLevelExpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetCharacterLevelExpRequest)
  return false;
#undef DO_
}

void SetCharacterLevelExpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetCharacterLevelExpRequest)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetCharacterLevelExpRequest)
}

::google::protobuf::uint8* SetCharacterLevelExpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetCharacterLevelExpRequest)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetCharacterLevelExpRequest)
  return target;
}

int SetCharacterLevelExpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCharacterLevelExpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCharacterLevelExpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCharacterLevelExpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCharacterLevelExpRequest::MergeFrom(const SetCharacterLevelExpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCharacterLevelExpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCharacterLevelExpRequest::CopyFrom(const SetCharacterLevelExpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCharacterLevelExpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SetCharacterLevelExpRequest::Swap(SetCharacterLevelExpRequest* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCharacterLevelExpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCharacterLevelExpRequest_descriptor_;
  metadata.reflection = SetCharacterLevelExpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCharacterLevelExpResponse::kResultFieldNumber;
const int SetCharacterLevelExpResponse::kCharacterFieldNumber;
#endif  // !_MSC_VER

SetCharacterLevelExpResponse::SetCharacterLevelExpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetCharacterLevelExpResponse)
}

void SetCharacterLevelExpResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  character_ = const_cast< ::b2::protocol::commondata::Character*>(&::b2::protocol::commondata::Character::default_instance());
}

SetCharacterLevelExpResponse::SetCharacterLevelExpResponse(const SetCharacterLevelExpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetCharacterLevelExpResponse)
}

void SetCharacterLevelExpResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  character_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCharacterLevelExpResponse::~SetCharacterLevelExpResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetCharacterLevelExpResponse)
  SharedDtor();
}

void SetCharacterLevelExpResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete character_;
  }
}

void SetCharacterLevelExpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCharacterLevelExpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCharacterLevelExpResponse_descriptor_;
}

const SetCharacterLevelExpResponse& SetCharacterLevelExpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetCharacterLevelExpResponse* SetCharacterLevelExpResponse::default_instance_ = NULL;

SetCharacterLevelExpResponse* SetCharacterLevelExpResponse::New() const {
  return new SetCharacterLevelExpResponse;
}

void SetCharacterLevelExpResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_character()) {
      if (character_ != NULL) character_->::b2::protocol::commondata::Character::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCharacterLevelExpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetCharacterLevelExpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_character;
        break;
      }

      // optional .b2.protocol.commondata.Character character = 2;
      case 2: {
        if (tag == 18) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetCharacterLevelExpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetCharacterLevelExpResponse)
  return false;
#undef DO_
}

void SetCharacterLevelExpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetCharacterLevelExpResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Character character = 2;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->character(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetCharacterLevelExpResponse)
}

::google::protobuf::uint8* SetCharacterLevelExpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetCharacterLevelExpResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Character character = 2;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->character(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetCharacterLevelExpResponse)
  return target;
}

int SetCharacterLevelExpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Character character = 2;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCharacterLevelExpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCharacterLevelExpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCharacterLevelExpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCharacterLevelExpResponse::MergeFrom(const SetCharacterLevelExpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_character()) {
      mutable_character()->::b2::protocol::commondata::Character::MergeFrom(from.character());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCharacterLevelExpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCharacterLevelExpResponse::CopyFrom(const SetCharacterLevelExpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCharacterLevelExpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_character()) {
    if (!this->character().IsInitialized()) return false;
  }
  return true;
}

void SetCharacterLevelExpResponse::Swap(SetCharacterLevelExpResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(character_, other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCharacterLevelExpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCharacterLevelExpResponse_descriptor_;
  metadata.reflection = SetCharacterLevelExpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetBladePointRequest::kBladePointFieldNumber;
#endif  // !_MSC_VER

SetBladePointRequest::SetBladePointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetBladePointRequest)
}

void SetBladePointRequest::InitAsDefaultInstance() {
}

SetBladePointRequest::SetBladePointRequest(const SetBladePointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetBladePointRequest)
}

void SetBladePointRequest::SharedCtor() {
  _cached_size_ = 0;
  blade_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBladePointRequest::~SetBladePointRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetBladePointRequest)
  SharedDtor();
}

void SetBladePointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetBladePointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBladePointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBladePointRequest_descriptor_;
}

const SetBladePointRequest& SetBladePointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetBladePointRequest* SetBladePointRequest::default_instance_ = NULL;

SetBladePointRequest* SetBladePointRequest::New() const {
  return new SetBladePointRequest;
}

void SetBladePointRequest::Clear() {
  blade_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBladePointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetBladePointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blade_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_point_)));
          set_has_blade_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetBladePointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetBladePointRequest)
  return false;
#undef DO_
}

void SetBladePointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetBladePointRequest)
  // required int32 blade_point = 1;
  if (has_blade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blade_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetBladePointRequest)
}

::google::protobuf::uint8* SetBladePointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetBladePointRequest)
  // required int32 blade_point = 1;
  if (has_blade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blade_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetBladePointRequest)
  return target;
}

int SetBladePointRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blade_point = 1;
    if (has_blade_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBladePointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBladePointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBladePointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBladePointRequest::MergeFrom(const SetBladePointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blade_point()) {
      set_blade_point(from.blade_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBladePointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBladePointRequest::CopyFrom(const SetBladePointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBladePointRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetBladePointRequest::Swap(SetBladePointRequest* other) {
  if (other != this) {
    std::swap(blade_point_, other->blade_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBladePointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBladePointRequest_descriptor_;
  metadata.reflection = SetBladePointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetBladePointResponse::kResultFieldNumber;
const int SetBladePointResponse::kBladePointFieldNumber;
#endif  // !_MSC_VER

SetBladePointResponse::SetBladePointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetBladePointResponse)
}

void SetBladePointResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetBladePointResponse::SetBladePointResponse(const SetBladePointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetBladePointResponse)
}

void SetBladePointResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  blade_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetBladePointResponse::~SetBladePointResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetBladePointResponse)
  SharedDtor();
}

void SetBladePointResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetBladePointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBladePointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetBladePointResponse_descriptor_;
}

const SetBladePointResponse& SetBladePointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetBladePointResponse* SetBladePointResponse::default_instance_ = NULL;

SetBladePointResponse* SetBladePointResponse::New() const {
  return new SetBladePointResponse;
}

void SetBladePointResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    blade_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetBladePointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetBladePointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_blade_point;
        break;
      }

      // optional int32 blade_point = 2;
      case 2: {
        if (tag == 16) {
         parse_blade_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blade_point_)));
          set_has_blade_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetBladePointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetBladePointResponse)
  return false;
#undef DO_
}

void SetBladePointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetBladePointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 blade_point = 2;
  if (has_blade_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->blade_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetBladePointResponse)
}

::google::protobuf::uint8* SetBladePointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetBladePointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 blade_point = 2;
  if (has_blade_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->blade_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetBladePointResponse)
  return target;
}

int SetBladePointResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 blade_point = 2;
    if (has_blade_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blade_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBladePointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetBladePointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetBladePointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetBladePointResponse::MergeFrom(const SetBladePointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_blade_point()) {
      set_blade_point(from.blade_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetBladePointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBladePointResponse::CopyFrom(const SetBladePointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBladePointResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetBladePointResponse::Swap(SetBladePointResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(blade_point_, other->blade_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetBladePointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetBladePointResponse_descriptor_;
  metadata.reflection = SetBladePointResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseRankPromotionPointRequest::kRankPromotionPointFieldNumber;
#endif  // !_MSC_VER

IncreaseRankPromotionPointRequest::IncreaseRankPromotionPointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseRankPromotionPointRequest)
}

void IncreaseRankPromotionPointRequest::InitAsDefaultInstance() {
}

IncreaseRankPromotionPointRequest::IncreaseRankPromotionPointRequest(const IncreaseRankPromotionPointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseRankPromotionPointRequest)
}

void IncreaseRankPromotionPointRequest::SharedCtor() {
  _cached_size_ = 0;
  rank_promotion_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseRankPromotionPointRequest::~IncreaseRankPromotionPointRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseRankPromotionPointRequest)
  SharedDtor();
}

void IncreaseRankPromotionPointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncreaseRankPromotionPointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseRankPromotionPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseRankPromotionPointRequest_descriptor_;
}

const IncreaseRankPromotionPointRequest& IncreaseRankPromotionPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseRankPromotionPointRequest* IncreaseRankPromotionPointRequest::default_instance_ = NULL;

IncreaseRankPromotionPointRequest* IncreaseRankPromotionPointRequest::New() const {
  return new IncreaseRankPromotionPointRequest;
}

void IncreaseRankPromotionPointRequest::Clear() {
  rank_promotion_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseRankPromotionPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseRankPromotionPointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank_promotion_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_promotion_point_)));
          set_has_rank_promotion_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseRankPromotionPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseRankPromotionPointRequest)
  return false;
#undef DO_
}

void IncreaseRankPromotionPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseRankPromotionPointRequest)
  // required int32 rank_promotion_point = 1;
  if (has_rank_promotion_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank_promotion_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseRankPromotionPointRequest)
}

::google::protobuf::uint8* IncreaseRankPromotionPointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseRankPromotionPointRequest)
  // required int32 rank_promotion_point = 1;
  if (has_rank_promotion_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank_promotion_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseRankPromotionPointRequest)
  return target;
}

int IncreaseRankPromotionPointRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank_promotion_point = 1;
    if (has_rank_promotion_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_promotion_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseRankPromotionPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseRankPromotionPointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseRankPromotionPointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseRankPromotionPointRequest::MergeFrom(const IncreaseRankPromotionPointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_promotion_point()) {
      set_rank_promotion_point(from.rank_promotion_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseRankPromotionPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseRankPromotionPointRequest::CopyFrom(const IncreaseRankPromotionPointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseRankPromotionPointRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncreaseRankPromotionPointRequest::Swap(IncreaseRankPromotionPointRequest* other) {
  if (other != this) {
    std::swap(rank_promotion_point_, other->rank_promotion_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseRankPromotionPointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseRankPromotionPointRequest_descriptor_;
  metadata.reflection = IncreaseRankPromotionPointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseRankPromotionPointResponse::kResultFieldNumber;
const int IncreaseRankPromotionPointResponse::kRankPromotionPointFieldNumber;
#endif  // !_MSC_VER

IncreaseRankPromotionPointResponse::IncreaseRankPromotionPointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseRankPromotionPointResponse)
}

void IncreaseRankPromotionPointResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

IncreaseRankPromotionPointResponse::IncreaseRankPromotionPointResponse(const IncreaseRankPromotionPointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseRankPromotionPointResponse)
}

void IncreaseRankPromotionPointResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  rank_promotion_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseRankPromotionPointResponse::~IncreaseRankPromotionPointResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseRankPromotionPointResponse)
  SharedDtor();
}

void IncreaseRankPromotionPointResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void IncreaseRankPromotionPointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseRankPromotionPointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseRankPromotionPointResponse_descriptor_;
}

const IncreaseRankPromotionPointResponse& IncreaseRankPromotionPointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseRankPromotionPointResponse* IncreaseRankPromotionPointResponse::default_instance_ = NULL;

IncreaseRankPromotionPointResponse* IncreaseRankPromotionPointResponse::New() const {
  return new IncreaseRankPromotionPointResponse;
}

void IncreaseRankPromotionPointResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    rank_promotion_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseRankPromotionPointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseRankPromotionPointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank_promotion_point;
        break;
      }

      // optional int32 rank_promotion_point = 2;
      case 2: {
        if (tag == 16) {
         parse_rank_promotion_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_promotion_point_)));
          set_has_rank_promotion_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseRankPromotionPointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseRankPromotionPointResponse)
  return false;
#undef DO_
}

void IncreaseRankPromotionPointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseRankPromotionPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 rank_promotion_point = 2;
  if (has_rank_promotion_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank_promotion_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseRankPromotionPointResponse)
}

::google::protobuf::uint8* IncreaseRankPromotionPointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseRankPromotionPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 rank_promotion_point = 2;
  if (has_rank_promotion_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank_promotion_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseRankPromotionPointResponse)
  return target;
}

int IncreaseRankPromotionPointResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 rank_promotion_point = 2;
    if (has_rank_promotion_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_promotion_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseRankPromotionPointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseRankPromotionPointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseRankPromotionPointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseRankPromotionPointResponse::MergeFrom(const IncreaseRankPromotionPointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_rank_promotion_point()) {
      set_rank_promotion_point(from.rank_promotion_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseRankPromotionPointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseRankPromotionPointResponse::CopyFrom(const IncreaseRankPromotionPointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseRankPromotionPointResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void IncreaseRankPromotionPointResponse::Swap(IncreaseRankPromotionPointResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(rank_promotion_point_, other->rank_promotion_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseRankPromotionPointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseRankPromotionPointResponse_descriptor_;
  metadata.reflection = IncreaseRankPromotionPointResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMailRequest::kMailCategoryFieldNumber;
const int AddMailRequest::kAttachTypeFieldNumber;
const int AddMailRequest::kSourceTypeFieldNumber;
const int AddMailRequest::kSenderTypeFieldNumber;
const int AddMailRequest::kAmountFieldNumber;
const int AddMailRequest::kItemTemplateIdFieldNumber;
const int AddMailRequest::kGeneralLotteryIdFieldNumber;
const int AddMailRequest::kFixedGradeLotteryIdFieldNumber;
const int AddMailRequest::kSelectiveLotteryIdFieldNumber;
const int AddMailRequest::kSelectiveItemLotteryIdFieldNumber;
const int AddMailRequest::kPrefixSelectiveLotteryIdFieldNumber;
#endif  // !_MSC_VER

AddMailRequest::AddMailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddMailRequest)
}

void AddMailRequest::InitAsDefaultInstance() {
}

AddMailRequest::AddMailRequest(const AddMailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddMailRequest)
}

void AddMailRequest::SharedCtor() {
  _cached_size_ = 0;
  mail_category_ = 1;
  attach_type_ = 1;
  source_type_ = 0;
  sender_type_ = 1;
  amount_ = 0;
  item_template_id_ = 0;
  general_lottery_id_ = 0;
  fixed_grade_lottery_id_ = 0;
  selective_lottery_id_ = 0;
  selective_item_lottery_id_ = 0;
  prefix_selective_lottery_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMailRequest::~AddMailRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddMailRequest)
  SharedDtor();
}

void AddMailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMailRequest_descriptor_;
}

const AddMailRequest& AddMailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddMailRequest* AddMailRequest::default_instance_ = NULL;

AddMailRequest* AddMailRequest::New() const {
  return new AddMailRequest;
}

void AddMailRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddMailRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(amount_, fixed_grade_lottery_id_);
    mail_category_ = 1;
    attach_type_ = 1;
    source_type_ = 0;
    sender_type_ = 1;
  }
  ZR_(selective_lottery_id_, prefix_selective_lottery_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddMailRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MailCategory mail_category = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MailCategory_IsValid(value)) {
            set_mail_category(static_cast< ::b2::protocol::commondata::MailCategory >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_attach_type;
        break;
      }

      // required .b2.protocol.commondata.MailPresentAttachType attach_type = 2;
      case 2: {
        if (tag == 16) {
         parse_attach_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MailPresentAttachType_IsValid(value)) {
            set_attach_type(static_cast< ::b2::protocol::commondata::MailPresentAttachType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_source_type;
        break;
      }

      // required .b2.protocol.commondata.MailSourceType source_type = 3;
      case 3: {
        if (tag == 24) {
         parse_source_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MailSourceType_IsValid(value)) {
            set_source_type(static_cast< ::b2::protocol::commondata::MailSourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sender_type;
        break;
      }

      // required .b2.protocol.commondata.MailSenderType sender_type = 4;
      case 4: {
        if (tag == 32) {
         parse_sender_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MailSenderType_IsValid(value)) {
            set_sender_type(static_cast< ::b2::protocol::commondata::MailSenderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_amount;
        break;
      }

      // required int32 amount = 5;
      case 5: {
        if (tag == 40) {
         parse_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &amount_)));
          set_has_amount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_template_id;
        break;
      }

      // optional int32 item_template_id = 6;
      case 6: {
        if (tag == 48) {
         parse_item_template_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_template_id_)));
          set_has_item_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_general_lottery_id;
        break;
      }

      // optional int32 general_lottery_id = 7;
      case 7: {
        if (tag == 56) {
         parse_general_lottery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &general_lottery_id_)));
          set_has_general_lottery_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fixed_grade_lottery_id;
        break;
      }

      // optional int32 fixed_grade_lottery_id = 8;
      case 8: {
        if (tag == 64) {
         parse_fixed_grade_lottery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixed_grade_lottery_id_)));
          set_has_fixed_grade_lottery_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_selective_lottery_id;
        break;
      }

      // optional int32 selective_lottery_id = 9;
      case 9: {
        if (tag == 72) {
         parse_selective_lottery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selective_lottery_id_)));
          set_has_selective_lottery_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_selective_item_lottery_id;
        break;
      }

      // optional int32 selective_item_lottery_id = 10;
      case 10: {
        if (tag == 80) {
         parse_selective_item_lottery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selective_item_lottery_id_)));
          set_has_selective_item_lottery_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_prefix_selective_lottery_id;
        break;
      }

      // optional int32 prefix_selective_lottery_id = 11;
      case 11: {
        if (tag == 88) {
         parse_prefix_selective_lottery_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prefix_selective_lottery_id_)));
          set_has_prefix_selective_lottery_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddMailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddMailRequest)
  return false;
#undef DO_
}

void AddMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddMailRequest)
  // required .b2.protocol.commondata.MailCategory mail_category = 1;
  if (has_mail_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mail_category(), output);
  }

  // required .b2.protocol.commondata.MailPresentAttachType attach_type = 2;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->attach_type(), output);
  }

  // required .b2.protocol.commondata.MailSourceType source_type = 3;
  if (has_source_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source_type(), output);
  }

  // required .b2.protocol.commondata.MailSenderType sender_type = 4;
  if (has_sender_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sender_type(), output);
  }

  // required int32 amount = 5;
  if (has_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->amount(), output);
  }

  // optional int32 item_template_id = 6;
  if (has_item_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->item_template_id(), output);
  }

  // optional int32 general_lottery_id = 7;
  if (has_general_lottery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->general_lottery_id(), output);
  }

  // optional int32 fixed_grade_lottery_id = 8;
  if (has_fixed_grade_lottery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fixed_grade_lottery_id(), output);
  }

  // optional int32 selective_lottery_id = 9;
  if (has_selective_lottery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->selective_lottery_id(), output);
  }

  // optional int32 selective_item_lottery_id = 10;
  if (has_selective_item_lottery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->selective_item_lottery_id(), output);
  }

  // optional int32 prefix_selective_lottery_id = 11;
  if (has_prefix_selective_lottery_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->prefix_selective_lottery_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddMailRequest)
}

::google::protobuf::uint8* AddMailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddMailRequest)
  // required .b2.protocol.commondata.MailCategory mail_category = 1;
  if (has_mail_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mail_category(), target);
  }

  // required .b2.protocol.commondata.MailPresentAttachType attach_type = 2;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->attach_type(), target);
  }

  // required .b2.protocol.commondata.MailSourceType source_type = 3;
  if (has_source_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->source_type(), target);
  }

  // required .b2.protocol.commondata.MailSenderType sender_type = 4;
  if (has_sender_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->sender_type(), target);
  }

  // required int32 amount = 5;
  if (has_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->amount(), target);
  }

  // optional int32 item_template_id = 6;
  if (has_item_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->item_template_id(), target);
  }

  // optional int32 general_lottery_id = 7;
  if (has_general_lottery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->general_lottery_id(), target);
  }

  // optional int32 fixed_grade_lottery_id = 8;
  if (has_fixed_grade_lottery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fixed_grade_lottery_id(), target);
  }

  // optional int32 selective_lottery_id = 9;
  if (has_selective_lottery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->selective_lottery_id(), target);
  }

  // optional int32 selective_item_lottery_id = 10;
  if (has_selective_item_lottery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->selective_item_lottery_id(), target);
  }

  // optional int32 prefix_selective_lottery_id = 11;
  if (has_prefix_selective_lottery_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->prefix_selective_lottery_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddMailRequest)
  return target;
}

int AddMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MailCategory mail_category = 1;
    if (has_mail_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mail_category());
    }

    // required .b2.protocol.commondata.MailPresentAttachType attach_type = 2;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attach_type());
    }

    // required .b2.protocol.commondata.MailSourceType source_type = 3;
    if (has_source_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source_type());
    }

    // required .b2.protocol.commondata.MailSenderType sender_type = 4;
    if (has_sender_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sender_type());
    }

    // required int32 amount = 5;
    if (has_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->amount());
    }

    // optional int32 item_template_id = 6;
    if (has_item_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_template_id());
    }

    // optional int32 general_lottery_id = 7;
    if (has_general_lottery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->general_lottery_id());
    }

    // optional int32 fixed_grade_lottery_id = 8;
    if (has_fixed_grade_lottery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixed_grade_lottery_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 selective_lottery_id = 9;
    if (has_selective_lottery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selective_lottery_id());
    }

    // optional int32 selective_item_lottery_id = 10;
    if (has_selective_item_lottery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selective_item_lottery_id());
    }

    // optional int32 prefix_selective_lottery_id = 11;
    if (has_prefix_selective_lottery_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prefix_selective_lottery_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMailRequest::MergeFrom(const AddMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mail_category()) {
      set_mail_category(from.mail_category());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_source_type()) {
      set_source_type(from.source_type());
    }
    if (from.has_sender_type()) {
      set_sender_type(from.sender_type());
    }
    if (from.has_amount()) {
      set_amount(from.amount());
    }
    if (from.has_item_template_id()) {
      set_item_template_id(from.item_template_id());
    }
    if (from.has_general_lottery_id()) {
      set_general_lottery_id(from.general_lottery_id());
    }
    if (from.has_fixed_grade_lottery_id()) {
      set_fixed_grade_lottery_id(from.fixed_grade_lottery_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_selective_lottery_id()) {
      set_selective_lottery_id(from.selective_lottery_id());
    }
    if (from.has_selective_item_lottery_id()) {
      set_selective_item_lottery_id(from.selective_item_lottery_id());
    }
    if (from.has_prefix_selective_lottery_id()) {
      set_prefix_selective_lottery_id(from.prefix_selective_lottery_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMailRequest::CopyFrom(const AddMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AddMailRequest::Swap(AddMailRequest* other) {
  if (other != this) {
    std::swap(mail_category_, other->mail_category_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(source_type_, other->source_type_);
    std::swap(sender_type_, other->sender_type_);
    std::swap(amount_, other->amount_);
    std::swap(item_template_id_, other->item_template_id_);
    std::swap(general_lottery_id_, other->general_lottery_id_);
    std::swap(fixed_grade_lottery_id_, other->fixed_grade_lottery_id_);
    std::swap(selective_lottery_id_, other->selective_lottery_id_);
    std::swap(selective_item_lottery_id_, other->selective_item_lottery_id_);
    std::swap(prefix_selective_lottery_id_, other->prefix_selective_lottery_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMailRequest_descriptor_;
  metadata.reflection = AddMailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMailResponse::kResultFieldNumber;
const int AddMailResponse::kMailIdFieldNumber;
#endif  // !_MSC_VER

AddMailResponse::AddMailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddMailResponse)
}

void AddMailResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

AddMailResponse::AddMailResponse(const AddMailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddMailResponse)
}

void AddMailResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  mail_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMailResponse::~AddMailResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddMailResponse)
  SharedDtor();
}

void AddMailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddMailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddMailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMailResponse_descriptor_;
}

const AddMailResponse& AddMailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddMailResponse* AddMailResponse::default_instance_ = NULL;

AddMailResponse* AddMailResponse::New() const {
  return new AddMailResponse;
}

void AddMailResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    mail_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddMailResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mail_id;
        break;
      }

      // optional int64 mail_id = 2;
      case 2: {
        if (tag == 16) {
         parse_mail_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mail_id_)));
          set_has_mail_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddMailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddMailResponse)
  return false;
#undef DO_
}

void AddMailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddMailResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int64 mail_id = 2;
  if (has_mail_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mail_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddMailResponse)
}

::google::protobuf::uint8* AddMailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddMailResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int64 mail_id = 2;
  if (has_mail_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mail_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddMailResponse)
  return target;
}

int AddMailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int64 mail_id = 2;
    if (has_mail_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mail_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddMailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMailResponse::MergeFrom(const AddMailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_mail_id()) {
      set_mail_id(from.mail_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMailResponse::CopyFrom(const AddMailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void AddMailResponse::Swap(AddMailResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mail_id_, other->mail_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddMailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddMailResponse_descriptor_;
  metadata.reflection = AddMailResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeRankingRequest::kMatchTypeFieldNumber;
const int MakeRankingRequest::kRankingFieldNumber;
#endif  // !_MSC_VER

MakeRankingRequest::MakeRankingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.MakeRankingRequest)
}

void MakeRankingRequest::InitAsDefaultInstance() {
}

MakeRankingRequest::MakeRankingRequest(const MakeRankingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.MakeRankingRequest)
}

void MakeRankingRequest::SharedCtor() {
  _cached_size_ = 0;
  match_type_ = 1;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeRankingRequest::~MakeRankingRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.MakeRankingRequest)
  SharedDtor();
}

void MakeRankingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeRankingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeRankingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeRankingRequest_descriptor_;
}

const MakeRankingRequest& MakeRankingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

MakeRankingRequest* MakeRankingRequest::default_instance_ = NULL;

MakeRankingRequest* MakeRankingRequest::New() const {
  return new MakeRankingRequest;
}

void MakeRankingRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    match_type_ = 1;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeRankingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.MakeRankingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchInfo_TYPE_IsValid(value)) {
            set_match_type(static_cast< ::b2::protocol::commondata::MatchInfo_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // required int32 ranking = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.MakeRankingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.MakeRankingRequest)
  return false;
#undef DO_
}

void MakeRankingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.MakeRankingRequest)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_type(), output);
  }

  // required int32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.MakeRankingRequest)
}

::google::protobuf::uint8* MakeRankingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.MakeRankingRequest)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_type(), target);
  }

  // required int32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.MakeRankingRequest)
  return target;
}

int MakeRankingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // required int32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeRankingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeRankingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeRankingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeRankingRequest::MergeFrom(const MakeRankingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeRankingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeRankingRequest::CopyFrom(const MakeRankingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeRankingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MakeRankingRequest::Swap(MakeRankingRequest* other) {
  if (other != this) {
    std::swap(match_type_, other->match_type_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeRankingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeRankingRequest_descriptor_;
  metadata.reflection = MakeRankingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeRankingResponse::kResultFieldNumber;
#endif  // !_MSC_VER

MakeRankingResponse::MakeRankingResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.MakeRankingResponse)
}

void MakeRankingResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

MakeRankingResponse::MakeRankingResponse(const MakeRankingResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.MakeRankingResponse)
}

void MakeRankingResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeRankingResponse::~MakeRankingResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.MakeRankingResponse)
  SharedDtor();
}

void MakeRankingResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void MakeRankingResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeRankingResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeRankingResponse_descriptor_;
}

const MakeRankingResponse& MakeRankingResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

MakeRankingResponse* MakeRankingResponse::default_instance_ = NULL;

MakeRankingResponse* MakeRankingResponse::New() const {
  return new MakeRankingResponse;
}

void MakeRankingResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeRankingResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.MakeRankingResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.MakeRankingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.MakeRankingResponse)
  return false;
#undef DO_
}

void MakeRankingResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.MakeRankingResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.MakeRankingResponse)
}

::google::protobuf::uint8* MakeRankingResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.MakeRankingResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.MakeRankingResponse)
  return target;
}

int MakeRankingResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeRankingResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeRankingResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeRankingResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeRankingResponse::MergeFrom(const MakeRankingResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeRankingResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeRankingResponse::CopyFrom(const MakeRankingResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeRankingResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void MakeRankingResponse::Swap(MakeRankingResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeRankingResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeRankingResponse_descriptor_;
  metadata.reflection = MakeRankingResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceClearStageRequest::kStageIdFieldNumber;
#endif  // !_MSC_VER

ForceClearStageRequest::ForceClearStageRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceClearStageRequest)
}

void ForceClearStageRequest::InitAsDefaultInstance() {
}

ForceClearStageRequest::ForceClearStageRequest(const ForceClearStageRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceClearStageRequest)
}

void ForceClearStageRequest::SharedCtor() {
  _cached_size_ = 0;
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceClearStageRequest::~ForceClearStageRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceClearStageRequest)
  SharedDtor();
}

void ForceClearStageRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceClearStageRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceClearStageRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceClearStageRequest_descriptor_;
}

const ForceClearStageRequest& ForceClearStageRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceClearStageRequest* ForceClearStageRequest::default_instance_ = NULL;

ForceClearStageRequest* ForceClearStageRequest::New() const {
  return new ForceClearStageRequest;
}

void ForceClearStageRequest::Clear() {
  stage_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceClearStageRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceClearStageRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_id_)));
          set_has_stage_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceClearStageRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceClearStageRequest)
  return false;
#undef DO_
}

void ForceClearStageRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceClearStageRequest)
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceClearStageRequest)
}

::google::protobuf::uint8* ForceClearStageRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceClearStageRequest)
  // required int32 stage_id = 1;
  if (has_stage_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceClearStageRequest)
  return target;
}

int ForceClearStageRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_id = 1;
    if (has_stage_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceClearStageRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceClearStageRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceClearStageRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceClearStageRequest::MergeFrom(const ForceClearStageRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_id()) {
      set_stage_id(from.stage_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceClearStageRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceClearStageRequest::CopyFrom(const ForceClearStageRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceClearStageRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ForceClearStageRequest::Swap(ForceClearStageRequest* other) {
  if (other != this) {
    std::swap(stage_id_, other->stage_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceClearStageRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceClearStageRequest_descriptor_;
  metadata.reflection = ForceClearStageRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceClearStageResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ForceClearStageResponse::ForceClearStageResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceClearStageResponse)
}

void ForceClearStageResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ForceClearStageResponse::ForceClearStageResponse(const ForceClearStageResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceClearStageResponse)
}

void ForceClearStageResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceClearStageResponse::~ForceClearStageResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceClearStageResponse)
  SharedDtor();
}

void ForceClearStageResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ForceClearStageResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceClearStageResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceClearStageResponse_descriptor_;
}

const ForceClearStageResponse& ForceClearStageResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceClearStageResponse* ForceClearStageResponse::default_instance_ = NULL;

ForceClearStageResponse* ForceClearStageResponse::New() const {
  return new ForceClearStageResponse;
}

void ForceClearStageResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceClearStageResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceClearStageResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceClearStageResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceClearStageResponse)
  return false;
#undef DO_
}

void ForceClearStageResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceClearStageResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceClearStageResponse)
}

::google::protobuf::uint8* ForceClearStageResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceClearStageResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceClearStageResponse)
  return target;
}

int ForceClearStageResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceClearStageResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceClearStageResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceClearStageResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceClearStageResponse::MergeFrom(const ForceClearStageResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceClearStageResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceClearStageResponse::CopyFrom(const ForceClearStageResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceClearStageResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ForceClearStageResponse::Swap(ForceClearStageResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceClearStageResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceClearStageResponse_descriptor_;
  metadata.reflection = ForceClearStageResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetQuestStateRequest::kQuestIdFieldNumber;
const int SetQuestStateRequest::kQuestStateFieldNumber;
#endif  // !_MSC_VER

SetQuestStateRequest::SetQuestStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetQuestStateRequest)
}

void SetQuestStateRequest::InitAsDefaultInstance() {
}

SetQuestStateRequest::SetQuestStateRequest(const SetQuestStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetQuestStateRequest)
}

void SetQuestStateRequest::SharedCtor() {
  _cached_size_ = 0;
  quest_id_ = 0;
  quest_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetQuestStateRequest::~SetQuestStateRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetQuestStateRequest)
  SharedDtor();
}

void SetQuestStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetQuestStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetQuestStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetQuestStateRequest_descriptor_;
}

const SetQuestStateRequest& SetQuestStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetQuestStateRequest* SetQuestStateRequest::default_instance_ = NULL;

SetQuestStateRequest* SetQuestStateRequest::New() const {
  return new SetQuestStateRequest;
}

void SetQuestStateRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetQuestStateRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(quest_id_, quest_state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetQuestStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetQuestStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 quest_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quest_state;
        break;
      }

      // required int32 quest_state = 2;
      case 2: {
        if (tag == 16) {
         parse_quest_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_state_)));
          set_has_quest_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetQuestStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetQuestStateRequest)
  return false;
#undef DO_
}

void SetQuestStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetQuestStateRequest)
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->quest_id(), output);
  }

  // required int32 quest_state = 2;
  if (has_quest_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetQuestStateRequest)
}

::google::protobuf::uint8* SetQuestStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetQuestStateRequest)
  // required int32 quest_id = 1;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->quest_id(), target);
  }

  // required int32 quest_state = 2;
  if (has_quest_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetQuestStateRequest)
  return target;
}

int SetQuestStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 quest_id = 1;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }

    // required int32 quest_state = 2;
    if (has_quest_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetQuestStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetQuestStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetQuestStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetQuestStateRequest::MergeFrom(const SetQuestStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
    if (from.has_quest_state()) {
      set_quest_state(from.quest_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetQuestStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuestStateRequest::CopyFrom(const SetQuestStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuestStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetQuestStateRequest::Swap(SetQuestStateRequest* other) {
  if (other != this) {
    std::swap(quest_id_, other->quest_id_);
    std::swap(quest_state_, other->quest_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetQuestStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetQuestStateRequest_descriptor_;
  metadata.reflection = SetQuestStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetQuestStateResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetQuestStateResponse::SetQuestStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetQuestStateResponse)
}

void SetQuestStateResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetQuestStateResponse::SetQuestStateResponse(const SetQuestStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetQuestStateResponse)
}

void SetQuestStateResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetQuestStateResponse::~SetQuestStateResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetQuestStateResponse)
  SharedDtor();
}

void SetQuestStateResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetQuestStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetQuestStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetQuestStateResponse_descriptor_;
}

const SetQuestStateResponse& SetQuestStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetQuestStateResponse* SetQuestStateResponse::default_instance_ = NULL;

SetQuestStateResponse* SetQuestStateResponse::New() const {
  return new SetQuestStateResponse;
}

void SetQuestStateResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetQuestStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetQuestStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetQuestStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetQuestStateResponse)
  return false;
#undef DO_
}

void SetQuestStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetQuestStateResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetQuestStateResponse)
}

::google::protobuf::uint8* SetQuestStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetQuestStateResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetQuestStateResponse)
  return target;
}

int SetQuestStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetQuestStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetQuestStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetQuestStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetQuestStateResponse::MergeFrom(const SetQuestStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetQuestStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetQuestStateResponse::CopyFrom(const SetQuestStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetQuestStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetQuestStateResponse::Swap(SetQuestStateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetQuestStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetQuestStateResponse_descriptor_;
  metadata.reflection = SetQuestStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseHeroPieceRequest::kHeroPieceFieldNumber;
#endif  // !_MSC_VER

IncreaseHeroPieceRequest::IncreaseHeroPieceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseHeroPieceRequest)
}

void IncreaseHeroPieceRequest::InitAsDefaultInstance() {
}

IncreaseHeroPieceRequest::IncreaseHeroPieceRequest(const IncreaseHeroPieceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseHeroPieceRequest)
}

void IncreaseHeroPieceRequest::SharedCtor() {
  _cached_size_ = 0;
  hero_piece_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseHeroPieceRequest::~IncreaseHeroPieceRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseHeroPieceRequest)
  SharedDtor();
}

void IncreaseHeroPieceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncreaseHeroPieceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseHeroPieceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseHeroPieceRequest_descriptor_;
}

const IncreaseHeroPieceRequest& IncreaseHeroPieceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseHeroPieceRequest* IncreaseHeroPieceRequest::default_instance_ = NULL;

IncreaseHeroPieceRequest* IncreaseHeroPieceRequest::New() const {
  return new IncreaseHeroPieceRequest;
}

void IncreaseHeroPieceRequest::Clear() {
  hero_piece_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseHeroPieceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseHeroPieceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hero_piece = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hero_piece_)));
          set_has_hero_piece();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseHeroPieceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseHeroPieceRequest)
  return false;
#undef DO_
}

void IncreaseHeroPieceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseHeroPieceRequest)
  // required int32 hero_piece = 1;
  if (has_hero_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hero_piece(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseHeroPieceRequest)
}

::google::protobuf::uint8* IncreaseHeroPieceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseHeroPieceRequest)
  // required int32 hero_piece = 1;
  if (has_hero_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hero_piece(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseHeroPieceRequest)
  return target;
}

int IncreaseHeroPieceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hero_piece = 1;
    if (has_hero_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hero_piece());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseHeroPieceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseHeroPieceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseHeroPieceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseHeroPieceRequest::MergeFrom(const IncreaseHeroPieceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_piece()) {
      set_hero_piece(from.hero_piece());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseHeroPieceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseHeroPieceRequest::CopyFrom(const IncreaseHeroPieceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseHeroPieceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncreaseHeroPieceRequest::Swap(IncreaseHeroPieceRequest* other) {
  if (other != this) {
    std::swap(hero_piece_, other->hero_piece_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseHeroPieceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseHeroPieceRequest_descriptor_;
  metadata.reflection = IncreaseHeroPieceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseHeroPieceResponse::kResultFieldNumber;
const int IncreaseHeroPieceResponse::kCurrentHeroPieceFieldNumber;
#endif  // !_MSC_VER

IncreaseHeroPieceResponse::IncreaseHeroPieceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseHeroPieceResponse)
}

void IncreaseHeroPieceResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

IncreaseHeroPieceResponse::IncreaseHeroPieceResponse(const IncreaseHeroPieceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseHeroPieceResponse)
}

void IncreaseHeroPieceResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  current_hero_piece_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseHeroPieceResponse::~IncreaseHeroPieceResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseHeroPieceResponse)
  SharedDtor();
}

void IncreaseHeroPieceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void IncreaseHeroPieceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseHeroPieceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseHeroPieceResponse_descriptor_;
}

const IncreaseHeroPieceResponse& IncreaseHeroPieceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseHeroPieceResponse* IncreaseHeroPieceResponse::default_instance_ = NULL;

IncreaseHeroPieceResponse* IncreaseHeroPieceResponse::New() const {
  return new IncreaseHeroPieceResponse;
}

void IncreaseHeroPieceResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    current_hero_piece_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseHeroPieceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseHeroPieceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_hero_piece;
        break;
      }

      // optional int32 current_hero_piece = 2;
      case 2: {
        if (tag == 16) {
         parse_current_hero_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_hero_piece_)));
          set_has_current_hero_piece();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseHeroPieceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseHeroPieceResponse)
  return false;
#undef DO_
}

void IncreaseHeroPieceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseHeroPieceResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 current_hero_piece = 2;
  if (has_current_hero_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_hero_piece(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseHeroPieceResponse)
}

::google::protobuf::uint8* IncreaseHeroPieceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseHeroPieceResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 current_hero_piece = 2;
  if (has_current_hero_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_hero_piece(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseHeroPieceResponse)
  return target;
}

int IncreaseHeroPieceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 current_hero_piece = 2;
    if (has_current_hero_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_hero_piece());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseHeroPieceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseHeroPieceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseHeroPieceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseHeroPieceResponse::MergeFrom(const IncreaseHeroPieceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_current_hero_piece()) {
      set_current_hero_piece(from.current_hero_piece());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseHeroPieceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseHeroPieceResponse::CopyFrom(const IncreaseHeroPieceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseHeroPieceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void IncreaseHeroPieceResponse::Swap(IncreaseHeroPieceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(current_hero_piece_, other->current_hero_piece_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseHeroPieceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseHeroPieceResponse_descriptor_;
  metadata.reflection = IncreaseHeroPieceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseSocialPointRequest::kSocialPointFieldNumber;
#endif  // !_MSC_VER

IncreaseSocialPointRequest::IncreaseSocialPointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseSocialPointRequest)
}

void IncreaseSocialPointRequest::InitAsDefaultInstance() {
}

IncreaseSocialPointRequest::IncreaseSocialPointRequest(const IncreaseSocialPointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseSocialPointRequest)
}

void IncreaseSocialPointRequest::SharedCtor() {
  _cached_size_ = 0;
  social_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseSocialPointRequest::~IncreaseSocialPointRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseSocialPointRequest)
  SharedDtor();
}

void IncreaseSocialPointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IncreaseSocialPointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseSocialPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseSocialPointRequest_descriptor_;
}

const IncreaseSocialPointRequest& IncreaseSocialPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseSocialPointRequest* IncreaseSocialPointRequest::default_instance_ = NULL;

IncreaseSocialPointRequest* IncreaseSocialPointRequest::New() const {
  return new IncreaseSocialPointRequest;
}

void IncreaseSocialPointRequest::Clear() {
  social_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseSocialPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseSocialPointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 social_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &social_point_)));
          set_has_social_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseSocialPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseSocialPointRequest)
  return false;
#undef DO_
}

void IncreaseSocialPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseSocialPointRequest)
  // required int32 social_point = 1;
  if (has_social_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->social_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseSocialPointRequest)
}

::google::protobuf::uint8* IncreaseSocialPointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseSocialPointRequest)
  // required int32 social_point = 1;
  if (has_social_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->social_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseSocialPointRequest)
  return target;
}

int IncreaseSocialPointRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 social_point = 1;
    if (has_social_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->social_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseSocialPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseSocialPointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseSocialPointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseSocialPointRequest::MergeFrom(const IncreaseSocialPointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_social_point()) {
      set_social_point(from.social_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseSocialPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseSocialPointRequest::CopyFrom(const IncreaseSocialPointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseSocialPointRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void IncreaseSocialPointRequest::Swap(IncreaseSocialPointRequest* other) {
  if (other != this) {
    std::swap(social_point_, other->social_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseSocialPointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseSocialPointRequest_descriptor_;
  metadata.reflection = IncreaseSocialPointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncreaseSocialPointResponse::kResultFieldNumber;
const int IncreaseSocialPointResponse::kCurrentSocialPointFieldNumber;
#endif  // !_MSC_VER

IncreaseSocialPointResponse::IncreaseSocialPointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.IncreaseSocialPointResponse)
}

void IncreaseSocialPointResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

IncreaseSocialPointResponse::IncreaseSocialPointResponse(const IncreaseSocialPointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.IncreaseSocialPointResponse)
}

void IncreaseSocialPointResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  current_social_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncreaseSocialPointResponse::~IncreaseSocialPointResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.IncreaseSocialPointResponse)
  SharedDtor();
}

void IncreaseSocialPointResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void IncreaseSocialPointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncreaseSocialPointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncreaseSocialPointResponse_descriptor_;
}

const IncreaseSocialPointResponse& IncreaseSocialPointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

IncreaseSocialPointResponse* IncreaseSocialPointResponse::default_instance_ = NULL;

IncreaseSocialPointResponse* IncreaseSocialPointResponse::New() const {
  return new IncreaseSocialPointResponse;
}

void IncreaseSocialPointResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    current_social_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncreaseSocialPointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.IncreaseSocialPointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_current_social_point;
        break;
      }

      // optional int32 current_social_point = 2;
      case 2: {
        if (tag == 16) {
         parse_current_social_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_social_point_)));
          set_has_current_social_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.IncreaseSocialPointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.IncreaseSocialPointResponse)
  return false;
#undef DO_
}

void IncreaseSocialPointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.IncreaseSocialPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 current_social_point = 2;
  if (has_current_social_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->current_social_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.IncreaseSocialPointResponse)
}

::google::protobuf::uint8* IncreaseSocialPointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.IncreaseSocialPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 current_social_point = 2;
  if (has_current_social_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->current_social_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.IncreaseSocialPointResponse)
  return target;
}

int IncreaseSocialPointResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 current_social_point = 2;
    if (has_current_social_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_social_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncreaseSocialPointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncreaseSocialPointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncreaseSocialPointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncreaseSocialPointResponse::MergeFrom(const IncreaseSocialPointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_current_social_point()) {
      set_current_social_point(from.current_social_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncreaseSocialPointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncreaseSocialPointResponse::CopyFrom(const IncreaseSocialPointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncreaseSocialPointResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void IncreaseSocialPointResponse::Swap(IncreaseSocialPointResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(current_social_point_, other->current_social_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncreaseSocialPointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncreaseSocialPointResponse_descriptor_;
  metadata.reflection = IncreaseSocialPointResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceClearHeroTowerRequest::kFloorFieldNumber;
#endif  // !_MSC_VER

ForceClearHeroTowerRequest::ForceClearHeroTowerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceClearHeroTowerRequest)
}

void ForceClearHeroTowerRequest::InitAsDefaultInstance() {
}

ForceClearHeroTowerRequest::ForceClearHeroTowerRequest(const ForceClearHeroTowerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceClearHeroTowerRequest)
}

void ForceClearHeroTowerRequest::SharedCtor() {
  _cached_size_ = 0;
  floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceClearHeroTowerRequest::~ForceClearHeroTowerRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceClearHeroTowerRequest)
  SharedDtor();
}

void ForceClearHeroTowerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceClearHeroTowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceClearHeroTowerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceClearHeroTowerRequest_descriptor_;
}

const ForceClearHeroTowerRequest& ForceClearHeroTowerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceClearHeroTowerRequest* ForceClearHeroTowerRequest::default_instance_ = NULL;

ForceClearHeroTowerRequest* ForceClearHeroTowerRequest::New() const {
  return new ForceClearHeroTowerRequest;
}

void ForceClearHeroTowerRequest::Clear() {
  floor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceClearHeroTowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceClearHeroTowerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 floor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceClearHeroTowerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceClearHeroTowerRequest)
  return false;
#undef DO_
}

void ForceClearHeroTowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceClearHeroTowerRequest)
  // required int32 floor = 1;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->floor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceClearHeroTowerRequest)
}

::google::protobuf::uint8* ForceClearHeroTowerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceClearHeroTowerRequest)
  // required int32 floor = 1;
  if (has_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->floor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceClearHeroTowerRequest)
  return target;
}

int ForceClearHeroTowerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 floor = 1;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceClearHeroTowerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceClearHeroTowerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceClearHeroTowerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceClearHeroTowerRequest::MergeFrom(const ForceClearHeroTowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_floor()) {
      set_floor(from.floor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceClearHeroTowerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceClearHeroTowerRequest::CopyFrom(const ForceClearHeroTowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceClearHeroTowerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ForceClearHeroTowerRequest::Swap(ForceClearHeroTowerRequest* other) {
  if (other != this) {
    std::swap(floor_, other->floor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceClearHeroTowerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceClearHeroTowerRequest_descriptor_;
  metadata.reflection = ForceClearHeroTowerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceClearHeroTowerResponse::kResultFieldNumber;
const int ForceClearHeroTowerResponse::kStartFloorFieldNumber;
const int ForceClearHeroTowerResponse::kMaxClearFloorFieldNumber;
const int ForceClearHeroTowerResponse::kMainCharacterTypeFieldNumber;
const int ForceClearHeroTowerResponse::kTagCharacterTypeFieldNumber;
const int ForceClearHeroTowerResponse::kDailyTryCountFieldNumber;
const int ForceClearHeroTowerResponse::kDailyMaxFreeTryCountFieldNumber;
const int ForceClearHeroTowerResponse::kDailyLeftFreeTryCountFieldNumber;
const int ForceClearHeroTowerResponse::kCurrentHeroPieceFieldNumber;
const int ForceClearHeroTowerResponse::kIsSweepFieldNumber;
#endif  // !_MSC_VER

ForceClearHeroTowerResponse::ForceClearHeroTowerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceClearHeroTowerResponse)
}

void ForceClearHeroTowerResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ForceClearHeroTowerResponse::ForceClearHeroTowerResponse(const ForceClearHeroTowerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceClearHeroTowerResponse)
}

void ForceClearHeroTowerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  start_floor_ = 0;
  max_clear_floor_ = 0;
  main_character_type_ = 1;
  tag_character_type_ = 1;
  daily_try_count_ = 0;
  daily_max_free_try_count_ = 0;
  daily_left_free_try_count_ = 0;
  current_hero_piece_ = 0;
  is_sweep_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceClearHeroTowerResponse::~ForceClearHeroTowerResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceClearHeroTowerResponse)
  SharedDtor();
}

void ForceClearHeroTowerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ForceClearHeroTowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceClearHeroTowerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceClearHeroTowerResponse_descriptor_;
}

const ForceClearHeroTowerResponse& ForceClearHeroTowerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceClearHeroTowerResponse* ForceClearHeroTowerResponse::default_instance_ = NULL;

ForceClearHeroTowerResponse* ForceClearHeroTowerResponse::New() const {
  return new ForceClearHeroTowerResponse;
}

void ForceClearHeroTowerResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForceClearHeroTowerResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(start_floor_, max_clear_floor_);
    ZR_(daily_try_count_, daily_left_free_try_count_);
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    main_character_type_ = 1;
    tag_character_type_ = 1;
  }
  ZR_(current_hero_piece_, is_sweep_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceClearHeroTowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceClearHeroTowerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_start_floor;
        break;
      }

      // optional int32 start_floor = 10;
      case 10: {
        if (tag == 80) {
         parse_start_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_floor_)));
          set_has_start_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_max_clear_floor;
        break;
      }

      // optional int32 max_clear_floor = 11;
      case 11: {
        if (tag == 88) {
         parse_max_clear_floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_clear_floor_)));
          set_has_max_clear_floor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_main_character_type;
        break;
      }

      // optional .b2.protocol.commondata.Character.TYPE main_character_type = 12;
      case 12: {
        if (tag == 96) {
         parse_main_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_main_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_tag_character_type;
        break;
      }

      // optional .b2.protocol.commondata.Character.TYPE tag_character_type = 13;
      case 13: {
        if (tag == 104) {
         parse_tag_character_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_tag_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_daily_try_count;
        break;
      }

      // optional int32 daily_try_count = 14;
      case 14: {
        if (tag == 112) {
         parse_daily_try_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_try_count_)));
          set_has_daily_try_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_daily_max_free_try_count;
        break;
      }

      // optional int32 daily_max_free_try_count = 15;
      case 15: {
        if (tag == 120) {
         parse_daily_max_free_try_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_max_free_try_count_)));
          set_has_daily_max_free_try_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_daily_left_free_try_count;
        break;
      }

      // optional int32 daily_left_free_try_count = 16;
      case 16: {
        if (tag == 128) {
         parse_daily_left_free_try_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_left_free_try_count_)));
          set_has_daily_left_free_try_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_current_hero_piece;
        break;
      }

      // optional int32 current_hero_piece = 17;
      case 17: {
        if (tag == 136) {
         parse_current_hero_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_hero_piece_)));
          set_has_current_hero_piece();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_is_sweep;
        break;
      }

      // optional bool is_sweep = 30;
      case 30: {
        if (tag == 240) {
         parse_is_sweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sweep_)));
          set_has_is_sweep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceClearHeroTowerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceClearHeroTowerResponse)
  return false;
#undef DO_
}

void ForceClearHeroTowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceClearHeroTowerResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 start_floor = 10;
  if (has_start_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->start_floor(), output);
  }

  // optional int32 max_clear_floor = 11;
  if (has_max_clear_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->max_clear_floor(), output);
  }

  // optional .b2.protocol.commondata.Character.TYPE main_character_type = 12;
  if (has_main_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->main_character_type(), output);
  }

  // optional .b2.protocol.commondata.Character.TYPE tag_character_type = 13;
  if (has_tag_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->tag_character_type(), output);
  }

  // optional int32 daily_try_count = 14;
  if (has_daily_try_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->daily_try_count(), output);
  }

  // optional int32 daily_max_free_try_count = 15;
  if (has_daily_max_free_try_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->daily_max_free_try_count(), output);
  }

  // optional int32 daily_left_free_try_count = 16;
  if (has_daily_left_free_try_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->daily_left_free_try_count(), output);
  }

  // optional int32 current_hero_piece = 17;
  if (has_current_hero_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->current_hero_piece(), output);
  }

  // optional bool is_sweep = 30;
  if (has_is_sweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->is_sweep(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceClearHeroTowerResponse)
}

::google::protobuf::uint8* ForceClearHeroTowerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceClearHeroTowerResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 start_floor = 10;
  if (has_start_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->start_floor(), target);
  }

  // optional int32 max_clear_floor = 11;
  if (has_max_clear_floor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->max_clear_floor(), target);
  }

  // optional .b2.protocol.commondata.Character.TYPE main_character_type = 12;
  if (has_main_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->main_character_type(), target);
  }

  // optional .b2.protocol.commondata.Character.TYPE tag_character_type = 13;
  if (has_tag_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->tag_character_type(), target);
  }

  // optional int32 daily_try_count = 14;
  if (has_daily_try_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->daily_try_count(), target);
  }

  // optional int32 daily_max_free_try_count = 15;
  if (has_daily_max_free_try_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->daily_max_free_try_count(), target);
  }

  // optional int32 daily_left_free_try_count = 16;
  if (has_daily_left_free_try_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->daily_left_free_try_count(), target);
  }

  // optional int32 current_hero_piece = 17;
  if (has_current_hero_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->current_hero_piece(), target);
  }

  // optional bool is_sweep = 30;
  if (has_is_sweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->is_sweep(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceClearHeroTowerResponse)
  return target;
}

int ForceClearHeroTowerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 start_floor = 10;
    if (has_start_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_floor());
    }

    // optional int32 max_clear_floor = 11;
    if (has_max_clear_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_clear_floor());
    }

    // optional .b2.protocol.commondata.Character.TYPE main_character_type = 12;
    if (has_main_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->main_character_type());
    }

    // optional .b2.protocol.commondata.Character.TYPE tag_character_type = 13;
    if (has_tag_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tag_character_type());
    }

    // optional int32 daily_try_count = 14;
    if (has_daily_try_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_try_count());
    }

    // optional int32 daily_max_free_try_count = 15;
    if (has_daily_max_free_try_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_max_free_try_count());
    }

    // optional int32 daily_left_free_try_count = 16;
    if (has_daily_left_free_try_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_left_free_try_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 current_hero_piece = 17;
    if (has_current_hero_piece()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_hero_piece());
    }

    // optional bool is_sweep = 30;
    if (has_is_sweep()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceClearHeroTowerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceClearHeroTowerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceClearHeroTowerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceClearHeroTowerResponse::MergeFrom(const ForceClearHeroTowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_start_floor()) {
      set_start_floor(from.start_floor());
    }
    if (from.has_max_clear_floor()) {
      set_max_clear_floor(from.max_clear_floor());
    }
    if (from.has_main_character_type()) {
      set_main_character_type(from.main_character_type());
    }
    if (from.has_tag_character_type()) {
      set_tag_character_type(from.tag_character_type());
    }
    if (from.has_daily_try_count()) {
      set_daily_try_count(from.daily_try_count());
    }
    if (from.has_daily_max_free_try_count()) {
      set_daily_max_free_try_count(from.daily_max_free_try_count());
    }
    if (from.has_daily_left_free_try_count()) {
      set_daily_left_free_try_count(from.daily_left_free_try_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_current_hero_piece()) {
      set_current_hero_piece(from.current_hero_piece());
    }
    if (from.has_is_sweep()) {
      set_is_sweep(from.is_sweep());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceClearHeroTowerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceClearHeroTowerResponse::CopyFrom(const ForceClearHeroTowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceClearHeroTowerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ForceClearHeroTowerResponse::Swap(ForceClearHeroTowerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(start_floor_, other->start_floor_);
    std::swap(max_clear_floor_, other->max_clear_floor_);
    std::swap(main_character_type_, other->main_character_type_);
    std::swap(tag_character_type_, other->tag_character_type_);
    std::swap(daily_try_count_, other->daily_try_count_);
    std::swap(daily_max_free_try_count_, other->daily_max_free_try_count_);
    std::swap(daily_left_free_try_count_, other->daily_left_free_try_count_);
    std::swap(current_hero_piece_, other->current_hero_piece_);
    std::swap(is_sweep_, other->is_sweep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceClearHeroTowerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceClearHeroTowerResponse_descriptor_;
  metadata.reflection = ForceClearHeroTowerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PrepareSweepHeroTowerRequest::PrepareSweepHeroTowerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.PrepareSweepHeroTowerRequest)
}

void PrepareSweepHeroTowerRequest::InitAsDefaultInstance() {
}

PrepareSweepHeroTowerRequest::PrepareSweepHeroTowerRequest(const PrepareSweepHeroTowerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.PrepareSweepHeroTowerRequest)
}

void PrepareSweepHeroTowerRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareSweepHeroTowerRequest::~PrepareSweepHeroTowerRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.PrepareSweepHeroTowerRequest)
  SharedDtor();
}

void PrepareSweepHeroTowerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareSweepHeroTowerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareSweepHeroTowerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareSweepHeroTowerRequest_descriptor_;
}

const PrepareSweepHeroTowerRequest& PrepareSweepHeroTowerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

PrepareSweepHeroTowerRequest* PrepareSweepHeroTowerRequest::default_instance_ = NULL;

PrepareSweepHeroTowerRequest* PrepareSweepHeroTowerRequest::New() const {
  return new PrepareSweepHeroTowerRequest;
}

void PrepareSweepHeroTowerRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareSweepHeroTowerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.PrepareSweepHeroTowerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.PrepareSweepHeroTowerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.PrepareSweepHeroTowerRequest)
  return false;
#undef DO_
}

void PrepareSweepHeroTowerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.PrepareSweepHeroTowerRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.PrepareSweepHeroTowerRequest)
}

::google::protobuf::uint8* PrepareSweepHeroTowerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.PrepareSweepHeroTowerRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.PrepareSweepHeroTowerRequest)
  return target;
}

int PrepareSweepHeroTowerRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareSweepHeroTowerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareSweepHeroTowerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareSweepHeroTowerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareSweepHeroTowerRequest::MergeFrom(const PrepareSweepHeroTowerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareSweepHeroTowerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSweepHeroTowerRequest::CopyFrom(const PrepareSweepHeroTowerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSweepHeroTowerRequest::IsInitialized() const {

  return true;
}

void PrepareSweepHeroTowerRequest::Swap(PrepareSweepHeroTowerRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareSweepHeroTowerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareSweepHeroTowerRequest_descriptor_;
  metadata.reflection = PrepareSweepHeroTowerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareSweepHeroTowerResponse::kResultFieldNumber;
#endif  // !_MSC_VER

PrepareSweepHeroTowerResponse::PrepareSweepHeroTowerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.PrepareSweepHeroTowerResponse)
}

void PrepareSweepHeroTowerResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

PrepareSweepHeroTowerResponse::PrepareSweepHeroTowerResponse(const PrepareSweepHeroTowerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.PrepareSweepHeroTowerResponse)
}

void PrepareSweepHeroTowerResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareSweepHeroTowerResponse::~PrepareSweepHeroTowerResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.PrepareSweepHeroTowerResponse)
  SharedDtor();
}

void PrepareSweepHeroTowerResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void PrepareSweepHeroTowerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareSweepHeroTowerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareSweepHeroTowerResponse_descriptor_;
}

const PrepareSweepHeroTowerResponse& PrepareSweepHeroTowerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

PrepareSweepHeroTowerResponse* PrepareSweepHeroTowerResponse::default_instance_ = NULL;

PrepareSweepHeroTowerResponse* PrepareSweepHeroTowerResponse::New() const {
  return new PrepareSweepHeroTowerResponse;
}

void PrepareSweepHeroTowerResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareSweepHeroTowerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.PrepareSweepHeroTowerResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.PrepareSweepHeroTowerResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.PrepareSweepHeroTowerResponse)
  return false;
#undef DO_
}

void PrepareSweepHeroTowerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.PrepareSweepHeroTowerResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.PrepareSweepHeroTowerResponse)
}

::google::protobuf::uint8* PrepareSweepHeroTowerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.PrepareSweepHeroTowerResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.PrepareSweepHeroTowerResponse)
  return target;
}

int PrepareSweepHeroTowerResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareSweepHeroTowerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareSweepHeroTowerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareSweepHeroTowerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareSweepHeroTowerResponse::MergeFrom(const PrepareSweepHeroTowerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareSweepHeroTowerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareSweepHeroTowerResponse::CopyFrom(const PrepareSweepHeroTowerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareSweepHeroTowerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void PrepareSweepHeroTowerResponse::Swap(PrepareSweepHeroTowerResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareSweepHeroTowerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareSweepHeroTowerResponse_descriptor_;
  metadata.reflection = PrepareSweepHeroTowerResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceStartCounterDungeonRequest::kDungeonIdFieldNumber;
#endif  // !_MSC_VER

ForceStartCounterDungeonRequest::ForceStartCounterDungeonRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceStartCounterDungeonRequest)
}

void ForceStartCounterDungeonRequest::InitAsDefaultInstance() {
}

ForceStartCounterDungeonRequest::ForceStartCounterDungeonRequest(const ForceStartCounterDungeonRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceStartCounterDungeonRequest)
}

void ForceStartCounterDungeonRequest::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceStartCounterDungeonRequest::~ForceStartCounterDungeonRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceStartCounterDungeonRequest)
  SharedDtor();
}

void ForceStartCounterDungeonRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceStartCounterDungeonRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceStartCounterDungeonRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceStartCounterDungeonRequest_descriptor_;
}

const ForceStartCounterDungeonRequest& ForceStartCounterDungeonRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceStartCounterDungeonRequest* ForceStartCounterDungeonRequest::default_instance_ = NULL;

ForceStartCounterDungeonRequest* ForceStartCounterDungeonRequest::New() const {
  return new ForceStartCounterDungeonRequest;
}

void ForceStartCounterDungeonRequest::Clear() {
  dungeon_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceStartCounterDungeonRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceStartCounterDungeonRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dungeon_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceStartCounterDungeonRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceStartCounterDungeonRequest)
  return false;
#undef DO_
}

void ForceStartCounterDungeonRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceStartCounterDungeonRequest)
  // required int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dungeon_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceStartCounterDungeonRequest)
}

::google::protobuf::uint8* ForceStartCounterDungeonRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceStartCounterDungeonRequest)
  // required int32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dungeon_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceStartCounterDungeonRequest)
  return target;
}

int ForceStartCounterDungeonRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dungeon_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceStartCounterDungeonRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceStartCounterDungeonRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceStartCounterDungeonRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceStartCounterDungeonRequest::MergeFrom(const ForceStartCounterDungeonRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceStartCounterDungeonRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceStartCounterDungeonRequest::CopyFrom(const ForceStartCounterDungeonRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceStartCounterDungeonRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ForceStartCounterDungeonRequest::Swap(ForceStartCounterDungeonRequest* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceStartCounterDungeonRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceStartCounterDungeonRequest_descriptor_;
  metadata.reflection = ForceStartCounterDungeonRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceStartCounterDungeonResponse::kResultFieldNumber;
const int ForceStartCounterDungeonResponse::kPlayTokenFieldNumber;
const int ForceStartCounterDungeonResponse::kDropGoldFieldNumber;
#endif  // !_MSC_VER

ForceStartCounterDungeonResponse::ForceStartCounterDungeonResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceStartCounterDungeonResponse)
}

void ForceStartCounterDungeonResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ForceStartCounterDungeonResponse::ForceStartCounterDungeonResponse(const ForceStartCounterDungeonResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceStartCounterDungeonResponse)
}

void ForceStartCounterDungeonResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  play_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceStartCounterDungeonResponse::~ForceStartCounterDungeonResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceStartCounterDungeonResponse)
  SharedDtor();
}

void ForceStartCounterDungeonResponse::SharedDtor() {
  if (play_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete play_token_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ForceStartCounterDungeonResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceStartCounterDungeonResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceStartCounterDungeonResponse_descriptor_;
}

const ForceStartCounterDungeonResponse& ForceStartCounterDungeonResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceStartCounterDungeonResponse* ForceStartCounterDungeonResponse::default_instance_ = NULL;

ForceStartCounterDungeonResponse* ForceStartCounterDungeonResponse::New() const {
  return new ForceStartCounterDungeonResponse;
}

void ForceStartCounterDungeonResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_play_token()) {
      if (play_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        play_token_->clear();
      }
    }
    drop_gold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceStartCounterDungeonResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceStartCounterDungeonResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_play_token;
        break;
      }

      // optional string play_token = 2;
      case 2: {
        if (tag == 18) {
         parse_play_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_play_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->play_token().data(), this->play_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "play_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_drop_gold;
        break;
      }

      // optional int32 drop_gold = 3;
      case 3: {
        if (tag == 24) {
         parse_drop_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_gold_)));
          set_has_drop_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceStartCounterDungeonResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceStartCounterDungeonResponse)
  return false;
#undef DO_
}

void ForceStartCounterDungeonResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceStartCounterDungeonResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string play_token = 2;
  if (has_play_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->play_token().data(), this->play_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "play_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->play_token(), output);
  }

  // optional int32 drop_gold = 3;
  if (has_drop_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drop_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceStartCounterDungeonResponse)
}

::google::protobuf::uint8* ForceStartCounterDungeonResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceStartCounterDungeonResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string play_token = 2;
  if (has_play_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->play_token().data(), this->play_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "play_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->play_token(), target);
  }

  // optional int32 drop_gold = 3;
  if (has_drop_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drop_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceStartCounterDungeonResponse)
  return target;
}

int ForceStartCounterDungeonResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string play_token = 2;
    if (has_play_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->play_token());
    }

    // optional int32 drop_gold = 3;
    if (has_drop_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceStartCounterDungeonResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceStartCounterDungeonResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceStartCounterDungeonResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceStartCounterDungeonResponse::MergeFrom(const ForceStartCounterDungeonResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_play_token()) {
      set_play_token(from.play_token());
    }
    if (from.has_drop_gold()) {
      set_drop_gold(from.drop_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceStartCounterDungeonResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceStartCounterDungeonResponse::CopyFrom(const ForceStartCounterDungeonResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceStartCounterDungeonResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ForceStartCounterDungeonResponse::Swap(ForceStartCounterDungeonResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(play_token_, other->play_token_);
    std::swap(drop_gold_, other->drop_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceStartCounterDungeonResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceStartCounterDungeonResponse_descriptor_;
  metadata.reflection = ForceStartCounterDungeonResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareGuildRequest::kMemberCountFieldNumber;
const int PrepareGuildRequest::kAddGuildCountFieldNumber;
#endif  // !_MSC_VER

PrepareGuildRequest::PrepareGuildRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.PrepareGuildRequest)
}

void PrepareGuildRequest::InitAsDefaultInstance() {
}

PrepareGuildRequest::PrepareGuildRequest(const PrepareGuildRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.PrepareGuildRequest)
}

void PrepareGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  member_count_ = 0;
  add_guild_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareGuildRequest::~PrepareGuildRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.PrepareGuildRequest)
  SharedDtor();
}

void PrepareGuildRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareGuildRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareGuildRequest_descriptor_;
}

const PrepareGuildRequest& PrepareGuildRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

PrepareGuildRequest* PrepareGuildRequest::default_instance_ = NULL;

PrepareGuildRequest* PrepareGuildRequest::New() const {
  return new PrepareGuildRequest;
}

void PrepareGuildRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrepareGuildRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(member_count_, add_guild_count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.PrepareGuildRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 member_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &member_count_)));
          set_has_member_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_add_guild_count;
        break;
      }

      // required int32 add_guild_count = 2;
      case 2: {
        if (tag == 16) {
         parse_add_guild_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_guild_count_)));
          set_has_add_guild_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.PrepareGuildRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.PrepareGuildRequest)
  return false;
#undef DO_
}

void PrepareGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.PrepareGuildRequest)
  // required int32 member_count = 1;
  if (has_member_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->member_count(), output);
  }

  // required int32 add_guild_count = 2;
  if (has_add_guild_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->add_guild_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.PrepareGuildRequest)
}

::google::protobuf::uint8* PrepareGuildRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.PrepareGuildRequest)
  // required int32 member_count = 1;
  if (has_member_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->member_count(), target);
  }

  // required int32 add_guild_count = 2;
  if (has_add_guild_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->add_guild_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.PrepareGuildRequest)
  return target;
}

int PrepareGuildRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 member_count = 1;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->member_count());
    }

    // required int32 add_guild_count = 2;
    if (has_add_guild_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->add_guild_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareGuildRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareGuildRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareGuildRequest::MergeFrom(const PrepareGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_member_count()) {
      set_member_count(from.member_count());
    }
    if (from.has_add_guild_count()) {
      set_add_guild_count(from.add_guild_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareGuildRequest::CopyFrom(const PrepareGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareGuildRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PrepareGuildRequest::Swap(PrepareGuildRequest* other) {
  if (other != this) {
    std::swap(member_count_, other->member_count_);
    std::swap(add_guild_count_, other->add_guild_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareGuildRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareGuildRequest_descriptor_;
  metadata.reflection = PrepareGuildRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareGuildResponse::kResultFieldNumber;
#endif  // !_MSC_VER

PrepareGuildResponse::PrepareGuildResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.PrepareGuildResponse)
}

void PrepareGuildResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

PrepareGuildResponse::PrepareGuildResponse(const PrepareGuildResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.PrepareGuildResponse)
}

void PrepareGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareGuildResponse::~PrepareGuildResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.PrepareGuildResponse)
  SharedDtor();
}

void PrepareGuildResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void PrepareGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareGuildResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareGuildResponse_descriptor_;
}

const PrepareGuildResponse& PrepareGuildResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

PrepareGuildResponse* PrepareGuildResponse::default_instance_ = NULL;

PrepareGuildResponse* PrepareGuildResponse::New() const {
  return new PrepareGuildResponse;
}

void PrepareGuildResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.PrepareGuildResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.PrepareGuildResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.PrepareGuildResponse)
  return false;
#undef DO_
}

void PrepareGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.PrepareGuildResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.PrepareGuildResponse)
}

::google::protobuf::uint8* PrepareGuildResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.PrepareGuildResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.PrepareGuildResponse)
  return target;
}

int PrepareGuildResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareGuildResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareGuildResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareGuildResponse::MergeFrom(const PrepareGuildResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareGuildResponse::CopyFrom(const PrepareGuildResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareGuildResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void PrepareGuildResponse::Swap(PrepareGuildResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareGuildResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareGuildResponse_descriptor_;
  metadata.reflection = PrepareGuildResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildBattleStateRequest::kIsNewSeasonFieldNumber;
#endif  // !_MSC_VER

SetGuildBattleStateRequest::SetGuildBattleStateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetGuildBattleStateRequest)
}

void SetGuildBattleStateRequest::InitAsDefaultInstance() {
}

SetGuildBattleStateRequest::SetGuildBattleStateRequest(const SetGuildBattleStateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetGuildBattleStateRequest)
}

void SetGuildBattleStateRequest::SharedCtor() {
  _cached_size_ = 0;
  is_new_season_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildBattleStateRequest::~SetGuildBattleStateRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetGuildBattleStateRequest)
  SharedDtor();
}

void SetGuildBattleStateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuildBattleStateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildBattleStateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildBattleStateRequest_descriptor_;
}

const SetGuildBattleStateRequest& SetGuildBattleStateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetGuildBattleStateRequest* SetGuildBattleStateRequest::default_instance_ = NULL;

SetGuildBattleStateRequest* SetGuildBattleStateRequest::New() const {
  return new SetGuildBattleStateRequest;
}

void SetGuildBattleStateRequest::Clear() {
  is_new_season_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildBattleStateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetGuildBattleStateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool is_new_season = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_season_)));
          set_has_is_new_season();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetGuildBattleStateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetGuildBattleStateRequest)
  return false;
#undef DO_
}

void SetGuildBattleStateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetGuildBattleStateRequest)
  // required bool is_new_season = 1;
  if (has_is_new_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_new_season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetGuildBattleStateRequest)
}

::google::protobuf::uint8* SetGuildBattleStateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetGuildBattleStateRequest)
  // required bool is_new_season = 1;
  if (has_is_new_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_new_season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetGuildBattleStateRequest)
  return target;
}

int SetGuildBattleStateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool is_new_season = 1;
    if (has_is_new_season()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildBattleStateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildBattleStateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildBattleStateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildBattleStateRequest::MergeFrom(const SetGuildBattleStateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_new_season()) {
      set_is_new_season(from.is_new_season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildBattleStateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildBattleStateRequest::CopyFrom(const SetGuildBattleStateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildBattleStateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetGuildBattleStateRequest::Swap(SetGuildBattleStateRequest* other) {
  if (other != this) {
    std::swap(is_new_season_, other->is_new_season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildBattleStateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildBattleStateRequest_descriptor_;
  metadata.reflection = SetGuildBattleStateRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildBattleStateResponse::kResultFieldNumber;
const int SetGuildBattleStateResponse::kStateFieldNumber;
const int SetGuildBattleStateResponse::kStateMessageFieldNumber;
#endif  // !_MSC_VER

SetGuildBattleStateResponse::SetGuildBattleStateResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetGuildBattleStateResponse)
}

void SetGuildBattleStateResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  state_ = const_cast< ::b2::protocol::commondata::GuildBattleState*>(&::b2::protocol::commondata::GuildBattleState::default_instance());
}

SetGuildBattleStateResponse::SetGuildBattleStateResponse(const SetGuildBattleStateResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetGuildBattleStateResponse)
}

void SetGuildBattleStateResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  state_ = NULL;
  state_message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildBattleStateResponse::~SetGuildBattleStateResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetGuildBattleStateResponse)
  SharedDtor();
}

void SetGuildBattleStateResponse::SharedDtor() {
  if (state_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete state_message_;
  }
  if (this != default_instance_) {
    delete result_;
    delete state_;
  }
}

void SetGuildBattleStateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildBattleStateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildBattleStateResponse_descriptor_;
}

const SetGuildBattleStateResponse& SetGuildBattleStateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetGuildBattleStateResponse* SetGuildBattleStateResponse::default_instance_ = NULL;

SetGuildBattleStateResponse* SetGuildBattleStateResponse::New() const {
  return new SetGuildBattleStateResponse;
}

void SetGuildBattleStateResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::b2::protocol::commondata::GuildBattleState::Clear();
    }
    if (has_state_message()) {
      if (state_message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        state_message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildBattleStateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetGuildBattleStateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_state;
        break;
      }

      // optional .b2.protocol.commondata.GuildBattleState state = 11;
      case 11: {
        if (tag == 90) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_state_message;
        break;
      }

      // optional string state_message = 12;
      case 12: {
        if (tag == 98) {
         parse_state_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_state_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->state_message().data(), this->state_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "state_message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetGuildBattleStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetGuildBattleStateResponse)
  return false;
#undef DO_
}

void SetGuildBattleStateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetGuildBattleStateResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.GuildBattleState state = 11;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->state(), output);
  }

  // optional string state_message = 12;
  if (has_state_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_message().data(), this->state_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->state_message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetGuildBattleStateResponse)
}

::google::protobuf::uint8* SetGuildBattleStateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetGuildBattleStateResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.GuildBattleState state = 11;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->state(), target);
  }

  // optional string state_message = 12;
  if (has_state_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->state_message().data(), this->state_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "state_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->state_message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetGuildBattleStateResponse)
  return target;
}

int SetGuildBattleStateResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.GuildBattleState state = 11;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }

    // optional string state_message = 12;
    if (has_state_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->state_message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildBattleStateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildBattleStateResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildBattleStateResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildBattleStateResponse::MergeFrom(const SetGuildBattleStateResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_state()) {
      mutable_state()->::b2::protocol::commondata::GuildBattleState::MergeFrom(from.state());
    }
    if (from.has_state_message()) {
      set_state_message(from.state_message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildBattleStateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildBattleStateResponse::CopyFrom(const SetGuildBattleStateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildBattleStateResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  return true;
}

void SetGuildBattleStateResponse::Swap(SetGuildBattleStateResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(state_, other->state_);
    std::swap(state_message_, other->state_message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildBattleStateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildBattleStateResponse_descriptor_;
  metadata.reflection = SetGuildBattleStateResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetAttendanceTimeRequest::ResetAttendanceTimeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetAttendanceTimeRequest)
}

void ResetAttendanceTimeRequest::InitAsDefaultInstance() {
}

ResetAttendanceTimeRequest::ResetAttendanceTimeRequest(const ResetAttendanceTimeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetAttendanceTimeRequest)
}

void ResetAttendanceTimeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetAttendanceTimeRequest::~ResetAttendanceTimeRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetAttendanceTimeRequest)
  SharedDtor();
}

void ResetAttendanceTimeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetAttendanceTimeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetAttendanceTimeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetAttendanceTimeRequest_descriptor_;
}

const ResetAttendanceTimeRequest& ResetAttendanceTimeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetAttendanceTimeRequest* ResetAttendanceTimeRequest::default_instance_ = NULL;

ResetAttendanceTimeRequest* ResetAttendanceTimeRequest::New() const {
  return new ResetAttendanceTimeRequest;
}

void ResetAttendanceTimeRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetAttendanceTimeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetAttendanceTimeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetAttendanceTimeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetAttendanceTimeRequest)
  return false;
#undef DO_
}

void ResetAttendanceTimeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetAttendanceTimeRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetAttendanceTimeRequest)
}

::google::protobuf::uint8* ResetAttendanceTimeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetAttendanceTimeRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetAttendanceTimeRequest)
  return target;
}

int ResetAttendanceTimeRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetAttendanceTimeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetAttendanceTimeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetAttendanceTimeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetAttendanceTimeRequest::MergeFrom(const ResetAttendanceTimeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetAttendanceTimeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetAttendanceTimeRequest::CopyFrom(const ResetAttendanceTimeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetAttendanceTimeRequest::IsInitialized() const {

  return true;
}

void ResetAttendanceTimeRequest::Swap(ResetAttendanceTimeRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetAttendanceTimeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetAttendanceTimeRequest_descriptor_;
  metadata.reflection = ResetAttendanceTimeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetAttendanceTimeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ResetAttendanceTimeResponse::ResetAttendanceTimeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetAttendanceTimeResponse)
}

void ResetAttendanceTimeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ResetAttendanceTimeResponse::ResetAttendanceTimeResponse(const ResetAttendanceTimeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetAttendanceTimeResponse)
}

void ResetAttendanceTimeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetAttendanceTimeResponse::~ResetAttendanceTimeResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetAttendanceTimeResponse)
  SharedDtor();
}

void ResetAttendanceTimeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResetAttendanceTimeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetAttendanceTimeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetAttendanceTimeResponse_descriptor_;
}

const ResetAttendanceTimeResponse& ResetAttendanceTimeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetAttendanceTimeResponse* ResetAttendanceTimeResponse::default_instance_ = NULL;

ResetAttendanceTimeResponse* ResetAttendanceTimeResponse::New() const {
  return new ResetAttendanceTimeResponse;
}

void ResetAttendanceTimeResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetAttendanceTimeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetAttendanceTimeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetAttendanceTimeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetAttendanceTimeResponse)
  return false;
#undef DO_
}

void ResetAttendanceTimeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetAttendanceTimeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetAttendanceTimeResponse)
}

::google::protobuf::uint8* ResetAttendanceTimeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetAttendanceTimeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetAttendanceTimeResponse)
  return target;
}

int ResetAttendanceTimeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetAttendanceTimeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetAttendanceTimeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetAttendanceTimeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetAttendanceTimeResponse::MergeFrom(const ResetAttendanceTimeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetAttendanceTimeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetAttendanceTimeResponse::CopyFrom(const ResetAttendanceTimeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetAttendanceTimeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResetAttendanceTimeResponse::Swap(ResetAttendanceTimeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetAttendanceTimeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetAttendanceTimeResponse_descriptor_;
  metadata.reflection = ResetAttendanceTimeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetEventAttendanceRequest::kIsOnlyAttendanceTimeFieldNumber;
#endif  // !_MSC_VER

ResetEventAttendanceRequest::ResetEventAttendanceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetEventAttendanceRequest)
}

void ResetEventAttendanceRequest::InitAsDefaultInstance() {
}

ResetEventAttendanceRequest::ResetEventAttendanceRequest(const ResetEventAttendanceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetEventAttendanceRequest)
}

void ResetEventAttendanceRequest::SharedCtor() {
  _cached_size_ = 0;
  is_only_attendance_time_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetEventAttendanceRequest::~ResetEventAttendanceRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetEventAttendanceRequest)
  SharedDtor();
}

void ResetEventAttendanceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetEventAttendanceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetEventAttendanceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetEventAttendanceRequest_descriptor_;
}

const ResetEventAttendanceRequest& ResetEventAttendanceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetEventAttendanceRequest* ResetEventAttendanceRequest::default_instance_ = NULL;

ResetEventAttendanceRequest* ResetEventAttendanceRequest::New() const {
  return new ResetEventAttendanceRequest;
}

void ResetEventAttendanceRequest::Clear() {
  is_only_attendance_time_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetEventAttendanceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetEventAttendanceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_only_attendance_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_only_attendance_time_)));
          set_has_is_only_attendance_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetEventAttendanceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetEventAttendanceRequest)
  return false;
#undef DO_
}

void ResetEventAttendanceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetEventAttendanceRequest)
  // optional bool is_only_attendance_time = 1;
  if (has_is_only_attendance_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_only_attendance_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetEventAttendanceRequest)
}

::google::protobuf::uint8* ResetEventAttendanceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetEventAttendanceRequest)
  // optional bool is_only_attendance_time = 1;
  if (has_is_only_attendance_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_only_attendance_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetEventAttendanceRequest)
  return target;
}

int ResetEventAttendanceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_only_attendance_time = 1;
    if (has_is_only_attendance_time()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetEventAttendanceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetEventAttendanceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetEventAttendanceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetEventAttendanceRequest::MergeFrom(const ResetEventAttendanceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_only_attendance_time()) {
      set_is_only_attendance_time(from.is_only_attendance_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetEventAttendanceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetEventAttendanceRequest::CopyFrom(const ResetEventAttendanceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetEventAttendanceRequest::IsInitialized() const {

  return true;
}

void ResetEventAttendanceRequest::Swap(ResetEventAttendanceRequest* other) {
  if (other != this) {
    std::swap(is_only_attendance_time_, other->is_only_attendance_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetEventAttendanceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetEventAttendanceRequest_descriptor_;
  metadata.reflection = ResetEventAttendanceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetEventAttendanceResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ResetEventAttendanceResponse::ResetEventAttendanceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetEventAttendanceResponse)
}

void ResetEventAttendanceResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ResetEventAttendanceResponse::ResetEventAttendanceResponse(const ResetEventAttendanceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetEventAttendanceResponse)
}

void ResetEventAttendanceResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetEventAttendanceResponse::~ResetEventAttendanceResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetEventAttendanceResponse)
  SharedDtor();
}

void ResetEventAttendanceResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResetEventAttendanceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetEventAttendanceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetEventAttendanceResponse_descriptor_;
}

const ResetEventAttendanceResponse& ResetEventAttendanceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetEventAttendanceResponse* ResetEventAttendanceResponse::default_instance_ = NULL;

ResetEventAttendanceResponse* ResetEventAttendanceResponse::New() const {
  return new ResetEventAttendanceResponse;
}

void ResetEventAttendanceResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetEventAttendanceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetEventAttendanceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetEventAttendanceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetEventAttendanceResponse)
  return false;
#undef DO_
}

void ResetEventAttendanceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetEventAttendanceResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetEventAttendanceResponse)
}

::google::protobuf::uint8* ResetEventAttendanceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetEventAttendanceResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetEventAttendanceResponse)
  return target;
}

int ResetEventAttendanceResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetEventAttendanceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetEventAttendanceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetEventAttendanceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetEventAttendanceResponse::MergeFrom(const ResetEventAttendanceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetEventAttendanceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetEventAttendanceResponse::CopyFrom(const ResetEventAttendanceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetEventAttendanceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResetEventAttendanceResponse::Swap(ResetEventAttendanceResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetEventAttendanceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetEventAttendanceResponse_descriptor_;
  metadata.reflection = ResetEventAttendanceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetDailyPlayTimeRecordRequest::ResetDailyPlayTimeRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
}

void ResetDailyPlayTimeRecordRequest::InitAsDefaultInstance() {
}

ResetDailyPlayTimeRecordRequest::ResetDailyPlayTimeRecordRequest(const ResetDailyPlayTimeRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
}

void ResetDailyPlayTimeRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetDailyPlayTimeRecordRequest::~ResetDailyPlayTimeRecordRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  SharedDtor();
}

void ResetDailyPlayTimeRecordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetDailyPlayTimeRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetDailyPlayTimeRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetDailyPlayTimeRecordRequest_descriptor_;
}

const ResetDailyPlayTimeRecordRequest& ResetDailyPlayTimeRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetDailyPlayTimeRecordRequest* ResetDailyPlayTimeRecordRequest::default_instance_ = NULL;

ResetDailyPlayTimeRecordRequest* ResetDailyPlayTimeRecordRequest::New() const {
  return new ResetDailyPlayTimeRecordRequest;
}

void ResetDailyPlayTimeRecordRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetDailyPlayTimeRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  return false;
#undef DO_
}

void ResetDailyPlayTimeRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
}

::google::protobuf::uint8* ResetDailyPlayTimeRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetDailyPlayTimeRecordRequest)
  return target;
}

int ResetDailyPlayTimeRecordRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetDailyPlayTimeRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetDailyPlayTimeRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetDailyPlayTimeRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetDailyPlayTimeRecordRequest::MergeFrom(const ResetDailyPlayTimeRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetDailyPlayTimeRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDailyPlayTimeRecordRequest::CopyFrom(const ResetDailyPlayTimeRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDailyPlayTimeRecordRequest::IsInitialized() const {

  return true;
}

void ResetDailyPlayTimeRecordRequest::Swap(ResetDailyPlayTimeRecordRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetDailyPlayTimeRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetDailyPlayTimeRecordRequest_descriptor_;
  metadata.reflection = ResetDailyPlayTimeRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetDailyPlayTimeRecordResponse::kResultFieldNumber;
const int ResetDailyPlayTimeRecordResponse::kDailyPlayTimeInSecFieldNumber;
const int ResetDailyPlayTimeRecordResponse::kDailyPlayTimeRewardIndexFieldNumber;
#endif  // !_MSC_VER

ResetDailyPlayTimeRecordResponse::ResetDailyPlayTimeRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
}

void ResetDailyPlayTimeRecordResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ResetDailyPlayTimeRecordResponse::ResetDailyPlayTimeRecordResponse(const ResetDailyPlayTimeRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
}

void ResetDailyPlayTimeRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  daily_play_time_in_sec_ = 0;
  daily_play_time_reward_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetDailyPlayTimeRecordResponse::~ResetDailyPlayTimeRecordResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  SharedDtor();
}

void ResetDailyPlayTimeRecordResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResetDailyPlayTimeRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetDailyPlayTimeRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetDailyPlayTimeRecordResponse_descriptor_;
}

const ResetDailyPlayTimeRecordResponse& ResetDailyPlayTimeRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetDailyPlayTimeRecordResponse* ResetDailyPlayTimeRecordResponse::default_instance_ = NULL;

ResetDailyPlayTimeRecordResponse* ResetDailyPlayTimeRecordResponse::New() const {
  return new ResetDailyPlayTimeRecordResponse;
}

void ResetDailyPlayTimeRecordResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ResetDailyPlayTimeRecordResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(daily_play_time_in_sec_, daily_play_time_reward_index_);
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetDailyPlayTimeRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_daily_play_time_in_sec;
        break;
      }

      // optional int32 daily_play_time_in_sec = 2;
      case 2: {
        if (tag == 16) {
         parse_daily_play_time_in_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_play_time_in_sec_)));
          set_has_daily_play_time_in_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_daily_play_time_reward_index;
        break;
      }

      // optional int32 daily_play_time_reward_index = 3;
      case 3: {
        if (tag == 24) {
         parse_daily_play_time_reward_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_play_time_reward_index_)));
          set_has_daily_play_time_reward_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  return false;
#undef DO_
}

void ResetDailyPlayTimeRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 daily_play_time_in_sec = 2;
  if (has_daily_play_time_in_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->daily_play_time_in_sec(), output);
  }

  // optional int32 daily_play_time_reward_index = 3;
  if (has_daily_play_time_reward_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->daily_play_time_reward_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
}

::google::protobuf::uint8* ResetDailyPlayTimeRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 daily_play_time_in_sec = 2;
  if (has_daily_play_time_in_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->daily_play_time_in_sec(), target);
  }

  // optional int32 daily_play_time_reward_index = 3;
  if (has_daily_play_time_reward_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->daily_play_time_reward_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetDailyPlayTimeRecordResponse)
  return target;
}

int ResetDailyPlayTimeRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 daily_play_time_in_sec = 2;
    if (has_daily_play_time_in_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_play_time_in_sec());
    }

    // optional int32 daily_play_time_reward_index = 3;
    if (has_daily_play_time_reward_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily_play_time_reward_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetDailyPlayTimeRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetDailyPlayTimeRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetDailyPlayTimeRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetDailyPlayTimeRecordResponse::MergeFrom(const ResetDailyPlayTimeRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_daily_play_time_in_sec()) {
      set_daily_play_time_in_sec(from.daily_play_time_in_sec());
    }
    if (from.has_daily_play_time_reward_index()) {
      set_daily_play_time_reward_index(from.daily_play_time_reward_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetDailyPlayTimeRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetDailyPlayTimeRecordResponse::CopyFrom(const ResetDailyPlayTimeRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetDailyPlayTimeRecordResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResetDailyPlayTimeRecordResponse::Swap(ResetDailyPlayTimeRecordResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(daily_play_time_in_sec_, other->daily_play_time_in_sec_);
    std::swap(daily_play_time_reward_index_, other->daily_play_time_reward_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetDailyPlayTimeRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetDailyPlayTimeRecordResponse_descriptor_;
  metadata.reflection = ResetDailyPlayTimeRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeQuestIdRequest::kSlotTypeFieldNumber;
const int ChangeQuestIdRequest::kQuestIdFieldNumber;
#endif  // !_MSC_VER

ChangeQuestIdRequest::ChangeQuestIdRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ChangeQuestIdRequest)
}

void ChangeQuestIdRequest::InitAsDefaultInstance() {
}

ChangeQuestIdRequest::ChangeQuestIdRequest(const ChangeQuestIdRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ChangeQuestIdRequest)
}

void ChangeQuestIdRequest::SharedCtor() {
  _cached_size_ = 0;
  slot_type_ = 1;
  quest_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeQuestIdRequest::~ChangeQuestIdRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ChangeQuestIdRequest)
  SharedDtor();
}

void ChangeQuestIdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeQuestIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeQuestIdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeQuestIdRequest_descriptor_;
}

const ChangeQuestIdRequest& ChangeQuestIdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ChangeQuestIdRequest* ChangeQuestIdRequest::default_instance_ = NULL;

ChangeQuestIdRequest* ChangeQuestIdRequest::New() const {
  return new ChangeQuestIdRequest;
}

void ChangeQuestIdRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    slot_type_ = 1;
    quest_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeQuestIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ChangeQuestIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::QuestInfo_QuestSlotType_IsValid(value)) {
            set_slot_type(static_cast< ::b2::protocol::commondata::QuestInfo_QuestSlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quest_id;
        break;
      }

      // required int32 quest_id = 2;
      case 2: {
        if (tag == 16) {
         parse_quest_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quest_id_)));
          set_has_quest_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ChangeQuestIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ChangeQuestIdRequest)
  return false;
#undef DO_
}

void ChangeQuestIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ChangeQuestIdRequest)
  // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->slot_type(), output);
  }

  // required int32 quest_id = 2;
  if (has_quest_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quest_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ChangeQuestIdRequest)
}

::google::protobuf::uint8* ChangeQuestIdRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ChangeQuestIdRequest)
  // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->slot_type(), target);
  }

  // required int32 quest_id = 2;
  if (has_quest_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quest_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ChangeQuestIdRequest)
  return target;
}

int ChangeQuestIdRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_type());
    }

    // required int32 quest_id = 2;
    if (has_quest_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quest_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeQuestIdRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeQuestIdRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeQuestIdRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeQuestIdRequest::MergeFrom(const ChangeQuestIdRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
    if (from.has_quest_id()) {
      set_quest_id(from.quest_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeQuestIdRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeQuestIdRequest::CopyFrom(const ChangeQuestIdRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeQuestIdRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeQuestIdRequest::Swap(ChangeQuestIdRequest* other) {
  if (other != this) {
    std::swap(slot_type_, other->slot_type_);
    std::swap(quest_id_, other->quest_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeQuestIdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeQuestIdRequest_descriptor_;
  metadata.reflection = ChangeQuestIdRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeQuestIdResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ChangeQuestIdResponse::ChangeQuestIdResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ChangeQuestIdResponse)
}

void ChangeQuestIdResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ChangeQuestIdResponse::ChangeQuestIdResponse(const ChangeQuestIdResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ChangeQuestIdResponse)
}

void ChangeQuestIdResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeQuestIdResponse::~ChangeQuestIdResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ChangeQuestIdResponse)
  SharedDtor();
}

void ChangeQuestIdResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ChangeQuestIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeQuestIdResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeQuestIdResponse_descriptor_;
}

const ChangeQuestIdResponse& ChangeQuestIdResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ChangeQuestIdResponse* ChangeQuestIdResponse::default_instance_ = NULL;

ChangeQuestIdResponse* ChangeQuestIdResponse::New() const {
  return new ChangeQuestIdResponse;
}

void ChangeQuestIdResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeQuestIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ChangeQuestIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ChangeQuestIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ChangeQuestIdResponse)
  return false;
#undef DO_
}

void ChangeQuestIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ChangeQuestIdResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ChangeQuestIdResponse)
}

::google::protobuf::uint8* ChangeQuestIdResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ChangeQuestIdResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ChangeQuestIdResponse)
  return target;
}

int ChangeQuestIdResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeQuestIdResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeQuestIdResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeQuestIdResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeQuestIdResponse::MergeFrom(const ChangeQuestIdResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeQuestIdResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeQuestIdResponse::CopyFrom(const ChangeQuestIdResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeQuestIdResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ChangeQuestIdResponse::Swap(ChangeQuestIdResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeQuestIdResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeQuestIdResponse_descriptor_;
  metadata.reflection = ChangeQuestIdResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeQuestCountRequest::kSlotTypeFieldNumber;
const int ChangeQuestCountRequest::kCountFieldNumber;
#endif  // !_MSC_VER

ChangeQuestCountRequest::ChangeQuestCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ChangeQuestCountRequest)
}

void ChangeQuestCountRequest::InitAsDefaultInstance() {
}

ChangeQuestCountRequest::ChangeQuestCountRequest(const ChangeQuestCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ChangeQuestCountRequest)
}

void ChangeQuestCountRequest::SharedCtor() {
  _cached_size_ = 0;
  slot_type_ = 1;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeQuestCountRequest::~ChangeQuestCountRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ChangeQuestCountRequest)
  SharedDtor();
}

void ChangeQuestCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeQuestCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeQuestCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeQuestCountRequest_descriptor_;
}

const ChangeQuestCountRequest& ChangeQuestCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ChangeQuestCountRequest* ChangeQuestCountRequest::default_instance_ = NULL;

ChangeQuestCountRequest* ChangeQuestCountRequest::New() const {
  return new ChangeQuestCountRequest;
}

void ChangeQuestCountRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    slot_type_ = 1;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeQuestCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ChangeQuestCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::QuestInfo_QuestSlotType_IsValid(value)) {
            set_slot_type(static_cast< ::b2::protocol::commondata::QuestInfo_QuestSlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ChangeQuestCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ChangeQuestCountRequest)
  return false;
#undef DO_
}

void ChangeQuestCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ChangeQuestCountRequest)
  // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
  if (has_slot_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->slot_type(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ChangeQuestCountRequest)
}

::google::protobuf::uint8* ChangeQuestCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ChangeQuestCountRequest)
  // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
  if (has_slot_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->slot_type(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ChangeQuestCountRequest)
  return target;
}

int ChangeQuestCountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.QuestInfo.QuestSlotType slot_type = 1;
    if (has_slot_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->slot_type());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeQuestCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeQuestCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeQuestCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeQuestCountRequest::MergeFrom(const ChangeQuestCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_type()) {
      set_slot_type(from.slot_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeQuestCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeQuestCountRequest::CopyFrom(const ChangeQuestCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeQuestCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeQuestCountRequest::Swap(ChangeQuestCountRequest* other) {
  if (other != this) {
    std::swap(slot_type_, other->slot_type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeQuestCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeQuestCountRequest_descriptor_;
  metadata.reflection = ChangeQuestCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeQuestCountResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ChangeQuestCountResponse::ChangeQuestCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ChangeQuestCountResponse)
}

void ChangeQuestCountResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ChangeQuestCountResponse::ChangeQuestCountResponse(const ChangeQuestCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ChangeQuestCountResponse)
}

void ChangeQuestCountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeQuestCountResponse::~ChangeQuestCountResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ChangeQuestCountResponse)
  SharedDtor();
}

void ChangeQuestCountResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ChangeQuestCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeQuestCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeQuestCountResponse_descriptor_;
}

const ChangeQuestCountResponse& ChangeQuestCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ChangeQuestCountResponse* ChangeQuestCountResponse::default_instance_ = NULL;

ChangeQuestCountResponse* ChangeQuestCountResponse::New() const {
  return new ChangeQuestCountResponse;
}

void ChangeQuestCountResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeQuestCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ChangeQuestCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ChangeQuestCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ChangeQuestCountResponse)
  return false;
#undef DO_
}

void ChangeQuestCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ChangeQuestCountResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ChangeQuestCountResponse)
}

::google::protobuf::uint8* ChangeQuestCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ChangeQuestCountResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ChangeQuestCountResponse)
  return target;
}

int ChangeQuestCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeQuestCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeQuestCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeQuestCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeQuestCountResponse::MergeFrom(const ChangeQuestCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeQuestCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeQuestCountResponse::CopyFrom(const ChangeQuestCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeQuestCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ChangeQuestCountResponse::Swap(ChangeQuestCountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeQuestCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeQuestCountResponse_descriptor_;
  metadata.reflection = ChangeQuestCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteItemRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

DeleteItemRequest::DeleteItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.DeleteItemRequest)
}

void DeleteItemRequest::InitAsDefaultInstance() {
}

DeleteItemRequest::DeleteItemRequest(const DeleteItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.DeleteItemRequest)
}

void DeleteItemRequest::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteItemRequest::~DeleteItemRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.DeleteItemRequest)
  SharedDtor();
}

void DeleteItemRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteItemRequest_descriptor_;
}

const DeleteItemRequest& DeleteItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

DeleteItemRequest* DeleteItemRequest::default_instance_ = NULL;

DeleteItemRequest* DeleteItemRequest::New() const {
  return new DeleteItemRequest;
}

void DeleteItemRequest::Clear() {
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.DeleteItemRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 item_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.DeleteItemRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.DeleteItemRequest)
  return false;
#undef DO_
}

void DeleteItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.DeleteItemRequest)
  // optional int64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.DeleteItemRequest)
}

::google::protobuf::uint8* DeleteItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.DeleteItemRequest)
  // optional int64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.DeleteItemRequest)
  return target;
}

int DeleteItemRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteItemRequest::MergeFrom(const DeleteItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteItemRequest::CopyFrom(const DeleteItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteItemRequest::IsInitialized() const {

  return true;
}

void DeleteItemRequest::Swap(DeleteItemRequest* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteItemRequest_descriptor_;
  metadata.reflection = DeleteItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteItemResponse::kResultFieldNumber;
const int DeleteItemResponse::kItemIdFieldNumber;
#endif  // !_MSC_VER

DeleteItemResponse::DeleteItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.DeleteItemResponse)
}

void DeleteItemResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

DeleteItemResponse::DeleteItemResponse(const DeleteItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.DeleteItemResponse)
}

void DeleteItemResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  item_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteItemResponse::~DeleteItemResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.DeleteItemResponse)
  SharedDtor();
}

void DeleteItemResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void DeleteItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteItemResponse_descriptor_;
}

const DeleteItemResponse& DeleteItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

DeleteItemResponse* DeleteItemResponse::default_instance_ = NULL;

DeleteItemResponse* DeleteItemResponse::New() const {
  return new DeleteItemResponse;
}

void DeleteItemResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    item_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.DeleteItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional int64 item_id = 2;
      case 2: {
        if (tag == 16) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.DeleteItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.DeleteItemResponse)
  return false;
#undef DO_
}

void DeleteItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.DeleteItemResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.DeleteItemResponse)
}

::google::protobuf::uint8* DeleteItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.DeleteItemResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.DeleteItemResponse)
  return target;
}

int DeleteItemResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteItemResponse::MergeFrom(const DeleteItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteItemResponse::CopyFrom(const DeleteItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteItemResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void DeleteItemResponse::Swap(DeleteItemResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_id_, other->item_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteItemResponse_descriptor_;
  metadata.reflection = DeleteItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAetherToInventoryRequest::kAetherTypeFieldNumber;
const int AddAetherToInventoryRequest::kSlotFieldNumber;
const int AddAetherToInventoryRequest::kGradeFieldNumber;
const int AddAetherToInventoryRequest::kTierTypeFieldNumber;
#endif  // !_MSC_VER

AddAetherToInventoryRequest::AddAetherToInventoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddAetherToInventoryRequest)
}

void AddAetherToInventoryRequest::InitAsDefaultInstance() {
}

AddAetherToInventoryRequest::AddAetherToInventoryRequest(const AddAetherToInventoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddAetherToInventoryRequest)
}

void AddAetherToInventoryRequest::SharedCtor() {
  _cached_size_ = 0;
  aether_type_ = 0;
  slot_ = 0;
  grade_ = 0;
  tier_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAetherToInventoryRequest::~AddAetherToInventoryRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddAetherToInventoryRequest)
  SharedDtor();
}

void AddAetherToInventoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddAetherToInventoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAetherToInventoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAetherToInventoryRequest_descriptor_;
}

const AddAetherToInventoryRequest& AddAetherToInventoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddAetherToInventoryRequest* AddAetherToInventoryRequest::default_instance_ = NULL;

AddAetherToInventoryRequest* AddAetherToInventoryRequest::New() const {
  return new AddAetherToInventoryRequest;
}

void AddAetherToInventoryRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddAetherToInventoryRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(aether_type_, grade_);
    tier_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAetherToInventoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddAetherToInventoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Aether.TYPE aether_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TYPE_IsValid(value)) {
            set_aether_type(static_cast< ::b2::protocol::commondata::Aether_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (tag == 16) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // optional int32 grade = 3;
      case 3: {
        if (tag == 24) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tier_type;
        break;
      }

      // required .b2.protocol.commondata.Aether.TIER tier_type = 4;
      case 4: {
        if (tag == 32) {
         parse_tier_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TIER_IsValid(value)) {
            set_tier_type(static_cast< ::b2::protocol::commondata::Aether_TIER >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddAetherToInventoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddAetherToInventoryRequest)
  return false;
#undef DO_
}

void AddAetherToInventoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddAetherToInventoryRequest)
  // required .b2.protocol.commondata.Aether.TYPE aether_type = 1;
  if (has_aether_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->aether_type(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // required .b2.protocol.commondata.Aether.TIER tier_type = 4;
  if (has_tier_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tier_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddAetherToInventoryRequest)
}

::google::protobuf::uint8* AddAetherToInventoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddAetherToInventoryRequest)
  // required .b2.protocol.commondata.Aether.TYPE aether_type = 1;
  if (has_aether_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->aether_type(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // required .b2.protocol.commondata.Aether.TIER tier_type = 4;
  if (has_tier_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->tier_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddAetherToInventoryRequest)
  return target;
}

int AddAetherToInventoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Aether.TYPE aether_type = 1;
    if (has_aether_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aether_type());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required .b2.protocol.commondata.Aether.TIER tier_type = 4;
    if (has_tier_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tier_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAetherToInventoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAetherToInventoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAetherToInventoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAetherToInventoryRequest::MergeFrom(const AddAetherToInventoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aether_type()) {
      set_aether_type(from.aether_type());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_tier_type()) {
      set_tier_type(from.tier_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAetherToInventoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAetherToInventoryRequest::CopyFrom(const AddAetherToInventoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAetherToInventoryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  return true;
}

void AddAetherToInventoryRequest::Swap(AddAetherToInventoryRequest* other) {
  if (other != this) {
    std::swap(aether_type_, other->aether_type_);
    std::swap(slot_, other->slot_);
    std::swap(grade_, other->grade_);
    std::swap(tier_type_, other->tier_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAetherToInventoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAetherToInventoryRequest_descriptor_;
  metadata.reflection = AddAetherToInventoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAetherToInventoryResponse::kResultFieldNumber;
const int AddAetherToInventoryResponse::kAetherFieldNumber;
#endif  // !_MSC_VER

AddAetherToInventoryResponse::AddAetherToInventoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddAetherToInventoryResponse)
}

void AddAetherToInventoryResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  aether_ = const_cast< ::b2::protocol::commondata::Aether*>(&::b2::protocol::commondata::Aether::default_instance());
}

AddAetherToInventoryResponse::AddAetherToInventoryResponse(const AddAetherToInventoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddAetherToInventoryResponse)
}

void AddAetherToInventoryResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  aether_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAetherToInventoryResponse::~AddAetherToInventoryResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddAetherToInventoryResponse)
  SharedDtor();
}

void AddAetherToInventoryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete aether_;
  }
}

void AddAetherToInventoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAetherToInventoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAetherToInventoryResponse_descriptor_;
}

const AddAetherToInventoryResponse& AddAetherToInventoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddAetherToInventoryResponse* AddAetherToInventoryResponse::default_instance_ = NULL;

AddAetherToInventoryResponse* AddAetherToInventoryResponse::New() const {
  return new AddAetherToInventoryResponse;
}

void AddAetherToInventoryResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_aether()) {
      if (aether_ != NULL) aether_->::b2::protocol::commondata::Aether::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAetherToInventoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddAetherToInventoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_aether;
        break;
      }

      // optional .b2.protocol.commondata.Aether aether = 2;
      case 2: {
        if (tag == 18) {
         parse_aether:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aether()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddAetherToInventoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddAetherToInventoryResponse)
  return false;
#undef DO_
}

void AddAetherToInventoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddAetherToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Aether aether = 2;
  if (has_aether()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->aether(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddAetherToInventoryResponse)
}

::google::protobuf::uint8* AddAetherToInventoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddAetherToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Aether aether = 2;
  if (has_aether()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->aether(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddAetherToInventoryResponse)
  return target;
}

int AddAetherToInventoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Aether aether = 2;
    if (has_aether()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aether());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAetherToInventoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAetherToInventoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAetherToInventoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAetherToInventoryResponse::MergeFrom(const AddAetherToInventoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_aether()) {
      mutable_aether()->::b2::protocol::commondata::Aether::MergeFrom(from.aether());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAetherToInventoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAetherToInventoryResponse::CopyFrom(const AddAetherToInventoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAetherToInventoryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_aether()) {
    if (!this->aether().IsInitialized()) return false;
  }
  return true;
}

void AddAetherToInventoryResponse::Swap(AddAetherToInventoryResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(aether_, other->aether_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAetherToInventoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAetherToInventoryResponse_descriptor_;
  metadata.reflection = AddAetherToInventoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceUpdateAetherRequest::kAetherIdFieldNumber;
const int ForceUpdateAetherRequest::kTypeFieldNumber;
const int ForceUpdateAetherRequest::kLevelFieldNumber;
const int ForceUpdateAetherRequest::kGradeFieldNumber;
#endif  // !_MSC_VER

ForceUpdateAetherRequest::ForceUpdateAetherRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceUpdateAetherRequest)
}

void ForceUpdateAetherRequest::InitAsDefaultInstance() {
}

ForceUpdateAetherRequest::ForceUpdateAetherRequest(const ForceUpdateAetherRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceUpdateAetherRequest)
}

void ForceUpdateAetherRequest::SharedCtor() {
  _cached_size_ = 0;
  aether_id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  level_ = 0;
  grade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceUpdateAetherRequest::~ForceUpdateAetherRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceUpdateAetherRequest)
  SharedDtor();
}

void ForceUpdateAetherRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForceUpdateAetherRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceUpdateAetherRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceUpdateAetherRequest_descriptor_;
}

const ForceUpdateAetherRequest& ForceUpdateAetherRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceUpdateAetherRequest* ForceUpdateAetherRequest::default_instance_ = NULL;

ForceUpdateAetherRequest* ForceUpdateAetherRequest::New() const {
  return new ForceUpdateAetherRequest;
}

void ForceUpdateAetherRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForceUpdateAetherRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(aether_id_, grade_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceUpdateAetherRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceUpdateAetherRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 aether_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &aether_id_)));
          set_has_aether_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .b2.protocol.commondata.Aether.TYPE type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Aether_TYPE_IsValid(value)) {
            set_type(static_cast< ::b2::protocol::commondata::Aether_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required int32 level = 3;
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_grade;
        break;
      }

      // required int32 grade = 4;
      case 4: {
        if (tag == 32) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceUpdateAetherRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceUpdateAetherRequest)
  return false;
#undef DO_
}

void ForceUpdateAetherRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceUpdateAetherRequest)
  // required int64 aether_id = 1;
  if (has_aether_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->aether_id(), output);
  }

  // required .b2.protocol.commondata.Aether.TYPE type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // required int32 grade = 4;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->grade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceUpdateAetherRequest)
}

::google::protobuf::uint8* ForceUpdateAetherRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceUpdateAetherRequest)
  // required int64 aether_id = 1;
  if (has_aether_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->aether_id(), target);
  }

  // required .b2.protocol.commondata.Aether.TYPE type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // required int32 grade = 4;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->grade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceUpdateAetherRequest)
  return target;
}

int ForceUpdateAetherRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 aether_id = 1;
    if (has_aether_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->aether_id());
    }

    // required .b2.protocol.commondata.Aether.TYPE type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 grade = 4;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceUpdateAetherRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceUpdateAetherRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceUpdateAetherRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceUpdateAetherRequest::MergeFrom(const ForceUpdateAetherRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aether_id()) {
      set_aether_id(from.aether_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceUpdateAetherRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceUpdateAetherRequest::CopyFrom(const ForceUpdateAetherRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceUpdateAetherRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ForceUpdateAetherRequest::Swap(ForceUpdateAetherRequest* other) {
  if (other != this) {
    std::swap(aether_id_, other->aether_id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(grade_, other->grade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceUpdateAetherRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceUpdateAetherRequest_descriptor_;
  metadata.reflection = ForceUpdateAetherRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForceUpdateAetherResponse::kResultFieldNumber;
const int ForceUpdateAetherResponse::kUpdatedAetherFieldNumber;
#endif  // !_MSC_VER

ForceUpdateAetherResponse::ForceUpdateAetherResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ForceUpdateAetherResponse)
}

void ForceUpdateAetherResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  updated_aether_ = const_cast< ::b2::protocol::commondata::Aether*>(&::b2::protocol::commondata::Aether::default_instance());
}

ForceUpdateAetherResponse::ForceUpdateAetherResponse(const ForceUpdateAetherResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ForceUpdateAetherResponse)
}

void ForceUpdateAetherResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  updated_aether_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForceUpdateAetherResponse::~ForceUpdateAetherResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ForceUpdateAetherResponse)
  SharedDtor();
}

void ForceUpdateAetherResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete updated_aether_;
  }
}

void ForceUpdateAetherResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForceUpdateAetherResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForceUpdateAetherResponse_descriptor_;
}

const ForceUpdateAetherResponse& ForceUpdateAetherResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ForceUpdateAetherResponse* ForceUpdateAetherResponse::default_instance_ = NULL;

ForceUpdateAetherResponse* ForceUpdateAetherResponse::New() const {
  return new ForceUpdateAetherResponse;
}

void ForceUpdateAetherResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_updated_aether()) {
      if (updated_aether_ != NULL) updated_aether_->::b2::protocol::commondata::Aether::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForceUpdateAetherResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ForceUpdateAetherResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_updated_aether;
        break;
      }

      // optional .b2.protocol.commondata.Aether updated_aether = 2;
      case 2: {
        if (tag == 18) {
         parse_updated_aether:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_updated_aether()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ForceUpdateAetherResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ForceUpdateAetherResponse)
  return false;
#undef DO_
}

void ForceUpdateAetherResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ForceUpdateAetherResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Aether updated_aether = 2;
  if (has_updated_aether()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->updated_aether(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ForceUpdateAetherResponse)
}

::google::protobuf::uint8* ForceUpdateAetherResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ForceUpdateAetherResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Aether updated_aether = 2;
  if (has_updated_aether()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->updated_aether(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ForceUpdateAetherResponse)
  return target;
}

int ForceUpdateAetherResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Aether updated_aether = 2;
    if (has_updated_aether()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->updated_aether());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForceUpdateAetherResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForceUpdateAetherResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForceUpdateAetherResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForceUpdateAetherResponse::MergeFrom(const ForceUpdateAetherResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_updated_aether()) {
      mutable_updated_aether()->::b2::protocol::commondata::Aether::MergeFrom(from.updated_aether());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForceUpdateAetherResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForceUpdateAetherResponse::CopyFrom(const ForceUpdateAetherResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForceUpdateAetherResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_updated_aether()) {
    if (!this->updated_aether().IsInitialized()) return false;
  }
  return true;
}

void ForceUpdateAetherResponse::Swap(ForceUpdateAetherResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(updated_aether_, other->updated_aether_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForceUpdateAetherResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForceUpdateAetherResponse_descriptor_;
  metadata.reflection = ForceUpdateAetherResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* PrepareFriendRequest_JOB_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareFriendRequest_JOB_descriptor_;
}
bool PrepareFriendRequest_JOB_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const PrepareFriendRequest_JOB PrepareFriendRequest::NONE;
const PrepareFriendRequest_JOB PrepareFriendRequest::MATCH_RECORD;
const PrepareFriendRequest_JOB PrepareFriendRequest::JOB_MIN;
const PrepareFriendRequest_JOB PrepareFriendRequest::JOB_MAX;
const int PrepareFriendRequest::JOB_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int PrepareFriendRequest::kFriendCountFieldNumber;
const int PrepareFriendRequest::kJobTypeFieldNumber;
#endif  // !_MSC_VER

PrepareFriendRequest::PrepareFriendRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.PrepareFriendRequest)
}

void PrepareFriendRequest::InitAsDefaultInstance() {
}

PrepareFriendRequest::PrepareFriendRequest(const PrepareFriendRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.PrepareFriendRequest)
}

void PrepareFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  friend_count_ = 0;
  job_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareFriendRequest::~PrepareFriendRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.PrepareFriendRequest)
  SharedDtor();
}

void PrepareFriendRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrepareFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareFriendRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareFriendRequest_descriptor_;
}

const PrepareFriendRequest& PrepareFriendRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

PrepareFriendRequest* PrepareFriendRequest::default_instance_ = NULL;

PrepareFriendRequest* PrepareFriendRequest::New() const {
  return new PrepareFriendRequest;
}

void PrepareFriendRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PrepareFriendRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(friend_count_, job_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.PrepareFriendRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 friend_count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friend_count_)));
          set_has_friend_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_job_type;
        break;
      }

      // optional .b2.protocol.session.PrepareFriendRequest.JOB job_type = 2;
      case 2: {
        if (tag == 16) {
         parse_job_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::session::PrepareFriendRequest_JOB_IsValid(value)) {
            set_job_type(static_cast< ::b2::protocol::session::PrepareFriendRequest_JOB >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.PrepareFriendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.PrepareFriendRequest)
  return false;
#undef DO_
}

void PrepareFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.PrepareFriendRequest)
  // required int32 friend_count = 1;
  if (has_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->friend_count(), output);
  }

  // optional .b2.protocol.session.PrepareFriendRequest.JOB job_type = 2;
  if (has_job_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->job_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.PrepareFriendRequest)
}

::google::protobuf::uint8* PrepareFriendRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.PrepareFriendRequest)
  // required int32 friend_count = 1;
  if (has_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->friend_count(), target);
  }

  // optional .b2.protocol.session.PrepareFriendRequest.JOB job_type = 2;
  if (has_job_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->job_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.PrepareFriendRequest)
  return target;
}

int PrepareFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 friend_count = 1;
    if (has_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friend_count());
    }

    // optional .b2.protocol.session.PrepareFriendRequest.JOB job_type = 2;
    if (has_job_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareFriendRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareFriendRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareFriendRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareFriendRequest::MergeFrom(const PrepareFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_count()) {
      set_friend_count(from.friend_count());
    }
    if (from.has_job_type()) {
      set_job_type(from.job_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareFriendRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareFriendRequest::CopyFrom(const PrepareFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareFriendRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrepareFriendRequest::Swap(PrepareFriendRequest* other) {
  if (other != this) {
    std::swap(friend_count_, other->friend_count_);
    std::swap(job_type_, other->job_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareFriendRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareFriendRequest_descriptor_;
  metadata.reflection = PrepareFriendRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrepareFriendResponse::kResultFieldNumber;
const int PrepareFriendResponse::kNewFriendCountFieldNumber;
#endif  // !_MSC_VER

PrepareFriendResponse::PrepareFriendResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.PrepareFriendResponse)
}

void PrepareFriendResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

PrepareFriendResponse::PrepareFriendResponse(const PrepareFriendResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.PrepareFriendResponse)
}

void PrepareFriendResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  new_friend_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrepareFriendResponse::~PrepareFriendResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.PrepareFriendResponse)
  SharedDtor();
}

void PrepareFriendResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void PrepareFriendResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrepareFriendResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrepareFriendResponse_descriptor_;
}

const PrepareFriendResponse& PrepareFriendResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

PrepareFriendResponse* PrepareFriendResponse::default_instance_ = NULL;

PrepareFriendResponse* PrepareFriendResponse::New() const {
  return new PrepareFriendResponse;
}

void PrepareFriendResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    new_friend_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrepareFriendResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.PrepareFriendResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_friend_count;
        break;
      }

      // optional int32 new_friend_count = 2;
      case 2: {
        if (tag == 16) {
         parse_new_friend_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_friend_count_)));
          set_has_new_friend_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.PrepareFriendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.PrepareFriendResponse)
  return false;
#undef DO_
}

void PrepareFriendResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.PrepareFriendResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 new_friend_count = 2;
  if (has_new_friend_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_friend_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.PrepareFriendResponse)
}

::google::protobuf::uint8* PrepareFriendResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.PrepareFriendResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 new_friend_count = 2;
  if (has_new_friend_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->new_friend_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.PrepareFriendResponse)
  return target;
}

int PrepareFriendResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 new_friend_count = 2;
    if (has_new_friend_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_friend_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrepareFriendResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrepareFriendResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrepareFriendResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrepareFriendResponse::MergeFrom(const PrepareFriendResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_new_friend_count()) {
      set_new_friend_count(from.new_friend_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrepareFriendResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrepareFriendResponse::CopyFrom(const PrepareFriendResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrepareFriendResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void PrepareFriendResponse::Swap(PrepareFriendResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(new_friend_count_, other->new_friend_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrepareFriendResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrepareFriendResponse_descriptor_;
  metadata.reflection = PrepareFriendResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildLevelExpRequest::kLevelFieldNumber;
const int SetGuildLevelExpRequest::kExpFieldNumber;
#endif  // !_MSC_VER

SetGuildLevelExpRequest::SetGuildLevelExpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetGuildLevelExpRequest)
}

void SetGuildLevelExpRequest::InitAsDefaultInstance() {
}

SetGuildLevelExpRequest::SetGuildLevelExpRequest(const SetGuildLevelExpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetGuildLevelExpRequest)
}

void SetGuildLevelExpRequest::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildLevelExpRequest::~SetGuildLevelExpRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetGuildLevelExpRequest)
  SharedDtor();
}

void SetGuildLevelExpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetGuildLevelExpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildLevelExpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildLevelExpRequest_descriptor_;
}

const SetGuildLevelExpRequest& SetGuildLevelExpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetGuildLevelExpRequest* SetGuildLevelExpRequest::default_instance_ = NULL;

SetGuildLevelExpRequest* SetGuildLevelExpRequest::New() const {
  return new SetGuildLevelExpRequest;
}

void SetGuildLevelExpRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetGuildLevelExpRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(level_, exp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildLevelExpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetGuildLevelExpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // required int32 exp = 2;
      case 2: {
        if (tag == 16) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetGuildLevelExpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetGuildLevelExpRequest)
  return false;
#undef DO_
}

void SetGuildLevelExpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetGuildLevelExpRequest)
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetGuildLevelExpRequest)
}

::google::protobuf::uint8* SetGuildLevelExpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetGuildLevelExpRequest)
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // required int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetGuildLevelExpRequest)
  return target;
}

int SetGuildLevelExpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildLevelExpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildLevelExpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildLevelExpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildLevelExpRequest::MergeFrom(const SetGuildLevelExpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildLevelExpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildLevelExpRequest::CopyFrom(const SetGuildLevelExpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildLevelExpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SetGuildLevelExpRequest::Swap(SetGuildLevelExpRequest* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildLevelExpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildLevelExpRequest_descriptor_;
  metadata.reflection = SetGuildLevelExpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetGuildLevelExpResponse::kResultFieldNumber;
const int SetGuildLevelExpResponse::kGuildFieldNumber;
#endif  // !_MSC_VER

SetGuildLevelExpResponse::SetGuildLevelExpResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetGuildLevelExpResponse)
}

void SetGuildLevelExpResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  guild_ = const_cast< ::b2::protocol::commondata::Guild*>(&::b2::protocol::commondata::Guild::default_instance());
}

SetGuildLevelExpResponse::SetGuildLevelExpResponse(const SetGuildLevelExpResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetGuildLevelExpResponse)
}

void SetGuildLevelExpResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  guild_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetGuildLevelExpResponse::~SetGuildLevelExpResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetGuildLevelExpResponse)
  SharedDtor();
}

void SetGuildLevelExpResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete guild_;
  }
}

void SetGuildLevelExpResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetGuildLevelExpResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetGuildLevelExpResponse_descriptor_;
}

const SetGuildLevelExpResponse& SetGuildLevelExpResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetGuildLevelExpResponse* SetGuildLevelExpResponse::default_instance_ = NULL;

SetGuildLevelExpResponse* SetGuildLevelExpResponse::New() const {
  return new SetGuildLevelExpResponse;
}

void SetGuildLevelExpResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_guild()) {
      if (guild_ != NULL) guild_->::b2::protocol::commondata::Guild::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetGuildLevelExpResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetGuildLevelExpResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_guild;
        break;
      }

      // optional .b2.protocol.commondata.Guild guild = 2;
      case 2: {
        if (tag == 18) {
         parse_guild:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetGuildLevelExpResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetGuildLevelExpResponse)
  return false;
#undef DO_
}

void SetGuildLevelExpResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetGuildLevelExpResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Guild guild = 2;
  if (has_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetGuildLevelExpResponse)
}

::google::protobuf::uint8* SetGuildLevelExpResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetGuildLevelExpResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Guild guild = 2;
  if (has_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetGuildLevelExpResponse)
  return target;
}

int SetGuildLevelExpResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Guild guild = 2;
    if (has_guild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetGuildLevelExpResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetGuildLevelExpResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetGuildLevelExpResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetGuildLevelExpResponse::MergeFrom(const SetGuildLevelExpResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_guild()) {
      mutable_guild()->::b2::protocol::commondata::Guild::MergeFrom(from.guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetGuildLevelExpResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetGuildLevelExpResponse::CopyFrom(const SetGuildLevelExpResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetGuildLevelExpResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_guild()) {
    if (!this->guild().IsInitialized()) return false;
  }
  return true;
}

void SetGuildLevelExpResponse::Swap(SetGuildLevelExpResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guild_, other->guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetGuildLevelExpResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetGuildLevelExpResponse_descriptor_;
  metadata.reflection = SetGuildLevelExpResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetTeamMatchPointRequest::ResetTeamMatchPointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetTeamMatchPointRequest)
}

void ResetTeamMatchPointRequest::InitAsDefaultInstance() {
}

ResetTeamMatchPointRequest::ResetTeamMatchPointRequest(const ResetTeamMatchPointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetTeamMatchPointRequest)
}

void ResetTeamMatchPointRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetTeamMatchPointRequest::~ResetTeamMatchPointRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetTeamMatchPointRequest)
  SharedDtor();
}

void ResetTeamMatchPointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetTeamMatchPointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetTeamMatchPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetTeamMatchPointRequest_descriptor_;
}

const ResetTeamMatchPointRequest& ResetTeamMatchPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetTeamMatchPointRequest* ResetTeamMatchPointRequest::default_instance_ = NULL;

ResetTeamMatchPointRequest* ResetTeamMatchPointRequest::New() const {
  return new ResetTeamMatchPointRequest;
}

void ResetTeamMatchPointRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetTeamMatchPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetTeamMatchPointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetTeamMatchPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetTeamMatchPointRequest)
  return false;
#undef DO_
}

void ResetTeamMatchPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetTeamMatchPointRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetTeamMatchPointRequest)
}

::google::protobuf::uint8* ResetTeamMatchPointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetTeamMatchPointRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetTeamMatchPointRequest)
  return target;
}

int ResetTeamMatchPointRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetTeamMatchPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetTeamMatchPointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetTeamMatchPointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetTeamMatchPointRequest::MergeFrom(const ResetTeamMatchPointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetTeamMatchPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetTeamMatchPointRequest::CopyFrom(const ResetTeamMatchPointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTeamMatchPointRequest::IsInitialized() const {

  return true;
}

void ResetTeamMatchPointRequest::Swap(ResetTeamMatchPointRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetTeamMatchPointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetTeamMatchPointRequest_descriptor_;
  metadata.reflection = ResetTeamMatchPointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetTeamMatchPointResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ResetTeamMatchPointResponse::ResetTeamMatchPointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetTeamMatchPointResponse)
}

void ResetTeamMatchPointResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ResetTeamMatchPointResponse::ResetTeamMatchPointResponse(const ResetTeamMatchPointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetTeamMatchPointResponse)
}

void ResetTeamMatchPointResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetTeamMatchPointResponse::~ResetTeamMatchPointResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetTeamMatchPointResponse)
  SharedDtor();
}

void ResetTeamMatchPointResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResetTeamMatchPointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetTeamMatchPointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetTeamMatchPointResponse_descriptor_;
}

const ResetTeamMatchPointResponse& ResetTeamMatchPointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetTeamMatchPointResponse* ResetTeamMatchPointResponse::default_instance_ = NULL;

ResetTeamMatchPointResponse* ResetTeamMatchPointResponse::New() const {
  return new ResetTeamMatchPointResponse;
}

void ResetTeamMatchPointResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetTeamMatchPointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetTeamMatchPointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetTeamMatchPointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetTeamMatchPointResponse)
  return false;
#undef DO_
}

void ResetTeamMatchPointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetTeamMatchPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetTeamMatchPointResponse)
}

::google::protobuf::uint8* ResetTeamMatchPointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetTeamMatchPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetTeamMatchPointResponse)
  return target;
}

int ResetTeamMatchPointResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetTeamMatchPointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetTeamMatchPointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetTeamMatchPointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetTeamMatchPointResponse::MergeFrom(const ResetTeamMatchPointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetTeamMatchPointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetTeamMatchPointResponse::CopyFrom(const ResetTeamMatchPointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTeamMatchPointResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResetTeamMatchPointResponse::Swap(ResetTeamMatchPointResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetTeamMatchPointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetTeamMatchPointResponse_descriptor_;
  metadata.reflection = ResetTeamMatchPointResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCharacterRankInfoRequest::kCharacterTypeFieldNumber;
const int SetCharacterRankInfoRequest::kRankFieldNumber;
const int SetCharacterRankInfoRequest::kNodeIndexFieldNumber;
const int SetCharacterRankInfoRequest::kNodeStateFieldNumber;
#endif  // !_MSC_VER

SetCharacterRankInfoRequest::SetCharacterRankInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetCharacterRankInfoRequest)
}

void SetCharacterRankInfoRequest::InitAsDefaultInstance() {
}

SetCharacterRankInfoRequest::SetCharacterRankInfoRequest(const SetCharacterRankInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetCharacterRankInfoRequest)
}

void SetCharacterRankInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  rank_ = 0;
  node_index_ = 0;
  node_state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCharacterRankInfoRequest::~SetCharacterRankInfoRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetCharacterRankInfoRequest)
  SharedDtor();
}

void SetCharacterRankInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetCharacterRankInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCharacterRankInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCharacterRankInfoRequest_descriptor_;
}

const SetCharacterRankInfoRequest& SetCharacterRankInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetCharacterRankInfoRequest* SetCharacterRankInfoRequest::default_instance_ = NULL;

SetCharacterRankInfoRequest* SetCharacterRankInfoRequest::New() const {
  return new SetCharacterRankInfoRequest;
}

void SetCharacterRankInfoRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetCharacterRankInfoRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(rank_, node_state_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCharacterRankInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetCharacterRankInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required int32 rank = 2;
      case 2: {
        if (tag == 16) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_node_index;
        break;
      }

      // required int32 node_index = 3;
      case 3: {
        if (tag == 24) {
         parse_node_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_index_)));
          set_has_node_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_node_state;
        break;
      }

      // required bool node_state = 4;
      case 4: {
        if (tag == 32) {
         parse_node_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &node_state_)));
          set_has_node_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetCharacterRankInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetCharacterRankInfoRequest)
  return false;
#undef DO_
}

void SetCharacterRankInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetCharacterRankInfoRequest)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // required int32 node_index = 3;
  if (has_node_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->node_index(), output);
  }

  // required bool node_state = 4;
  if (has_node_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->node_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetCharacterRankInfoRequest)
}

::google::protobuf::uint8* SetCharacterRankInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetCharacterRankInfoRequest)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rank(), target);
  }

  // required int32 node_index = 3;
  if (has_node_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->node_index(), target);
  }

  // required bool node_state = 4;
  if (has_node_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->node_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetCharacterRankInfoRequest)
  return target;
}

int SetCharacterRankInfoRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 node_index = 3;
    if (has_node_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_index());
    }

    // required bool node_state = 4;
    if (has_node_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCharacterRankInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCharacterRankInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCharacterRankInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCharacterRankInfoRequest::MergeFrom(const SetCharacterRankInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_node_index()) {
      set_node_index(from.node_index());
    }
    if (from.has_node_state()) {
      set_node_state(from.node_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCharacterRankInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCharacterRankInfoRequest::CopyFrom(const SetCharacterRankInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCharacterRankInfoRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SetCharacterRankInfoRequest::Swap(SetCharacterRankInfoRequest* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(rank_, other->rank_);
    std::swap(node_index_, other->node_index_);
    std::swap(node_state_, other->node_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCharacterRankInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCharacterRankInfoRequest_descriptor_;
  metadata.reflection = SetCharacterRankInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCharacterRankInfoResponse::kResultFieldNumber;
const int SetCharacterRankInfoResponse::kCharacterFieldNumber;
#endif  // !_MSC_VER

SetCharacterRankInfoResponse::SetCharacterRankInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetCharacterRankInfoResponse)
}

void SetCharacterRankInfoResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  character_ = const_cast< ::b2::protocol::commondata::Character*>(&::b2::protocol::commondata::Character::default_instance());
}

SetCharacterRankInfoResponse::SetCharacterRankInfoResponse(const SetCharacterRankInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetCharacterRankInfoResponse)
}

void SetCharacterRankInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  character_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCharacterRankInfoResponse::~SetCharacterRankInfoResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetCharacterRankInfoResponse)
  SharedDtor();
}

void SetCharacterRankInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete character_;
  }
}

void SetCharacterRankInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCharacterRankInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCharacterRankInfoResponse_descriptor_;
}

const SetCharacterRankInfoResponse& SetCharacterRankInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetCharacterRankInfoResponse* SetCharacterRankInfoResponse::default_instance_ = NULL;

SetCharacterRankInfoResponse* SetCharacterRankInfoResponse::New() const {
  return new SetCharacterRankInfoResponse;
}

void SetCharacterRankInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_character()) {
      if (character_ != NULL) character_->::b2::protocol::commondata::Character::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCharacterRankInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetCharacterRankInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_character;
        break;
      }

      // optional .b2.protocol.commondata.Character character = 2;
      case 2: {
        if (tag == 18) {
         parse_character:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetCharacterRankInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetCharacterRankInfoResponse)
  return false;
#undef DO_
}

void SetCharacterRankInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetCharacterRankInfoResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Character character = 2;
  if (has_character()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->character(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetCharacterRankInfoResponse)
}

::google::protobuf::uint8* SetCharacterRankInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetCharacterRankInfoResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Character character = 2;
  if (has_character()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->character(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetCharacterRankInfoResponse)
  return target;
}

int SetCharacterRankInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Character character = 2;
    if (has_character()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->character());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCharacterRankInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCharacterRankInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCharacterRankInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCharacterRankInfoResponse::MergeFrom(const SetCharacterRankInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_character()) {
      mutable_character()->::b2::protocol::commondata::Character::MergeFrom(from.character());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCharacterRankInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCharacterRankInfoResponse::CopyFrom(const SetCharacterRankInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCharacterRankInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_character()) {
    if (!this->character().IsInitialized()) return false;
  }
  return true;
}

void SetCharacterRankInfoResponse::Swap(SetCharacterRankInfoResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(character_, other->character_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCharacterRankInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCharacterRankInfoResponse_descriptor_;
  metadata.reflection = SetCharacterRankInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCharacterRelicRequest::kCharacterTypeFieldNumber;
const int SetCharacterRelicRequest::kRelicIdFieldNumber;
const int SetCharacterRelicRequest::kGradeFieldNumber;
const int SetCharacterRelicRequest::kEnhanceLevelFieldNumber;
#endif  // !_MSC_VER

SetCharacterRelicRequest::SetCharacterRelicRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetCharacterRelicRequest)
}

void SetCharacterRelicRequest::InitAsDefaultInstance() {
}

SetCharacterRelicRequest::SetCharacterRelicRequest(const SetCharacterRelicRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetCharacterRelicRequest)
}

void SetCharacterRelicRequest::SharedCtor() {
  _cached_size_ = 0;
  character_type_ = 1;
  relic_id_ = 0;
  grade_ = 0;
  enhance_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCharacterRelicRequest::~SetCharacterRelicRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetCharacterRelicRequest)
  SharedDtor();
}

void SetCharacterRelicRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetCharacterRelicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCharacterRelicRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCharacterRelicRequest_descriptor_;
}

const SetCharacterRelicRequest& SetCharacterRelicRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetCharacterRelicRequest* SetCharacterRelicRequest::default_instance_ = NULL;

SetCharacterRelicRequest* SetCharacterRelicRequest::New() const {
  return new SetCharacterRelicRequest;
}

void SetCharacterRelicRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetCharacterRelicRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(relic_id_, enhance_level_);
    character_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCharacterRelicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetCharacterRelicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Character.TYPE character_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Character_TYPE_IsValid(value)) {
            set_character_type(static_cast< ::b2::protocol::commondata::Character_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relic_id;
        break;
      }

      // required int32 relic_id = 2;
      case 2: {
        if (tag == 16) {
         parse_relic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relic_id_)));
          set_has_relic_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_grade;
        break;
      }

      // required int32 grade = 3;
      case 3: {
        if (tag == 24) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_enhance_level;
        break;
      }

      // required int32 enhance_level = 4;
      case 4: {
        if (tag == 32) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetCharacterRelicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetCharacterRelicRequest)
  return false;
#undef DO_
}

void SetCharacterRelicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetCharacterRelicRequest)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->character_type(), output);
  }

  // required int32 relic_id = 2;
  if (has_relic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relic_id(), output);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grade(), output);
  }

  // required int32 enhance_level = 4;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->enhance_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetCharacterRelicRequest)
}

::google::protobuf::uint8* SetCharacterRelicRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetCharacterRelicRequest)
  // required .b2.protocol.commondata.Character.TYPE character_type = 1;
  if (has_character_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->character_type(), target);
  }

  // required int32 relic_id = 2;
  if (has_relic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relic_id(), target);
  }

  // required int32 grade = 3;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grade(), target);
  }

  // required int32 enhance_level = 4;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->enhance_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetCharacterRelicRequest)
  return target;
}

int SetCharacterRelicRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Character.TYPE character_type = 1;
    if (has_character_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->character_type());
    }

    // required int32 relic_id = 2;
    if (has_relic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relic_id());
    }

    // required int32 grade = 3;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // required int32 enhance_level = 4;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enhance_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCharacterRelicRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCharacterRelicRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCharacterRelicRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCharacterRelicRequest::MergeFrom(const SetCharacterRelicRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_character_type()) {
      set_character_type(from.character_type());
    }
    if (from.has_relic_id()) {
      set_relic_id(from.relic_id());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCharacterRelicRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCharacterRelicRequest::CopyFrom(const SetCharacterRelicRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCharacterRelicRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SetCharacterRelicRequest::Swap(SetCharacterRelicRequest* other) {
  if (other != this) {
    std::swap(character_type_, other->character_type_);
    std::swap(relic_id_, other->relic_id_);
    std::swap(grade_, other->grade_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCharacterRelicRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCharacterRelicRequest_descriptor_;
  metadata.reflection = SetCharacterRelicRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetCharacterRelicResponse::kResultFieldNumber;
const int SetCharacterRelicResponse::kRelicFieldNumber;
#endif  // !_MSC_VER

SetCharacterRelicResponse::SetCharacterRelicResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetCharacterRelicResponse)
}

void SetCharacterRelicResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  relic_ = const_cast< ::b2::protocol::commondata::Relic*>(&::b2::protocol::commondata::Relic::default_instance());
}

SetCharacterRelicResponse::SetCharacterRelicResponse(const SetCharacterRelicResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetCharacterRelicResponse)
}

void SetCharacterRelicResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  relic_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetCharacterRelicResponse::~SetCharacterRelicResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetCharacterRelicResponse)
  SharedDtor();
}

void SetCharacterRelicResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete relic_;
  }
}

void SetCharacterRelicResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetCharacterRelicResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetCharacterRelicResponse_descriptor_;
}

const SetCharacterRelicResponse& SetCharacterRelicResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetCharacterRelicResponse* SetCharacterRelicResponse::default_instance_ = NULL;

SetCharacterRelicResponse* SetCharacterRelicResponse::New() const {
  return new SetCharacterRelicResponse;
}

void SetCharacterRelicResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_relic()) {
      if (relic_ != NULL) relic_->::b2::protocol::commondata::Relic::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetCharacterRelicResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetCharacterRelicResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_relic;
        break;
      }

      // optional .b2.protocol.commondata.Relic relic = 2;
      case 2: {
        if (tag == 18) {
         parse_relic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relic()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetCharacterRelicResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetCharacterRelicResponse)
  return false;
#undef DO_
}

void SetCharacterRelicResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetCharacterRelicResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Relic relic = 2;
  if (has_relic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->relic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetCharacterRelicResponse)
}

::google::protobuf::uint8* SetCharacterRelicResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetCharacterRelicResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Relic relic = 2;
  if (has_relic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->relic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetCharacterRelicResponse)
  return target;
}

int SetCharacterRelicResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Relic relic = 2;
    if (has_relic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetCharacterRelicResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetCharacterRelicResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetCharacterRelicResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetCharacterRelicResponse::MergeFrom(const SetCharacterRelicResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_relic()) {
      mutable_relic()->::b2::protocol::commondata::Relic::MergeFrom(from.relic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetCharacterRelicResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCharacterRelicResponse::CopyFrom(const SetCharacterRelicResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCharacterRelicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_relic()) {
    if (!this->relic().IsInitialized()) return false;
  }
  return true;
}

void SetCharacterRelicResponse::Swap(SetCharacterRelicResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(relic_, other->relic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetCharacterRelicResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetCharacterRelicResponse_descriptor_;
  metadata.reflection = SetCharacterRelicResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTutorialProgressRequest::kTutorialIdFieldNumber;
const int SetTutorialProgressRequest::kIsItemPreparedFieldNumber;
const int SetTutorialProgressRequest::kIsLotteryDrawnFieldNumber;
const int SetTutorialProgressRequest::kIsFinishedFieldNumber;
#endif  // !_MSC_VER

SetTutorialProgressRequest::SetTutorialProgressRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetTutorialProgressRequest)
}

void SetTutorialProgressRequest::InitAsDefaultInstance() {
}

SetTutorialProgressRequest::SetTutorialProgressRequest(const SetTutorialProgressRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetTutorialProgressRequest)
}

void SetTutorialProgressRequest::SharedCtor() {
  _cached_size_ = 0;
  tutorial_id_ = 0;
  is_item_prepared_ = false;
  is_lottery_drawn_ = false;
  is_finished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTutorialProgressRequest::~SetTutorialProgressRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetTutorialProgressRequest)
  SharedDtor();
}

void SetTutorialProgressRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetTutorialProgressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTutorialProgressRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTutorialProgressRequest_descriptor_;
}

const SetTutorialProgressRequest& SetTutorialProgressRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetTutorialProgressRequest* SetTutorialProgressRequest::default_instance_ = NULL;

SetTutorialProgressRequest* SetTutorialProgressRequest::New() const {
  return new SetTutorialProgressRequest;
}

void SetTutorialProgressRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetTutorialProgressRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tutorial_id_, is_finished_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTutorialProgressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetTutorialProgressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tutorial_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tutorial_id_)));
          set_has_tutorial_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_item_prepared;
        break;
      }

      // required bool is_item_prepared = 2;
      case 2: {
        if (tag == 16) {
         parse_is_item_prepared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_item_prepared_)));
          set_has_is_item_prepared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_is_lottery_drawn;
        break;
      }

      // required bool is_lottery_drawn = 3;
      case 3: {
        if (tag == 24) {
         parse_is_lottery_drawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lottery_drawn_)));
          set_has_is_lottery_drawn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_is_finished;
        break;
      }

      // required bool is_finished = 4;
      case 4: {
        if (tag == 32) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetTutorialProgressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetTutorialProgressRequest)
  return false;
#undef DO_
}

void SetTutorialProgressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetTutorialProgressRequest)
  // required int32 tutorial_id = 1;
  if (has_tutorial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tutorial_id(), output);
  }

  // required bool is_item_prepared = 2;
  if (has_is_item_prepared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_item_prepared(), output);
  }

  // required bool is_lottery_drawn = 3;
  if (has_is_lottery_drawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_lottery_drawn(), output);
  }

  // required bool is_finished = 4;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_finished(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetTutorialProgressRequest)
}

::google::protobuf::uint8* SetTutorialProgressRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetTutorialProgressRequest)
  // required int32 tutorial_id = 1;
  if (has_tutorial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tutorial_id(), target);
  }

  // required bool is_item_prepared = 2;
  if (has_is_item_prepared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_item_prepared(), target);
  }

  // required bool is_lottery_drawn = 3;
  if (has_is_lottery_drawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_lottery_drawn(), target);
  }

  // required bool is_finished = 4;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_finished(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetTutorialProgressRequest)
  return target;
}

int SetTutorialProgressRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tutorial_id = 1;
    if (has_tutorial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorial_id());
    }

    // required bool is_item_prepared = 2;
    if (has_is_item_prepared()) {
      total_size += 1 + 1;
    }

    // required bool is_lottery_drawn = 3;
    if (has_is_lottery_drawn()) {
      total_size += 1 + 1;
    }

    // required bool is_finished = 4;
    if (has_is_finished()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTutorialProgressRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTutorialProgressRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTutorialProgressRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTutorialProgressRequest::MergeFrom(const SetTutorialProgressRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tutorial_id()) {
      set_tutorial_id(from.tutorial_id());
    }
    if (from.has_is_item_prepared()) {
      set_is_item_prepared(from.is_item_prepared());
    }
    if (from.has_is_lottery_drawn()) {
      set_is_lottery_drawn(from.is_lottery_drawn());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTutorialProgressRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTutorialProgressRequest::CopyFrom(const SetTutorialProgressRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTutorialProgressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SetTutorialProgressRequest::Swap(SetTutorialProgressRequest* other) {
  if (other != this) {
    std::swap(tutorial_id_, other->tutorial_id_);
    std::swap(is_item_prepared_, other->is_item_prepared_);
    std::swap(is_lottery_drawn_, other->is_lottery_drawn_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTutorialProgressRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTutorialProgressRequest_descriptor_;
  metadata.reflection = SetTutorialProgressRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTutorialProgressResponse::kResultFieldNumber;
const int SetTutorialProgressResponse::kTutorialIdFieldNumber;
const int SetTutorialProgressResponse::kIsItemPreparedFieldNumber;
const int SetTutorialProgressResponse::kIsLotteryDrawnFieldNumber;
const int SetTutorialProgressResponse::kIsFinishedFieldNumber;
#endif  // !_MSC_VER

SetTutorialProgressResponse::SetTutorialProgressResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetTutorialProgressResponse)
}

void SetTutorialProgressResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetTutorialProgressResponse::SetTutorialProgressResponse(const SetTutorialProgressResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetTutorialProgressResponse)
}

void SetTutorialProgressResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  tutorial_id_ = 0;
  is_item_prepared_ = false;
  is_lottery_drawn_ = false;
  is_finished_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTutorialProgressResponse::~SetTutorialProgressResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetTutorialProgressResponse)
  SharedDtor();
}

void SetTutorialProgressResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetTutorialProgressResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTutorialProgressResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTutorialProgressResponse_descriptor_;
}

const SetTutorialProgressResponse& SetTutorialProgressResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetTutorialProgressResponse* SetTutorialProgressResponse::default_instance_ = NULL;

SetTutorialProgressResponse* SetTutorialProgressResponse::New() const {
  return new SetTutorialProgressResponse;
}

void SetTutorialProgressResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetTutorialProgressResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tutorial_id_, is_finished_);
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTutorialProgressResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetTutorialProgressResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tutorial_id;
        break;
      }

      // optional int32 tutorial_id = 11;
      case 11: {
        if (tag == 88) {
         parse_tutorial_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tutorial_id_)));
          set_has_tutorial_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_item_prepared;
        break;
      }

      // optional bool is_item_prepared = 12;
      case 12: {
        if (tag == 96) {
         parse_is_item_prepared:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_item_prepared_)));
          set_has_is_item_prepared();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_lottery_drawn;
        break;
      }

      // optional bool is_lottery_drawn = 13;
      case 13: {
        if (tag == 104) {
         parse_is_lottery_drawn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lottery_drawn_)));
          set_has_is_lottery_drawn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_finished;
        break;
      }

      // optional bool is_finished = 14;
      case 14: {
        if (tag == 112) {
         parse_is_finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
          set_has_is_finished();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetTutorialProgressResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetTutorialProgressResponse)
  return false;
#undef DO_
}

void SetTutorialProgressResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetTutorialProgressResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 tutorial_id = 11;
  if (has_tutorial_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->tutorial_id(), output);
  }

  // optional bool is_item_prepared = 12;
  if (has_is_item_prepared()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_item_prepared(), output);
  }

  // optional bool is_lottery_drawn = 13;
  if (has_is_lottery_drawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_lottery_drawn(), output);
  }

  // optional bool is_finished = 14;
  if (has_is_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_finished(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetTutorialProgressResponse)
}

::google::protobuf::uint8* SetTutorialProgressResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetTutorialProgressResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 tutorial_id = 11;
  if (has_tutorial_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tutorial_id(), target);
  }

  // optional bool is_item_prepared = 12;
  if (has_is_item_prepared()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_item_prepared(), target);
  }

  // optional bool is_lottery_drawn = 13;
  if (has_is_lottery_drawn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_lottery_drawn(), target);
  }

  // optional bool is_finished = 14;
  if (has_is_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_finished(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetTutorialProgressResponse)
  return target;
}

int SetTutorialProgressResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 tutorial_id = 11;
    if (has_tutorial_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tutorial_id());
    }

    // optional bool is_item_prepared = 12;
    if (has_is_item_prepared()) {
      total_size += 1 + 1;
    }

    // optional bool is_lottery_drawn = 13;
    if (has_is_lottery_drawn()) {
      total_size += 1 + 1;
    }

    // optional bool is_finished = 14;
    if (has_is_finished()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTutorialProgressResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTutorialProgressResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTutorialProgressResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTutorialProgressResponse::MergeFrom(const SetTutorialProgressResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_tutorial_id()) {
      set_tutorial_id(from.tutorial_id());
    }
    if (from.has_is_item_prepared()) {
      set_is_item_prepared(from.is_item_prepared());
    }
    if (from.has_is_lottery_drawn()) {
      set_is_lottery_drawn(from.is_lottery_drawn());
    }
    if (from.has_is_finished()) {
      set_is_finished(from.is_finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTutorialProgressResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTutorialProgressResponse::CopyFrom(const SetTutorialProgressResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTutorialProgressResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetTutorialProgressResponse::Swap(SetTutorialProgressResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tutorial_id_, other->tutorial_id_);
    std::swap(is_item_prepared_, other->is_item_prepared_);
    std::swap(is_lottery_drawn_, other->is_lottery_drawn_);
    std::swap(is_finished_, other->is_finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTutorialProgressResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTutorialProgressResponse_descriptor_;
  metadata.reflection = SetTutorialProgressResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetMatchSeasonRewardRequest::kMatchTypeFieldNumber;
const int SetMatchSeasonRewardRequest::kRankingFieldNumber;
const int SetMatchSeasonRewardRequest::kPointFieldNumber;
#endif  // !_MSC_VER

SetMatchSeasonRewardRequest::SetMatchSeasonRewardRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetMatchSeasonRewardRequest)
}

void SetMatchSeasonRewardRequest::InitAsDefaultInstance() {
}

SetMatchSeasonRewardRequest::SetMatchSeasonRewardRequest(const SetMatchSeasonRewardRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetMatchSeasonRewardRequest)
}

void SetMatchSeasonRewardRequest::SharedCtor() {
  _cached_size_ = 0;
  match_type_ = 1;
  ranking_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMatchSeasonRewardRequest::~SetMatchSeasonRewardRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetMatchSeasonRewardRequest)
  SharedDtor();
}

void SetMatchSeasonRewardRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetMatchSeasonRewardRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMatchSeasonRewardRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMatchSeasonRewardRequest_descriptor_;
}

const SetMatchSeasonRewardRequest& SetMatchSeasonRewardRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetMatchSeasonRewardRequest* SetMatchSeasonRewardRequest::default_instance_ = NULL;

SetMatchSeasonRewardRequest* SetMatchSeasonRewardRequest::New() const {
  return new SetMatchSeasonRewardRequest;
}

void SetMatchSeasonRewardRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetMatchSeasonRewardRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(ranking_, point_);
    match_type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetMatchSeasonRewardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetMatchSeasonRewardRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchInfo_TYPE_IsValid(value)) {
            set_match_type(static_cast< ::b2::protocol::commondata::MatchInfo_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 2;
      case 2: {
        if (tag == 16) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional int32 point = 3;
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetMatchSeasonRewardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetMatchSeasonRewardRequest)
  return false;
#undef DO_
}

void SetMatchSeasonRewardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetMatchSeasonRewardRequest)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_type(), output);
  }

  // optional int32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking(), output);
  }

  // optional int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetMatchSeasonRewardRequest)
}

::google::protobuf::uint8* SetMatchSeasonRewardRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetMatchSeasonRewardRequest)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_type(), target);
  }

  // optional int32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking(), target);
  }

  // optional int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetMatchSeasonRewardRequest)
  return target;
}

int SetMatchSeasonRewardRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional int32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMatchSeasonRewardRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetMatchSeasonRewardRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetMatchSeasonRewardRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetMatchSeasonRewardRequest::MergeFrom(const SetMatchSeasonRewardRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetMatchSeasonRewardRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMatchSeasonRewardRequest::CopyFrom(const SetMatchSeasonRewardRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMatchSeasonRewardRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetMatchSeasonRewardRequest::Swap(SetMatchSeasonRewardRequest* other) {
  if (other != this) {
    std::swap(match_type_, other->match_type_);
    std::swap(ranking_, other->ranking_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetMatchSeasonRewardRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMatchSeasonRewardRequest_descriptor_;
  metadata.reflection = SetMatchSeasonRewardRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetMatchSeasonRewardResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetMatchSeasonRewardResponse::SetMatchSeasonRewardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetMatchSeasonRewardResponse)
}

void SetMatchSeasonRewardResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetMatchSeasonRewardResponse::SetMatchSeasonRewardResponse(const SetMatchSeasonRewardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetMatchSeasonRewardResponse)
}

void SetMatchSeasonRewardResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetMatchSeasonRewardResponse::~SetMatchSeasonRewardResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetMatchSeasonRewardResponse)
  SharedDtor();
}

void SetMatchSeasonRewardResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetMatchSeasonRewardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetMatchSeasonRewardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetMatchSeasonRewardResponse_descriptor_;
}

const SetMatchSeasonRewardResponse& SetMatchSeasonRewardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetMatchSeasonRewardResponse* SetMatchSeasonRewardResponse::default_instance_ = NULL;

SetMatchSeasonRewardResponse* SetMatchSeasonRewardResponse::New() const {
  return new SetMatchSeasonRewardResponse;
}

void SetMatchSeasonRewardResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetMatchSeasonRewardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetMatchSeasonRewardResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetMatchSeasonRewardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetMatchSeasonRewardResponse)
  return false;
#undef DO_
}

void SetMatchSeasonRewardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetMatchSeasonRewardResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetMatchSeasonRewardResponse)
}

::google::protobuf::uint8* SetMatchSeasonRewardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetMatchSeasonRewardResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetMatchSeasonRewardResponse)
  return target;
}

int SetMatchSeasonRewardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetMatchSeasonRewardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetMatchSeasonRewardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetMatchSeasonRewardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetMatchSeasonRewardResponse::MergeFrom(const SetMatchSeasonRewardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetMatchSeasonRewardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMatchSeasonRewardResponse::CopyFrom(const SetMatchSeasonRewardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMatchSeasonRewardResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetMatchSeasonRewardResponse::Swap(SetMatchSeasonRewardResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetMatchSeasonRewardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetMatchSeasonRewardResponse_descriptor_;
  metadata.reflection = SetMatchSeasonRewardResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetStageBoostCountRequest::kStageBoostTicketFieldNumber;
#endif  // !_MSC_VER

SetStageBoostCountRequest::SetStageBoostCountRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetStageBoostCountRequest)
}

void SetStageBoostCountRequest::InitAsDefaultInstance() {
}

SetStageBoostCountRequest::SetStageBoostCountRequest(const SetStageBoostCountRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetStageBoostCountRequest)
}

void SetStageBoostCountRequest::SharedCtor() {
  _cached_size_ = 0;
  stage_boost_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetStageBoostCountRequest::~SetStageBoostCountRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetStageBoostCountRequest)
  SharedDtor();
}

void SetStageBoostCountRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetStageBoostCountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetStageBoostCountRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetStageBoostCountRequest_descriptor_;
}

const SetStageBoostCountRequest& SetStageBoostCountRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetStageBoostCountRequest* SetStageBoostCountRequest::default_instance_ = NULL;

SetStageBoostCountRequest* SetStageBoostCountRequest::New() const {
  return new SetStageBoostCountRequest;
}

void SetStageBoostCountRequest::Clear() {
  stage_boost_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetStageBoostCountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetStageBoostCountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stage_boost_ticket = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_boost_ticket_)));
          set_has_stage_boost_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetStageBoostCountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetStageBoostCountRequest)
  return false;
#undef DO_
}

void SetStageBoostCountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetStageBoostCountRequest)
  // required int32 stage_boost_ticket = 1;
  if (has_stage_boost_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage_boost_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetStageBoostCountRequest)
}

::google::protobuf::uint8* SetStageBoostCountRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetStageBoostCountRequest)
  // required int32 stage_boost_ticket = 1;
  if (has_stage_boost_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage_boost_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetStageBoostCountRequest)
  return target;
}

int SetStageBoostCountRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stage_boost_ticket = 1;
    if (has_stage_boost_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_boost_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetStageBoostCountRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetStageBoostCountRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetStageBoostCountRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetStageBoostCountRequest::MergeFrom(const SetStageBoostCountRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage_boost_ticket()) {
      set_stage_boost_ticket(from.stage_boost_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetStageBoostCountRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStageBoostCountRequest::CopyFrom(const SetStageBoostCountRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStageBoostCountRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SetStageBoostCountRequest::Swap(SetStageBoostCountRequest* other) {
  if (other != this) {
    std::swap(stage_boost_ticket_, other->stage_boost_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetStageBoostCountRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetStageBoostCountRequest_descriptor_;
  metadata.reflection = SetStageBoostCountRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetStageBoostCountResponse::kResultFieldNumber;
const int SetStageBoostCountResponse::kStageBoostTicketFieldNumber;
#endif  // !_MSC_VER

SetStageBoostCountResponse::SetStageBoostCountResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetStageBoostCountResponse)
}

void SetStageBoostCountResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetStageBoostCountResponse::SetStageBoostCountResponse(const SetStageBoostCountResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetStageBoostCountResponse)
}

void SetStageBoostCountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  stage_boost_ticket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetStageBoostCountResponse::~SetStageBoostCountResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetStageBoostCountResponse)
  SharedDtor();
}

void SetStageBoostCountResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetStageBoostCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetStageBoostCountResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetStageBoostCountResponse_descriptor_;
}

const SetStageBoostCountResponse& SetStageBoostCountResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetStageBoostCountResponse* SetStageBoostCountResponse::default_instance_ = NULL;

SetStageBoostCountResponse* SetStageBoostCountResponse::New() const {
  return new SetStageBoostCountResponse;
}

void SetStageBoostCountResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    stage_boost_ticket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetStageBoostCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetStageBoostCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stage_boost_ticket;
        break;
      }

      // optional int32 stage_boost_ticket = 2;
      case 2: {
        if (tag == 16) {
         parse_stage_boost_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_boost_ticket_)));
          set_has_stage_boost_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetStageBoostCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetStageBoostCountResponse)
  return false;
#undef DO_
}

void SetStageBoostCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetStageBoostCountResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int32 stage_boost_ticket = 2;
  if (has_stage_boost_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stage_boost_ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetStageBoostCountResponse)
}

::google::protobuf::uint8* SetStageBoostCountResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetStageBoostCountResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int32 stage_boost_ticket = 2;
  if (has_stage_boost_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stage_boost_ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetStageBoostCountResponse)
  return target;
}

int SetStageBoostCountResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int32 stage_boost_ticket = 2;
    if (has_stage_boost_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage_boost_ticket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetStageBoostCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetStageBoostCountResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetStageBoostCountResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetStageBoostCountResponse::MergeFrom(const SetStageBoostCountResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_stage_boost_ticket()) {
      set_stage_boost_ticket(from.stage_boost_ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetStageBoostCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetStageBoostCountResponse::CopyFrom(const SetStageBoostCountResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetStageBoostCountResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetStageBoostCountResponse::Swap(SetStageBoostCountResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(stage_boost_ticket_, other->stage_boost_ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetStageBoostCountResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetStageBoostCountResponse_descriptor_;
  metadata.reflection = SetStageBoostCountResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ResetPvPMatchPointRequest::ResetPvPMatchPointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetPvPMatchPointRequest)
}

void ResetPvPMatchPointRequest::InitAsDefaultInstance() {
}

ResetPvPMatchPointRequest::ResetPvPMatchPointRequest(const ResetPvPMatchPointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetPvPMatchPointRequest)
}

void ResetPvPMatchPointRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetPvPMatchPointRequest::~ResetPvPMatchPointRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetPvPMatchPointRequest)
  SharedDtor();
}

void ResetPvPMatchPointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetPvPMatchPointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPvPMatchPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetPvPMatchPointRequest_descriptor_;
}

const ResetPvPMatchPointRequest& ResetPvPMatchPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetPvPMatchPointRequest* ResetPvPMatchPointRequest::default_instance_ = NULL;

ResetPvPMatchPointRequest* ResetPvPMatchPointRequest::New() const {
  return new ResetPvPMatchPointRequest;
}

void ResetPvPMatchPointRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetPvPMatchPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetPvPMatchPointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetPvPMatchPointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetPvPMatchPointRequest)
  return false;
#undef DO_
}

void ResetPvPMatchPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetPvPMatchPointRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetPvPMatchPointRequest)
}

::google::protobuf::uint8* ResetPvPMatchPointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetPvPMatchPointRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetPvPMatchPointRequest)
  return target;
}

int ResetPvPMatchPointRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPvPMatchPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetPvPMatchPointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetPvPMatchPointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetPvPMatchPointRequest::MergeFrom(const ResetPvPMatchPointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetPvPMatchPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPvPMatchPointRequest::CopyFrom(const ResetPvPMatchPointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPvPMatchPointRequest::IsInitialized() const {

  return true;
}

void ResetPvPMatchPointRequest::Swap(ResetPvPMatchPointRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetPvPMatchPointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetPvPMatchPointRequest_descriptor_;
  metadata.reflection = ResetPvPMatchPointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetPvPMatchPointResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ResetPvPMatchPointResponse::ResetPvPMatchPointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.ResetPvPMatchPointResponse)
}

void ResetPvPMatchPointResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ResetPvPMatchPointResponse::ResetPvPMatchPointResponse(const ResetPvPMatchPointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.ResetPvPMatchPointResponse)
}

void ResetPvPMatchPointResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetPvPMatchPointResponse::~ResetPvPMatchPointResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.ResetPvPMatchPointResponse)
  SharedDtor();
}

void ResetPvPMatchPointResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ResetPvPMatchPointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetPvPMatchPointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetPvPMatchPointResponse_descriptor_;
}

const ResetPvPMatchPointResponse& ResetPvPMatchPointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

ResetPvPMatchPointResponse* ResetPvPMatchPointResponse::default_instance_ = NULL;

ResetPvPMatchPointResponse* ResetPvPMatchPointResponse::New() const {
  return new ResetPvPMatchPointResponse;
}

void ResetPvPMatchPointResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetPvPMatchPointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.ResetPvPMatchPointResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.ResetPvPMatchPointResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.ResetPvPMatchPointResponse)
  return false;
#undef DO_
}

void ResetPvPMatchPointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.ResetPvPMatchPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.ResetPvPMatchPointResponse)
}

::google::protobuf::uint8* ResetPvPMatchPointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.ResetPvPMatchPointResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.ResetPvPMatchPointResponse)
  return target;
}

int ResetPvPMatchPointResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetPvPMatchPointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetPvPMatchPointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetPvPMatchPointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetPvPMatchPointResponse::MergeFrom(const ResetPvPMatchPointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetPvPMatchPointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetPvPMatchPointResponse::CopyFrom(const ResetPvPMatchPointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetPvPMatchPointResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ResetPvPMatchPointResponse::Swap(ResetPvPMatchPointResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetPvPMatchPointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetPvPMatchPointResponse_descriptor_;
  metadata.reflection = ResetPvPMatchPointResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkipMatchTutorialRequest::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

SkipMatchTutorialRequest::SkipMatchTutorialRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SkipMatchTutorialRequest)
}

void SkipMatchTutorialRequest::InitAsDefaultInstance() {
}

SkipMatchTutorialRequest::SkipMatchTutorialRequest(const SkipMatchTutorialRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SkipMatchTutorialRequest)
}

void SkipMatchTutorialRequest::SharedCtor() {
  _cached_size_ = 0;
  match_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkipMatchTutorialRequest::~SkipMatchTutorialRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SkipMatchTutorialRequest)
  SharedDtor();
}

void SkipMatchTutorialRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkipMatchTutorialRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipMatchTutorialRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipMatchTutorialRequest_descriptor_;
}

const SkipMatchTutorialRequest& SkipMatchTutorialRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SkipMatchTutorialRequest* SkipMatchTutorialRequest::default_instance_ = NULL;

SkipMatchTutorialRequest* SkipMatchTutorialRequest::New() const {
  return new SkipMatchTutorialRequest;
}

void SkipMatchTutorialRequest::Clear() {
  match_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkipMatchTutorialRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SkipMatchTutorialRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::MatchInfo_TYPE_IsValid(value)) {
            set_match_type(static_cast< ::b2::protocol::commondata::MatchInfo_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SkipMatchTutorialRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SkipMatchTutorialRequest)
  return false;
#undef DO_
}

void SkipMatchTutorialRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SkipMatchTutorialRequest)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->match_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SkipMatchTutorialRequest)
}

::google::protobuf::uint8* SkipMatchTutorialRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SkipMatchTutorialRequest)
  // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->match_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SkipMatchTutorialRequest)
  return target;
}

int SkipMatchTutorialRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.MatchInfo.TYPE match_type = 1;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipMatchTutorialRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkipMatchTutorialRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkipMatchTutorialRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipMatchTutorialRequest::MergeFrom(const SkipMatchTutorialRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkipMatchTutorialRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipMatchTutorialRequest::CopyFrom(const SkipMatchTutorialRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipMatchTutorialRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkipMatchTutorialRequest::Swap(SkipMatchTutorialRequest* other) {
  if (other != this) {
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkipMatchTutorialRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipMatchTutorialRequest_descriptor_;
  metadata.reflection = SkipMatchTutorialRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkipMatchTutorialResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SkipMatchTutorialResponse::SkipMatchTutorialResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SkipMatchTutorialResponse)
}

void SkipMatchTutorialResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SkipMatchTutorialResponse::SkipMatchTutorialResponse(const SkipMatchTutorialResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SkipMatchTutorialResponse)
}

void SkipMatchTutorialResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkipMatchTutorialResponse::~SkipMatchTutorialResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SkipMatchTutorialResponse)
  SharedDtor();
}

void SkipMatchTutorialResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SkipMatchTutorialResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkipMatchTutorialResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkipMatchTutorialResponse_descriptor_;
}

const SkipMatchTutorialResponse& SkipMatchTutorialResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SkipMatchTutorialResponse* SkipMatchTutorialResponse::default_instance_ = NULL;

SkipMatchTutorialResponse* SkipMatchTutorialResponse::New() const {
  return new SkipMatchTutorialResponse;
}

void SkipMatchTutorialResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkipMatchTutorialResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SkipMatchTutorialResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SkipMatchTutorialResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SkipMatchTutorialResponse)
  return false;
#undef DO_
}

void SkipMatchTutorialResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SkipMatchTutorialResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SkipMatchTutorialResponse)
}

::google::protobuf::uint8* SkipMatchTutorialResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SkipMatchTutorialResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SkipMatchTutorialResponse)
  return target;
}

int SkipMatchTutorialResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkipMatchTutorialResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkipMatchTutorialResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkipMatchTutorialResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkipMatchTutorialResponse::MergeFrom(const SkipMatchTutorialResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkipMatchTutorialResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkipMatchTutorialResponse::CopyFrom(const SkipMatchTutorialResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkipMatchTutorialResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SkipMatchTutorialResponse::Swap(SkipMatchTutorialResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkipMatchTutorialResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkipMatchTutorialResponse_descriptor_;
  metadata.reflection = SkipMatchTutorialResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDebugModeRequest::kSkipKeepAliveCheckFieldNumber;
#endif  // !_MSC_VER

SetDebugModeRequest::SetDebugModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetDebugModeRequest)
}

void SetDebugModeRequest::InitAsDefaultInstance() {
}

SetDebugModeRequest::SetDebugModeRequest(const SetDebugModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetDebugModeRequest)
}

void SetDebugModeRequest::SharedCtor() {
  _cached_size_ = 0;
  skip_keep_alive_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDebugModeRequest::~SetDebugModeRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetDebugModeRequest)
  SharedDtor();
}

void SetDebugModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetDebugModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDebugModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDebugModeRequest_descriptor_;
}

const SetDebugModeRequest& SetDebugModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetDebugModeRequest* SetDebugModeRequest::default_instance_ = NULL;

SetDebugModeRequest* SetDebugModeRequest::New() const {
  return new SetDebugModeRequest;
}

void SetDebugModeRequest::Clear() {
  skip_keep_alive_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDebugModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetDebugModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool skip_keep_alive_check = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_keep_alive_check_)));
          set_has_skip_keep_alive_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetDebugModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetDebugModeRequest)
  return false;
#undef DO_
}

void SetDebugModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetDebugModeRequest)
  // optional bool skip_keep_alive_check = 1;
  if (has_skip_keep_alive_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->skip_keep_alive_check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetDebugModeRequest)
}

::google::protobuf::uint8* SetDebugModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetDebugModeRequest)
  // optional bool skip_keep_alive_check = 1;
  if (has_skip_keep_alive_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->skip_keep_alive_check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetDebugModeRequest)
  return target;
}

int SetDebugModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool skip_keep_alive_check = 1;
    if (has_skip_keep_alive_check()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDebugModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDebugModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDebugModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDebugModeRequest::MergeFrom(const SetDebugModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skip_keep_alive_check()) {
      set_skip_keep_alive_check(from.skip_keep_alive_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDebugModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDebugModeRequest::CopyFrom(const SetDebugModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDebugModeRequest::IsInitialized() const {

  return true;
}

void SetDebugModeRequest::Swap(SetDebugModeRequest* other) {
  if (other != this) {
    std::swap(skip_keep_alive_check_, other->skip_keep_alive_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDebugModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDebugModeRequest_descriptor_;
  metadata.reflection = SetDebugModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDebugModeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetDebugModeResponse::SetDebugModeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.SetDebugModeResponse)
}

void SetDebugModeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetDebugModeResponse::SetDebugModeResponse(const SetDebugModeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.SetDebugModeResponse)
}

void SetDebugModeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDebugModeResponse::~SetDebugModeResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.SetDebugModeResponse)
  SharedDtor();
}

void SetDebugModeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetDebugModeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDebugModeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDebugModeResponse_descriptor_;
}

const SetDebugModeResponse& SetDebugModeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

SetDebugModeResponse* SetDebugModeResponse::default_instance_ = NULL;

SetDebugModeResponse* SetDebugModeResponse::New() const {
  return new SetDebugModeResponse;
}

void SetDebugModeResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDebugModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.SetDebugModeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.SetDebugModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.SetDebugModeResponse)
  return false;
#undef DO_
}

void SetDebugModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.SetDebugModeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.SetDebugModeResponse)
}

::google::protobuf::uint8* SetDebugModeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.SetDebugModeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.SetDebugModeResponse)
  return target;
}

int SetDebugModeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDebugModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDebugModeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDebugModeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDebugModeResponse::MergeFrom(const SetDebugModeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDebugModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDebugModeResponse::CopyFrom(const SetDebugModeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDebugModeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetDebugModeResponse::Swap(SetDebugModeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDebugModeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDebugModeResponse_descriptor_;
  metadata.reflection = SetDebugModeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCostumeToInventoryRequest::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

AddCostumeToInventoryRequest::AddCostumeToInventoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddCostumeToInventoryRequest)
}

void AddCostumeToInventoryRequest::InitAsDefaultInstance() {
}

AddCostumeToInventoryRequest::AddCostumeToInventoryRequest(const AddCostumeToInventoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddCostumeToInventoryRequest)
}

void AddCostumeToInventoryRequest::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCostumeToInventoryRequest::~AddCostumeToInventoryRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddCostumeToInventoryRequest)
  SharedDtor();
}

void AddCostumeToInventoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddCostumeToInventoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCostumeToInventoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCostumeToInventoryRequest_descriptor_;
}

const AddCostumeToInventoryRequest& AddCostumeToInventoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddCostumeToInventoryRequest* AddCostumeToInventoryRequest::default_instance_ = NULL;

AddCostumeToInventoryRequest* AddCostumeToInventoryRequest::New() const {
  return new AddCostumeToInventoryRequest;
}

void AddCostumeToInventoryRequest::Clear() {
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCostumeToInventoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddCostumeToInventoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddCostumeToInventoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddCostumeToInventoryRequest)
  return false;
#undef DO_
}

void AddCostumeToInventoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddCostumeToInventoryRequest)
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddCostumeToInventoryRequest)
}

::google::protobuf::uint8* AddCostumeToInventoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddCostumeToInventoryRequest)
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddCostumeToInventoryRequest)
  return target;
}

int AddCostumeToInventoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCostumeToInventoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCostumeToInventoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCostumeToInventoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCostumeToInventoryRequest::MergeFrom(const AddCostumeToInventoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCostumeToInventoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCostumeToInventoryRequest::CopyFrom(const AddCostumeToInventoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCostumeToInventoryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddCostumeToInventoryRequest::Swap(AddCostumeToInventoryRequest* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCostumeToInventoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCostumeToInventoryRequest_descriptor_;
  metadata.reflection = AddCostumeToInventoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddCostumeToInventoryResponse::kResultFieldNumber;
const int AddCostumeToInventoryResponse::kCostumeFieldNumber;
#endif  // !_MSC_VER

AddCostumeToInventoryResponse::AddCostumeToInventoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddCostumeToInventoryResponse)
}

void AddCostumeToInventoryResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  costume_ = const_cast< ::b2::protocol::commondata::Costume*>(&::b2::protocol::commondata::Costume::default_instance());
}

AddCostumeToInventoryResponse::AddCostumeToInventoryResponse(const AddCostumeToInventoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddCostumeToInventoryResponse)
}

void AddCostumeToInventoryResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  costume_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddCostumeToInventoryResponse::~AddCostumeToInventoryResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddCostumeToInventoryResponse)
  SharedDtor();
}

void AddCostumeToInventoryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
    delete costume_;
  }
}

void AddCostumeToInventoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCostumeToInventoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddCostumeToInventoryResponse_descriptor_;
}

const AddCostumeToInventoryResponse& AddCostumeToInventoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddCostumeToInventoryResponse* AddCostumeToInventoryResponse::default_instance_ = NULL;

AddCostumeToInventoryResponse* AddCostumeToInventoryResponse::New() const {
  return new AddCostumeToInventoryResponse;
}

void AddCostumeToInventoryResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_costume()) {
      if (costume_ != NULL) costume_->::b2::protocol::commondata::Costume::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddCostumeToInventoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddCostumeToInventoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_costume;
        break;
      }

      // optional .b2.protocol.commondata.Costume costume = 2;
      case 2: {
        if (tag == 18) {
         parse_costume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_costume()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddCostumeToInventoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddCostumeToInventoryResponse)
  return false;
#undef DO_
}

void AddCostumeToInventoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddCostumeToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional .b2.protocol.commondata.Costume costume = 2;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->costume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddCostumeToInventoryResponse)
}

::google::protobuf::uint8* AddCostumeToInventoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddCostumeToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional .b2.protocol.commondata.Costume costume = 2;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->costume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddCostumeToInventoryResponse)
  return target;
}

int AddCostumeToInventoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional .b2.protocol.commondata.Costume costume = 2;
    if (has_costume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->costume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCostumeToInventoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddCostumeToInventoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddCostumeToInventoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddCostumeToInventoryResponse::MergeFrom(const AddCostumeToInventoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_costume()) {
      mutable_costume()->::b2::protocol::commondata::Costume::MergeFrom(from.costume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddCostumeToInventoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCostumeToInventoryResponse::CopyFrom(const AddCostumeToInventoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCostumeToInventoryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_costume()) {
    if (!this->costume().IsInitialized()) return false;
  }
  return true;
}

void AddCostumeToInventoryResponse::Swap(AddCostumeToInventoryResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(costume_, other->costume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddCostumeToInventoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddCostumeToInventoryResponse_descriptor_;
  metadata.reflection = AddCostumeToInventoryResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTotemToInventoryRequest::kTemplateIdFieldNumber;
#endif  // !_MSC_VER

AddTotemToInventoryRequest::AddTotemToInventoryRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddTotemToInventoryRequest)
}

void AddTotemToInventoryRequest::InitAsDefaultInstance() {
}

AddTotemToInventoryRequest::AddTotemToInventoryRequest(const AddTotemToInventoryRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddTotemToInventoryRequest)
}

void AddTotemToInventoryRequest::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTotemToInventoryRequest::~AddTotemToInventoryRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddTotemToInventoryRequest)
  SharedDtor();
}

void AddTotemToInventoryRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddTotemToInventoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTotemToInventoryRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTotemToInventoryRequest_descriptor_;
}

const AddTotemToInventoryRequest& AddTotemToInventoryRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddTotemToInventoryRequest* AddTotemToInventoryRequest::default_instance_ = NULL;

AddTotemToInventoryRequest* AddTotemToInventoryRequest::New() const {
  return new AddTotemToInventoryRequest;
}

void AddTotemToInventoryRequest::Clear() {
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTotemToInventoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddTotemToInventoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddTotemToInventoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddTotemToInventoryRequest)
  return false;
#undef DO_
}

void AddTotemToInventoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddTotemToInventoryRequest)
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddTotemToInventoryRequest)
}

::google::protobuf::uint8* AddTotemToInventoryRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddTotemToInventoryRequest)
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddTotemToInventoryRequest)
  return target;
}

int AddTotemToInventoryRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTotemToInventoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTotemToInventoryRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTotemToInventoryRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTotemToInventoryRequest::MergeFrom(const AddTotemToInventoryRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTotemToInventoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTotemToInventoryRequest::CopyFrom(const AddTotemToInventoryRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTotemToInventoryRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddTotemToInventoryRequest::Swap(AddTotemToInventoryRequest* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTotemToInventoryRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTotemToInventoryRequest_descriptor_;
  metadata.reflection = AddTotemToInventoryRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTotemToInventoryResponse::kResultFieldNumber;
const int AddTotemToInventoryResponse::kTotemsFieldNumber;
#endif  // !_MSC_VER

AddTotemToInventoryResponse::AddTotemToInventoryResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.session.AddTotemToInventoryResponse)
}

void AddTotemToInventoryResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

AddTotemToInventoryResponse::AddTotemToInventoryResponse(const AddTotemToInventoryResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.session.AddTotemToInventoryResponse)
}

void AddTotemToInventoryResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTotemToInventoryResponse::~AddTotemToInventoryResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.session.AddTotemToInventoryResponse)
  SharedDtor();
}

void AddTotemToInventoryResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void AddTotemToInventoryResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTotemToInventoryResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTotemToInventoryResponse_descriptor_;
}

const AddTotemToInventoryResponse& AddTotemToInventoryResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SessionConsole_2eproto();
  return *default_instance_;
}

AddTotemToInventoryResponse* AddTotemToInventoryResponse::default_instance_ = NULL;

AddTotemToInventoryResponse* AddTotemToInventoryResponse::New() const {
  return new AddTotemToInventoryResponse;
}

void AddTotemToInventoryResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  totems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTotemToInventoryResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.session.AddTotemToInventoryResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_totems;
        break;
      }

      // repeated .b2.protocol.commondata.Totem totems = 2;
      case 2: {
        if (tag == 18) {
         parse_totems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_totems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_totems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.session.AddTotemToInventoryResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.session.AddTotemToInventoryResponse)
  return false;
#undef DO_
}

void AddTotemToInventoryResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.session.AddTotemToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated .b2.protocol.commondata.Totem totems = 2;
  for (int i = 0; i < this->totems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->totems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.session.AddTotemToInventoryResponse)
}

::google::protobuf::uint8* AddTotemToInventoryResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.session.AddTotemToInventoryResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated .b2.protocol.commondata.Totem totems = 2;
  for (int i = 0; i < this->totems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->totems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.session.AddTotemToInventoryResponse)
  return target;
}

int AddTotemToInventoryResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .b2.protocol.commondata.Totem totems = 2;
  total_size += 1 * this->totems_size();
  for (int i = 0; i < this->totems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->totems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTotemToInventoryResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTotemToInventoryResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTotemToInventoryResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTotemToInventoryResponse::MergeFrom(const AddTotemToInventoryResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  totems_.MergeFrom(from.totems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTotemToInventoryResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTotemToInventoryResponse::CopyFrom(const AddTotemToInventoryResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTotemToInventoryResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->totems())) return false;
  return true;
}

void AddTotemToInventoryResponse::Swap(AddTotemToInventoryResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    totems_.Swap(&other->totems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTotemToInventoryResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTotemToInventoryResponse_descriptor_;
  metadata.reflection = AddTotemToInventoryResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace session
}  // namespace protocol
}  // namespace b2

// @@protoc_insertion_point(global_scope)
