// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelProtocol.proto

#ifndef PROTOBUF_ChannelProtocol_2eproto__INCLUDED
#define PROTOBUF_ChannelProtocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "CommonData.pb.h"
// @@protoc_insertion_point(includes)

namespace b2 {
namespace protocol {
namespace channel {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChannelProtocol_2eproto();
void protobuf_AssignDesc_ChannelProtocol_2eproto();
void protobuf_ShutdownFile_ChannelProtocol_2eproto();

class HelloChannelRequest;
class HelloChannelResponse;
class SignInChannelRequest;
class SignInChannelResponse;
class RoomParticipant;
class RoomProperty;
class RoomJoinRequest;
class RoomJoinResponse;
class RoomLeaveRequest;
class RoomLeaveResponse;
class RoomCloseRequest;
class RoomCloseResponse;
class RoomAccessControlRequest;
class RoomAccessControlResponse;
class RoomMessageCommand;
class RoomCreateNotify;
class RoomDeleteNotify;
class RoomParticipantJoinNotify;
class RoomParticipantLeaveNotify;
class RoomHostChangedNotify;
class RoomMessageNotify;
class RoomSetPropertyRequest;
class RoomSetPropertyResponse;
class RoomPropertyUpdatedNotify;
class RoomInviteRequest;
class RoomInviteResponse;
class RoomKickRequest;
class RoomKickResponse;
class RoomLeaveResultRequest;
class RoomLeaveResultResponse;
class RoomHeartbeatCommand;
class RoomHeartbeatNotify;
class RoomHeartbeatRequest;
class RoomHeartbeatResponse;
class SetRoomDebugModeRequest;
class SetRoomDebugModeResponse;
class ChannelPublishRequest;
class ChannelPublishResponse;
class ChannelSubscribeRequest;
class ChannelSubscribeResponse;
class ChannelMessageNotify;
class WorldJoinRequest;
class WorldJoinResponse;
class WorldLeaveRequest;
class WorldLeaveResponse;
class ReportUserViaChannelRequest;
class ReportUserViaChannelResponse;

enum RoomType {
  PVP = 0,
  RAID = 1,
  ASSAULT = 2
};
bool RoomType_IsValid(int value);
const RoomType RoomType_MIN = PVP;
const RoomType RoomType_MAX = ASSAULT;
const int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoomType_descriptor();
inline const ::std::string& RoomType_Name(RoomType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoomType_descriptor(), value);
}
inline bool RoomType_Parse(
    const ::std::string& name, RoomType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
enum RoomCloseReason {
  START_PVP = 1,
  START_RAID = 2,
  BREAK_RAID = 3,
  START_ASSAULT = 4
};
bool RoomCloseReason_IsValid(int value);
const RoomCloseReason RoomCloseReason_MIN = START_PVP;
const RoomCloseReason RoomCloseReason_MAX = START_ASSAULT;
const int RoomCloseReason_ARRAYSIZE = RoomCloseReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoomCloseReason_descriptor();
inline const ::std::string& RoomCloseReason_Name(RoomCloseReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoomCloseReason_descriptor(), value);
}
inline bool RoomCloseReason_Parse(
    const ::std::string& name, RoomCloseReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoomCloseReason>(
    RoomCloseReason_descriptor(), name, value);
}
// ===================================================================

class HelloChannelRequest : public ::google::protobuf::Message {
 public:
  HelloChannelRequest();
  virtual ~HelloChannelRequest();

  HelloChannelRequest(const HelloChannelRequest& from);

  inline HelloChannelRequest& operator=(const HelloChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloChannelRequest& default_instance();

  void Swap(HelloChannelRequest* other);

  // implements Message ----------------------------------------------

  HelloChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloChannelRequest& from);
  void MergeFrom(const HelloChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Protocol client_protocol = 10;
  inline bool has_client_protocol() const;
  inline void clear_client_protocol();
  static const int kClientProtocolFieldNumber = 10;
  inline const ::b2::protocol::commondata::Protocol& client_protocol() const;
  inline ::b2::protocol::commondata::Protocol* mutable_client_protocol();
  inline ::b2::protocol::commondata::Protocol* release_client_protocol();
  inline void set_allocated_client_protocol(::b2::protocol::commondata::Protocol* client_protocol);

  // required string client_public_key = 20;
  inline bool has_client_public_key() const;
  inline void clear_client_public_key();
  static const int kClientPublicKeyFieldNumber = 20;
  inline const ::std::string& client_public_key() const;
  inline void set_client_public_key(const ::std::string& value);
  inline void set_client_public_key(const char* value);
  inline void set_client_public_key(const char* value, size_t size);
  inline ::std::string* mutable_client_public_key();
  inline ::std::string* release_client_public_key();
  inline void set_allocated_client_public_key(::std::string* client_public_key);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.HelloChannelRequest)
 private:
  inline void set_has_client_protocol();
  inline void clear_has_client_protocol();
  inline void set_has_client_public_key();
  inline void clear_has_client_public_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Protocol* client_protocol_;
  ::std::string* client_public_key_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static HelloChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class HelloChannelResponse : public ::google::protobuf::Message {
 public:
  HelloChannelResponse();
  virtual ~HelloChannelResponse();

  HelloChannelResponse(const HelloChannelResponse& from);

  inline HelloChannelResponse& operator=(const HelloChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelloChannelResponse& default_instance();

  void Swap(HelloChannelResponse* other);

  // implements Message ----------------------------------------------

  HelloChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelloChannelResponse& from);
  void MergeFrom(const HelloChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string server_public_key = 10;
  inline bool has_server_public_key() const;
  inline void clear_server_public_key();
  static const int kServerPublicKeyFieldNumber = 10;
  inline const ::std::string& server_public_key() const;
  inline void set_server_public_key(const ::std::string& value);
  inline void set_server_public_key(const char* value);
  inline void set_server_public_key(const char* value, size_t size);
  inline ::std::string* mutable_server_public_key();
  inline ::std::string* release_server_public_key();
  inline void set_allocated_server_public_key(::std::string* server_public_key);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.HelloChannelResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_server_public_key();
  inline void clear_has_server_public_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* server_public_key_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static HelloChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class SignInChannelRequest : public ::google::protobuf::Message {
 public:
  SignInChannelRequest();
  virtual ~SignInChannelRequest();

  SignInChannelRequest(const SignInChannelRequest& from);

  inline SignInChannelRequest& operator=(const SignInChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignInChannelRequest& default_instance();

  void Swap(SignInChannelRequest* other);

  // implements Message ----------------------------------------------

  SignInChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignInChannelRequest& from);
  void MergeFrom(const SignInChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline ::google::protobuf::int64 account_id() const;
  inline void set_account_id(::google::protobuf::int64 value);

  // required string session_token = 2;
  inline bool has_session_token() const;
  inline void clear_session_token();
  static const int kSessionTokenFieldNumber = 2;
  inline const ::std::string& session_token() const;
  inline void set_session_token(const ::std::string& value);
  inline void set_session_token(const char* value);
  inline void set_session_token(const char* value, size_t size);
  inline ::std::string* mutable_session_token();
  inline ::std::string* release_session_token();
  inline void set_allocated_session_token(::std::string* session_token);

  // optional string client_cl = 10;
  inline bool has_client_cl() const;
  inline void clear_client_cl();
  static const int kClientClFieldNumber = 10;
  inline const ::std::string& client_cl() const;
  inline void set_client_cl(const ::std::string& value);
  inline void set_client_cl(const char* value);
  inline void set_client_cl(const char* value, size_t size);
  inline ::std::string* mutable_client_cl();
  inline ::std::string* release_client_cl();
  inline void set_allocated_client_cl(::std::string* client_cl);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.SignInChannelRequest)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_session_token();
  inline void clear_has_session_token();
  inline void set_has_client_cl();
  inline void clear_has_client_cl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 account_id_;
  ::std::string* session_token_;
  ::std::string* client_cl_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static SignInChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class SignInChannelResponse : public ::google::protobuf::Message {
 public:
  SignInChannelResponse();
  virtual ~SignInChannelResponse();

  SignInChannelResponse(const SignInChannelResponse& from);

  inline SignInChannelResponse& operator=(const SignInChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignInChannelResponse& default_instance();

  void Swap(SignInChannelResponse* other);

  // implements Message ----------------------------------------------

  SignInChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignInChannelResponse& from);
  void MergeFrom(const SignInChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.SignInChannelResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static SignInChannelResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomParticipant : public ::google::protobuf::Message {
 public:
  RoomParticipant();
  virtual ~RoomParticipant();

  RoomParticipant(const RoomParticipant& from);

  inline RoomParticipant& operator=(const RoomParticipant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomParticipant& default_instance();

  void Swap(RoomParticipant* other);

  // implements Message ----------------------------------------------

  RoomParticipant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomParticipant& from);
  void MergeFrom(const RoomParticipant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 account_id = 2;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 2;
  inline ::google::protobuf::int64 account_id() const;
  inline void set_account_id(::google::protobuf::int64 value);

  // optional .b2.protocol.commondata.AccountInfo account_info = 3;
  inline bool has_account_info() const;
  inline void clear_account_info();
  static const int kAccountInfoFieldNumber = 3;
  inline const ::b2::protocol::commondata::AccountInfo& account_info() const;
  inline ::b2::protocol::commondata::AccountInfo* mutable_account_info();
  inline ::b2::protocol::commondata::AccountInfo* release_account_info();
  inline void set_allocated_account_info(::b2::protocol::commondata::AccountInfo* account_info);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomParticipant)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_account_id();
  inline void clear_has_account_id();
  inline void set_has_account_info();
  inline void clear_has_account_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 account_id_;
  ::b2::protocol::commondata::AccountInfo* account_info_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomParticipant* default_instance_;
};
// -------------------------------------------------------------------

class RoomProperty : public ::google::protobuf::Message {
 public:
  RoomProperty();
  virtual ~RoomProperty();

  RoomProperty(const RoomProperty& from);

  inline RoomProperty& operator=(const RoomProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomProperty& default_instance();

  void Swap(RoomProperty* other);

  // implements Message ----------------------------------------------

  RoomProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomProperty& from);
  void MergeFrom(const RoomProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomProperty)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomProperty* default_instance_;
};
// -------------------------------------------------------------------

class RoomJoinRequest : public ::google::protobuf::Message {
 public:
  RoomJoinRequest();
  virtual ~RoomJoinRequest();

  RoomJoinRequest(const RoomJoinRequest& from);

  inline RoomJoinRequest& operator=(const RoomJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomJoinRequest& default_instance();

  void Swap(RoomJoinRequest* other);

  // implements Message ----------------------------------------------

  RoomJoinRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomJoinRequest& from);
  void MergeFrom(const RoomJoinRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // optional .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // optional .b2.protocol.commondata.Room.ACCESS room_access = 3;
  inline bool has_room_access() const;
  inline void clear_room_access();
  static const int kRoomAccessFieldNumber = 3;
  inline ::b2::protocol::commondata::Room_ACCESS room_access() const;
  inline void set_room_access(::b2::protocol::commondata::Room_ACCESS value);

  // repeated .b2.protocol.channel.RoomProperty properties = 4;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 4;
  inline const ::b2::protocol::channel::RoomProperty& properties(int index) const;
  inline ::b2::protocol::channel::RoomProperty* mutable_properties(int index);
  inline ::b2::protocol::channel::RoomProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
      mutable_properties();

  // repeated .b2.protocol.commondata.RoomCharacter room_characters = 5;
  inline int room_characters_size() const;
  inline void clear_room_characters();
  static const int kRoomCharactersFieldNumber = 5;
  inline const ::b2::protocol::commondata::RoomCharacter& room_characters(int index) const;
  inline ::b2::protocol::commondata::RoomCharacter* mutable_room_characters(int index);
  inline ::b2::protocol::commondata::RoomCharacter* add_room_characters();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::RoomCharacter >&
      room_characters() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::RoomCharacter >*
      mutable_room_characters();

  // repeated .b2.protocol.commondata.PresetNum character_presets = 6;
  inline int character_presets_size() const;
  inline void clear_character_presets();
  static const int kCharacterPresetsFieldNumber = 6;
  inline const ::b2::protocol::commondata::PresetNum& character_presets(int index) const;
  inline ::b2::protocol::commondata::PresetNum* mutable_character_presets(int index);
  inline ::b2::protocol::commondata::PresetNum* add_character_presets();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::PresetNum >&
      character_presets() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::PresetNum >*
      mutable_character_presets();

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomJoinRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_room_access();
  inline void clear_has_room_access();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  int room_type_;
  int room_access_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty > properties_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::RoomCharacter > room_characters_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::PresetNum > character_presets_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomJoinRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomJoinResponse : public ::google::protobuf::Message {
 public:
  RoomJoinResponse();
  virtual ~RoomJoinResponse();

  RoomJoinResponse(const RoomJoinResponse& from);

  inline RoomJoinResponse& operator=(const RoomJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomJoinResponse& default_instance();

  void Swap(RoomJoinResponse* other);

  // implements Message ----------------------------------------------

  RoomJoinResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomJoinResponse& from);
  void MergeFrom(const RoomJoinResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string room_id = 10;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 10;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // optional .b2.protocol.channel.RoomType room_type = 11;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 11;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // optional .b2.protocol.channel.RoomParticipant host = 12;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 12;
  inline const ::b2::protocol::channel::RoomParticipant& host() const;
  inline ::b2::protocol::channel::RoomParticipant* mutable_host();
  inline ::b2::protocol::channel::RoomParticipant* release_host();
  inline void set_allocated_host(::b2::protocol::channel::RoomParticipant* host);

  // repeated .b2.protocol.channel.RoomParticipant participants = 13;
  inline int participants_size() const;
  inline void clear_participants();
  static const int kParticipantsFieldNumber = 13;
  inline const ::b2::protocol::channel::RoomParticipant& participants(int index) const;
  inline ::b2::protocol::channel::RoomParticipant* mutable_participants(int index);
  inline ::b2::protocol::channel::RoomParticipant* add_participants();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomParticipant >&
      participants() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomParticipant >*
      mutable_participants();

  // repeated .b2.protocol.channel.RoomProperty properties = 14;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 14;
  inline const ::b2::protocol::channel::RoomProperty& properties(int index) const;
  inline ::b2::protocol::channel::RoomProperty* mutable_properties(int index);
  inline ::b2::protocol::channel::RoomProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomJoinResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_host();
  inline void clear_has_host();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* room_id_;
  ::b2::protocol::channel::RoomParticipant* host_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomParticipant > participants_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty > properties_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomJoinResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomLeaveRequest : public ::google::protobuf::Message {
 public:
  RoomLeaveRequest();
  virtual ~RoomLeaveRequest();

  RoomLeaveRequest(const RoomLeaveRequest& from);

  inline RoomLeaveRequest& operator=(const RoomLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomLeaveRequest& default_instance();

  void Swap(RoomLeaveRequest* other);

  // implements Message ----------------------------------------------

  RoomLeaveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomLeaveRequest& from);
  void MergeFrom(const RoomLeaveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomLeaveRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomLeaveRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomLeaveResponse : public ::google::protobuf::Message {
 public:
  RoomLeaveResponse();
  virtual ~RoomLeaveResponse();

  RoomLeaveResponse(const RoomLeaveResponse& from);

  inline RoomLeaveResponse& operator=(const RoomLeaveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomLeaveResponse& default_instance();

  void Swap(RoomLeaveResponse* other);

  // implements Message ----------------------------------------------

  RoomLeaveResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomLeaveResponse& from);
  void MergeFrom(const RoomLeaveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // repeated string room_id_list = 2;
  inline int room_id_list_size() const;
  inline void clear_room_id_list();
  static const int kRoomIdListFieldNumber = 2;
  inline const ::std::string& room_id_list(int index) const;
  inline ::std::string* mutable_room_id_list(int index);
  inline void set_room_id_list(int index, const ::std::string& value);
  inline void set_room_id_list(int index, const char* value);
  inline void set_room_id_list(int index, const char* value, size_t size);
  inline ::std::string* add_room_id_list();
  inline void add_room_id_list(const ::std::string& value);
  inline void add_room_id_list(const char* value);
  inline void add_room_id_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& room_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_room_id_list();

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomLeaveResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> room_id_list_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomLeaveResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomCloseRequest : public ::google::protobuf::Message {
 public:
  RoomCloseRequest();
  virtual ~RoomCloseRequest();

  RoomCloseRequest(const RoomCloseRequest& from);

  inline RoomCloseRequest& operator=(const RoomCloseRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomCloseRequest& default_instance();

  void Swap(RoomCloseRequest* other);

  // implements Message ----------------------------------------------

  RoomCloseRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomCloseRequest& from);
  void MergeFrom(const RoomCloseRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // optional int32 map_id = 2;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 2;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // required .b2.protocol.channel.RoomCloseReason reason = 4;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 4;
  inline ::b2::protocol::channel::RoomCloseReason reason() const;
  inline void set_reason(::b2::protocol::channel::RoomCloseReason value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomCloseRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::google::protobuf::int32 map_id_;
  int reason_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomCloseRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomCloseResponse : public ::google::protobuf::Message {
 public:
  RoomCloseResponse();
  virtual ~RoomCloseResponse();

  RoomCloseResponse(const RoomCloseResponse& from);

  inline RoomCloseResponse& operator=(const RoomCloseResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomCloseResponse& default_instance();

  void Swap(RoomCloseResponse* other);

  // implements Message ----------------------------------------------

  RoomCloseResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomCloseResponse& from);
  void MergeFrom(const RoomCloseResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string room_id = 10;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 10;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // optional .b2.protocol.channel.RoomType room_type = 11;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 11;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // optional string token = 12;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 12;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomCloseResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* room_id_;
  ::std::string* token_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomCloseResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomAccessControlRequest : public ::google::protobuf::Message {
 public:
  RoomAccessControlRequest();
  virtual ~RoomAccessControlRequest();

  RoomAccessControlRequest(const RoomAccessControlRequest& from);

  inline RoomAccessControlRequest& operator=(const RoomAccessControlRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomAccessControlRequest& default_instance();

  void Swap(RoomAccessControlRequest* other);

  // implements Message ----------------------------------------------

  RoomAccessControlRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomAccessControlRequest& from);
  void MergeFrom(const RoomAccessControlRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.commondata.Room.ACCESS access = 2;
  inline bool has_access() const;
  inline void clear_access();
  static const int kAccessFieldNumber = 2;
  inline ::b2::protocol::commondata::Room_ACCESS access() const;
  inline void set_access(::b2::protocol::commondata::Room_ACCESS value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomAccessControlRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_access();
  inline void clear_has_access();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  int access_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomAccessControlRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomAccessControlResponse : public ::google::protobuf::Message {
 public:
  RoomAccessControlResponse();
  virtual ~RoomAccessControlResponse();

  RoomAccessControlResponse(const RoomAccessControlResponse& from);

  inline RoomAccessControlResponse& operator=(const RoomAccessControlResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomAccessControlResponse& default_instance();

  void Swap(RoomAccessControlResponse* other);

  // implements Message ----------------------------------------------

  RoomAccessControlResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomAccessControlResponse& from);
  void MergeFrom(const RoomAccessControlResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomAccessControlResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomAccessControlResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomMessageCommand : public ::google::protobuf::Message {
 public:
  RoomMessageCommand();
  virtual ~RoomMessageCommand();

  RoomMessageCommand(const RoomMessageCommand& from);

  inline RoomMessageCommand& operator=(const RoomMessageCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomMessageCommand& default_instance();

  void Swap(RoomMessageCommand* other);

  // implements Message ----------------------------------------------

  RoomMessageCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomMessageCommand& from);
  void MergeFrom(const RoomMessageCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // optional int32 receiver_id = 2;
  inline bool has_receiver_id() const;
  inline void clear_receiver_id();
  static const int kReceiverIdFieldNumber = 2;
  inline ::google::protobuf::int32 receiver_id() const;
  inline void set_receiver_id(::google::protobuf::int32 value);

  // required bytes message = 3;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 3;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomMessageCommand)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_receiver_id();
  inline void clear_has_receiver_id();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::std::string* message_;
  ::google::protobuf::int32 receiver_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomMessageCommand* default_instance_;
};
// -------------------------------------------------------------------

class RoomCreateNotify : public ::google::protobuf::Message {
 public:
  RoomCreateNotify();
  virtual ~RoomCreateNotify();

  RoomCreateNotify(const RoomCreateNotify& from);

  inline RoomCreateNotify& operator=(const RoomCreateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomCreateNotify& default_instance();

  void Swap(RoomCreateNotify* other);

  // implements Message ----------------------------------------------

  RoomCreateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomCreateNotify& from);
  void MergeFrom(const RoomCreateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomCreateNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomCreateNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomDeleteNotify : public ::google::protobuf::Message {
 public:
  RoomDeleteNotify();
  virtual ~RoomDeleteNotify();

  RoomDeleteNotify(const RoomDeleteNotify& from);

  inline RoomDeleteNotify& operator=(const RoomDeleteNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomDeleteNotify& default_instance();

  void Swap(RoomDeleteNotify* other);

  // implements Message ----------------------------------------------

  RoomDeleteNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomDeleteNotify& from);
  void MergeFrom(const RoomDeleteNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomDeleteNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomDeleteNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomParticipantJoinNotify : public ::google::protobuf::Message {
 public:
  RoomParticipantJoinNotify();
  virtual ~RoomParticipantJoinNotify();

  RoomParticipantJoinNotify(const RoomParticipantJoinNotify& from);

  inline RoomParticipantJoinNotify& operator=(const RoomParticipantJoinNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomParticipantJoinNotify& default_instance();

  void Swap(RoomParticipantJoinNotify* other);

  // implements Message ----------------------------------------------

  RoomParticipantJoinNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomParticipantJoinNotify& from);
  void MergeFrom(const RoomParticipantJoinNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // required .b2.protocol.channel.RoomParticipant joiner = 3;
  inline bool has_joiner() const;
  inline void clear_joiner();
  static const int kJoinerFieldNumber = 3;
  inline const ::b2::protocol::channel::RoomParticipant& joiner() const;
  inline ::b2::protocol::channel::RoomParticipant* mutable_joiner();
  inline ::b2::protocol::channel::RoomParticipant* release_joiner();
  inline void set_allocated_joiner(::b2::protocol::channel::RoomParticipant* joiner);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomParticipantJoinNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_joiner();
  inline void clear_has_joiner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::b2::protocol::channel::RoomParticipant* joiner_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomParticipantJoinNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomParticipantLeaveNotify : public ::google::protobuf::Message {
 public:
  RoomParticipantLeaveNotify();
  virtual ~RoomParticipantLeaveNotify();

  RoomParticipantLeaveNotify(const RoomParticipantLeaveNotify& from);

  inline RoomParticipantLeaveNotify& operator=(const RoomParticipantLeaveNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomParticipantLeaveNotify& default_instance();

  void Swap(RoomParticipantLeaveNotify* other);

  // implements Message ----------------------------------------------

  RoomParticipantLeaveNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomParticipantLeaveNotify& from);
  void MergeFrom(const RoomParticipantLeaveNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // required .b2.protocol.channel.RoomParticipant leaver = 3;
  inline bool has_leaver() const;
  inline void clear_leaver();
  static const int kLeaverFieldNumber = 3;
  inline const ::b2::protocol::channel::RoomParticipant& leaver() const;
  inline ::b2::protocol::channel::RoomParticipant* mutable_leaver();
  inline ::b2::protocol::channel::RoomParticipant* release_leaver();
  inline void set_allocated_leaver(::b2::protocol::channel::RoomParticipant* leaver);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomParticipantLeaveNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_leaver();
  inline void clear_has_leaver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::b2::protocol::channel::RoomParticipant* leaver_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomParticipantLeaveNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomHostChangedNotify : public ::google::protobuf::Message {
 public:
  RoomHostChangedNotify();
  virtual ~RoomHostChangedNotify();

  RoomHostChangedNotify(const RoomHostChangedNotify& from);

  inline RoomHostChangedNotify& operator=(const RoomHostChangedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomHostChangedNotify& default_instance();

  void Swap(RoomHostChangedNotify* other);

  // implements Message ----------------------------------------------

  RoomHostChangedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomHostChangedNotify& from);
  void MergeFrom(const RoomHostChangedNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // required int32 host_id = 3;
  inline bool has_host_id() const;
  inline void clear_host_id();
  static const int kHostIdFieldNumber = 3;
  inline ::google::protobuf::int32 host_id() const;
  inline void set_host_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomHostChangedNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_host_id();
  inline void clear_has_host_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  int room_type_;
  ::google::protobuf::int32 host_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomHostChangedNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomMessageNotify : public ::google::protobuf::Message {
 public:
  RoomMessageNotify();
  virtual ~RoomMessageNotify();

  RoomMessageNotify(const RoomMessageNotify& from);

  inline RoomMessageNotify& operator=(const RoomMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomMessageNotify& default_instance();

  void Swap(RoomMessageNotify* other);

  // implements Message ----------------------------------------------

  RoomMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomMessageNotify& from);
  void MergeFrom(const RoomMessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required .b2.protocol.channel.RoomType room_type = 2;
  inline bool has_room_type() const;
  inline void clear_room_type();
  static const int kRoomTypeFieldNumber = 2;
  inline ::b2::protocol::channel::RoomType room_type() const;
  inline void set_room_type(::b2::protocol::channel::RoomType value);

  // required .b2.protocol.channel.RoomParticipant sender = 3;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 3;
  inline const ::b2::protocol::channel::RoomParticipant& sender() const;
  inline ::b2::protocol::channel::RoomParticipant* mutable_sender();
  inline ::b2::protocol::channel::RoomParticipant* release_sender();
  inline void set_allocated_sender(::b2::protocol::channel::RoomParticipant* sender);

  // required bytes message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const void* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomMessageNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_room_type();
  inline void clear_has_room_type();
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::b2::protocol::channel::RoomParticipant* sender_;
  ::std::string* message_;
  int room_type_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomSetPropertyRequest : public ::google::protobuf::Message {
 public:
  RoomSetPropertyRequest();
  virtual ~RoomSetPropertyRequest();

  RoomSetPropertyRequest(const RoomSetPropertyRequest& from);

  inline RoomSetPropertyRequest& operator=(const RoomSetPropertyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomSetPropertyRequest& default_instance();

  void Swap(RoomSetPropertyRequest* other);

  // implements Message ----------------------------------------------

  RoomSetPropertyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomSetPropertyRequest& from);
  void MergeFrom(const RoomSetPropertyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  inline const ::b2::protocol::channel::RoomProperty& properties(int index) const;
  inline ::b2::protocol::channel::RoomProperty* mutable_properties(int index);
  inline ::b2::protocol::channel::RoomProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomSetPropertyRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty > properties_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomSetPropertyRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomSetPropertyResponse : public ::google::protobuf::Message {
 public:
  RoomSetPropertyResponse();
  virtual ~RoomSetPropertyResponse();

  RoomSetPropertyResponse(const RoomSetPropertyResponse& from);

  inline RoomSetPropertyResponse& operator=(const RoomSetPropertyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomSetPropertyResponse& default_instance();

  void Swap(RoomSetPropertyResponse* other);

  // implements Message ----------------------------------------------

  RoomSetPropertyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomSetPropertyResponse& from);
  void MergeFrom(const RoomSetPropertyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomSetPropertyResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomSetPropertyResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomPropertyUpdatedNotify : public ::google::protobuf::Message {
 public:
  RoomPropertyUpdatedNotify();
  virtual ~RoomPropertyUpdatedNotify();

  RoomPropertyUpdatedNotify(const RoomPropertyUpdatedNotify& from);

  inline RoomPropertyUpdatedNotify& operator=(const RoomPropertyUpdatedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomPropertyUpdatedNotify& default_instance();

  void Swap(RoomPropertyUpdatedNotify* other);

  // implements Message ----------------------------------------------

  RoomPropertyUpdatedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomPropertyUpdatedNotify& from);
  void MergeFrom(const RoomPropertyUpdatedNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 2;
  inline const ::b2::protocol::channel::RoomProperty& properties(int index) const;
  inline ::b2::protocol::channel::RoomProperty* mutable_properties(int index);
  inline ::b2::protocol::channel::RoomProperty* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomPropertyUpdatedNotify)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty > properties_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomPropertyUpdatedNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomInviteRequest : public ::google::protobuf::Message {
 public:
  RoomInviteRequest();
  virtual ~RoomInviteRequest();

  RoomInviteRequest(const RoomInviteRequest& from);

  inline RoomInviteRequest& operator=(const RoomInviteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInviteRequest& default_instance();

  void Swap(RoomInviteRequest* other);

  // implements Message ----------------------------------------------

  RoomInviteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInviteRequest& from);
  void MergeFrom(const RoomInviteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required string invitee = 2;
  inline bool has_invitee() const;
  inline void clear_invitee();
  static const int kInviteeFieldNumber = 2;
  inline const ::std::string& invitee() const;
  inline void set_invitee(const ::std::string& value);
  inline void set_invitee(const char* value);
  inline void set_invitee(const char* value, size_t size);
  inline ::std::string* mutable_invitee();
  inline ::std::string* release_invitee();
  inline void set_allocated_invitee(::std::string* invitee);

  // required int32 invitation_number = 3;
  inline bool has_invitation_number() const;
  inline void clear_invitation_number();
  static const int kInvitationNumberFieldNumber = 3;
  inline ::google::protobuf::int32 invitation_number() const;
  inline void set_invitation_number(::google::protobuf::int32 value);

  // optional int32 map_id = 4;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 4;
  inline ::google::protobuf::int32 map_id() const;
  inline void set_map_id(::google::protobuf::int32 value);

  // optional int32 difficulty = 5;
  inline bool has_difficulty() const;
  inline void clear_difficulty();
  static const int kDifficultyFieldNumber = 5;
  inline ::google::protobuf::int32 difficulty() const;
  inline void set_difficulty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomInviteRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_invitee();
  inline void clear_has_invitee();
  inline void set_has_invitation_number();
  inline void clear_has_invitation_number();
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_difficulty();
  inline void clear_has_difficulty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::std::string* invitee_;
  ::google::protobuf::int32 invitation_number_;
  ::google::protobuf::int32 map_id_;
  ::google::protobuf::int32 difficulty_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomInviteRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomInviteResponse : public ::google::protobuf::Message {
 public:
  RoomInviteResponse();
  virtual ~RoomInviteResponse();

  RoomInviteResponse(const RoomInviteResponse& from);

  inline RoomInviteResponse& operator=(const RoomInviteResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInviteResponse& default_instance();

  void Swap(RoomInviteResponse* other);

  // implements Message ----------------------------------------------

  RoomInviteResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInviteResponse& from);
  void MergeFrom(const RoomInviteResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomInviteResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomInviteResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomKickRequest : public ::google::protobuf::Message {
 public:
  RoomKickRequest();
  virtual ~RoomKickRequest();

  RoomKickRequest(const RoomKickRequest& from);

  inline RoomKickRequest& operator=(const RoomKickRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomKickRequest& default_instance();

  void Swap(RoomKickRequest* other);

  // implements Message ----------------------------------------------

  RoomKickRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomKickRequest& from);
  void MergeFrom(const RoomKickRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required int64 kick_account_id = 2;
  inline bool has_kick_account_id() const;
  inline void clear_kick_account_id();
  static const int kKickAccountIdFieldNumber = 2;
  inline ::google::protobuf::int64 kick_account_id() const;
  inline void set_kick_account_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomKickRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_kick_account_id();
  inline void clear_has_kick_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::google::protobuf::int64 kick_account_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomKickRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomKickResponse : public ::google::protobuf::Message {
 public:
  RoomKickResponse();
  virtual ~RoomKickResponse();

  RoomKickResponse(const RoomKickResponse& from);

  inline RoomKickResponse& operator=(const RoomKickResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomKickResponse& default_instance();

  void Swap(RoomKickResponse* other);

  // implements Message ----------------------------------------------

  RoomKickResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomKickResponse& from);
  void MergeFrom(const RoomKickResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional int64 kicked_account_id = 2;
  inline bool has_kicked_account_id() const;
  inline void clear_kicked_account_id();
  static const int kKickedAccountIdFieldNumber = 2;
  inline ::google::protobuf::int64 kicked_account_id() const;
  inline void set_kicked_account_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomKickResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_kicked_account_id();
  inline void clear_has_kicked_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::google::protobuf::int64 kicked_account_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomKickResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomLeaveResultRequest : public ::google::protobuf::Message {
 public:
  RoomLeaveResultRequest();
  virtual ~RoomLeaveResultRequest();

  RoomLeaveResultRequest(const RoomLeaveResultRequest& from);

  inline RoomLeaveResultRequest& operator=(const RoomLeaveResultRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomLeaveResultRequest& default_instance();

  void Swap(RoomLeaveResultRequest* other);

  // implements Message ----------------------------------------------

  RoomLeaveResultRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomLeaveResultRequest& from);
  void MergeFrom(const RoomLeaveResultRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required int64 leaved_account_id = 2;
  inline bool has_leaved_account_id() const;
  inline void clear_leaved_account_id();
  static const int kLeavedAccountIdFieldNumber = 2;
  inline ::google::protobuf::int64 leaved_account_id() const;
  inline void set_leaved_account_id(::google::protobuf::int64 value);

  // required string match_token = 3;
  inline bool has_match_token() const;
  inline void clear_match_token();
  static const int kMatchTokenFieldNumber = 3;
  inline const ::std::string& match_token() const;
  inline void set_match_token(const ::std::string& value);
  inline void set_match_token(const char* value);
  inline void set_match_token(const char* value, size_t size);
  inline ::std::string* mutable_match_token();
  inline ::std::string* release_match_token();
  inline void set_allocated_match_token(::std::string* match_token);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomLeaveResultRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_leaved_account_id();
  inline void clear_has_leaved_account_id();
  inline void set_has_match_token();
  inline void clear_has_match_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::google::protobuf::int64 leaved_account_id_;
  ::std::string* match_token_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomLeaveResultRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomLeaveResultResponse : public ::google::protobuf::Message {
 public:
  RoomLeaveResultResponse();
  virtual ~RoomLeaveResultResponse();

  RoomLeaveResultResponse(const RoomLeaveResultResponse& from);

  inline RoomLeaveResultResponse& operator=(const RoomLeaveResultResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomLeaveResultResponse& default_instance();

  void Swap(RoomLeaveResultResponse* other);

  // implements Message ----------------------------------------------

  RoomLeaveResultResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomLeaveResultResponse& from);
  void MergeFrom(const RoomLeaveResultResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomLeaveResultResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomLeaveResultResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoomHeartbeatCommand : public ::google::protobuf::Message {
 public:
  RoomHeartbeatCommand();
  virtual ~RoomHeartbeatCommand();

  RoomHeartbeatCommand(const RoomHeartbeatCommand& from);

  inline RoomHeartbeatCommand& operator=(const RoomHeartbeatCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomHeartbeatCommand& default_instance();

  void Swap(RoomHeartbeatCommand* other);

  // implements Message ----------------------------------------------

  RoomHeartbeatCommand* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomHeartbeatCommand& from);
  void MergeFrom(const RoomHeartbeatCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomHeartbeatCommand)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomHeartbeatCommand* default_instance_;
};
// -------------------------------------------------------------------

class RoomHeartbeatNotify : public ::google::protobuf::Message {
 public:
  RoomHeartbeatNotify();
  virtual ~RoomHeartbeatNotify();

  RoomHeartbeatNotify(const RoomHeartbeatNotify& from);

  inline RoomHeartbeatNotify& operator=(const RoomHeartbeatNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomHeartbeatNotify& default_instance();

  void Swap(RoomHeartbeatNotify* other);

  // implements Message ----------------------------------------------

  RoomHeartbeatNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomHeartbeatNotify& from);
  void MergeFrom(const RoomHeartbeatNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomHeartbeatNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomHeartbeatNotify* default_instance_;
};
// -------------------------------------------------------------------

class RoomHeartbeatRequest : public ::google::protobuf::Message {
 public:
  RoomHeartbeatRequest();
  virtual ~RoomHeartbeatRequest();

  RoomHeartbeatRequest(const RoomHeartbeatRequest& from);

  inline RoomHeartbeatRequest& operator=(const RoomHeartbeatRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomHeartbeatRequest& default_instance();

  void Swap(RoomHeartbeatRequest* other);

  // implements Message ----------------------------------------------

  RoomHeartbeatRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomHeartbeatRequest& from);
  void MergeFrom(const RoomHeartbeatRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string room_id = 1;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 1;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // required int32 seq = 2;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 2;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomHeartbeatRequest)
 private:
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_seq();
  inline void clear_has_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* room_id_;
  ::google::protobuf::int32 seq_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomHeartbeatRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoomHeartbeatResponse : public ::google::protobuf::Message {
 public:
  RoomHeartbeatResponse();
  virtual ~RoomHeartbeatResponse();

  RoomHeartbeatResponse(const RoomHeartbeatResponse& from);

  inline RoomHeartbeatResponse& operator=(const RoomHeartbeatResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomHeartbeatResponse& default_instance();

  void Swap(RoomHeartbeatResponse* other);

  // implements Message ----------------------------------------------

  RoomHeartbeatResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomHeartbeatResponse& from);
  void MergeFrom(const RoomHeartbeatResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string room_id = 10;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 10;
  inline const ::std::string& room_id() const;
  inline void set_room_id(const ::std::string& value);
  inline void set_room_id(const char* value);
  inline void set_room_id(const char* value, size_t size);
  inline ::std::string* mutable_room_id();
  inline ::std::string* release_room_id();
  inline void set_allocated_room_id(::std::string* room_id);

  // optional int32 seq = 11;
  inline bool has_seq() const;
  inline void clear_seq();
  static const int kSeqFieldNumber = 11;
  inline ::google::protobuf::int32 seq() const;
  inline void set_seq(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.RoomHeartbeatResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_seq();
  inline void clear_has_seq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* room_id_;
  ::google::protobuf::int32 seq_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static RoomHeartbeatResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetRoomDebugModeRequest : public ::google::protobuf::Message {
 public:
  SetRoomDebugModeRequest();
  virtual ~SetRoomDebugModeRequest();

  SetRoomDebugModeRequest(const SetRoomDebugModeRequest& from);

  inline SetRoomDebugModeRequest& operator=(const SetRoomDebugModeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRoomDebugModeRequest& default_instance();

  void Swap(SetRoomDebugModeRequest* other);

  // implements Message ----------------------------------------------

  SetRoomDebugModeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetRoomDebugModeRequest& from);
  void MergeFrom(const SetRoomDebugModeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool skip_room_heart_beat_check = 1;
  inline bool has_skip_room_heart_beat_check() const;
  inline void clear_skip_room_heart_beat_check();
  static const int kSkipRoomHeartBeatCheckFieldNumber = 1;
  inline bool skip_room_heart_beat_check() const;
  inline void set_skip_room_heart_beat_check(bool value);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.SetRoomDebugModeRequest)
 private:
  inline void set_has_skip_room_heart_beat_check();
  inline void clear_has_skip_room_heart_beat_check();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool skip_room_heart_beat_check_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetRoomDebugModeRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetRoomDebugModeResponse : public ::google::protobuf::Message {
 public:
  SetRoomDebugModeResponse();
  virtual ~SetRoomDebugModeResponse();

  SetRoomDebugModeResponse(const SetRoomDebugModeResponse& from);

  inline SetRoomDebugModeResponse& operator=(const SetRoomDebugModeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRoomDebugModeResponse& default_instance();

  void Swap(SetRoomDebugModeResponse* other);

  // implements Message ----------------------------------------------

  SetRoomDebugModeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetRoomDebugModeResponse& from);
  void MergeFrom(const SetRoomDebugModeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.SetRoomDebugModeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static SetRoomDebugModeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChannelPublishRequest : public ::google::protobuf::Message {
 public:
  ChannelPublishRequest();
  virtual ~ChannelPublishRequest();

  ChannelPublishRequest(const ChannelPublishRequest& from);

  inline ChannelPublishRequest& operator=(const ChannelPublishRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelPublishRequest& default_instance();

  void Swap(ChannelPublishRequest* other);

  // implements Message ----------------------------------------------

  ChannelPublishRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelPublishRequest& from);
  void MergeFrom(const ChannelPublishRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ChannelPublishRequest)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ChannelPublishRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChannelPublishResponse : public ::google::protobuf::Message {
 public:
  ChannelPublishResponse();
  virtual ~ChannelPublishResponse();

  ChannelPublishResponse(const ChannelPublishResponse& from);

  inline ChannelPublishResponse& operator=(const ChannelPublishResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelPublishResponse& default_instance();

  void Swap(ChannelPublishResponse* other);

  // implements Message ----------------------------------------------

  ChannelPublishResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelPublishResponse& from);
  void MergeFrom(const ChannelPublishResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ChannelPublishResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* channel_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ChannelPublishResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChannelSubscribeRequest : public ::google::protobuf::Message {
 public:
  ChannelSubscribeRequest();
  virtual ~ChannelSubscribeRequest();

  ChannelSubscribeRequest(const ChannelSubscribeRequest& from);

  inline ChannelSubscribeRequest& operator=(const ChannelSubscribeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelSubscribeRequest& default_instance();

  void Swap(ChannelSubscribeRequest* other);

  // implements Message ----------------------------------------------

  ChannelSubscribeRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelSubscribeRequest& from);
  void MergeFrom(const ChannelSubscribeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ChannelSubscribeRequest)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ChannelSubscribeRequest* default_instance_;
};
// -------------------------------------------------------------------

class ChannelSubscribeResponse : public ::google::protobuf::Message {
 public:
  ChannelSubscribeResponse();
  virtual ~ChannelSubscribeResponse();

  ChannelSubscribeResponse(const ChannelSubscribeResponse& from);

  inline ChannelSubscribeResponse& operator=(const ChannelSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelSubscribeResponse& default_instance();

  void Swap(ChannelSubscribeResponse* other);

  // implements Message ----------------------------------------------

  ChannelSubscribeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelSubscribeResponse& from);
  void MergeFrom(const ChannelSubscribeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string channel_id = 2;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 2;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ChannelSubscribeResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_channel_id();
  inline void clear_has_channel_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* channel_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ChannelSubscribeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ChannelMessageNotify : public ::google::protobuf::Message {
 public:
  ChannelMessageNotify();
  virtual ~ChannelMessageNotify();

  ChannelMessageNotify(const ChannelMessageNotify& from);

  inline ChannelMessageNotify& operator=(const ChannelMessageNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelMessageNotify& default_instance();

  void Swap(ChannelMessageNotify* other);

  // implements Message ----------------------------------------------

  ChannelMessageNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChannelMessageNotify& from);
  void MergeFrom(const ChannelMessageNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string channel_id = 1;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  inline ::std::string* release_channel_id();
  inline void set_allocated_channel_id(::std::string* channel_id);

  // required string message = 2;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 2;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ChannelMessageNotify)
 private:
  inline void set_has_channel_id();
  inline void clear_has_channel_id();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* channel_id_;
  ::std::string* message_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ChannelMessageNotify* default_instance_;
};
// -------------------------------------------------------------------

class WorldJoinRequest : public ::google::protobuf::Message {
 public:
  WorldJoinRequest();
  virtual ~WorldJoinRequest();

  WorldJoinRequest(const WorldJoinRequest& from);

  inline WorldJoinRequest& operator=(const WorldJoinRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldJoinRequest& default_instance();

  void Swap(WorldJoinRequest* other);

  // implements Message ----------------------------------------------

  WorldJoinRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldJoinRequest& from);
  void MergeFrom(const WorldJoinRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string world_id = 1;
  inline bool has_world_id() const;
  inline void clear_world_id();
  static const int kWorldIdFieldNumber = 1;
  inline const ::std::string& world_id() const;
  inline void set_world_id(const ::std::string& value);
  inline void set_world_id(const char* value);
  inline void set_world_id(const char* value, size_t size);
  inline ::std::string* mutable_world_id();
  inline ::std::string* release_world_id();
  inline void set_allocated_world_id(::std::string* world_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.WorldJoinRequest)
 private:
  inline void set_has_world_id();
  inline void clear_has_world_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* world_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static WorldJoinRequest* default_instance_;
};
// -------------------------------------------------------------------

class WorldJoinResponse : public ::google::protobuf::Message {
 public:
  WorldJoinResponse();
  virtual ~WorldJoinResponse();

  WorldJoinResponse(const WorldJoinResponse& from);

  inline WorldJoinResponse& operator=(const WorldJoinResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldJoinResponse& default_instance();

  void Swap(WorldJoinResponse* other);

  // implements Message ----------------------------------------------

  WorldJoinResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldJoinResponse& from);
  void MergeFrom(const WorldJoinResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // optional string world_id = 10;
  inline bool has_world_id() const;
  inline void clear_world_id();
  static const int kWorldIdFieldNumber = 10;
  inline const ::std::string& world_id() const;
  inline void set_world_id(const ::std::string& value);
  inline void set_world_id(const char* value);
  inline void set_world_id(const char* value, size_t size);
  inline ::std::string* mutable_world_id();
  inline ::std::string* release_world_id();
  inline void set_allocated_world_id(::std::string* world_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.WorldJoinResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_world_id();
  inline void clear_has_world_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::std::string* world_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static WorldJoinResponse* default_instance_;
};
// -------------------------------------------------------------------

class WorldLeaveRequest : public ::google::protobuf::Message {
 public:
  WorldLeaveRequest();
  virtual ~WorldLeaveRequest();

  WorldLeaveRequest(const WorldLeaveRequest& from);

  inline WorldLeaveRequest& operator=(const WorldLeaveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldLeaveRequest& default_instance();

  void Swap(WorldLeaveRequest* other);

  // implements Message ----------------------------------------------

  WorldLeaveRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldLeaveRequest& from);
  void MergeFrom(const WorldLeaveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string world_id = 1;
  inline bool has_world_id() const;
  inline void clear_world_id();
  static const int kWorldIdFieldNumber = 1;
  inline const ::std::string& world_id() const;
  inline void set_world_id(const ::std::string& value);
  inline void set_world_id(const char* value);
  inline void set_world_id(const char* value, size_t size);
  inline ::std::string* mutable_world_id();
  inline ::std::string* release_world_id();
  inline void set_allocated_world_id(::std::string* world_id);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.WorldLeaveRequest)
 private:
  inline void set_has_world_id();
  inline void clear_has_world_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* world_id_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static WorldLeaveRequest* default_instance_;
};
// -------------------------------------------------------------------

class WorldLeaveResponse : public ::google::protobuf::Message {
 public:
  WorldLeaveResponse();
  virtual ~WorldLeaveResponse();

  WorldLeaveResponse(const WorldLeaveResponse& from);

  inline WorldLeaveResponse& operator=(const WorldLeaveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldLeaveResponse& default_instance();

  void Swap(WorldLeaveResponse* other);

  // implements Message ----------------------------------------------

  WorldLeaveResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldLeaveResponse& from);
  void MergeFrom(const WorldLeaveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // repeated string world_id_list = 2;
  inline int world_id_list_size() const;
  inline void clear_world_id_list();
  static const int kWorldIdListFieldNumber = 2;
  inline const ::std::string& world_id_list(int index) const;
  inline ::std::string* mutable_world_id_list(int index);
  inline void set_world_id_list(int index, const ::std::string& value);
  inline void set_world_id_list(int index, const char* value);
  inline void set_world_id_list(int index, const char* value, size_t size);
  inline ::std::string* add_world_id_list();
  inline void add_world_id_list(const ::std::string& value);
  inline void add_world_id_list(const char* value);
  inline void add_world_id_list(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& world_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_world_id_list();

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.WorldLeaveResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  ::google::protobuf::RepeatedPtrField< ::std::string> world_id_list_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static WorldLeaveResponse* default_instance_;
};
// -------------------------------------------------------------------

class ReportUserViaChannelRequest : public ::google::protobuf::Message {
 public:
  ReportUserViaChannelRequest();
  virtual ~ReportUserViaChannelRequest();

  ReportUserViaChannelRequest(const ReportUserViaChannelRequest& from);

  inline ReportUserViaChannelRequest& operator=(const ReportUserViaChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportUserViaChannelRequest& default_instance();

  void Swap(ReportUserViaChannelRequest* other);

  // implements Message ----------------------------------------------

  ReportUserViaChannelRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportUserViaChannelRequest& from);
  void MergeFrom(const ReportUserViaChannelRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 target_account_id = 1;
  inline bool has_target_account_id() const;
  inline void clear_target_account_id();
  static const int kTargetAccountIdFieldNumber = 1;
  inline ::google::protobuf::int64 target_account_id() const;
  inline void set_target_account_id(::google::protobuf::int64 value);

  // required .b2.protocol.commondata.ReportModeType mode_type = 2;
  inline bool has_mode_type() const;
  inline void clear_mode_type();
  static const int kModeTypeFieldNumber = 2;
  inline ::b2::protocol::commondata::ReportModeType mode_type() const;
  inline void set_mode_type(::b2::protocol::commondata::ReportModeType value);

  // required int32 reason_type = 3;
  inline bool has_reason_type() const;
  inline void clear_reason_type();
  static const int kReasonTypeFieldNumber = 3;
  inline ::google::protobuf::int32 reason_type() const;
  inline void set_reason_type(::google::protobuf::int32 value);

  // optional string explain = 4;
  inline bool has_explain() const;
  inline void clear_explain();
  static const int kExplainFieldNumber = 4;
  inline const ::std::string& explain() const;
  inline void set_explain(const ::std::string& value);
  inline void set_explain(const char* value);
  inline void set_explain(const char* value, size_t size);
  inline ::std::string* mutable_explain();
  inline ::std::string* release_explain();
  inline void set_allocated_explain(::std::string* explain);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ReportUserViaChannelRequest)
 private:
  inline void set_has_target_account_id();
  inline void clear_has_target_account_id();
  inline void set_has_mode_type();
  inline void clear_has_mode_type();
  inline void set_has_reason_type();
  inline void clear_has_reason_type();
  inline void set_has_explain();
  inline void clear_has_explain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 target_account_id_;
  int mode_type_;
  ::google::protobuf::int32 reason_type_;
  ::std::string* explain_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ReportUserViaChannelRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReportUserViaChannelResponse : public ::google::protobuf::Message {
 public:
  ReportUserViaChannelResponse();
  virtual ~ReportUserViaChannelResponse();

  ReportUserViaChannelResponse(const ReportUserViaChannelResponse& from);

  inline ReportUserViaChannelResponse& operator=(const ReportUserViaChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportUserViaChannelResponse& default_instance();

  void Swap(ReportUserViaChannelResponse* other);

  // implements Message ----------------------------------------------

  ReportUserViaChannelResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportUserViaChannelResponse& from);
  void MergeFrom(const ReportUserViaChannelResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .b2.protocol.commondata.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::b2::protocol::commondata::Result& result() const;
  inline ::b2::protocol::commondata::Result* mutable_result();
  inline ::b2::protocol::commondata::Result* release_result();
  inline void set_allocated_result(::b2::protocol::commondata::Result* result);

  // @@protoc_insertion_point(class_scope:b2.protocol.channel.ReportUserViaChannelResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::b2::protocol::commondata::Result* result_;
  friend void  protobuf_AddDesc_ChannelProtocol_2eproto();
  friend void protobuf_AssignDesc_ChannelProtocol_2eproto();
  friend void protobuf_ShutdownFile_ChannelProtocol_2eproto();

  void InitAsDefaultInstance();
  static ReportUserViaChannelResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// HelloChannelRequest

// required .b2.protocol.commondata.Protocol client_protocol = 10;
inline bool HelloChannelRequest::has_client_protocol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloChannelRequest::set_has_client_protocol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloChannelRequest::clear_has_client_protocol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloChannelRequest::clear_client_protocol() {
  if (client_protocol_ != NULL) client_protocol_->::b2::protocol::commondata::Protocol::Clear();
  clear_has_client_protocol();
}
inline const ::b2::protocol::commondata::Protocol& HelloChannelRequest::client_protocol() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.HelloChannelRequest.client_protocol)
  return client_protocol_ != NULL ? *client_protocol_ : *default_instance_->client_protocol_;
}
inline ::b2::protocol::commondata::Protocol* HelloChannelRequest::mutable_client_protocol() {
  set_has_client_protocol();
  if (client_protocol_ == NULL) client_protocol_ = new ::b2::protocol::commondata::Protocol;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.HelloChannelRequest.client_protocol)
  return client_protocol_;
}
inline ::b2::protocol::commondata::Protocol* HelloChannelRequest::release_client_protocol() {
  clear_has_client_protocol();
  ::b2::protocol::commondata::Protocol* temp = client_protocol_;
  client_protocol_ = NULL;
  return temp;
}
inline void HelloChannelRequest::set_allocated_client_protocol(::b2::protocol::commondata::Protocol* client_protocol) {
  delete client_protocol_;
  client_protocol_ = client_protocol;
  if (client_protocol) {
    set_has_client_protocol();
  } else {
    clear_has_client_protocol();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.HelloChannelRequest.client_protocol)
}

// required string client_public_key = 20;
inline bool HelloChannelRequest::has_client_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloChannelRequest::set_has_client_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloChannelRequest::clear_has_client_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloChannelRequest::clear_client_public_key() {
  if (client_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_public_key_->clear();
  }
  clear_has_client_public_key();
}
inline const ::std::string& HelloChannelRequest::client_public_key() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.HelloChannelRequest.client_public_key)
  return *client_public_key_;
}
inline void HelloChannelRequest::set_client_public_key(const ::std::string& value) {
  set_has_client_public_key();
  if (client_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_public_key_ = new ::std::string;
  }
  client_public_key_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.HelloChannelRequest.client_public_key)
}
inline void HelloChannelRequest::set_client_public_key(const char* value) {
  set_has_client_public_key();
  if (client_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_public_key_ = new ::std::string;
  }
  client_public_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.HelloChannelRequest.client_public_key)
}
inline void HelloChannelRequest::set_client_public_key(const char* value, size_t size) {
  set_has_client_public_key();
  if (client_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_public_key_ = new ::std::string;
  }
  client_public_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.HelloChannelRequest.client_public_key)
}
inline ::std::string* HelloChannelRequest::mutable_client_public_key() {
  set_has_client_public_key();
  if (client_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_public_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.HelloChannelRequest.client_public_key)
  return client_public_key_;
}
inline ::std::string* HelloChannelRequest::release_client_public_key() {
  clear_has_client_public_key();
  if (client_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_public_key_;
    client_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HelloChannelRequest::set_allocated_client_public_key(::std::string* client_public_key) {
  if (client_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_public_key_;
  }
  if (client_public_key) {
    set_has_client_public_key();
    client_public_key_ = client_public_key;
  } else {
    clear_has_client_public_key();
    client_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.HelloChannelRequest.client_public_key)
}

// -------------------------------------------------------------------

// HelloChannelResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool HelloChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelloChannelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelloChannelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelloChannelResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& HelloChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.HelloChannelResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* HelloChannelResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.HelloChannelResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* HelloChannelResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void HelloChannelResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.HelloChannelResponse.result)
}

// optional string server_public_key = 10;
inline bool HelloChannelResponse::has_server_public_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelloChannelResponse::set_has_server_public_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelloChannelResponse::clear_has_server_public_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelloChannelResponse::clear_server_public_key() {
  if (server_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_public_key_->clear();
  }
  clear_has_server_public_key();
}
inline const ::std::string& HelloChannelResponse::server_public_key() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.HelloChannelResponse.server_public_key)
  return *server_public_key_;
}
inline void HelloChannelResponse::set_server_public_key(const ::std::string& value) {
  set_has_server_public_key();
  if (server_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_public_key_ = new ::std::string;
  }
  server_public_key_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.HelloChannelResponse.server_public_key)
}
inline void HelloChannelResponse::set_server_public_key(const char* value) {
  set_has_server_public_key();
  if (server_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_public_key_ = new ::std::string;
  }
  server_public_key_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.HelloChannelResponse.server_public_key)
}
inline void HelloChannelResponse::set_server_public_key(const char* value, size_t size) {
  set_has_server_public_key();
  if (server_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_public_key_ = new ::std::string;
  }
  server_public_key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.HelloChannelResponse.server_public_key)
}
inline ::std::string* HelloChannelResponse::mutable_server_public_key() {
  set_has_server_public_key();
  if (server_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    server_public_key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.HelloChannelResponse.server_public_key)
  return server_public_key_;
}
inline ::std::string* HelloChannelResponse::release_server_public_key() {
  clear_has_server_public_key();
  if (server_public_key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = server_public_key_;
    server_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HelloChannelResponse::set_allocated_server_public_key(::std::string* server_public_key) {
  if (server_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_public_key_;
  }
  if (server_public_key) {
    set_has_server_public_key();
    server_public_key_ = server_public_key;
  } else {
    clear_has_server_public_key();
    server_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.HelloChannelResponse.server_public_key)
}

// -------------------------------------------------------------------

// SignInChannelRequest

// required int64 account_id = 1;
inline bool SignInChannelRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignInChannelRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignInChannelRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignInChannelRequest::clear_account_id() {
  account_id_ = GOOGLE_LONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::int64 SignInChannelRequest::account_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.SignInChannelRequest.account_id)
  return account_id_;
}
inline void SignInChannelRequest::set_account_id(::google::protobuf::int64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.SignInChannelRequest.account_id)
}

// required string session_token = 2;
inline bool SignInChannelRequest::has_session_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignInChannelRequest::set_has_session_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignInChannelRequest::clear_has_session_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignInChannelRequest::clear_session_token() {
  if (session_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_token_->clear();
  }
  clear_has_session_token();
}
inline const ::std::string& SignInChannelRequest::session_token() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.SignInChannelRequest.session_token)
  return *session_token_;
}
inline void SignInChannelRequest::set_session_token(const ::std::string& value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.SignInChannelRequest.session_token)
}
inline void SignInChannelRequest::set_session_token(const char* value) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.SignInChannelRequest.session_token)
}
inline void SignInChannelRequest::set_session_token(const char* value, size_t size) {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_token_ = new ::std::string;
  }
  session_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.SignInChannelRequest.session_token)
}
inline ::std::string* SignInChannelRequest::mutable_session_token() {
  set_has_session_token();
  if (session_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    session_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.SignInChannelRequest.session_token)
  return session_token_;
}
inline ::std::string* SignInChannelRequest::release_session_token() {
  clear_has_session_token();
  if (session_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = session_token_;
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignInChannelRequest::set_allocated_session_token(::std::string* session_token) {
  if (session_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_token_;
  }
  if (session_token) {
    set_has_session_token();
    session_token_ = session_token;
  } else {
    clear_has_session_token();
    session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.SignInChannelRequest.session_token)
}

// optional string client_cl = 10;
inline bool SignInChannelRequest::has_client_cl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignInChannelRequest::set_has_client_cl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignInChannelRequest::clear_has_client_cl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignInChannelRequest::clear_client_cl() {
  if (client_cl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_cl_->clear();
  }
  clear_has_client_cl();
}
inline const ::std::string& SignInChannelRequest::client_cl() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.SignInChannelRequest.client_cl)
  return *client_cl_;
}
inline void SignInChannelRequest::set_client_cl(const ::std::string& value) {
  set_has_client_cl();
  if (client_cl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_cl_ = new ::std::string;
  }
  client_cl_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.SignInChannelRequest.client_cl)
}
inline void SignInChannelRequest::set_client_cl(const char* value) {
  set_has_client_cl();
  if (client_cl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_cl_ = new ::std::string;
  }
  client_cl_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.SignInChannelRequest.client_cl)
}
inline void SignInChannelRequest::set_client_cl(const char* value, size_t size) {
  set_has_client_cl();
  if (client_cl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_cl_ = new ::std::string;
  }
  client_cl_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.SignInChannelRequest.client_cl)
}
inline ::std::string* SignInChannelRequest::mutable_client_cl() {
  set_has_client_cl();
  if (client_cl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_cl_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.SignInChannelRequest.client_cl)
  return client_cl_;
}
inline ::std::string* SignInChannelRequest::release_client_cl() {
  clear_has_client_cl();
  if (client_cl_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_cl_;
    client_cl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignInChannelRequest::set_allocated_client_cl(::std::string* client_cl) {
  if (client_cl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_cl_;
  }
  if (client_cl) {
    set_has_client_cl();
    client_cl_ = client_cl;
  } else {
    clear_has_client_cl();
    client_cl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.SignInChannelRequest.client_cl)
}

// -------------------------------------------------------------------

// SignInChannelResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool SignInChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignInChannelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignInChannelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignInChannelResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& SignInChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.SignInChannelResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* SignInChannelResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.SignInChannelResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* SignInChannelResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void SignInChannelResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.SignInChannelResponse.result)
}

// -------------------------------------------------------------------

// RoomParticipant

// required int32 id = 1;
inline bool RoomParticipant::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomParticipant::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomParticipant::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomParticipant::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RoomParticipant::id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipant.id)
  return id_;
}
inline void RoomParticipant::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomParticipant.id)
}

// optional int64 account_id = 2;
inline bool RoomParticipant::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomParticipant::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomParticipant::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomParticipant::clear_account_id() {
  account_id_ = GOOGLE_LONGLONG(0);
  clear_has_account_id();
}
inline ::google::protobuf::int64 RoomParticipant::account_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipant.account_id)
  return account_id_;
}
inline void RoomParticipant::set_account_id(::google::protobuf::int64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomParticipant.account_id)
}

// optional .b2.protocol.commondata.AccountInfo account_info = 3;
inline bool RoomParticipant::has_account_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomParticipant::set_has_account_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomParticipant::clear_has_account_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomParticipant::clear_account_info() {
  if (account_info_ != NULL) account_info_->::b2::protocol::commondata::AccountInfo::Clear();
  clear_has_account_info();
}
inline const ::b2::protocol::commondata::AccountInfo& RoomParticipant::account_info() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipant.account_info)
  return account_info_ != NULL ? *account_info_ : *default_instance_->account_info_;
}
inline ::b2::protocol::commondata::AccountInfo* RoomParticipant::mutable_account_info() {
  set_has_account_info();
  if (account_info_ == NULL) account_info_ = new ::b2::protocol::commondata::AccountInfo;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomParticipant.account_info)
  return account_info_;
}
inline ::b2::protocol::commondata::AccountInfo* RoomParticipant::release_account_info() {
  clear_has_account_info();
  ::b2::protocol::commondata::AccountInfo* temp = account_info_;
  account_info_ = NULL;
  return temp;
}
inline void RoomParticipant::set_allocated_account_info(::b2::protocol::commondata::AccountInfo* account_info) {
  delete account_info_;
  account_info_ = account_info;
  if (account_info) {
    set_has_account_info();
  } else {
    clear_has_account_info();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomParticipant.account_info)
}

// -------------------------------------------------------------------

// RoomProperty

// required string key = 1;
inline bool RoomProperty::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomProperty::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomProperty::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomProperty::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& RoomProperty::key() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomProperty.key)
  return *key_;
}
inline void RoomProperty::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomProperty.key)
}
inline void RoomProperty::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomProperty.key)
}
inline void RoomProperty::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomProperty.key)
}
inline ::std::string* RoomProperty::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomProperty.key)
  return key_;
}
inline ::std::string* RoomProperty::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomProperty::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomProperty.key)
}

// required string value = 2;
inline bool RoomProperty::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomProperty::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomProperty::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomProperty::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& RoomProperty::value() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomProperty.value)
  return *value_;
}
inline void RoomProperty::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomProperty.value)
}
inline void RoomProperty::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomProperty.value)
}
inline void RoomProperty::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomProperty.value)
}
inline ::std::string* RoomProperty::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomProperty.value)
  return value_;
}
inline ::std::string* RoomProperty::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomProperty::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomProperty.value)
}

// -------------------------------------------------------------------

// RoomJoinRequest

// optional string room_id = 1;
inline bool RoomJoinRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomJoinRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomJoinRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomJoinRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomJoinRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinRequest.room_id)
  return *room_id_;
}
inline void RoomJoinRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomJoinRequest.room_id)
}
inline void RoomJoinRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomJoinRequest.room_id)
}
inline void RoomJoinRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomJoinRequest.room_id)
}
inline ::std::string* RoomJoinRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomJoinRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomJoinRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomJoinRequest.room_id)
}

// optional .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomJoinRequest::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomJoinRequest::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomJoinRequest::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomJoinRequest::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomJoinRequest::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinRequest.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomJoinRequest::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomJoinRequest.room_type)
}

// optional .b2.protocol.commondata.Room.ACCESS room_access = 3;
inline bool RoomJoinRequest::has_room_access() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomJoinRequest::set_has_room_access() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomJoinRequest::clear_has_room_access() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomJoinRequest::clear_room_access() {
  room_access_ = 0;
  clear_has_room_access();
}
inline ::b2::protocol::commondata::Room_ACCESS RoomJoinRequest::room_access() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinRequest.room_access)
  return static_cast< ::b2::protocol::commondata::Room_ACCESS >(room_access_);
}
inline void RoomJoinRequest::set_room_access(::b2::protocol::commondata::Room_ACCESS value) {
  assert(::b2::protocol::commondata::Room_ACCESS_IsValid(value));
  set_has_room_access();
  room_access_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomJoinRequest.room_access)
}

// repeated .b2.protocol.channel.RoomProperty properties = 4;
inline int RoomJoinRequest::properties_size() const {
  return properties_.size();
}
inline void RoomJoinRequest::clear_properties() {
  properties_.Clear();
}
inline const ::b2::protocol::channel::RoomProperty& RoomJoinRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinRequest.properties)
  return properties_.Get(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomJoinRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinRequest.properties)
  return properties_.Mutable(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomJoinRequest::add_properties() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomJoinRequest.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
RoomJoinRequest::properties() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomJoinRequest.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
RoomJoinRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomJoinRequest.properties)
  return &properties_;
}

// repeated .b2.protocol.commondata.RoomCharacter room_characters = 5;
inline int RoomJoinRequest::room_characters_size() const {
  return room_characters_.size();
}
inline void RoomJoinRequest::clear_room_characters() {
  room_characters_.Clear();
}
inline const ::b2::protocol::commondata::RoomCharacter& RoomJoinRequest::room_characters(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinRequest.room_characters)
  return room_characters_.Get(index);
}
inline ::b2::protocol::commondata::RoomCharacter* RoomJoinRequest::mutable_room_characters(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinRequest.room_characters)
  return room_characters_.Mutable(index);
}
inline ::b2::protocol::commondata::RoomCharacter* RoomJoinRequest::add_room_characters() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomJoinRequest.room_characters)
  return room_characters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::RoomCharacter >&
RoomJoinRequest::room_characters() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomJoinRequest.room_characters)
  return room_characters_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::RoomCharacter >*
RoomJoinRequest::mutable_room_characters() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomJoinRequest.room_characters)
  return &room_characters_;
}

// repeated .b2.protocol.commondata.PresetNum character_presets = 6;
inline int RoomJoinRequest::character_presets_size() const {
  return character_presets_.size();
}
inline void RoomJoinRequest::clear_character_presets() {
  character_presets_.Clear();
}
inline const ::b2::protocol::commondata::PresetNum& RoomJoinRequest::character_presets(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinRequest.character_presets)
  return character_presets_.Get(index);
}
inline ::b2::protocol::commondata::PresetNum* RoomJoinRequest::mutable_character_presets(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinRequest.character_presets)
  return character_presets_.Mutable(index);
}
inline ::b2::protocol::commondata::PresetNum* RoomJoinRequest::add_character_presets() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomJoinRequest.character_presets)
  return character_presets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::PresetNum >&
RoomJoinRequest::character_presets() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomJoinRequest.character_presets)
  return character_presets_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::commondata::PresetNum >*
RoomJoinRequest::mutable_character_presets() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomJoinRequest.character_presets)
  return &character_presets_;
}

// -------------------------------------------------------------------

// RoomJoinResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomJoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomJoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomJoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomJoinResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomJoinResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomJoinResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomJoinResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomJoinResponse.result)
}

// optional string room_id = 10;
inline bool RoomJoinResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomJoinResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomJoinResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomJoinResponse::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomJoinResponse::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinResponse.room_id)
  return *room_id_;
}
inline void RoomJoinResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomJoinResponse.room_id)
}
inline void RoomJoinResponse::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomJoinResponse.room_id)
}
inline void RoomJoinResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomJoinResponse.room_id)
}
inline ::std::string* RoomJoinResponse::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinResponse.room_id)
  return room_id_;
}
inline ::std::string* RoomJoinResponse::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomJoinResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomJoinResponse.room_id)
}

// optional .b2.protocol.channel.RoomType room_type = 11;
inline bool RoomJoinResponse::has_room_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomJoinResponse::set_has_room_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomJoinResponse::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomJoinResponse::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomJoinResponse::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinResponse.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomJoinResponse::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomJoinResponse.room_type)
}

// optional .b2.protocol.channel.RoomParticipant host = 12;
inline bool RoomJoinResponse::has_host() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomJoinResponse::set_has_host() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomJoinResponse::clear_has_host() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomJoinResponse::clear_host() {
  if (host_ != NULL) host_->::b2::protocol::channel::RoomParticipant::Clear();
  clear_has_host();
}
inline const ::b2::protocol::channel::RoomParticipant& RoomJoinResponse::host() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinResponse.host)
  return host_ != NULL ? *host_ : *default_instance_->host_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomJoinResponse::mutable_host() {
  set_has_host();
  if (host_ == NULL) host_ = new ::b2::protocol::channel::RoomParticipant;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinResponse.host)
  return host_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomJoinResponse::release_host() {
  clear_has_host();
  ::b2::protocol::channel::RoomParticipant* temp = host_;
  host_ = NULL;
  return temp;
}
inline void RoomJoinResponse::set_allocated_host(::b2::protocol::channel::RoomParticipant* host) {
  delete host_;
  host_ = host;
  if (host) {
    set_has_host();
  } else {
    clear_has_host();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomJoinResponse.host)
}

// repeated .b2.protocol.channel.RoomParticipant participants = 13;
inline int RoomJoinResponse::participants_size() const {
  return participants_.size();
}
inline void RoomJoinResponse::clear_participants() {
  participants_.Clear();
}
inline const ::b2::protocol::channel::RoomParticipant& RoomJoinResponse::participants(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinResponse.participants)
  return participants_.Get(index);
}
inline ::b2::protocol::channel::RoomParticipant* RoomJoinResponse::mutable_participants(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinResponse.participants)
  return participants_.Mutable(index);
}
inline ::b2::protocol::channel::RoomParticipant* RoomJoinResponse::add_participants() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomJoinResponse.participants)
  return participants_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomParticipant >&
RoomJoinResponse::participants() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomJoinResponse.participants)
  return participants_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomParticipant >*
RoomJoinResponse::mutable_participants() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomJoinResponse.participants)
  return &participants_;
}

// repeated .b2.protocol.channel.RoomProperty properties = 14;
inline int RoomJoinResponse::properties_size() const {
  return properties_.size();
}
inline void RoomJoinResponse::clear_properties() {
  properties_.Clear();
}
inline const ::b2::protocol::channel::RoomProperty& RoomJoinResponse::properties(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomJoinResponse.properties)
  return properties_.Get(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomJoinResponse::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomJoinResponse.properties)
  return properties_.Mutable(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomJoinResponse::add_properties() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomJoinResponse.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
RoomJoinResponse::properties() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomJoinResponse.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
RoomJoinResponse::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomJoinResponse.properties)
  return &properties_;
}

// -------------------------------------------------------------------

// RoomLeaveRequest

// optional string room_id = 1;
inline bool RoomLeaveRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomLeaveRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomLeaveRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomLeaveRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomLeaveRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveRequest.room_id)
  return *room_id_;
}
inline void RoomLeaveRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomLeaveRequest.room_id)
}
inline void RoomLeaveRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomLeaveRequest.room_id)
}
inline void RoomLeaveRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomLeaveRequest.room_id)
}
inline ::std::string* RoomLeaveRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomLeaveRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomLeaveRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomLeaveRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomLeaveRequest.room_id)
}

// -------------------------------------------------------------------

// RoomLeaveResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomLeaveResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomLeaveResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomLeaveResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomLeaveResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomLeaveResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomLeaveResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomLeaveResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomLeaveResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomLeaveResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomLeaveResponse.result)
}

// repeated string room_id_list = 2;
inline int RoomLeaveResponse::room_id_list_size() const {
  return room_id_list_.size();
}
inline void RoomLeaveResponse::clear_room_id_list() {
  room_id_list_.Clear();
}
inline const ::std::string& RoomLeaveResponse::room_id_list(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveResponse.room_id_list)
  return room_id_list_.Get(index);
}
inline ::std::string* RoomLeaveResponse::mutable_room_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomLeaveResponse.room_id_list)
  return room_id_list_.Mutable(index);
}
inline void RoomLeaveResponse::set_room_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomLeaveResponse.room_id_list)
  room_id_list_.Mutable(index)->assign(value);
}
inline void RoomLeaveResponse::set_room_id_list(int index, const char* value) {
  room_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomLeaveResponse.room_id_list)
}
inline void RoomLeaveResponse::set_room_id_list(int index, const char* value, size_t size) {
  room_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomLeaveResponse.room_id_list)
}
inline ::std::string* RoomLeaveResponse::add_room_id_list() {
  return room_id_list_.Add();
}
inline void RoomLeaveResponse::add_room_id_list(const ::std::string& value) {
  room_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomLeaveResponse.room_id_list)
}
inline void RoomLeaveResponse::add_room_id_list(const char* value) {
  room_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:b2.protocol.channel.RoomLeaveResponse.room_id_list)
}
inline void RoomLeaveResponse::add_room_id_list(const char* value, size_t size) {
  room_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:b2.protocol.channel.RoomLeaveResponse.room_id_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RoomLeaveResponse::room_id_list() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomLeaveResponse.room_id_list)
  return room_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RoomLeaveResponse::mutable_room_id_list() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomLeaveResponse.room_id_list)
  return &room_id_list_;
}

// -------------------------------------------------------------------

// RoomCloseRequest

// required string room_id = 1;
inline bool RoomCloseRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomCloseRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomCloseRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomCloseRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomCloseRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseRequest.room_id)
  return *room_id_;
}
inline void RoomCloseRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCloseRequest.room_id)
}
inline void RoomCloseRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomCloseRequest.room_id)
}
inline void RoomCloseRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomCloseRequest.room_id)
}
inline ::std::string* RoomCloseRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomCloseRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomCloseRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomCloseRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomCloseRequest.room_id)
}

// optional int32 map_id = 2;
inline bool RoomCloseRequest::has_map_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomCloseRequest::set_has_map_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomCloseRequest::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomCloseRequest::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 RoomCloseRequest::map_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseRequest.map_id)
  return map_id_;
}
inline void RoomCloseRequest::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCloseRequest.map_id)
}

// required .b2.protocol.channel.RoomCloseReason reason = 4;
inline bool RoomCloseRequest::has_reason() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomCloseRequest::set_has_reason() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomCloseRequest::clear_has_reason() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomCloseRequest::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::b2::protocol::channel::RoomCloseReason RoomCloseRequest::reason() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseRequest.reason)
  return static_cast< ::b2::protocol::channel::RoomCloseReason >(reason_);
}
inline void RoomCloseRequest::set_reason(::b2::protocol::channel::RoomCloseReason value) {
  assert(::b2::protocol::channel::RoomCloseReason_IsValid(value));
  set_has_reason();
  reason_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCloseRequest.reason)
}

// -------------------------------------------------------------------

// RoomCloseResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomCloseResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomCloseResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomCloseResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomCloseResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomCloseResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomCloseResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomCloseResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomCloseResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomCloseResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomCloseResponse.result)
}

// optional string room_id = 10;
inline bool RoomCloseResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomCloseResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomCloseResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomCloseResponse::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomCloseResponse::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseResponse.room_id)
  return *room_id_;
}
inline void RoomCloseResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCloseResponse.room_id)
}
inline void RoomCloseResponse::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomCloseResponse.room_id)
}
inline void RoomCloseResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomCloseResponse.room_id)
}
inline ::std::string* RoomCloseResponse::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomCloseResponse.room_id)
  return room_id_;
}
inline ::std::string* RoomCloseResponse::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomCloseResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomCloseResponse.room_id)
}

// optional .b2.protocol.channel.RoomType room_type = 11;
inline bool RoomCloseResponse::has_room_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomCloseResponse::set_has_room_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomCloseResponse::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomCloseResponse::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomCloseResponse::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseResponse.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomCloseResponse::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCloseResponse.room_type)
}

// optional string token = 12;
inline bool RoomCloseResponse::has_token() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomCloseResponse::set_has_token() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomCloseResponse::clear_has_token() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomCloseResponse::clear_token() {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& RoomCloseResponse::token() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCloseResponse.token)
  return *token_;
}
inline void RoomCloseResponse::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCloseResponse.token)
}
inline void RoomCloseResponse::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomCloseResponse.token)
}
inline void RoomCloseResponse::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomCloseResponse.token)
}
inline ::std::string* RoomCloseResponse::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomCloseResponse.token)
  return token_;
}
inline ::std::string* RoomCloseResponse::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomCloseResponse::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomCloseResponse.token)
}

// -------------------------------------------------------------------

// RoomAccessControlRequest

// required string room_id = 1;
inline bool RoomAccessControlRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomAccessControlRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomAccessControlRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomAccessControlRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomAccessControlRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomAccessControlRequest.room_id)
  return *room_id_;
}
inline void RoomAccessControlRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomAccessControlRequest.room_id)
}
inline void RoomAccessControlRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomAccessControlRequest.room_id)
}
inline void RoomAccessControlRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomAccessControlRequest.room_id)
}
inline ::std::string* RoomAccessControlRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomAccessControlRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomAccessControlRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomAccessControlRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomAccessControlRequest.room_id)
}

// required .b2.protocol.commondata.Room.ACCESS access = 2;
inline bool RoomAccessControlRequest::has_access() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomAccessControlRequest::set_has_access() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomAccessControlRequest::clear_has_access() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomAccessControlRequest::clear_access() {
  access_ = 0;
  clear_has_access();
}
inline ::b2::protocol::commondata::Room_ACCESS RoomAccessControlRequest::access() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomAccessControlRequest.access)
  return static_cast< ::b2::protocol::commondata::Room_ACCESS >(access_);
}
inline void RoomAccessControlRequest::set_access(::b2::protocol::commondata::Room_ACCESS value) {
  assert(::b2::protocol::commondata::Room_ACCESS_IsValid(value));
  set_has_access();
  access_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomAccessControlRequest.access)
}

// -------------------------------------------------------------------

// RoomAccessControlResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomAccessControlResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomAccessControlResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomAccessControlResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomAccessControlResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomAccessControlResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomAccessControlResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomAccessControlResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomAccessControlResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomAccessControlResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomAccessControlResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomAccessControlResponse.result)
}

// -------------------------------------------------------------------

// RoomMessageCommand

// required string room_id = 1;
inline bool RoomMessageCommand::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomMessageCommand::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomMessageCommand::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomMessageCommand::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomMessageCommand::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageCommand.room_id)
  return *room_id_;
}
inline void RoomMessageCommand::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomMessageCommand.room_id)
}
inline void RoomMessageCommand::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomMessageCommand.room_id)
}
inline void RoomMessageCommand::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomMessageCommand.room_id)
}
inline ::std::string* RoomMessageCommand::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomMessageCommand.room_id)
  return room_id_;
}
inline ::std::string* RoomMessageCommand::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomMessageCommand::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomMessageCommand.room_id)
}

// optional int32 receiver_id = 2;
inline bool RoomMessageCommand::has_receiver_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomMessageCommand::set_has_receiver_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomMessageCommand::clear_has_receiver_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomMessageCommand::clear_receiver_id() {
  receiver_id_ = 0;
  clear_has_receiver_id();
}
inline ::google::protobuf::int32 RoomMessageCommand::receiver_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageCommand.receiver_id)
  return receiver_id_;
}
inline void RoomMessageCommand::set_receiver_id(::google::protobuf::int32 value) {
  set_has_receiver_id();
  receiver_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomMessageCommand.receiver_id)
}

// required bytes message = 3;
inline bool RoomMessageCommand::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomMessageCommand::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomMessageCommand::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomMessageCommand::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& RoomMessageCommand::message() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageCommand.message)
  return *message_;
}
inline void RoomMessageCommand::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomMessageCommand.message)
}
inline void RoomMessageCommand::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomMessageCommand.message)
}
inline void RoomMessageCommand::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomMessageCommand.message)
}
inline ::std::string* RoomMessageCommand::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomMessageCommand.message)
  return message_;
}
inline ::std::string* RoomMessageCommand::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomMessageCommand::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomMessageCommand.message)
}

// -------------------------------------------------------------------

// RoomCreateNotify

// required string room_id = 1;
inline bool RoomCreateNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomCreateNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomCreateNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomCreateNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomCreateNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCreateNotify.room_id)
  return *room_id_;
}
inline void RoomCreateNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCreateNotify.room_id)
}
inline void RoomCreateNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomCreateNotify.room_id)
}
inline void RoomCreateNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomCreateNotify.room_id)
}
inline ::std::string* RoomCreateNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomCreateNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomCreateNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomCreateNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomCreateNotify.room_id)
}

// required .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomCreateNotify::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomCreateNotify::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomCreateNotify::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomCreateNotify::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomCreateNotify::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomCreateNotify.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomCreateNotify::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomCreateNotify.room_type)
}

// -------------------------------------------------------------------

// RoomDeleteNotify

// required string room_id = 1;
inline bool RoomDeleteNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomDeleteNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomDeleteNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomDeleteNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomDeleteNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomDeleteNotify.room_id)
  return *room_id_;
}
inline void RoomDeleteNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomDeleteNotify.room_id)
}
inline void RoomDeleteNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomDeleteNotify.room_id)
}
inline void RoomDeleteNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomDeleteNotify.room_id)
}
inline ::std::string* RoomDeleteNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomDeleteNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomDeleteNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomDeleteNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomDeleteNotify.room_id)
}

// required .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomDeleteNotify::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomDeleteNotify::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomDeleteNotify::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomDeleteNotify::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomDeleteNotify::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomDeleteNotify.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomDeleteNotify::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomDeleteNotify.room_type)
}

// -------------------------------------------------------------------

// RoomParticipantJoinNotify

// required string room_id = 1;
inline bool RoomParticipantJoinNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomParticipantJoinNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomParticipantJoinNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomParticipantJoinNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomParticipantJoinNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipantJoinNotify.room_id)
  return *room_id_;
}
inline void RoomParticipantJoinNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomParticipantJoinNotify.room_id)
}
inline void RoomParticipantJoinNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomParticipantJoinNotify.room_id)
}
inline void RoomParticipantJoinNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomParticipantJoinNotify.room_id)
}
inline ::std::string* RoomParticipantJoinNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomParticipantJoinNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomParticipantJoinNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomParticipantJoinNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomParticipantJoinNotify.room_id)
}

// required .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomParticipantJoinNotify::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomParticipantJoinNotify::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomParticipantJoinNotify::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomParticipantJoinNotify::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomParticipantJoinNotify::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipantJoinNotify.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomParticipantJoinNotify::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomParticipantJoinNotify.room_type)
}

// required .b2.protocol.channel.RoomParticipant joiner = 3;
inline bool RoomParticipantJoinNotify::has_joiner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomParticipantJoinNotify::set_has_joiner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomParticipantJoinNotify::clear_has_joiner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomParticipantJoinNotify::clear_joiner() {
  if (joiner_ != NULL) joiner_->::b2::protocol::channel::RoomParticipant::Clear();
  clear_has_joiner();
}
inline const ::b2::protocol::channel::RoomParticipant& RoomParticipantJoinNotify::joiner() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipantJoinNotify.joiner)
  return joiner_ != NULL ? *joiner_ : *default_instance_->joiner_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomParticipantJoinNotify::mutable_joiner() {
  set_has_joiner();
  if (joiner_ == NULL) joiner_ = new ::b2::protocol::channel::RoomParticipant;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomParticipantJoinNotify.joiner)
  return joiner_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomParticipantJoinNotify::release_joiner() {
  clear_has_joiner();
  ::b2::protocol::channel::RoomParticipant* temp = joiner_;
  joiner_ = NULL;
  return temp;
}
inline void RoomParticipantJoinNotify::set_allocated_joiner(::b2::protocol::channel::RoomParticipant* joiner) {
  delete joiner_;
  joiner_ = joiner;
  if (joiner) {
    set_has_joiner();
  } else {
    clear_has_joiner();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomParticipantJoinNotify.joiner)
}

// -------------------------------------------------------------------

// RoomParticipantLeaveNotify

// required string room_id = 1;
inline bool RoomParticipantLeaveNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomParticipantLeaveNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomParticipantLeaveNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomParticipantLeaveNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomParticipantLeaveNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipantLeaveNotify.room_id)
  return *room_id_;
}
inline void RoomParticipantLeaveNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomParticipantLeaveNotify.room_id)
}
inline void RoomParticipantLeaveNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomParticipantLeaveNotify.room_id)
}
inline void RoomParticipantLeaveNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomParticipantLeaveNotify.room_id)
}
inline ::std::string* RoomParticipantLeaveNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomParticipantLeaveNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomParticipantLeaveNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomParticipantLeaveNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomParticipantLeaveNotify.room_id)
}

// required .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomParticipantLeaveNotify::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomParticipantLeaveNotify::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomParticipantLeaveNotify::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomParticipantLeaveNotify::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomParticipantLeaveNotify::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipantLeaveNotify.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomParticipantLeaveNotify::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomParticipantLeaveNotify.room_type)
}

// required .b2.protocol.channel.RoomParticipant leaver = 3;
inline bool RoomParticipantLeaveNotify::has_leaver() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomParticipantLeaveNotify::set_has_leaver() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomParticipantLeaveNotify::clear_has_leaver() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomParticipantLeaveNotify::clear_leaver() {
  if (leaver_ != NULL) leaver_->::b2::protocol::channel::RoomParticipant::Clear();
  clear_has_leaver();
}
inline const ::b2::protocol::channel::RoomParticipant& RoomParticipantLeaveNotify::leaver() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomParticipantLeaveNotify.leaver)
  return leaver_ != NULL ? *leaver_ : *default_instance_->leaver_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomParticipantLeaveNotify::mutable_leaver() {
  set_has_leaver();
  if (leaver_ == NULL) leaver_ = new ::b2::protocol::channel::RoomParticipant;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomParticipantLeaveNotify.leaver)
  return leaver_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomParticipantLeaveNotify::release_leaver() {
  clear_has_leaver();
  ::b2::protocol::channel::RoomParticipant* temp = leaver_;
  leaver_ = NULL;
  return temp;
}
inline void RoomParticipantLeaveNotify::set_allocated_leaver(::b2::protocol::channel::RoomParticipant* leaver) {
  delete leaver_;
  leaver_ = leaver;
  if (leaver) {
    set_has_leaver();
  } else {
    clear_has_leaver();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomParticipantLeaveNotify.leaver)
}

// -------------------------------------------------------------------

// RoomHostChangedNotify

// required string room_id = 1;
inline bool RoomHostChangedNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomHostChangedNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomHostChangedNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomHostChangedNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomHostChangedNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHostChangedNotify.room_id)
  return *room_id_;
}
inline void RoomHostChangedNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHostChangedNotify.room_id)
}
inline void RoomHostChangedNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomHostChangedNotify.room_id)
}
inline void RoomHostChangedNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomHostChangedNotify.room_id)
}
inline ::std::string* RoomHostChangedNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomHostChangedNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomHostChangedNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomHostChangedNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomHostChangedNotify.room_id)
}

// required .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomHostChangedNotify::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomHostChangedNotify::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomHostChangedNotify::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomHostChangedNotify::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomHostChangedNotify::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHostChangedNotify.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomHostChangedNotify::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHostChangedNotify.room_type)
}

// required int32 host_id = 3;
inline bool RoomHostChangedNotify::has_host_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomHostChangedNotify::set_has_host_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomHostChangedNotify::clear_has_host_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomHostChangedNotify::clear_host_id() {
  host_id_ = 0;
  clear_has_host_id();
}
inline ::google::protobuf::int32 RoomHostChangedNotify::host_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHostChangedNotify.host_id)
  return host_id_;
}
inline void RoomHostChangedNotify::set_host_id(::google::protobuf::int32 value) {
  set_has_host_id();
  host_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHostChangedNotify.host_id)
}

// -------------------------------------------------------------------

// RoomMessageNotify

// required string room_id = 1;
inline bool RoomMessageNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomMessageNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomMessageNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomMessageNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomMessageNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageNotify.room_id)
  return *room_id_;
}
inline void RoomMessageNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomMessageNotify.room_id)
}
inline void RoomMessageNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomMessageNotify.room_id)
}
inline void RoomMessageNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomMessageNotify.room_id)
}
inline ::std::string* RoomMessageNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomMessageNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomMessageNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomMessageNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomMessageNotify.room_id)
}

// required .b2.protocol.channel.RoomType room_type = 2;
inline bool RoomMessageNotify::has_room_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomMessageNotify::set_has_room_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomMessageNotify::clear_has_room_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomMessageNotify::clear_room_type() {
  room_type_ = 0;
  clear_has_room_type();
}
inline ::b2::protocol::channel::RoomType RoomMessageNotify::room_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageNotify.room_type)
  return static_cast< ::b2::protocol::channel::RoomType >(room_type_);
}
inline void RoomMessageNotify::set_room_type(::b2::protocol::channel::RoomType value) {
  assert(::b2::protocol::channel::RoomType_IsValid(value));
  set_has_room_type();
  room_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomMessageNotify.room_type)
}

// required .b2.protocol.channel.RoomParticipant sender = 3;
inline bool RoomMessageNotify::has_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomMessageNotify::set_has_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomMessageNotify::clear_has_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomMessageNotify::clear_sender() {
  if (sender_ != NULL) sender_->::b2::protocol::channel::RoomParticipant::Clear();
  clear_has_sender();
}
inline const ::b2::protocol::channel::RoomParticipant& RoomMessageNotify::sender() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageNotify.sender)
  return sender_ != NULL ? *sender_ : *default_instance_->sender_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomMessageNotify::mutable_sender() {
  set_has_sender();
  if (sender_ == NULL) sender_ = new ::b2::protocol::channel::RoomParticipant;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomMessageNotify.sender)
  return sender_;
}
inline ::b2::protocol::channel::RoomParticipant* RoomMessageNotify::release_sender() {
  clear_has_sender();
  ::b2::protocol::channel::RoomParticipant* temp = sender_;
  sender_ = NULL;
  return temp;
}
inline void RoomMessageNotify::set_allocated_sender(::b2::protocol::channel::RoomParticipant* sender) {
  delete sender_;
  sender_ = sender;
  if (sender) {
    set_has_sender();
  } else {
    clear_has_sender();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomMessageNotify.sender)
}

// required bytes message = 4;
inline bool RoomMessageNotify::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomMessageNotify::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomMessageNotify::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomMessageNotify::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& RoomMessageNotify::message() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomMessageNotify.message)
  return *message_;
}
inline void RoomMessageNotify::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomMessageNotify.message)
}
inline void RoomMessageNotify::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomMessageNotify.message)
}
inline void RoomMessageNotify::set_message(const void* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomMessageNotify.message)
}
inline ::std::string* RoomMessageNotify::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomMessageNotify.message)
  return message_;
}
inline ::std::string* RoomMessageNotify::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomMessageNotify::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomMessageNotify.message)
}

// -------------------------------------------------------------------

// RoomSetPropertyRequest

// required string room_id = 1;
inline bool RoomSetPropertyRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomSetPropertyRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomSetPropertyRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomSetPropertyRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomSetPropertyRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomSetPropertyRequest.room_id)
  return *room_id_;
}
inline void RoomSetPropertyRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomSetPropertyRequest.room_id)
}
inline void RoomSetPropertyRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomSetPropertyRequest.room_id)
}
inline void RoomSetPropertyRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomSetPropertyRequest.room_id)
}
inline ::std::string* RoomSetPropertyRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomSetPropertyRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomSetPropertyRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomSetPropertyRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomSetPropertyRequest.room_id)
}

// repeated .b2.protocol.channel.RoomProperty properties = 2;
inline int RoomSetPropertyRequest::properties_size() const {
  return properties_.size();
}
inline void RoomSetPropertyRequest::clear_properties() {
  properties_.Clear();
}
inline const ::b2::protocol::channel::RoomProperty& RoomSetPropertyRequest::properties(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomSetPropertyRequest.properties)
  return properties_.Get(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomSetPropertyRequest::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomSetPropertyRequest.properties)
  return properties_.Mutable(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomSetPropertyRequest::add_properties() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomSetPropertyRequest.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
RoomSetPropertyRequest::properties() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomSetPropertyRequest.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
RoomSetPropertyRequest::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomSetPropertyRequest.properties)
  return &properties_;
}

// -------------------------------------------------------------------

// RoomSetPropertyResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomSetPropertyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomSetPropertyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomSetPropertyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomSetPropertyResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomSetPropertyResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomSetPropertyResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomSetPropertyResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomSetPropertyResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomSetPropertyResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomSetPropertyResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomSetPropertyResponse.result)
}

// -------------------------------------------------------------------

// RoomPropertyUpdatedNotify

// required string room_id = 1;
inline bool RoomPropertyUpdatedNotify::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomPropertyUpdatedNotify::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomPropertyUpdatedNotify::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomPropertyUpdatedNotify::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomPropertyUpdatedNotify::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomPropertyUpdatedNotify.room_id)
  return *room_id_;
}
inline void RoomPropertyUpdatedNotify::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomPropertyUpdatedNotify.room_id)
}
inline void RoomPropertyUpdatedNotify::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomPropertyUpdatedNotify.room_id)
}
inline void RoomPropertyUpdatedNotify::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomPropertyUpdatedNotify.room_id)
}
inline ::std::string* RoomPropertyUpdatedNotify::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomPropertyUpdatedNotify.room_id)
  return room_id_;
}
inline ::std::string* RoomPropertyUpdatedNotify::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomPropertyUpdatedNotify::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomPropertyUpdatedNotify.room_id)
}

// repeated .b2.protocol.channel.RoomProperty properties = 2;
inline int RoomPropertyUpdatedNotify::properties_size() const {
  return properties_.size();
}
inline void RoomPropertyUpdatedNotify::clear_properties() {
  properties_.Clear();
}
inline const ::b2::protocol::channel::RoomProperty& RoomPropertyUpdatedNotify::properties(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomPropertyUpdatedNotify.properties)
  return properties_.Get(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomPropertyUpdatedNotify::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomPropertyUpdatedNotify.properties)
  return properties_.Mutable(index);
}
inline ::b2::protocol::channel::RoomProperty* RoomPropertyUpdatedNotify::add_properties() {
  // @@protoc_insertion_point(field_add:b2.protocol.channel.RoomPropertyUpdatedNotify.properties)
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >&
RoomPropertyUpdatedNotify::properties() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.RoomPropertyUpdatedNotify.properties)
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::b2::protocol::channel::RoomProperty >*
RoomPropertyUpdatedNotify::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.RoomPropertyUpdatedNotify.properties)
  return &properties_;
}

// -------------------------------------------------------------------

// RoomInviteRequest

// required string room_id = 1;
inline bool RoomInviteRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInviteRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInviteRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInviteRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomInviteRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomInviteRequest.room_id)
  return *room_id_;
}
inline void RoomInviteRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomInviteRequest.room_id)
}
inline void RoomInviteRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomInviteRequest.room_id)
}
inline void RoomInviteRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomInviteRequest.room_id)
}
inline ::std::string* RoomInviteRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomInviteRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomInviteRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomInviteRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomInviteRequest.room_id)
}

// required string invitee = 2;
inline bool RoomInviteRequest::has_invitee() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomInviteRequest::set_has_invitee() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomInviteRequest::clear_has_invitee() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomInviteRequest::clear_invitee() {
  if (invitee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitee_->clear();
  }
  clear_has_invitee();
}
inline const ::std::string& RoomInviteRequest::invitee() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomInviteRequest.invitee)
  return *invitee_;
}
inline void RoomInviteRequest::set_invitee(const ::std::string& value) {
  set_has_invitee();
  if (invitee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitee_ = new ::std::string;
  }
  invitee_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomInviteRequest.invitee)
}
inline void RoomInviteRequest::set_invitee(const char* value) {
  set_has_invitee();
  if (invitee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitee_ = new ::std::string;
  }
  invitee_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomInviteRequest.invitee)
}
inline void RoomInviteRequest::set_invitee(const char* value, size_t size) {
  set_has_invitee();
  if (invitee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitee_ = new ::std::string;
  }
  invitee_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomInviteRequest.invitee)
}
inline ::std::string* RoomInviteRequest::mutable_invitee() {
  set_has_invitee();
  if (invitee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    invitee_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomInviteRequest.invitee)
  return invitee_;
}
inline ::std::string* RoomInviteRequest::release_invitee() {
  clear_has_invitee();
  if (invitee_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = invitee_;
    invitee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomInviteRequest::set_allocated_invitee(::std::string* invitee) {
  if (invitee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitee_;
  }
  if (invitee) {
    set_has_invitee();
    invitee_ = invitee;
  } else {
    clear_has_invitee();
    invitee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomInviteRequest.invitee)
}

// required int32 invitation_number = 3;
inline bool RoomInviteRequest::has_invitation_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomInviteRequest::set_has_invitation_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomInviteRequest::clear_has_invitation_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomInviteRequest::clear_invitation_number() {
  invitation_number_ = 0;
  clear_has_invitation_number();
}
inline ::google::protobuf::int32 RoomInviteRequest::invitation_number() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomInviteRequest.invitation_number)
  return invitation_number_;
}
inline void RoomInviteRequest::set_invitation_number(::google::protobuf::int32 value) {
  set_has_invitation_number();
  invitation_number_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomInviteRequest.invitation_number)
}

// optional int32 map_id = 4;
inline bool RoomInviteRequest::has_map_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomInviteRequest::set_has_map_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomInviteRequest::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomInviteRequest::clear_map_id() {
  map_id_ = 0;
  clear_has_map_id();
}
inline ::google::protobuf::int32 RoomInviteRequest::map_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomInviteRequest.map_id)
  return map_id_;
}
inline void RoomInviteRequest::set_map_id(::google::protobuf::int32 value) {
  set_has_map_id();
  map_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomInviteRequest.map_id)
}

// optional int32 difficulty = 5;
inline bool RoomInviteRequest::has_difficulty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomInviteRequest::set_has_difficulty() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomInviteRequest::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomInviteRequest::clear_difficulty() {
  difficulty_ = 0;
  clear_has_difficulty();
}
inline ::google::protobuf::int32 RoomInviteRequest::difficulty() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomInviteRequest.difficulty)
  return difficulty_;
}
inline void RoomInviteRequest::set_difficulty(::google::protobuf::int32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomInviteRequest.difficulty)
}

// -------------------------------------------------------------------

// RoomInviteResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomInviteResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInviteResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInviteResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInviteResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomInviteResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomInviteResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomInviteResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomInviteResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomInviteResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomInviteResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomInviteResponse.result)
}

// -------------------------------------------------------------------

// RoomKickRequest

// required string room_id = 1;
inline bool RoomKickRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomKickRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomKickRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomKickRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomKickRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomKickRequest.room_id)
  return *room_id_;
}
inline void RoomKickRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomKickRequest.room_id)
}
inline void RoomKickRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomKickRequest.room_id)
}
inline void RoomKickRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomKickRequest.room_id)
}
inline ::std::string* RoomKickRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomKickRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomKickRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomKickRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomKickRequest.room_id)
}

// required int64 kick_account_id = 2;
inline bool RoomKickRequest::has_kick_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomKickRequest::set_has_kick_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomKickRequest::clear_has_kick_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomKickRequest::clear_kick_account_id() {
  kick_account_id_ = GOOGLE_LONGLONG(0);
  clear_has_kick_account_id();
}
inline ::google::protobuf::int64 RoomKickRequest::kick_account_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomKickRequest.kick_account_id)
  return kick_account_id_;
}
inline void RoomKickRequest::set_kick_account_id(::google::protobuf::int64 value) {
  set_has_kick_account_id();
  kick_account_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomKickRequest.kick_account_id)
}

// -------------------------------------------------------------------

// RoomKickResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomKickResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomKickResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomKickResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomKickResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomKickResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomKickResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomKickResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomKickResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomKickResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomKickResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomKickResponse.result)
}

// optional int64 kicked_account_id = 2;
inline bool RoomKickResponse::has_kicked_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomKickResponse::set_has_kicked_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomKickResponse::clear_has_kicked_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomKickResponse::clear_kicked_account_id() {
  kicked_account_id_ = GOOGLE_LONGLONG(0);
  clear_has_kicked_account_id();
}
inline ::google::protobuf::int64 RoomKickResponse::kicked_account_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomKickResponse.kicked_account_id)
  return kicked_account_id_;
}
inline void RoomKickResponse::set_kicked_account_id(::google::protobuf::int64 value) {
  set_has_kicked_account_id();
  kicked_account_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomKickResponse.kicked_account_id)
}

// -------------------------------------------------------------------

// RoomLeaveResultRequest

// required string room_id = 1;
inline bool RoomLeaveResultRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomLeaveResultRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomLeaveResultRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomLeaveResultRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomLeaveResultRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveResultRequest.room_id)
  return *room_id_;
}
inline void RoomLeaveResultRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomLeaveResultRequest.room_id)
}
inline void RoomLeaveResultRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomLeaveResultRequest.room_id)
}
inline void RoomLeaveResultRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomLeaveResultRequest.room_id)
}
inline ::std::string* RoomLeaveResultRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomLeaveResultRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomLeaveResultRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomLeaveResultRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomLeaveResultRequest.room_id)
}

// required int64 leaved_account_id = 2;
inline bool RoomLeaveResultRequest::has_leaved_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomLeaveResultRequest::set_has_leaved_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomLeaveResultRequest::clear_has_leaved_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomLeaveResultRequest::clear_leaved_account_id() {
  leaved_account_id_ = GOOGLE_LONGLONG(0);
  clear_has_leaved_account_id();
}
inline ::google::protobuf::int64 RoomLeaveResultRequest::leaved_account_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveResultRequest.leaved_account_id)
  return leaved_account_id_;
}
inline void RoomLeaveResultRequest::set_leaved_account_id(::google::protobuf::int64 value) {
  set_has_leaved_account_id();
  leaved_account_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomLeaveResultRequest.leaved_account_id)
}

// required string match_token = 3;
inline bool RoomLeaveResultRequest::has_match_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomLeaveResultRequest::set_has_match_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomLeaveResultRequest::clear_has_match_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomLeaveResultRequest::clear_match_token() {
  if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    match_token_->clear();
  }
  clear_has_match_token();
}
inline const ::std::string& RoomLeaveResultRequest::match_token() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveResultRequest.match_token)
  return *match_token_;
}
inline void RoomLeaveResultRequest::set_match_token(const ::std::string& value) {
  set_has_match_token();
  if (match_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    match_token_ = new ::std::string;
  }
  match_token_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomLeaveResultRequest.match_token)
}
inline void RoomLeaveResultRequest::set_match_token(const char* value) {
  set_has_match_token();
  if (match_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    match_token_ = new ::std::string;
  }
  match_token_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomLeaveResultRequest.match_token)
}
inline void RoomLeaveResultRequest::set_match_token(const char* value, size_t size) {
  set_has_match_token();
  if (match_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    match_token_ = new ::std::string;
  }
  match_token_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomLeaveResultRequest.match_token)
}
inline ::std::string* RoomLeaveResultRequest::mutable_match_token() {
  set_has_match_token();
  if (match_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    match_token_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomLeaveResultRequest.match_token)
  return match_token_;
}
inline ::std::string* RoomLeaveResultRequest::release_match_token() {
  clear_has_match_token();
  if (match_token_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = match_token_;
    match_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomLeaveResultRequest::set_allocated_match_token(::std::string* match_token) {
  if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete match_token_;
  }
  if (match_token) {
    set_has_match_token();
    match_token_ = match_token;
  } else {
    clear_has_match_token();
    match_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomLeaveResultRequest.match_token)
}

// -------------------------------------------------------------------

// RoomLeaveResultResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomLeaveResultResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomLeaveResultResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomLeaveResultResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomLeaveResultResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomLeaveResultResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomLeaveResultResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomLeaveResultResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomLeaveResultResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomLeaveResultResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomLeaveResultResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomLeaveResultResponse.result)
}

// -------------------------------------------------------------------

// RoomHeartbeatCommand

// required string room_id = 1;
inline bool RoomHeartbeatCommand::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomHeartbeatCommand::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomHeartbeatCommand::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomHeartbeatCommand::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomHeartbeatCommand::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHeartbeatCommand.room_id)
  return *room_id_;
}
inline void RoomHeartbeatCommand::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHeartbeatCommand.room_id)
}
inline void RoomHeartbeatCommand::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomHeartbeatCommand.room_id)
}
inline void RoomHeartbeatCommand::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomHeartbeatCommand.room_id)
}
inline ::std::string* RoomHeartbeatCommand::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomHeartbeatCommand.room_id)
  return room_id_;
}
inline ::std::string* RoomHeartbeatCommand::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomHeartbeatCommand::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomHeartbeatCommand.room_id)
}

// -------------------------------------------------------------------

// RoomHeartbeatNotify

// -------------------------------------------------------------------

// RoomHeartbeatRequest

// required string room_id = 1;
inline bool RoomHeartbeatRequest::has_room_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomHeartbeatRequest::set_has_room_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomHeartbeatRequest::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomHeartbeatRequest::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomHeartbeatRequest::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHeartbeatRequest.room_id)
  return *room_id_;
}
inline void RoomHeartbeatRequest::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHeartbeatRequest.room_id)
}
inline void RoomHeartbeatRequest::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomHeartbeatRequest.room_id)
}
inline void RoomHeartbeatRequest::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomHeartbeatRequest.room_id)
}
inline ::std::string* RoomHeartbeatRequest::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomHeartbeatRequest.room_id)
  return room_id_;
}
inline ::std::string* RoomHeartbeatRequest::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomHeartbeatRequest::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomHeartbeatRequest.room_id)
}

// required int32 seq = 2;
inline bool RoomHeartbeatRequest::has_seq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomHeartbeatRequest::set_has_seq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomHeartbeatRequest::clear_has_seq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomHeartbeatRequest::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 RoomHeartbeatRequest::seq() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHeartbeatRequest.seq)
  return seq_;
}
inline void RoomHeartbeatRequest::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHeartbeatRequest.seq)
}

// -------------------------------------------------------------------

// RoomHeartbeatResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool RoomHeartbeatResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomHeartbeatResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomHeartbeatResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomHeartbeatResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& RoomHeartbeatResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHeartbeatResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* RoomHeartbeatResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomHeartbeatResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* RoomHeartbeatResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void RoomHeartbeatResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomHeartbeatResponse.result)
}

// optional string room_id = 10;
inline bool RoomHeartbeatResponse::has_room_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomHeartbeatResponse::set_has_room_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomHeartbeatResponse::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomHeartbeatResponse::clear_room_id() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_->clear();
  }
  clear_has_room_id();
}
inline const ::std::string& RoomHeartbeatResponse::room_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHeartbeatResponse.room_id)
  return *room_id_;
}
inline void RoomHeartbeatResponse::set_room_id(const ::std::string& value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHeartbeatResponse.room_id)
}
inline void RoomHeartbeatResponse::set_room_id(const char* value) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.RoomHeartbeatResponse.room_id)
}
inline void RoomHeartbeatResponse::set_room_id(const char* value, size_t size) {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  room_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.RoomHeartbeatResponse.room_id)
}
inline ::std::string* RoomHeartbeatResponse::mutable_room_id() {
  set_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    room_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.RoomHeartbeatResponse.room_id)
  return room_id_;
}
inline ::std::string* RoomHeartbeatResponse::release_room_id() {
  clear_has_room_id();
  if (room_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = room_id_;
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomHeartbeatResponse::set_allocated_room_id(::std::string* room_id) {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (room_id) {
    set_has_room_id();
    room_id_ = room_id;
  } else {
    clear_has_room_id();
    room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.RoomHeartbeatResponse.room_id)
}

// optional int32 seq = 11;
inline bool RoomHeartbeatResponse::has_seq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomHeartbeatResponse::set_has_seq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomHeartbeatResponse::clear_has_seq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomHeartbeatResponse::clear_seq() {
  seq_ = 0;
  clear_has_seq();
}
inline ::google::protobuf::int32 RoomHeartbeatResponse::seq() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.RoomHeartbeatResponse.seq)
  return seq_;
}
inline void RoomHeartbeatResponse::set_seq(::google::protobuf::int32 value) {
  set_has_seq();
  seq_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.RoomHeartbeatResponse.seq)
}

// -------------------------------------------------------------------

// SetRoomDebugModeRequest

// optional bool skip_room_heart_beat_check = 1;
inline bool SetRoomDebugModeRequest::has_skip_room_heart_beat_check() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetRoomDebugModeRequest::set_has_skip_room_heart_beat_check() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetRoomDebugModeRequest::clear_has_skip_room_heart_beat_check() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetRoomDebugModeRequest::clear_skip_room_heart_beat_check() {
  skip_room_heart_beat_check_ = false;
  clear_has_skip_room_heart_beat_check();
}
inline bool SetRoomDebugModeRequest::skip_room_heart_beat_check() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.SetRoomDebugModeRequest.skip_room_heart_beat_check)
  return skip_room_heart_beat_check_;
}
inline void SetRoomDebugModeRequest::set_skip_room_heart_beat_check(bool value) {
  set_has_skip_room_heart_beat_check();
  skip_room_heart_beat_check_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.SetRoomDebugModeRequest.skip_room_heart_beat_check)
}

// -------------------------------------------------------------------

// SetRoomDebugModeResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool SetRoomDebugModeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetRoomDebugModeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetRoomDebugModeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetRoomDebugModeResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& SetRoomDebugModeResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.SetRoomDebugModeResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* SetRoomDebugModeResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.SetRoomDebugModeResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* SetRoomDebugModeResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void SetRoomDebugModeResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.SetRoomDebugModeResponse.result)
}

// -------------------------------------------------------------------

// ChannelPublishRequest

// required string channel_id = 1;
inline bool ChannelPublishRequest::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelPublishRequest::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelPublishRequest::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelPublishRequest::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& ChannelPublishRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelPublishRequest.channel_id)
  return *channel_id_;
}
inline void ChannelPublishRequest::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ChannelPublishRequest.channel_id)
}
inline void ChannelPublishRequest::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ChannelPublishRequest.channel_id)
}
inline void ChannelPublishRequest::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ChannelPublishRequest.channel_id)
}
inline ::std::string* ChannelPublishRequest::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelPublishRequest.channel_id)
  return channel_id_;
}
inline ::std::string* ChannelPublishRequest::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChannelPublishRequest::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelPublishRequest.channel_id)
}

// -------------------------------------------------------------------

// ChannelPublishResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool ChannelPublishResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelPublishResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelPublishResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelPublishResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& ChannelPublishResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelPublishResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* ChannelPublishResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelPublishResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* ChannelPublishResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void ChannelPublishResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelPublishResponse.result)
}

// optional string channel_id = 2;
inline bool ChannelPublishResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelPublishResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelPublishResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelPublishResponse::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& ChannelPublishResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelPublishResponse.channel_id)
  return *channel_id_;
}
inline void ChannelPublishResponse::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ChannelPublishResponse.channel_id)
}
inline void ChannelPublishResponse::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ChannelPublishResponse.channel_id)
}
inline void ChannelPublishResponse::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ChannelPublishResponse.channel_id)
}
inline ::std::string* ChannelPublishResponse::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelPublishResponse.channel_id)
  return channel_id_;
}
inline ::std::string* ChannelPublishResponse::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChannelPublishResponse::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelPublishResponse.channel_id)
}

// -------------------------------------------------------------------

// ChannelSubscribeRequest

// required string channel_id = 1;
inline bool ChannelSubscribeRequest::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelSubscribeRequest::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelSubscribeRequest::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelSubscribeRequest::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& ChannelSubscribeRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelSubscribeRequest.channel_id)
  return *channel_id_;
}
inline void ChannelSubscribeRequest::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ChannelSubscribeRequest.channel_id)
}
inline void ChannelSubscribeRequest::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ChannelSubscribeRequest.channel_id)
}
inline void ChannelSubscribeRequest::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ChannelSubscribeRequest.channel_id)
}
inline ::std::string* ChannelSubscribeRequest::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelSubscribeRequest.channel_id)
  return channel_id_;
}
inline ::std::string* ChannelSubscribeRequest::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChannelSubscribeRequest::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelSubscribeRequest.channel_id)
}

// -------------------------------------------------------------------

// ChannelSubscribeResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool ChannelSubscribeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelSubscribeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelSubscribeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelSubscribeResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& ChannelSubscribeResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelSubscribeResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* ChannelSubscribeResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelSubscribeResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* ChannelSubscribeResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void ChannelSubscribeResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelSubscribeResponse.result)
}

// optional string channel_id = 2;
inline bool ChannelSubscribeResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelSubscribeResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelSubscribeResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelSubscribeResponse::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& ChannelSubscribeResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelSubscribeResponse.channel_id)
  return *channel_id_;
}
inline void ChannelSubscribeResponse::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ChannelSubscribeResponse.channel_id)
}
inline void ChannelSubscribeResponse::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ChannelSubscribeResponse.channel_id)
}
inline void ChannelSubscribeResponse::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ChannelSubscribeResponse.channel_id)
}
inline ::std::string* ChannelSubscribeResponse::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelSubscribeResponse.channel_id)
  return channel_id_;
}
inline ::std::string* ChannelSubscribeResponse::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChannelSubscribeResponse::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelSubscribeResponse.channel_id)
}

// -------------------------------------------------------------------

// ChannelMessageNotify

// required string channel_id = 1;
inline bool ChannelMessageNotify::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelMessageNotify::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelMessageNotify::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelMessageNotify::clear_channel_id() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_->clear();
  }
  clear_has_channel_id();
}
inline const ::std::string& ChannelMessageNotify::channel_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelMessageNotify.channel_id)
  return *channel_id_;
}
inline void ChannelMessageNotify::set_channel_id(const ::std::string& value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ChannelMessageNotify.channel_id)
}
inline void ChannelMessageNotify::set_channel_id(const char* value) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ChannelMessageNotify.channel_id)
}
inline void ChannelMessageNotify::set_channel_id(const char* value, size_t size) {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ChannelMessageNotify.channel_id)
}
inline ::std::string* ChannelMessageNotify::mutable_channel_id() {
  set_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    channel_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelMessageNotify.channel_id)
  return channel_id_;
}
inline ::std::string* ChannelMessageNotify::release_channel_id() {
  clear_has_channel_id();
  if (channel_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = channel_id_;
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChannelMessageNotify::set_allocated_channel_id(::std::string* channel_id) {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (channel_id) {
    set_has_channel_id();
    channel_id_ = channel_id;
  } else {
    clear_has_channel_id();
    channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelMessageNotify.channel_id)
}

// required string message = 2;
inline bool ChannelMessageNotify::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelMessageNotify::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelMessageNotify::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelMessageNotify::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& ChannelMessageNotify::message() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ChannelMessageNotify.message)
  return *message_;
}
inline void ChannelMessageNotify::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ChannelMessageNotify.message)
}
inline void ChannelMessageNotify::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ChannelMessageNotify.message)
}
inline void ChannelMessageNotify::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ChannelMessageNotify.message)
}
inline ::std::string* ChannelMessageNotify::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ChannelMessageNotify.message)
  return message_;
}
inline ::std::string* ChannelMessageNotify::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChannelMessageNotify::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ChannelMessageNotify.message)
}

// -------------------------------------------------------------------

// WorldJoinRequest

// optional string world_id = 1;
inline bool WorldJoinRequest::has_world_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldJoinRequest::set_has_world_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldJoinRequest::clear_has_world_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldJoinRequest::clear_world_id() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_->clear();
  }
  clear_has_world_id();
}
inline const ::std::string& WorldJoinRequest::world_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.WorldJoinRequest.world_id)
  return *world_id_;
}
inline void WorldJoinRequest::set_world_id(const ::std::string& value) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.WorldJoinRequest.world_id)
}
inline void WorldJoinRequest::set_world_id(const char* value) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.WorldJoinRequest.world_id)
}
inline void WorldJoinRequest::set_world_id(const char* value, size_t size) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.WorldJoinRequest.world_id)
}
inline ::std::string* WorldJoinRequest::mutable_world_id() {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.WorldJoinRequest.world_id)
  return world_id_;
}
inline ::std::string* WorldJoinRequest::release_world_id() {
  clear_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = world_id_;
    world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldJoinRequest::set_allocated_world_id(::std::string* world_id) {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (world_id) {
    set_has_world_id();
    world_id_ = world_id;
  } else {
    clear_has_world_id();
    world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.WorldJoinRequest.world_id)
}

// -------------------------------------------------------------------

// WorldJoinResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool WorldJoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldJoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldJoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldJoinResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& WorldJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.WorldJoinResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* WorldJoinResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.WorldJoinResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* WorldJoinResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void WorldJoinResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.WorldJoinResponse.result)
}

// optional string world_id = 10;
inline bool WorldJoinResponse::has_world_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldJoinResponse::set_has_world_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldJoinResponse::clear_has_world_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldJoinResponse::clear_world_id() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_->clear();
  }
  clear_has_world_id();
}
inline const ::std::string& WorldJoinResponse::world_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.WorldJoinResponse.world_id)
  return *world_id_;
}
inline void WorldJoinResponse::set_world_id(const ::std::string& value) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.WorldJoinResponse.world_id)
}
inline void WorldJoinResponse::set_world_id(const char* value) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.WorldJoinResponse.world_id)
}
inline void WorldJoinResponse::set_world_id(const char* value, size_t size) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.WorldJoinResponse.world_id)
}
inline ::std::string* WorldJoinResponse::mutable_world_id() {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.WorldJoinResponse.world_id)
  return world_id_;
}
inline ::std::string* WorldJoinResponse::release_world_id() {
  clear_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = world_id_;
    world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldJoinResponse::set_allocated_world_id(::std::string* world_id) {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (world_id) {
    set_has_world_id();
    world_id_ = world_id;
  } else {
    clear_has_world_id();
    world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.WorldJoinResponse.world_id)
}

// -------------------------------------------------------------------

// WorldLeaveRequest

// optional string world_id = 1;
inline bool WorldLeaveRequest::has_world_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldLeaveRequest::set_has_world_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldLeaveRequest::clear_has_world_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldLeaveRequest::clear_world_id() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_->clear();
  }
  clear_has_world_id();
}
inline const ::std::string& WorldLeaveRequest::world_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.WorldLeaveRequest.world_id)
  return *world_id_;
}
inline void WorldLeaveRequest::set_world_id(const ::std::string& value) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.WorldLeaveRequest.world_id)
}
inline void WorldLeaveRequest::set_world_id(const char* value) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.WorldLeaveRequest.world_id)
}
inline void WorldLeaveRequest::set_world_id(const char* value, size_t size) {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  world_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.WorldLeaveRequest.world_id)
}
inline ::std::string* WorldLeaveRequest::mutable_world_id() {
  set_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    world_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.WorldLeaveRequest.world_id)
  return world_id_;
}
inline ::std::string* WorldLeaveRequest::release_world_id() {
  clear_has_world_id();
  if (world_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = world_id_;
    world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldLeaveRequest::set_allocated_world_id(::std::string* world_id) {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (world_id) {
    set_has_world_id();
    world_id_ = world_id;
  } else {
    clear_has_world_id();
    world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.WorldLeaveRequest.world_id)
}

// -------------------------------------------------------------------

// WorldLeaveResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool WorldLeaveResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldLeaveResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldLeaveResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldLeaveResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& WorldLeaveResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.WorldLeaveResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* WorldLeaveResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.WorldLeaveResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* WorldLeaveResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void WorldLeaveResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.WorldLeaveResponse.result)
}

// repeated string world_id_list = 2;
inline int WorldLeaveResponse::world_id_list_size() const {
  return world_id_list_.size();
}
inline void WorldLeaveResponse::clear_world_id_list() {
  world_id_list_.Clear();
}
inline const ::std::string& WorldLeaveResponse::world_id_list(int index) const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.WorldLeaveResponse.world_id_list)
  return world_id_list_.Get(index);
}
inline ::std::string* WorldLeaveResponse::mutable_world_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.WorldLeaveResponse.world_id_list)
  return world_id_list_.Mutable(index);
}
inline void WorldLeaveResponse::set_world_id_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:b2.protocol.channel.WorldLeaveResponse.world_id_list)
  world_id_list_.Mutable(index)->assign(value);
}
inline void WorldLeaveResponse::set_world_id_list(int index, const char* value) {
  world_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.WorldLeaveResponse.world_id_list)
}
inline void WorldLeaveResponse::set_world_id_list(int index, const char* value, size_t size) {
  world_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.WorldLeaveResponse.world_id_list)
}
inline ::std::string* WorldLeaveResponse::add_world_id_list() {
  return world_id_list_.Add();
}
inline void WorldLeaveResponse::add_world_id_list(const ::std::string& value) {
  world_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:b2.protocol.channel.WorldLeaveResponse.world_id_list)
}
inline void WorldLeaveResponse::add_world_id_list(const char* value) {
  world_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:b2.protocol.channel.WorldLeaveResponse.world_id_list)
}
inline void WorldLeaveResponse::add_world_id_list(const char* value, size_t size) {
  world_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:b2.protocol.channel.WorldLeaveResponse.world_id_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WorldLeaveResponse::world_id_list() const {
  // @@protoc_insertion_point(field_list:b2.protocol.channel.WorldLeaveResponse.world_id_list)
  return world_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WorldLeaveResponse::mutable_world_id_list() {
  // @@protoc_insertion_point(field_mutable_list:b2.protocol.channel.WorldLeaveResponse.world_id_list)
  return &world_id_list_;
}

// -------------------------------------------------------------------

// ReportUserViaChannelRequest

// required int64 target_account_id = 1;
inline bool ReportUserViaChannelRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportUserViaChannelRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportUserViaChannelRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportUserViaChannelRequest::clear_target_account_id() {
  target_account_id_ = GOOGLE_LONGLONG(0);
  clear_has_target_account_id();
}
inline ::google::protobuf::int64 ReportUserViaChannelRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ReportUserViaChannelRequest.target_account_id)
  return target_account_id_;
}
inline void ReportUserViaChannelRequest::set_target_account_id(::google::protobuf::int64 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ReportUserViaChannelRequest.target_account_id)
}

// required .b2.protocol.commondata.ReportModeType mode_type = 2;
inline bool ReportUserViaChannelRequest::has_mode_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReportUserViaChannelRequest::set_has_mode_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReportUserViaChannelRequest::clear_has_mode_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReportUserViaChannelRequest::clear_mode_type() {
  mode_type_ = 1;
  clear_has_mode_type();
}
inline ::b2::protocol::commondata::ReportModeType ReportUserViaChannelRequest::mode_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ReportUserViaChannelRequest.mode_type)
  return static_cast< ::b2::protocol::commondata::ReportModeType >(mode_type_);
}
inline void ReportUserViaChannelRequest::set_mode_type(::b2::protocol::commondata::ReportModeType value) {
  assert(::b2::protocol::commondata::ReportModeType_IsValid(value));
  set_has_mode_type();
  mode_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ReportUserViaChannelRequest.mode_type)
}

// required int32 reason_type = 3;
inline bool ReportUserViaChannelRequest::has_reason_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReportUserViaChannelRequest::set_has_reason_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReportUserViaChannelRequest::clear_has_reason_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReportUserViaChannelRequest::clear_reason_type() {
  reason_type_ = 0;
  clear_has_reason_type();
}
inline ::google::protobuf::int32 ReportUserViaChannelRequest::reason_type() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ReportUserViaChannelRequest.reason_type)
  return reason_type_;
}
inline void ReportUserViaChannelRequest::set_reason_type(::google::protobuf::int32 value) {
  set_has_reason_type();
  reason_type_ = value;
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ReportUserViaChannelRequest.reason_type)
}

// optional string explain = 4;
inline bool ReportUserViaChannelRequest::has_explain() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReportUserViaChannelRequest::set_has_explain() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReportUserViaChannelRequest::clear_has_explain() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReportUserViaChannelRequest::clear_explain() {
  if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explain_->clear();
  }
  clear_has_explain();
}
inline const ::std::string& ReportUserViaChannelRequest::explain() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ReportUserViaChannelRequest.explain)
  return *explain_;
}
inline void ReportUserViaChannelRequest::set_explain(const ::std::string& value) {
  set_has_explain();
  if (explain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explain_ = new ::std::string;
  }
  explain_->assign(value);
  // @@protoc_insertion_point(field_set:b2.protocol.channel.ReportUserViaChannelRequest.explain)
}
inline void ReportUserViaChannelRequest::set_explain(const char* value) {
  set_has_explain();
  if (explain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explain_ = new ::std::string;
  }
  explain_->assign(value);
  // @@protoc_insertion_point(field_set_char:b2.protocol.channel.ReportUserViaChannelRequest.explain)
}
inline void ReportUserViaChannelRequest::set_explain(const char* value, size_t size) {
  set_has_explain();
  if (explain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explain_ = new ::std::string;
  }
  explain_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:b2.protocol.channel.ReportUserViaChannelRequest.explain)
}
inline ::std::string* ReportUserViaChannelRequest::mutable_explain() {
  set_has_explain();
  if (explain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    explain_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ReportUserViaChannelRequest.explain)
  return explain_;
}
inline ::std::string* ReportUserViaChannelRequest::release_explain() {
  clear_has_explain();
  if (explain_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = explain_;
    explain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReportUserViaChannelRequest::set_allocated_explain(::std::string* explain) {
  if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explain_;
  }
  if (explain) {
    set_has_explain();
    explain_ = explain;
  } else {
    clear_has_explain();
    explain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ReportUserViaChannelRequest.explain)
}

// -------------------------------------------------------------------

// ReportUserViaChannelResponse

// required .b2.protocol.commondata.Result result = 1;
inline bool ReportUserViaChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReportUserViaChannelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReportUserViaChannelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReportUserViaChannelResponse::clear_result() {
  if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  clear_has_result();
}
inline const ::b2::protocol::commondata::Result& ReportUserViaChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:b2.protocol.channel.ReportUserViaChannelResponse.result)
  return result_ != NULL ? *result_ : *default_instance_->result_;
}
inline ::b2::protocol::commondata::Result* ReportUserViaChannelResponse::mutable_result() {
  set_has_result();
  if (result_ == NULL) result_ = new ::b2::protocol::commondata::Result;
  // @@protoc_insertion_point(field_mutable:b2.protocol.channel.ReportUserViaChannelResponse.result)
  return result_;
}
inline ::b2::protocol::commondata::Result* ReportUserViaChannelResponse::release_result() {
  clear_has_result();
  ::b2::protocol::commondata::Result* temp = result_;
  result_ = NULL;
  return temp;
}
inline void ReportUserViaChannelResponse::set_allocated_result(::b2::protocol::commondata::Result* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:b2.protocol.channel.ReportUserViaChannelResponse.result)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace protocol
}  // namespace b2

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::b2::protocol::channel::RoomType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::b2::protocol::channel::RoomType>() {
  return ::b2::protocol::channel::RoomType_descriptor();
}
template <> struct is_proto_enum< ::b2::protocol::channel::RoomCloseReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::b2::protocol::channel::RoomCloseReason>() {
  return ::b2::protocol::channel::RoomCloseReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChannelProtocol_2eproto__INCLUDED
