// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChannelProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChannelProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

#pragma warning(disable:4125)


namespace b2 {
namespace protocol {
namespace channel {

namespace {

const ::google::protobuf::Descriptor* HelloChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HelloChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HelloChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignInChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignInChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignInChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignInChannelResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomParticipant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomParticipant_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomJoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomJoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomJoinResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomJoinResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomLeaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomLeaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomLeaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomLeaveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomCloseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCloseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomCloseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCloseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomAccessControlRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomAccessControlRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomAccessControlResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomAccessControlResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMessageCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMessageCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomCreateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomCreateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomDeleteNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDeleteNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomParticipantJoinNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomParticipantJoinNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomParticipantLeaveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomParticipantLeaveNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomHostChangedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomHostChangedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomSetPropertyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomSetPropertyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomSetPropertyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomSetPropertyResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomPropertyUpdatedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomPropertyUpdatedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInviteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInviteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomInviteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomInviteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomKickRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomKickRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomKickResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomKickResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomLeaveResultRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomLeaveResultRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomLeaveResultResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomLeaveResultResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomHeartbeatCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomHeartbeatCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomHeartbeatNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomHeartbeatNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomHeartbeatRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomHeartbeatRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomHeartbeatResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomHeartbeatResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRoomDebugModeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRoomDebugModeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRoomDebugModeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRoomDebugModeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelPublishRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelPublishRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelPublishResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelPublishResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelSubscribeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelSubscribeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelSubscribeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelSubscribeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelMessageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldJoinRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldJoinRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldJoinResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldJoinResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldLeaveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldLeaveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldLeaveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldLeaveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportUserViaChannelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportUserViaChannelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportUserViaChannelResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportUserViaChannelResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomCloseReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChannelProtocol_2eproto() {
  protobuf_AddDesc_ChannelProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChannelProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  HelloChannelRequest_descriptor_ = file->message_type(0);
  static const int HelloChannelRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelRequest, client_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelRequest, client_public_key_),
  };
  HelloChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloChannelRequest_descriptor_,
      HelloChannelRequest::default_instance_,
      HelloChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloChannelRequest));
  HelloChannelResponse_descriptor_ = file->message_type(1);
  static const int HelloChannelResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelResponse, server_public_key_),
  };
  HelloChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HelloChannelResponse_descriptor_,
      HelloChannelResponse::default_instance_,
      HelloChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HelloChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HelloChannelResponse));
  SignInChannelRequest_descriptor_ = file->message_type(2);
  static const int SignInChannelRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelRequest, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelRequest, session_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelRequest, client_cl_),
  };
  SignInChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignInChannelRequest_descriptor_,
      SignInChannelRequest::default_instance_,
      SignInChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignInChannelRequest));
  SignInChannelResponse_descriptor_ = file->message_type(3);
  static const int SignInChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelResponse, result_),
  };
  SignInChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignInChannelResponse_descriptor_,
      SignInChannelResponse::default_instance_,
      SignInChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignInChannelResponse));
  RoomParticipant_descriptor_ = file->message_type(4);
  static const int RoomParticipant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipant, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipant, account_info_),
  };
  RoomParticipant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomParticipant_descriptor_,
      RoomParticipant::default_instance_,
      RoomParticipant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomParticipant));
  RoomProperty_descriptor_ = file->message_type(5);
  static const int RoomProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProperty, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProperty, value_),
  };
  RoomProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomProperty_descriptor_,
      RoomProperty::default_instance_,
      RoomProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomProperty));
  RoomJoinRequest_descriptor_ = file->message_type(6);
  static const int RoomJoinRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, room_access_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, room_characters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, character_presets_),
  };
  RoomJoinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomJoinRequest_descriptor_,
      RoomJoinRequest::default_instance_,
      RoomJoinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomJoinRequest));
  RoomJoinResponse_descriptor_ = file->message_type(7);
  static const int RoomJoinResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, participants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, properties_),
  };
  RoomJoinResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomJoinResponse_descriptor_,
      RoomJoinResponse::default_instance_,
      RoomJoinResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomJoinResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomJoinResponse));
  RoomLeaveRequest_descriptor_ = file->message_type(8);
  static const int RoomLeaveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveRequest, room_id_),
  };
  RoomLeaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomLeaveRequest_descriptor_,
      RoomLeaveRequest::default_instance_,
      RoomLeaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomLeaveRequest));
  RoomLeaveResponse_descriptor_ = file->message_type(9);
  static const int RoomLeaveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResponse, room_id_list_),
  };
  RoomLeaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomLeaveResponse_descriptor_,
      RoomLeaveResponse::default_instance_,
      RoomLeaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomLeaveResponse));
  RoomCloseRequest_descriptor_ = file->message_type(10);
  static const int RoomCloseRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseRequest, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseRequest, reason_),
  };
  RoomCloseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomCloseRequest_descriptor_,
      RoomCloseRequest::default_instance_,
      RoomCloseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomCloseRequest));
  RoomCloseResponse_descriptor_ = file->message_type(11);
  static const int RoomCloseResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseResponse, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseResponse, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseResponse, token_),
  };
  RoomCloseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomCloseResponse_descriptor_,
      RoomCloseResponse::default_instance_,
      RoomCloseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCloseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomCloseResponse));
  RoomAccessControlRequest_descriptor_ = file->message_type(12);
  static const int RoomAccessControlRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlRequest, access_),
  };
  RoomAccessControlRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomAccessControlRequest_descriptor_,
      RoomAccessControlRequest::default_instance_,
      RoomAccessControlRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomAccessControlRequest));
  RoomAccessControlResponse_descriptor_ = file->message_type(13);
  static const int RoomAccessControlResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlResponse, result_),
  };
  RoomAccessControlResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomAccessControlResponse_descriptor_,
      RoomAccessControlResponse::default_instance_,
      RoomAccessControlResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomAccessControlResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomAccessControlResponse));
  RoomMessageCommand_descriptor_ = file->message_type(14);
  static const int RoomMessageCommand_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageCommand, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageCommand, receiver_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageCommand, message_),
  };
  RoomMessageCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMessageCommand_descriptor_,
      RoomMessageCommand::default_instance_,
      RoomMessageCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMessageCommand));
  RoomCreateNotify_descriptor_ = file->message_type(15);
  static const int RoomCreateNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCreateNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCreateNotify, room_type_),
  };
  RoomCreateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomCreateNotify_descriptor_,
      RoomCreateNotify::default_instance_,
      RoomCreateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCreateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomCreateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomCreateNotify));
  RoomDeleteNotify_descriptor_ = file->message_type(16);
  static const int RoomDeleteNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDeleteNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDeleteNotify, room_type_),
  };
  RoomDeleteNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomDeleteNotify_descriptor_,
      RoomDeleteNotify::default_instance_,
      RoomDeleteNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDeleteNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDeleteNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomDeleteNotify));
  RoomParticipantJoinNotify_descriptor_ = file->message_type(17);
  static const int RoomParticipantJoinNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantJoinNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantJoinNotify, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantJoinNotify, joiner_),
  };
  RoomParticipantJoinNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomParticipantJoinNotify_descriptor_,
      RoomParticipantJoinNotify::default_instance_,
      RoomParticipantJoinNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantJoinNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantJoinNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomParticipantJoinNotify));
  RoomParticipantLeaveNotify_descriptor_ = file->message_type(18);
  static const int RoomParticipantLeaveNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantLeaveNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantLeaveNotify, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantLeaveNotify, leaver_),
  };
  RoomParticipantLeaveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomParticipantLeaveNotify_descriptor_,
      RoomParticipantLeaveNotify::default_instance_,
      RoomParticipantLeaveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantLeaveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomParticipantLeaveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomParticipantLeaveNotify));
  RoomHostChangedNotify_descriptor_ = file->message_type(19);
  static const int RoomHostChangedNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHostChangedNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHostChangedNotify, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHostChangedNotify, host_id_),
  };
  RoomHostChangedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomHostChangedNotify_descriptor_,
      RoomHostChangedNotify::default_instance_,
      RoomHostChangedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHostChangedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHostChangedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomHostChangedNotify));
  RoomMessageNotify_descriptor_ = file->message_type(20);
  static const int RoomMessageNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageNotify, room_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageNotify, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageNotify, message_),
  };
  RoomMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMessageNotify_descriptor_,
      RoomMessageNotify::default_instance_,
      RoomMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMessageNotify));
  RoomSetPropertyRequest_descriptor_ = file->message_type(21);
  static const int RoomSetPropertyRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyRequest, properties_),
  };
  RoomSetPropertyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomSetPropertyRequest_descriptor_,
      RoomSetPropertyRequest::default_instance_,
      RoomSetPropertyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomSetPropertyRequest));
  RoomSetPropertyResponse_descriptor_ = file->message_type(22);
  static const int RoomSetPropertyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyResponse, result_),
  };
  RoomSetPropertyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomSetPropertyResponse_descriptor_,
      RoomSetPropertyResponse::default_instance_,
      RoomSetPropertyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomSetPropertyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomSetPropertyResponse));
  RoomPropertyUpdatedNotify_descriptor_ = file->message_type(23);
  static const int RoomPropertyUpdatedNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPropertyUpdatedNotify, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPropertyUpdatedNotify, properties_),
  };
  RoomPropertyUpdatedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomPropertyUpdatedNotify_descriptor_,
      RoomPropertyUpdatedNotify::default_instance_,
      RoomPropertyUpdatedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPropertyUpdatedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomPropertyUpdatedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomPropertyUpdatedNotify));
  RoomInviteRequest_descriptor_ = file->message_type(24);
  static const int RoomInviteRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, invitee_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, invitation_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, difficulty_),
  };
  RoomInviteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInviteRequest_descriptor_,
      RoomInviteRequest::default_instance_,
      RoomInviteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInviteRequest));
  RoomInviteResponse_descriptor_ = file->message_type(25);
  static const int RoomInviteResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteResponse, result_),
  };
  RoomInviteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomInviteResponse_descriptor_,
      RoomInviteResponse::default_instance_,
      RoomInviteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomInviteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomInviteResponse));
  RoomKickRequest_descriptor_ = file->message_type(26);
  static const int RoomKickRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickRequest, kick_account_id_),
  };
  RoomKickRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomKickRequest_descriptor_,
      RoomKickRequest::default_instance_,
      RoomKickRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomKickRequest));
  RoomKickResponse_descriptor_ = file->message_type(27);
  static const int RoomKickResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickResponse, kicked_account_id_),
  };
  RoomKickResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomKickResponse_descriptor_,
      RoomKickResponse::default_instance_,
      RoomKickResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomKickResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomKickResponse));
  RoomLeaveResultRequest_descriptor_ = file->message_type(28);
  static const int RoomLeaveResultRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultRequest, leaved_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultRequest, match_token_),
  };
  RoomLeaveResultRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomLeaveResultRequest_descriptor_,
      RoomLeaveResultRequest::default_instance_,
      RoomLeaveResultRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomLeaveResultRequest));
  RoomLeaveResultResponse_descriptor_ = file->message_type(29);
  static const int RoomLeaveResultResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultResponse, result_),
  };
  RoomLeaveResultResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomLeaveResultResponse_descriptor_,
      RoomLeaveResultResponse::default_instance_,
      RoomLeaveResultResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomLeaveResultResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomLeaveResultResponse));
  RoomHeartbeatCommand_descriptor_ = file->message_type(30);
  static const int RoomHeartbeatCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatCommand, room_id_),
  };
  RoomHeartbeatCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomHeartbeatCommand_descriptor_,
      RoomHeartbeatCommand::default_instance_,
      RoomHeartbeatCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomHeartbeatCommand));
  RoomHeartbeatNotify_descriptor_ = file->message_type(31);
  static const int RoomHeartbeatNotify_offsets_[1] = {
  };
  RoomHeartbeatNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomHeartbeatNotify_descriptor_,
      RoomHeartbeatNotify::default_instance_,
      RoomHeartbeatNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomHeartbeatNotify));
  RoomHeartbeatRequest_descriptor_ = file->message_type(32);
  static const int RoomHeartbeatRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatRequest, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatRequest, seq_),
  };
  RoomHeartbeatRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomHeartbeatRequest_descriptor_,
      RoomHeartbeatRequest::default_instance_,
      RoomHeartbeatRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomHeartbeatRequest));
  RoomHeartbeatResponse_descriptor_ = file->message_type(33);
  static const int RoomHeartbeatResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatResponse, room_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatResponse, seq_),
  };
  RoomHeartbeatResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomHeartbeatResponse_descriptor_,
      RoomHeartbeatResponse::default_instance_,
      RoomHeartbeatResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomHeartbeatResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomHeartbeatResponse));
  SetRoomDebugModeRequest_descriptor_ = file->message_type(34);
  static const int SetRoomDebugModeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoomDebugModeRequest, skip_room_heart_beat_check_),
  };
  SetRoomDebugModeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRoomDebugModeRequest_descriptor_,
      SetRoomDebugModeRequest::default_instance_,
      SetRoomDebugModeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoomDebugModeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoomDebugModeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRoomDebugModeRequest));
  SetRoomDebugModeResponse_descriptor_ = file->message_type(35);
  static const int SetRoomDebugModeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoomDebugModeResponse, result_),
  };
  SetRoomDebugModeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetRoomDebugModeResponse_descriptor_,
      SetRoomDebugModeResponse::default_instance_,
      SetRoomDebugModeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoomDebugModeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRoomDebugModeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetRoomDebugModeResponse));
  ChannelPublishRequest_descriptor_ = file->message_type(36);
  static const int ChannelPublishRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishRequest, channel_id_),
  };
  ChannelPublishRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelPublishRequest_descriptor_,
      ChannelPublishRequest::default_instance_,
      ChannelPublishRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelPublishRequest));
  ChannelPublishResponse_descriptor_ = file->message_type(37);
  static const int ChannelPublishResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishResponse, channel_id_),
  };
  ChannelPublishResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelPublishResponse_descriptor_,
      ChannelPublishResponse::default_instance_,
      ChannelPublishResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelPublishResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelPublishResponse));
  ChannelSubscribeRequest_descriptor_ = file->message_type(38);
  static const int ChannelSubscribeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeRequest, channel_id_),
  };
  ChannelSubscribeRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelSubscribeRequest_descriptor_,
      ChannelSubscribeRequest::default_instance_,
      ChannelSubscribeRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelSubscribeRequest));
  ChannelSubscribeResponse_descriptor_ = file->message_type(39);
  static const int ChannelSubscribeResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeResponse, channel_id_),
  };
  ChannelSubscribeResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelSubscribeResponse_descriptor_,
      ChannelSubscribeResponse::default_instance_,
      ChannelSubscribeResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelSubscribeResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelSubscribeResponse));
  ChannelMessageNotify_descriptor_ = file->message_type(40);
  static const int ChannelMessageNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMessageNotify, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMessageNotify, message_),
  };
  ChannelMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelMessageNotify_descriptor_,
      ChannelMessageNotify::default_instance_,
      ChannelMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelMessageNotify));
  WorldJoinRequest_descriptor_ = file->message_type(41);
  static const int WorldJoinRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinRequest, world_id_),
  };
  WorldJoinRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldJoinRequest_descriptor_,
      WorldJoinRequest::default_instance_,
      WorldJoinRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldJoinRequest));
  WorldJoinResponse_descriptor_ = file->message_type(42);
  static const int WorldJoinResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinResponse, world_id_),
  };
  WorldJoinResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldJoinResponse_descriptor_,
      WorldJoinResponse::default_instance_,
      WorldJoinResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldJoinResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldJoinResponse));
  WorldLeaveRequest_descriptor_ = file->message_type(43);
  static const int WorldLeaveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveRequest, world_id_),
  };
  WorldLeaveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldLeaveRequest_descriptor_,
      WorldLeaveRequest::default_instance_,
      WorldLeaveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldLeaveRequest));
  WorldLeaveResponse_descriptor_ = file->message_type(44);
  static const int WorldLeaveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveResponse, world_id_list_),
  };
  WorldLeaveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldLeaveResponse_descriptor_,
      WorldLeaveResponse::default_instance_,
      WorldLeaveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLeaveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldLeaveResponse));
  ReportUserViaChannelRequest_descriptor_ = file->message_type(45);
  static const int ReportUserViaChannelRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelRequest, target_account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelRequest, mode_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelRequest, reason_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelRequest, explain_),
  };
  ReportUserViaChannelRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportUserViaChannelRequest_descriptor_,
      ReportUserViaChannelRequest::default_instance_,
      ReportUserViaChannelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportUserViaChannelRequest));
  ReportUserViaChannelResponse_descriptor_ = file->message_type(46);
  static const int ReportUserViaChannelResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelResponse, result_),
  };
  ReportUserViaChannelResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportUserViaChannelResponse_descriptor_,
      ReportUserViaChannelResponse::default_instance_,
      ReportUserViaChannelResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportUserViaChannelResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportUserViaChannelResponse));
  RoomType_descriptor_ = file->enum_type(0);
  RoomCloseReason_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChannelProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloChannelRequest_descriptor_, &HelloChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HelloChannelResponse_descriptor_, &HelloChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignInChannelRequest_descriptor_, &SignInChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignInChannelResponse_descriptor_, &SignInChannelResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomParticipant_descriptor_, &RoomParticipant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomProperty_descriptor_, &RoomProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomJoinRequest_descriptor_, &RoomJoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomJoinResponse_descriptor_, &RoomJoinResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomLeaveRequest_descriptor_, &RoomLeaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomLeaveResponse_descriptor_, &RoomLeaveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomCloseRequest_descriptor_, &RoomCloseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomCloseResponse_descriptor_, &RoomCloseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomAccessControlRequest_descriptor_, &RoomAccessControlRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomAccessControlResponse_descriptor_, &RoomAccessControlResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMessageCommand_descriptor_, &RoomMessageCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomCreateNotify_descriptor_, &RoomCreateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomDeleteNotify_descriptor_, &RoomDeleteNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomParticipantJoinNotify_descriptor_, &RoomParticipantJoinNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomParticipantLeaveNotify_descriptor_, &RoomParticipantLeaveNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomHostChangedNotify_descriptor_, &RoomHostChangedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMessageNotify_descriptor_, &RoomMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomSetPropertyRequest_descriptor_, &RoomSetPropertyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomSetPropertyResponse_descriptor_, &RoomSetPropertyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomPropertyUpdatedNotify_descriptor_, &RoomPropertyUpdatedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInviteRequest_descriptor_, &RoomInviteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomInviteResponse_descriptor_, &RoomInviteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomKickRequest_descriptor_, &RoomKickRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomKickResponse_descriptor_, &RoomKickResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomLeaveResultRequest_descriptor_, &RoomLeaveResultRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomLeaveResultResponse_descriptor_, &RoomLeaveResultResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomHeartbeatCommand_descriptor_, &RoomHeartbeatCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomHeartbeatNotify_descriptor_, &RoomHeartbeatNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomHeartbeatRequest_descriptor_, &RoomHeartbeatRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomHeartbeatResponse_descriptor_, &RoomHeartbeatResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRoomDebugModeRequest_descriptor_, &SetRoomDebugModeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetRoomDebugModeResponse_descriptor_, &SetRoomDebugModeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelPublishRequest_descriptor_, &ChannelPublishRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelPublishResponse_descriptor_, &ChannelPublishResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelSubscribeRequest_descriptor_, &ChannelSubscribeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelSubscribeResponse_descriptor_, &ChannelSubscribeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelMessageNotify_descriptor_, &ChannelMessageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldJoinRequest_descriptor_, &WorldJoinRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldJoinResponse_descriptor_, &WorldJoinResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldLeaveRequest_descriptor_, &WorldLeaveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldLeaveResponse_descriptor_, &WorldLeaveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportUserViaChannelRequest_descriptor_, &ReportUserViaChannelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportUserViaChannelResponse_descriptor_, &ReportUserViaChannelResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChannelProtocol_2eproto() {
  delete HelloChannelRequest::default_instance_;
  delete HelloChannelRequest_reflection_;
  delete HelloChannelResponse::default_instance_;
  delete HelloChannelResponse_reflection_;
  delete SignInChannelRequest::default_instance_;
  delete SignInChannelRequest_reflection_;
  delete SignInChannelResponse::default_instance_;
  delete SignInChannelResponse_reflection_;
  delete RoomParticipant::default_instance_;
  delete RoomParticipant_reflection_;
  delete RoomProperty::default_instance_;
  delete RoomProperty_reflection_;
  delete RoomJoinRequest::default_instance_;
  delete RoomJoinRequest_reflection_;
  delete RoomJoinResponse::default_instance_;
  delete RoomJoinResponse_reflection_;
  delete RoomLeaveRequest::default_instance_;
  delete RoomLeaveRequest_reflection_;
  delete RoomLeaveResponse::default_instance_;
  delete RoomLeaveResponse_reflection_;
  delete RoomCloseRequest::default_instance_;
  delete RoomCloseRequest_reflection_;
  delete RoomCloseResponse::default_instance_;
  delete RoomCloseResponse_reflection_;
  delete RoomAccessControlRequest::default_instance_;
  delete RoomAccessControlRequest_reflection_;
  delete RoomAccessControlResponse::default_instance_;
  delete RoomAccessControlResponse_reflection_;
  delete RoomMessageCommand::default_instance_;
  delete RoomMessageCommand_reflection_;
  delete RoomCreateNotify::default_instance_;
  delete RoomCreateNotify_reflection_;
  delete RoomDeleteNotify::default_instance_;
  delete RoomDeleteNotify_reflection_;
  delete RoomParticipantJoinNotify::default_instance_;
  delete RoomParticipantJoinNotify_reflection_;
  delete RoomParticipantLeaveNotify::default_instance_;
  delete RoomParticipantLeaveNotify_reflection_;
  delete RoomHostChangedNotify::default_instance_;
  delete RoomHostChangedNotify_reflection_;
  delete RoomMessageNotify::default_instance_;
  delete RoomMessageNotify_reflection_;
  delete RoomSetPropertyRequest::default_instance_;
  delete RoomSetPropertyRequest_reflection_;
  delete RoomSetPropertyResponse::default_instance_;
  delete RoomSetPropertyResponse_reflection_;
  delete RoomPropertyUpdatedNotify::default_instance_;
  delete RoomPropertyUpdatedNotify_reflection_;
  delete RoomInviteRequest::default_instance_;
  delete RoomInviteRequest_reflection_;
  delete RoomInviteResponse::default_instance_;
  delete RoomInviteResponse_reflection_;
  delete RoomKickRequest::default_instance_;
  delete RoomKickRequest_reflection_;
  delete RoomKickResponse::default_instance_;
  delete RoomKickResponse_reflection_;
  delete RoomLeaveResultRequest::default_instance_;
  delete RoomLeaveResultRequest_reflection_;
  delete RoomLeaveResultResponse::default_instance_;
  delete RoomLeaveResultResponse_reflection_;
  delete RoomHeartbeatCommand::default_instance_;
  delete RoomHeartbeatCommand_reflection_;
  delete RoomHeartbeatNotify::default_instance_;
  delete RoomHeartbeatNotify_reflection_;
  delete RoomHeartbeatRequest::default_instance_;
  delete RoomHeartbeatRequest_reflection_;
  delete RoomHeartbeatResponse::default_instance_;
  delete RoomHeartbeatResponse_reflection_;
  delete SetRoomDebugModeRequest::default_instance_;
  delete SetRoomDebugModeRequest_reflection_;
  delete SetRoomDebugModeResponse::default_instance_;
  delete SetRoomDebugModeResponse_reflection_;
  delete ChannelPublishRequest::default_instance_;
  delete ChannelPublishRequest_reflection_;
  delete ChannelPublishResponse::default_instance_;
  delete ChannelPublishResponse_reflection_;
  delete ChannelSubscribeRequest::default_instance_;
  delete ChannelSubscribeRequest_reflection_;
  delete ChannelSubscribeResponse::default_instance_;
  delete ChannelSubscribeResponse_reflection_;
  delete ChannelMessageNotify::default_instance_;
  delete ChannelMessageNotify_reflection_;
  delete WorldJoinRequest::default_instance_;
  delete WorldJoinRequest_reflection_;
  delete WorldJoinResponse::default_instance_;
  delete WorldJoinResponse_reflection_;
  delete WorldLeaveRequest::default_instance_;
  delete WorldLeaveRequest_reflection_;
  delete WorldLeaveResponse::default_instance_;
  delete WorldLeaveResponse_reflection_;
  delete ReportUserViaChannelRequest::default_instance_;
  delete ReportUserViaChannelRequest_reflection_;
  delete ReportUserViaChannelResponse::default_instance_;
  delete ReportUserViaChannelResponse_reflection_;
}

void protobuf_AddDesc_ChannelProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::b2::protocol::commondata::protobuf_AddDesc_CommonData_2eproto();
  static const char descriptor[] = {
      "\n\025ChannelProtocol.proto\022\023b2.protocol.cha"
      "nnel\032\020CommonData.proto\"k\n\023HelloChannelRe"
      "quest\0229\n\017client_protocol\030\n \002(\0132 .b2.prot"
      "ocol.commondata.Protocol\022\031\n\021client_publi"
      "c_key\030\024 \002(\t\"a\n\024HelloChannelResponse\022.\n\006r"
      "esult\030\001 \002(\0132\036.b2.protocol.commondata.Res"
      "ult\022\031\n\021server_public_key\030\n \001(\t\"T\n\024SignIn"
      "ChannelRequest\022\022\n\naccount_id\030\001 \002(\003\022\025\n\rse"
      "ssion_token\030\002 \002(\t\022\021\n\tclient_cl\030\n \001(\t\"G\n\025"
      "SignInChannelResponse\022.\n\006result\030\001 \002(\0132\036."
      "b2.protocol.commondata.Result\"l\n\017RoomPar"
      "ticipant\022\n\n\002id\030\001 \002(\005\022\022\n\naccount_id\030\002 \001(\003"
      "\0229\n\014account_info\030\003 \001(\0132#.b2.protocol.com"
      "mondata.AccountInfo\"*\n\014RoomProperty\022\013\n\003k"
      "ey\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\303\002\n\017RoomJoinRequ"
      "est\022\017\n\007room_id\030\001 \001(\t\0220\n\troom_type\030\002 \001(\0162"
      "\035.b2.protocol.channel.RoomType\0228\n\013room_a"
      "ccess\030\003 \001(\0162#.b2.protocol.commondata.Roo"
      "m.ACCESS\0225\n\nproperties\030\004 \003(\0132!.b2.protoc"
      "ol.channel.RoomProperty\022>\n\017room_characte"
      "rs\030\005 \003(\0132%.b2.protocol.commondata.RoomCh"
      "aracter\022<\n\021character_presets\030\006 \003(\0132!.b2."
      "protocol.commondata.PresetNum\"\254\002\n\020RoomJo"
      "inResponse\022.\n\006result\030\001 \002(\0132\036.b2.protocol"
      ".commondata.Result\022\017\n\007room_id\030\n \001(\t\0220\n\tr"
      "oom_type\030\013 \001(\0162\035.b2.protocol.channel.Roo"
      "mType\0222\n\004host\030\014 \001(\0132$.b2.protocol.channe"
      "l.RoomParticipant\022:\n\014participants\030\r \003(\0132"
      "$.b2.protocol.channel.RoomParticipant\0225\n"
      "\nproperties\030\016 \003(\0132!.b2.protocol.channel."
      "RoomProperty\"#\n\020RoomLeaveRequest\022\017\n\007room"
      "_id\030\001 \001(\t\"Y\n\021RoomLeaveResponse\022.\n\006result"
      "\030\001 \002(\0132\036.b2.protocol.commondata.Result\022\024"
      "\n\014room_id_list\030\002 \003(\t\"i\n\020RoomCloseRequest"
      "\022\017\n\007room_id\030\001 \002(\t\022\016\n\006map_id\030\002 \001(\005\0224\n\006rea"
      "son\030\004 \002(\0162$.b2.protocol.channel.RoomClos"
      "eReason\"\225\001\n\021RoomCloseResponse\022.\n\006result\030"
      "\001 \002(\0132\036.b2.protocol.commondata.Result\022\017\n"
      "\007room_id\030\n \001(\t\0220\n\troom_type\030\013 \001(\0162\035.b2.p"
      "rotocol.channel.RoomType\022\r\n\005token\030\014 \001(\t\""
      "`\n\030RoomAccessControlRequest\022\017\n\007room_id\030\001"
      " \002(\t\0223\n\006access\030\002 \002(\0162#.b2.protocol.commo"
      "ndata.Room.ACCESS\"K\n\031RoomAccessControlRe"
      "sponse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.com"
      "mondata.Result\"K\n\022RoomMessageCommand\022\017\n\007"
      "room_id\030\001 \002(\t\022\023\n\013receiver_id\030\002 \001(\005\022\017\n\007me"
      "ssage\030\003 \002(\014\"U\n\020RoomCreateNotify\022\017\n\007room_"
      "id\030\001 \002(\t\0220\n\troom_type\030\002 \002(\0162\035.b2.protoco"
      "l.channel.RoomType\"U\n\020RoomDeleteNotify\022\017"
      "\n\007room_id\030\001 \002(\t\0220\n\troom_type\030\002 \002(\0162\035.b2."
      "protocol.channel.RoomType\"\224\001\n\031RoomPartic"
      "ipantJoinNotify\022\017\n\007room_id\030\001 \002(\t\0220\n\troom"
      "_type\030\002 \002(\0162\035.b2.protocol.channel.RoomTy"
      "pe\0224\n\006joiner\030\003 \002(\0132$.b2.protocol.channel"
      ".RoomParticipant\"\225\001\n\032RoomParticipantLeav"
      "eNotify\022\017\n\007room_id\030\001 \002(\t\0220\n\troom_type\030\002 "
      "\002(\0162\035.b2.protocol.channel.RoomType\0224\n\006le"
      "aver\030\003 \002(\0132$.b2.protocol.channel.RoomPar"
      "ticipant\"k\n\025RoomHostChangedNotify\022\017\n\007roo"
      "m_id\030\001 \002(\t\0220\n\troom_type\030\002 \002(\0162\035.b2.proto"
      "col.channel.RoomType\022\017\n\007host_id\030\003 \002(\005\"\235\001"
      "\n\021RoomMessageNotify\022\017\n\007room_id\030\001 \002(\t\0220\n\t"
      "room_type\030\002 \002(\0162\035.b2.protocol.channel.Ro"
      "omType\0224\n\006sender\030\003 \002(\0132$.b2.protocol.cha"
      "nnel.RoomParticipant\022\017\n\007message\030\004 \002(\014\"`\n"
      "\026RoomSetPropertyRequest\022\017\n\007room_id\030\001 \002(\t"
      "\0225\n\nproperties\030\002 \003(\0132!.b2.protocol.chann"
      "el.RoomProperty\"I\n\027RoomSetPropertyRespon"
      "se\022.\n\006result\030\001 \002(\0132\036.b2.protocol.commond"
      "ata.Result\"c\n\031RoomPropertyUpdatedNotify\022"
      "\017\n\007room_id\030\001 \002(\t\0225\n\nproperties\030\002 \003(\0132!.b"
      "2.protocol.channel.RoomProperty\"t\n\021RoomI"
      "nviteRequest\022\017\n\007room_id\030\001 \002(\t\022\017\n\007invitee"
      "\030\002 \002(\t\022\031\n\021invitation_number\030\003 \002(\005\022\016\n\006map"
      "_id\030\004 \001(\005\022\022\n\ndifficulty\030\005 \001(\005\"D\n\022RoomInv"
      "iteResponse\022.\n\006result\030\001 \002(\0132\036.b2.protoco"
      "l.commondata.Result\";\n\017RoomKickRequest\022\017"
      "\n\007room_id\030\001 \002(\t\022\027\n\017kick_account_id\030\002 \002(\003"
      "\"]\n\020RoomKickResponse\022.\n\006result\030\001 \002(\0132\036.b"
      "2.protocol.commondata.Result\022\031\n\021kicked_a"
      "ccount_id\030\002 \001(\003\"Y\n\026RoomLeaveResultReques"
      "t\022\017\n\007room_id\030\001 \002(\t\022\031\n\021leaved_account_id\030"
      "\002 \002(\003\022\023\n\013match_token\030\003 \002(\t\"I\n\027RoomLeaveR"
      "esultResponse\022.\n\006result\030\001 \002(\0132\036.b2.proto"
      "col.commondata.Result\"\'\n\024RoomHeartbeatCo"
      "mmand\022\017\n\007room_id\030\001 \002(\t\"\025\n\023RoomHeartbeatN"
      "otify\"4\n\024RoomHeartbeatRequest\022\017\n\007room_id"
      "\030\001 \002(\t\022\013\n\003seq\030\002 \002(\005\"e\n\025RoomHeartbeatResp"
      "onse\022.\n\006result\030\001 \002(\0132\036.b2.protocol.commo"
      "ndata.Result\022\017\n\007room_id\030\n \001(\t\022\013\n\003seq\030\013 \001"
      "(\005\"=\n\027SetRoomDebugModeRequest\022\"\n\032skip_ro"
      "om_heart_beat_check\030\001 \001(\010\"J\n\030SetRoomDebu"
      "gModeResponse\022.\n\006result\030\001 \002(\0132\036.b2.proto"
      "col.commondata.Result\"+\n\025ChannelPublishR"
      "equest\022\022\n\nchannel_id\030\001 \002(\t\"\\\n\026ChannelPub"
      "lishResponse\022.\n\006result\030\001 \002(\0132\036.b2.protoc"
      "ol.commondata.Result\022\022\n\nchannel_id\030\002 \001(\t"
      "\"-\n\027ChannelSubscribeRequest\022\022\n\nchannel_i"
      "d\030\001 \002(\t\"^\n\030ChannelSubscribeResponse\022.\n\006r"
      "esult\030\001 \002(\0132\036.b2.protocol.commondata.Res"
      "ult\022\022\n\nchannel_id\030\002 \001(\t\";\n\024ChannelMessag"
      "eNotify\022\022\n\nchannel_id\030\001 \002(\t\022\017\n\007message\030\002"
      " \002(\t\"$\n\020WorldJoinRequest\022\020\n\010world_id\030\001 \001"
      "(\t\"U\n\021WorldJoinResponse\022.\n\006result\030\001 \002(\0132"
      "\036.b2.protocol.commondata.Result\022\020\n\010world"
      "_id\030\n \001(\t\"%\n\021WorldLeaveRequest\022\020\n\010world_"
      "id\030\001 \001(\t\"[\n\022WorldLeaveResponse\022.\n\006result"
      "\030\001 \002(\0132\036.b2.protocol.commondata.Result\022\025"
      "\n\rworld_id_list\030\002 \003(\t\"\231\001\n\033ReportUserViaC"
      "hannelRequest\022\031\n\021target_account_id\030\001 \002(\003"
      "\0229\n\tmode_type\030\002 \002(\0162&.b2.protocol.common"
      "data.ReportModeType\022\023\n\013reason_type\030\003 \002(\005"
      "\022\017\n\007explain\030\004 \001(\t\"N\n\034ReportUserViaChanne"
      "lResponse\022.\n\006result\030\001 \002(\0132\036.b2.protocol."
      "commondata.Result**\n\010RoomType\022\007\n\003PVP\020\000\022\010"
      "\n\004RAID\020\001\022\013\n\007ASSAULT\020\002*S\n\017RoomCloseReason"
      "\022\r\n\tSTART_PVP\020\001\022\016\n\nSTART_RAID\020\002\022\016\n\nBREAK"
      "_RAID\020\003\022\021\n\rSTART_ASSAULT\020\004B\025\n\023com.a2q.b2"
      ".protocol"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4729);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChannelProtocol.proto", &protobuf_RegisterTypes);
  HelloChannelRequest::default_instance_ = new HelloChannelRequest();
  HelloChannelResponse::default_instance_ = new HelloChannelResponse();
  SignInChannelRequest::default_instance_ = new SignInChannelRequest();
  SignInChannelResponse::default_instance_ = new SignInChannelResponse();
  RoomParticipant::default_instance_ = new RoomParticipant();
  RoomProperty::default_instance_ = new RoomProperty();
  RoomJoinRequest::default_instance_ = new RoomJoinRequest();
  RoomJoinResponse::default_instance_ = new RoomJoinResponse();
  RoomLeaveRequest::default_instance_ = new RoomLeaveRequest();
  RoomLeaveResponse::default_instance_ = new RoomLeaveResponse();
  RoomCloseRequest::default_instance_ = new RoomCloseRequest();
  RoomCloseResponse::default_instance_ = new RoomCloseResponse();
  RoomAccessControlRequest::default_instance_ = new RoomAccessControlRequest();
  RoomAccessControlResponse::default_instance_ = new RoomAccessControlResponse();
  RoomMessageCommand::default_instance_ = new RoomMessageCommand();
  RoomCreateNotify::default_instance_ = new RoomCreateNotify();
  RoomDeleteNotify::default_instance_ = new RoomDeleteNotify();
  RoomParticipantJoinNotify::default_instance_ = new RoomParticipantJoinNotify();
  RoomParticipantLeaveNotify::default_instance_ = new RoomParticipantLeaveNotify();
  RoomHostChangedNotify::default_instance_ = new RoomHostChangedNotify();
  RoomMessageNotify::default_instance_ = new RoomMessageNotify();
  RoomSetPropertyRequest::default_instance_ = new RoomSetPropertyRequest();
  RoomSetPropertyResponse::default_instance_ = new RoomSetPropertyResponse();
  RoomPropertyUpdatedNotify::default_instance_ = new RoomPropertyUpdatedNotify();
  RoomInviteRequest::default_instance_ = new RoomInviteRequest();
  RoomInviteResponse::default_instance_ = new RoomInviteResponse();
  RoomKickRequest::default_instance_ = new RoomKickRequest();
  RoomKickResponse::default_instance_ = new RoomKickResponse();
  RoomLeaveResultRequest::default_instance_ = new RoomLeaveResultRequest();
  RoomLeaveResultResponse::default_instance_ = new RoomLeaveResultResponse();
  RoomHeartbeatCommand::default_instance_ = new RoomHeartbeatCommand();
  RoomHeartbeatNotify::default_instance_ = new RoomHeartbeatNotify();
  RoomHeartbeatRequest::default_instance_ = new RoomHeartbeatRequest();
  RoomHeartbeatResponse::default_instance_ = new RoomHeartbeatResponse();
  SetRoomDebugModeRequest::default_instance_ = new SetRoomDebugModeRequest();
  SetRoomDebugModeResponse::default_instance_ = new SetRoomDebugModeResponse();
  ChannelPublishRequest::default_instance_ = new ChannelPublishRequest();
  ChannelPublishResponse::default_instance_ = new ChannelPublishResponse();
  ChannelSubscribeRequest::default_instance_ = new ChannelSubscribeRequest();
  ChannelSubscribeResponse::default_instance_ = new ChannelSubscribeResponse();
  ChannelMessageNotify::default_instance_ = new ChannelMessageNotify();
  WorldJoinRequest::default_instance_ = new WorldJoinRequest();
  WorldJoinResponse::default_instance_ = new WorldJoinResponse();
  WorldLeaveRequest::default_instance_ = new WorldLeaveRequest();
  WorldLeaveResponse::default_instance_ = new WorldLeaveResponse();
  ReportUserViaChannelRequest::default_instance_ = new ReportUserViaChannelRequest();
  ReportUserViaChannelResponse::default_instance_ = new ReportUserViaChannelResponse();
  HelloChannelRequest::default_instance_->InitAsDefaultInstance();
  HelloChannelResponse::default_instance_->InitAsDefaultInstance();
  SignInChannelRequest::default_instance_->InitAsDefaultInstance();
  SignInChannelResponse::default_instance_->InitAsDefaultInstance();
  RoomParticipant::default_instance_->InitAsDefaultInstance();
  RoomProperty::default_instance_->InitAsDefaultInstance();
  RoomJoinRequest::default_instance_->InitAsDefaultInstance();
  RoomJoinResponse::default_instance_->InitAsDefaultInstance();
  RoomLeaveRequest::default_instance_->InitAsDefaultInstance();
  RoomLeaveResponse::default_instance_->InitAsDefaultInstance();
  RoomCloseRequest::default_instance_->InitAsDefaultInstance();
  RoomCloseResponse::default_instance_->InitAsDefaultInstance();
  RoomAccessControlRequest::default_instance_->InitAsDefaultInstance();
  RoomAccessControlResponse::default_instance_->InitAsDefaultInstance();
  RoomMessageCommand::default_instance_->InitAsDefaultInstance();
  RoomCreateNotify::default_instance_->InitAsDefaultInstance();
  RoomDeleteNotify::default_instance_->InitAsDefaultInstance();
  RoomParticipantJoinNotify::default_instance_->InitAsDefaultInstance();
  RoomParticipantLeaveNotify::default_instance_->InitAsDefaultInstance();
  RoomHostChangedNotify::default_instance_->InitAsDefaultInstance();
  RoomMessageNotify::default_instance_->InitAsDefaultInstance();
  RoomSetPropertyRequest::default_instance_->InitAsDefaultInstance();
  RoomSetPropertyResponse::default_instance_->InitAsDefaultInstance();
  RoomPropertyUpdatedNotify::default_instance_->InitAsDefaultInstance();
  RoomInviteRequest::default_instance_->InitAsDefaultInstance();
  RoomInviteResponse::default_instance_->InitAsDefaultInstance();
  RoomKickRequest::default_instance_->InitAsDefaultInstance();
  RoomKickResponse::default_instance_->InitAsDefaultInstance();
  RoomLeaveResultRequest::default_instance_->InitAsDefaultInstance();
  RoomLeaveResultResponse::default_instance_->InitAsDefaultInstance();
  RoomHeartbeatCommand::default_instance_->InitAsDefaultInstance();
  RoomHeartbeatNotify::default_instance_->InitAsDefaultInstance();
  RoomHeartbeatRequest::default_instance_->InitAsDefaultInstance();
  RoomHeartbeatResponse::default_instance_->InitAsDefaultInstance();
  SetRoomDebugModeRequest::default_instance_->InitAsDefaultInstance();
  SetRoomDebugModeResponse::default_instance_->InitAsDefaultInstance();
  ChannelPublishRequest::default_instance_->InitAsDefaultInstance();
  ChannelPublishResponse::default_instance_->InitAsDefaultInstance();
  ChannelSubscribeRequest::default_instance_->InitAsDefaultInstance();
  ChannelSubscribeResponse::default_instance_->InitAsDefaultInstance();
  ChannelMessageNotify::default_instance_->InitAsDefaultInstance();
  WorldJoinRequest::default_instance_->InitAsDefaultInstance();
  WorldJoinResponse::default_instance_->InitAsDefaultInstance();
  WorldLeaveRequest::default_instance_->InitAsDefaultInstance();
  WorldLeaveResponse::default_instance_->InitAsDefaultInstance();
  ReportUserViaChannelRequest::default_instance_->InitAsDefaultInstance();
  ReportUserViaChannelResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChannelProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChannelProtocol_2eproto {
  StaticDescriptorInitializer_ChannelProtocol_2eproto() {
    protobuf_AddDesc_ChannelProtocol_2eproto();
  }
} static_descriptor_initializer_ChannelProtocol_2eproto_;
const ::google::protobuf::EnumDescriptor* RoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomType_descriptor_;
}
bool RoomType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoomCloseReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCloseReason_descriptor_;
}
bool RoomCloseReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HelloChannelRequest::kClientProtocolFieldNumber;
const int HelloChannelRequest::kClientPublicKeyFieldNumber;
#endif  // !_MSC_VER

HelloChannelRequest::HelloChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.HelloChannelRequest)
}

void HelloChannelRequest::InitAsDefaultInstance() {
  client_protocol_ = const_cast< ::b2::protocol::commondata::Protocol*>(&::b2::protocol::commondata::Protocol::default_instance());
}

HelloChannelRequest::HelloChannelRequest(const HelloChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.HelloChannelRequest)
}

void HelloChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_protocol_ = NULL;
  client_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloChannelRequest::~HelloChannelRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.HelloChannelRequest)
  SharedDtor();
}

void HelloChannelRequest::SharedDtor() {
  if (client_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_public_key_;
  }
  if (this != default_instance_) {
    delete client_protocol_;
  }
}

void HelloChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloChannelRequest_descriptor_;
}

const HelloChannelRequest& HelloChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

HelloChannelRequest* HelloChannelRequest::default_instance_ = NULL;

HelloChannelRequest* HelloChannelRequest::New() const {
  return new HelloChannelRequest;
}

void HelloChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_client_protocol()) {
      if (client_protocol_ != NULL) client_protocol_->::b2::protocol::commondata::Protocol::Clear();
    }
    if (has_client_public_key()) {
      if (client_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.HelloChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Protocol client_protocol = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_protocol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_client_public_key;
        break;
      }

      // required string client_public_key = 20;
      case 20: {
        if (tag == 162) {
         parse_client_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_public_key().data(), this->client_public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_public_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.HelloChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.HelloChannelRequest)
  return false;
#undef DO_
}

void HelloChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.HelloChannelRequest)
  // required .b2.protocol.commondata.Protocol client_protocol = 10;
  if (has_client_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->client_protocol(), output);
  }

  // required string client_public_key = 20;
  if (has_client_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_public_key().data(), this->client_public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->client_public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.HelloChannelRequest)
}

::google::protobuf::uint8* HelloChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.HelloChannelRequest)
  // required .b2.protocol.commondata.Protocol client_protocol = 10;
  if (has_client_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->client_protocol(), target);
  }

  // required string client_public_key = 20;
  if (has_client_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_public_key().data(), this->client_public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->client_public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.HelloChannelRequest)
  return target;
}

int HelloChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Protocol client_protocol = 10;
    if (has_client_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->client_protocol());
    }

    // required string client_public_key = 20;
    if (has_client_public_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloChannelRequest::MergeFrom(const HelloChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_protocol()) {
      mutable_client_protocol()->::b2::protocol::commondata::Protocol::MergeFrom(from.client_protocol());
    }
    if (from.has_client_public_key()) {
      set_client_public_key(from.client_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloChannelRequest::CopyFrom(const HelloChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_client_protocol()) {
    if (!this->client_protocol().IsInitialized()) return false;
  }
  return true;
}

void HelloChannelRequest::Swap(HelloChannelRequest* other) {
  if (other != this) {
    std::swap(client_protocol_, other->client_protocol_);
    std::swap(client_public_key_, other->client_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloChannelRequest_descriptor_;
  metadata.reflection = HelloChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HelloChannelResponse::kResultFieldNumber;
const int HelloChannelResponse::kServerPublicKeyFieldNumber;
#endif  // !_MSC_VER

HelloChannelResponse::HelloChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.HelloChannelResponse)
}

void HelloChannelResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

HelloChannelResponse::HelloChannelResponse(const HelloChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.HelloChannelResponse)
}

void HelloChannelResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  server_public_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HelloChannelResponse::~HelloChannelResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.HelloChannelResponse)
  SharedDtor();
}

void HelloChannelResponse::SharedDtor() {
  if (server_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete server_public_key_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void HelloChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HelloChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HelloChannelResponse_descriptor_;
}

const HelloChannelResponse& HelloChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

HelloChannelResponse* HelloChannelResponse::default_instance_ = NULL;

HelloChannelResponse* HelloChannelResponse::New() const {
  return new HelloChannelResponse;
}

void HelloChannelResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_server_public_key()) {
      if (server_public_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        server_public_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HelloChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.HelloChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_server_public_key;
        break;
      }

      // optional string server_public_key = 10;
      case 10: {
        if (tag == 82) {
         parse_server_public_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_public_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_public_key().data(), this->server_public_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "server_public_key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.HelloChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.HelloChannelResponse)
  return false;
#undef DO_
}

void HelloChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.HelloChannelResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string server_public_key = 10;
  if (has_server_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_public_key().data(), this->server_public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_public_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->server_public_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.HelloChannelResponse)
}

::google::protobuf::uint8* HelloChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.HelloChannelResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string server_public_key = 10;
  if (has_server_public_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_public_key().data(), this->server_public_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "server_public_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->server_public_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.HelloChannelResponse)
  return target;
}

int HelloChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string server_public_key = 10;
    if (has_server_public_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_public_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HelloChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HelloChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HelloChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HelloChannelResponse::MergeFrom(const HelloChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_server_public_key()) {
      set_server_public_key(from.server_public_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HelloChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloChannelResponse::CopyFrom(const HelloChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void HelloChannelResponse::Swap(HelloChannelResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(server_public_key_, other->server_public_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HelloChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HelloChannelResponse_descriptor_;
  metadata.reflection = HelloChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignInChannelRequest::kAccountIdFieldNumber;
const int SignInChannelRequest::kSessionTokenFieldNumber;
const int SignInChannelRequest::kClientClFieldNumber;
#endif  // !_MSC_VER

SignInChannelRequest::SignInChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.SignInChannelRequest)
}

void SignInChannelRequest::InitAsDefaultInstance() {
}

SignInChannelRequest::SignInChannelRequest(const SignInChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.SignInChannelRequest)
}

void SignInChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  session_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_cl_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInChannelRequest::~SignInChannelRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.SignInChannelRequest)
  SharedDtor();
}

void SignInChannelRequest::SharedDtor() {
  if (session_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete session_token_;
  }
  if (client_cl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_cl_;
  }
  if (this != default_instance_) {
  }
}

void SignInChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignInChannelRequest_descriptor_;
}

const SignInChannelRequest& SignInChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

SignInChannelRequest* SignInChannelRequest::default_instance_ = NULL;

SignInChannelRequest* SignInChannelRequest::New() const {
  return new SignInChannelRequest;
}

void SignInChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_session_token()) {
      if (session_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        session_token_->clear();
      }
    }
    if (has_client_cl()) {
      if (client_cl_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        client_cl_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignInChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.SignInChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_session_token;
        break;
      }

      // required string session_token = 2;
      case 2: {
        if (tag == 18) {
         parse_session_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->session_token().data(), this->session_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "session_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_client_cl;
        break;
      }

      // optional string client_cl = 10;
      case 10: {
        if (tag == 82) {
         parse_client_cl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_cl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->client_cl().data(), this->client_cl().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "client_cl");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.SignInChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.SignInChannelRequest)
  return false;
#undef DO_
}

void SignInChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.SignInChannelRequest)
  // required int64 account_id = 1;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->account_id(), output);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->session_token(), output);
  }

  // optional string client_cl = 10;
  if (has_client_cl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_cl().data(), this->client_cl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_cl");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->client_cl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.SignInChannelRequest)
}

::google::protobuf::uint8* SignInChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.SignInChannelRequest)
  // required int64 account_id = 1;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->account_id(), target);
  }

  // required string session_token = 2;
  if (has_session_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->session_token().data(), this->session_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "session_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_token(), target);
  }

  // optional string client_cl = 10;
  if (has_client_cl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->client_cl().data(), this->client_cl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "client_cl");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->client_cl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.SignInChannelRequest)
  return target;
}

int SignInChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // required string session_token = 2;
    if (has_session_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_token());
    }

    // optional string client_cl = 10;
    if (has_client_cl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_cl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignInChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignInChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignInChannelRequest::MergeFrom(const SignInChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_session_token()) {
      set_session_token(from.session_token());
    }
    if (from.has_client_cl()) {
      set_client_cl(from.client_cl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignInChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInChannelRequest::CopyFrom(const SignInChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignInChannelRequest::Swap(SignInChannelRequest* other) {
  if (other != this) {
    std::swap(account_id_, other->account_id_);
    std::swap(session_token_, other->session_token_);
    std::swap(client_cl_, other->client_cl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignInChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignInChannelRequest_descriptor_;
  metadata.reflection = SignInChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignInChannelResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SignInChannelResponse::SignInChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.SignInChannelResponse)
}

void SignInChannelResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SignInChannelResponse::SignInChannelResponse(const SignInChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.SignInChannelResponse)
}

void SignInChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInChannelResponse::~SignInChannelResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.SignInChannelResponse)
  SharedDtor();
}

void SignInChannelResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SignInChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignInChannelResponse_descriptor_;
}

const SignInChannelResponse& SignInChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

SignInChannelResponse* SignInChannelResponse::default_instance_ = NULL;

SignInChannelResponse* SignInChannelResponse::New() const {
  return new SignInChannelResponse;
}

void SignInChannelResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignInChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.SignInChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.SignInChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.SignInChannelResponse)
  return false;
#undef DO_
}

void SignInChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.SignInChannelResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.SignInChannelResponse)
}

::google::protobuf::uint8* SignInChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.SignInChannelResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.SignInChannelResponse)
  return target;
}

int SignInChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignInChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignInChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignInChannelResponse::MergeFrom(const SignInChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignInChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInChannelResponse::CopyFrom(const SignInChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SignInChannelResponse::Swap(SignInChannelResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignInChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignInChannelResponse_descriptor_;
  metadata.reflection = SignInChannelResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomParticipant::kIdFieldNumber;
const int RoomParticipant::kAccountIdFieldNumber;
const int RoomParticipant::kAccountInfoFieldNumber;
#endif  // !_MSC_VER

RoomParticipant::RoomParticipant()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomParticipant)
}

void RoomParticipant::InitAsDefaultInstance() {
  account_info_ = const_cast< ::b2::protocol::commondata::AccountInfo*>(&::b2::protocol::commondata::AccountInfo::default_instance());
}

RoomParticipant::RoomParticipant(const RoomParticipant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomParticipant)
}

void RoomParticipant::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  account_id_ = GOOGLE_LONGLONG(0);
  account_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomParticipant::~RoomParticipant() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomParticipant)
  SharedDtor();
}

void RoomParticipant::SharedDtor() {
  if (this != default_instance_) {
    delete account_info_;
  }
}

void RoomParticipant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomParticipant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomParticipant_descriptor_;
}

const RoomParticipant& RoomParticipant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomParticipant* RoomParticipant::default_instance_ = NULL;

RoomParticipant* RoomParticipant::New() const {
  return new RoomParticipant;
}

void RoomParticipant::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = 0;
    account_id_ = GOOGLE_LONGLONG(0);
    if (has_account_info()) {
      if (account_info_ != NULL) account_info_->::b2::protocol::commondata::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomParticipant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomParticipant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional int64 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_account_info;
        break;
      }

      // optional .b2.protocol.commondata.AccountInfo account_info = 3;
      case 3: {
        if (tag == 26) {
         parse_account_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomParticipant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomParticipant)
  return false;
#undef DO_
}

void RoomParticipant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomParticipant)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->account_id(), output);
  }

  // optional .b2.protocol.commondata.AccountInfo account_info = 3;
  if (has_account_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->account_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomParticipant)
}

::google::protobuf::uint8* RoomParticipant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomParticipant)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->account_id(), target);
  }

  // optional .b2.protocol.commondata.AccountInfo account_info = 3;
  if (has_account_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->account_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomParticipant)
  return target;
}

int RoomParticipant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional .b2.protocol.commondata.AccountInfo account_info = 3;
    if (has_account_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomParticipant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomParticipant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomParticipant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomParticipant::MergeFrom(const RoomParticipant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_account_info()) {
      mutable_account_info()->::b2::protocol::commondata::AccountInfo::MergeFrom(from.account_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomParticipant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomParticipant::CopyFrom(const RoomParticipant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomParticipant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_account_info()) {
    if (!this->account_info().IsInitialized()) return false;
  }
  return true;
}

void RoomParticipant::Swap(RoomParticipant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(account_id_, other->account_id_);
    std::swap(account_info_, other->account_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomParticipant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomParticipant_descriptor_;
  metadata.reflection = RoomParticipant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomProperty::kKeyFieldNumber;
const int RoomProperty::kValueFieldNumber;
#endif  // !_MSC_VER

RoomProperty::RoomProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomProperty)
}

void RoomProperty::InitAsDefaultInstance() {
}

RoomProperty::RoomProperty(const RoomProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomProperty)
}

void RoomProperty::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomProperty::~RoomProperty() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomProperty)
  SharedDtor();
}

void RoomProperty::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RoomProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomProperty_descriptor_;
}

const RoomProperty& RoomProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomProperty* RoomProperty::default_instance_ = NULL;

RoomProperty* RoomProperty::New() const {
  return new RoomProperty;
}

void RoomProperty::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomProperty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomProperty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomProperty)
  return false;
#undef DO_
}

void RoomProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomProperty)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomProperty)
}

::google::protobuf::uint8* RoomProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomProperty)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomProperty)
  return target;
}

int RoomProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomProperty::MergeFrom(const RoomProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomProperty::CopyFrom(const RoomProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomProperty::Swap(RoomProperty* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomProperty_descriptor_;
  metadata.reflection = RoomProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomJoinRequest::kRoomIdFieldNumber;
const int RoomJoinRequest::kRoomTypeFieldNumber;
const int RoomJoinRequest::kRoomAccessFieldNumber;
const int RoomJoinRequest::kPropertiesFieldNumber;
const int RoomJoinRequest::kRoomCharactersFieldNumber;
const int RoomJoinRequest::kCharacterPresetsFieldNumber;
#endif  // !_MSC_VER

RoomJoinRequest::RoomJoinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomJoinRequest)
}

void RoomJoinRequest::InitAsDefaultInstance() {
}

RoomJoinRequest::RoomJoinRequest(const RoomJoinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomJoinRequest)
}

void RoomJoinRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  room_access_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomJoinRequest::~RoomJoinRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomJoinRequest)
  SharedDtor();
}

void RoomJoinRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomJoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomJoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomJoinRequest_descriptor_;
}

const RoomJoinRequest& RoomJoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomJoinRequest* RoomJoinRequest::default_instance_ = NULL;

RoomJoinRequest* RoomJoinRequest::New() const {
  return new RoomJoinRequest;
}

void RoomJoinRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomJoinRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(room_type_, room_access_);
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  properties_.Clear();
  room_characters_.Clear();
  character_presets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomJoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // optional .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_room_access;
        break;
      }

      // optional .b2.protocol.commondata.Room.ACCESS room_access = 3;
      case 3: {
        if (tag == 24) {
         parse_room_access:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Room_ACCESS_IsValid(value)) {
            set_room_access(static_cast< ::b2::protocol::commondata::Room_ACCESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_properties;
        break;
      }

      // repeated .b2.protocol.channel.RoomProperty properties = 4;
      case 4: {
        if (tag == 34) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_properties;
        if (input->ExpectTag(42)) goto parse_room_characters;
        break;
      }

      // repeated .b2.protocol.commondata.RoomCharacter room_characters = 5;
      case 5: {
        if (tag == 42) {
         parse_room_characters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_room_characters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_room_characters;
        if (input->ExpectTag(50)) goto parse_character_presets;
        break;
      }

      // repeated .b2.protocol.commondata.PresetNum character_presets = 6;
      case 6: {
        if (tag == 50) {
         parse_character_presets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_character_presets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_character_presets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomJoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomJoinRequest)
  return false;
#undef DO_
}

void RoomJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomJoinRequest)
  // optional string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // optional .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  // optional .b2.protocol.commondata.Room.ACCESS room_access = 3;
  if (has_room_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->room_access(), output);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 4;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->properties(i), output);
  }

  // repeated .b2.protocol.commondata.RoomCharacter room_characters = 5;
  for (int i = 0; i < this->room_characters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->room_characters(i), output);
  }

  // repeated .b2.protocol.commondata.PresetNum character_presets = 6;
  for (int i = 0; i < this->character_presets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->character_presets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomJoinRequest)
}

::google::protobuf::uint8* RoomJoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomJoinRequest)
  // optional string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // optional .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  // optional .b2.protocol.commondata.Room.ACCESS room_access = 3;
  if (has_room_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->room_access(), target);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 4;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->properties(i), target);
  }

  // repeated .b2.protocol.commondata.RoomCharacter room_characters = 5;
  for (int i = 0; i < this->room_characters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->room_characters(i), target);
  }

  // repeated .b2.protocol.commondata.PresetNum character_presets = 6;
  for (int i = 0; i < this->character_presets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->character_presets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomJoinRequest)
  return target;
}

int RoomJoinRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // optional .b2.protocol.commondata.Room.ACCESS room_access = 3;
    if (has_room_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_access());
    }

  }
  // repeated .b2.protocol.channel.RoomProperty properties = 4;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  // repeated .b2.protocol.commondata.RoomCharacter room_characters = 5;
  total_size += 1 * this->room_characters_size();
  for (int i = 0; i < this->room_characters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->room_characters(i));
  }

  // repeated .b2.protocol.commondata.PresetNum character_presets = 6;
  total_size += 1 * this->character_presets_size();
  for (int i = 0; i < this->character_presets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->character_presets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomJoinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomJoinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomJoinRequest::MergeFrom(const RoomJoinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  room_characters_.MergeFrom(from.room_characters_);
  character_presets_.MergeFrom(from.character_presets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_room_access()) {
      set_room_access(from.room_access());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomJoinRequest::CopyFrom(const RoomJoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomJoinRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->character_presets())) return false;
  return true;
}

void RoomJoinRequest::Swap(RoomJoinRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(room_access_, other->room_access_);
    properties_.Swap(&other->properties_);
    room_characters_.Swap(&other->room_characters_);
    character_presets_.Swap(&other->character_presets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomJoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomJoinRequest_descriptor_;
  metadata.reflection = RoomJoinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomJoinResponse::kResultFieldNumber;
const int RoomJoinResponse::kRoomIdFieldNumber;
const int RoomJoinResponse::kRoomTypeFieldNumber;
const int RoomJoinResponse::kHostFieldNumber;
const int RoomJoinResponse::kParticipantsFieldNumber;
const int RoomJoinResponse::kPropertiesFieldNumber;
#endif  // !_MSC_VER

RoomJoinResponse::RoomJoinResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomJoinResponse)
}

void RoomJoinResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
  host_ = const_cast< ::b2::protocol::channel::RoomParticipant*>(&::b2::protocol::channel::RoomParticipant::default_instance());
}

RoomJoinResponse::RoomJoinResponse(const RoomJoinResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomJoinResponse)
}

void RoomJoinResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomJoinResponse::~RoomJoinResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomJoinResponse)
  SharedDtor();
}

void RoomJoinResponse::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
    delete result_;
    delete host_;
  }
}

void RoomJoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomJoinResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomJoinResponse_descriptor_;
}

const RoomJoinResponse& RoomJoinResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomJoinResponse* RoomJoinResponse::default_instance_ = NULL;

RoomJoinResponse* RoomJoinResponse::New() const {
  return new RoomJoinResponse;
}

void RoomJoinResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
    if (has_host()) {
      if (host_ != NULL) host_->::b2::protocol::channel::RoomParticipant::Clear();
    }
  }
  participants_.Clear();
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomJoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_room_id;
        break;
      }

      // optional string room_id = 10;
      case 10: {
        if (tag == 82) {
         parse_room_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_room_type;
        break;
      }

      // optional .b2.protocol.channel.RoomType room_type = 11;
      case 11: {
        if (tag == 88) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_host;
        break;
      }

      // optional .b2.protocol.channel.RoomParticipant host = 12;
      case 12: {
        if (tag == 98) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_participants;
        break;
      }

      // repeated .b2.protocol.channel.RoomParticipant participants = 13;
      case 13: {
        if (tag == 106) {
         parse_participants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_participants()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_participants;
        if (input->ExpectTag(114)) goto parse_properties;
        break;
      }

      // repeated .b2.protocol.channel.RoomProperty properties = 14;
      case 14: {
        if (tag == 114) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_properties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomJoinResponse)
  return false;
#undef DO_
}

void RoomJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomJoinResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string room_id = 10;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->room_id(), output);
  }

  // optional .b2.protocol.channel.RoomType room_type = 11;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->room_type(), output);
  }

  // optional .b2.protocol.channel.RoomParticipant host = 12;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->host(), output);
  }

  // repeated .b2.protocol.channel.RoomParticipant participants = 13;
  for (int i = 0; i < this->participants_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->participants(i), output);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 14;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomJoinResponse)
}

::google::protobuf::uint8* RoomJoinResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomJoinResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string room_id = 10;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->room_id(), target);
  }

  // optional .b2.protocol.channel.RoomType room_type = 11;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->room_type(), target);
  }

  // optional .b2.protocol.channel.RoomParticipant host = 12;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->host(), target);
  }

  // repeated .b2.protocol.channel.RoomParticipant participants = 13;
  for (int i = 0; i < this->participants_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->participants(i), target);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 14;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomJoinResponse)
  return target;
}

int RoomJoinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string room_id = 10;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional .b2.protocol.channel.RoomType room_type = 11;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // optional .b2.protocol.channel.RoomParticipant host = 12;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }

  }
  // repeated .b2.protocol.channel.RoomParticipant participants = 13;
  total_size += 1 * this->participants_size();
  for (int i = 0; i < this->participants_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->participants(i));
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 14;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomJoinResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomJoinResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomJoinResponse::MergeFrom(const RoomJoinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  participants_.MergeFrom(from.participants_);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_host()) {
      mutable_host()->::b2::protocol::channel::RoomParticipant::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomJoinResponse::CopyFrom(const RoomJoinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomJoinResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->participants())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void RoomJoinResponse::Swap(RoomJoinResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(host_, other->host_);
    participants_.Swap(&other->participants_);
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomJoinResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomJoinResponse_descriptor_;
  metadata.reflection = RoomJoinResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomLeaveRequest::kRoomIdFieldNumber;
#endif  // !_MSC_VER

RoomLeaveRequest::RoomLeaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomLeaveRequest)
}

void RoomLeaveRequest::InitAsDefaultInstance() {
}

RoomLeaveRequest::RoomLeaveRequest(const RoomLeaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomLeaveRequest)
}

void RoomLeaveRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomLeaveRequest::~RoomLeaveRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomLeaveRequest)
  SharedDtor();
}

void RoomLeaveRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomLeaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLeaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomLeaveRequest_descriptor_;
}

const RoomLeaveRequest& RoomLeaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomLeaveRequest* RoomLeaveRequest::default_instance_ = NULL;

RoomLeaveRequest* RoomLeaveRequest::New() const {
  return new RoomLeaveRequest;
}

void RoomLeaveRequest::Clear() {
  if (has_room_id()) {
    if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      room_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomLeaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomLeaveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomLeaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomLeaveRequest)
  return false;
#undef DO_
}

void RoomLeaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomLeaveRequest)
  // optional string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomLeaveRequest)
}

::google::protobuf::uint8* RoomLeaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomLeaveRequest)
  // optional string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomLeaveRequest)
  return target;
}

int RoomLeaveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLeaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomLeaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomLeaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomLeaveRequest::MergeFrom(const RoomLeaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomLeaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLeaveRequest::CopyFrom(const RoomLeaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLeaveRequest::IsInitialized() const {

  return true;
}

void RoomLeaveRequest::Swap(RoomLeaveRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomLeaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomLeaveRequest_descriptor_;
  metadata.reflection = RoomLeaveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomLeaveResponse::kResultFieldNumber;
const int RoomLeaveResponse::kRoomIdListFieldNumber;
#endif  // !_MSC_VER

RoomLeaveResponse::RoomLeaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomLeaveResponse)
}

void RoomLeaveResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomLeaveResponse::RoomLeaveResponse(const RoomLeaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomLeaveResponse)
}

void RoomLeaveResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomLeaveResponse::~RoomLeaveResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomLeaveResponse)
  SharedDtor();
}

void RoomLeaveResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomLeaveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLeaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomLeaveResponse_descriptor_;
}

const RoomLeaveResponse& RoomLeaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomLeaveResponse* RoomLeaveResponse::default_instance_ = NULL;

RoomLeaveResponse* RoomLeaveResponse::New() const {
  return new RoomLeaveResponse;
}

void RoomLeaveResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  room_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomLeaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomLeaveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id_list;
        break;
      }

      // repeated string room_id_list = 2;
      case 2: {
        if (tag == 18) {
         parse_room_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_room_id_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id_list(this->room_id_list_size() - 1).data(),
            this->room_id_list(this->room_id_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomLeaveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomLeaveResponse)
  return false;
#undef DO_
}

void RoomLeaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomLeaveResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated string room_id_list = 2;
  for (int i = 0; i < this->room_id_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->room_id_list(i).data(), this->room_id_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "room_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomLeaveResponse)
}

::google::protobuf::uint8* RoomLeaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomLeaveResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated string room_id_list = 2;
  for (int i = 0; i < this->room_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id_list(i).data(), this->room_id_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->room_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomLeaveResponse)
  return target;
}

int RoomLeaveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated string room_id_list = 2;
  total_size += 1 * this->room_id_list_size();
  for (int i = 0; i < this->room_id_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->room_id_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLeaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomLeaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomLeaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomLeaveResponse::MergeFrom(const RoomLeaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  room_id_list_.MergeFrom(from.room_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomLeaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLeaveResponse::CopyFrom(const RoomLeaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLeaveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomLeaveResponse::Swap(RoomLeaveResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    room_id_list_.Swap(&other->room_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomLeaveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomLeaveResponse_descriptor_;
  metadata.reflection = RoomLeaveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomCloseRequest::kRoomIdFieldNumber;
const int RoomCloseRequest::kMapIdFieldNumber;
const int RoomCloseRequest::kReasonFieldNumber;
#endif  // !_MSC_VER

RoomCloseRequest::RoomCloseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomCloseRequest)
}

void RoomCloseRequest::InitAsDefaultInstance() {
}

RoomCloseRequest::RoomCloseRequest(const RoomCloseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomCloseRequest)
}

void RoomCloseRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_id_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomCloseRequest::~RoomCloseRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomCloseRequest)
  SharedDtor();
}

void RoomCloseRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomCloseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCloseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCloseRequest_descriptor_;
}

const RoomCloseRequest& RoomCloseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomCloseRequest* RoomCloseRequest::default_instance_ = NULL;

RoomCloseRequest* RoomCloseRequest::New() const {
  return new RoomCloseRequest;
}

void RoomCloseRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    map_id_ = 0;
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomCloseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomCloseRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 2;
      case 2: {
        if (tag == 16) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reason;
        break;
      }

      // required .b2.protocol.channel.RoomCloseReason reason = 4;
      case 4: {
        if (tag == 32) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomCloseReason_IsValid(value)) {
            set_reason(static_cast< ::b2::protocol::channel::RoomCloseReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomCloseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomCloseRequest)
  return false;
#undef DO_
}

void RoomCloseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomCloseRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // optional int32 map_id = 2;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->map_id(), output);
  }

  // required .b2.protocol.channel.RoomCloseReason reason = 4;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomCloseRequest)
}

::google::protobuf::uint8* RoomCloseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomCloseRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // optional int32 map_id = 2;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->map_id(), target);
  }

  // required .b2.protocol.channel.RoomCloseReason reason = 4;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomCloseRequest)
  return target;
}

int RoomCloseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 map_id = 2;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // required .b2.protocol.channel.RoomCloseReason reason = 4;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCloseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomCloseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomCloseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomCloseRequest::MergeFrom(const RoomCloseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomCloseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCloseRequest::CopyFrom(const RoomCloseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCloseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void RoomCloseRequest::Swap(RoomCloseRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomCloseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCloseRequest_descriptor_;
  metadata.reflection = RoomCloseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomCloseResponse::kResultFieldNumber;
const int RoomCloseResponse::kRoomIdFieldNumber;
const int RoomCloseResponse::kRoomTypeFieldNumber;
const int RoomCloseResponse::kTokenFieldNumber;
#endif  // !_MSC_VER

RoomCloseResponse::RoomCloseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomCloseResponse)
}

void RoomCloseResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomCloseResponse::RoomCloseResponse(const RoomCloseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomCloseResponse)
}

void RoomCloseResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomCloseResponse::~RoomCloseResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomCloseResponse)
  SharedDtor();
}

void RoomCloseResponse::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete token_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomCloseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCloseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCloseResponse_descriptor_;
}

const RoomCloseResponse& RoomCloseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomCloseResponse* RoomCloseResponse::default_instance_ = NULL;

RoomCloseResponse* RoomCloseResponse::New() const {
  return new RoomCloseResponse;
}

void RoomCloseResponse::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomCloseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomCloseResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_room_id;
        break;
      }

      // optional string room_id = 10;
      case 10: {
        if (tag == 82) {
         parse_room_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_room_type;
        break;
      }

      // optional .b2.protocol.channel.RoomType room_type = 11;
      case 11: {
        if (tag == 88) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_token;
        break;
      }

      // optional string token = 12;
      case 12: {
        if (tag == 98) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomCloseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomCloseResponse)
  return false;
#undef DO_
}

void RoomCloseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomCloseResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string room_id = 10;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->room_id(), output);
  }

  // optional .b2.protocol.channel.RoomType room_type = 11;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->room_type(), output);
  }

  // optional string token = 12;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomCloseResponse)
}

::google::protobuf::uint8* RoomCloseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomCloseResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string room_id = 10;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->room_id(), target);
  }

  // optional .b2.protocol.channel.RoomType room_type = 11;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->room_type(), target);
  }

  // optional string token = 12;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomCloseResponse)
  return target;
}

int RoomCloseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string room_id = 10;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional .b2.protocol.channel.RoomType room_type = 11;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // optional string token = 12;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCloseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomCloseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomCloseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomCloseResponse::MergeFrom(const RoomCloseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomCloseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCloseResponse::CopyFrom(const RoomCloseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCloseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomCloseResponse::Swap(RoomCloseResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomCloseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCloseResponse_descriptor_;
  metadata.reflection = RoomCloseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomAccessControlRequest::kRoomIdFieldNumber;
const int RoomAccessControlRequest::kAccessFieldNumber;
#endif  // !_MSC_VER

RoomAccessControlRequest::RoomAccessControlRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomAccessControlRequest)
}

void RoomAccessControlRequest::InitAsDefaultInstance() {
}

RoomAccessControlRequest::RoomAccessControlRequest(const RoomAccessControlRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomAccessControlRequest)
}

void RoomAccessControlRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomAccessControlRequest::~RoomAccessControlRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomAccessControlRequest)
  SharedDtor();
}

void RoomAccessControlRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomAccessControlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomAccessControlRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomAccessControlRequest_descriptor_;
}

const RoomAccessControlRequest& RoomAccessControlRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomAccessControlRequest* RoomAccessControlRequest::default_instance_ = NULL;

RoomAccessControlRequest* RoomAccessControlRequest::New() const {
  return new RoomAccessControlRequest;
}

void RoomAccessControlRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    access_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomAccessControlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomAccessControlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access;
        break;
      }

      // required .b2.protocol.commondata.Room.ACCESS access = 2;
      case 2: {
        if (tag == 16) {
         parse_access:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::Room_ACCESS_IsValid(value)) {
            set_access(static_cast< ::b2::protocol::commondata::Room_ACCESS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomAccessControlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomAccessControlRequest)
  return false;
#undef DO_
}

void RoomAccessControlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomAccessControlRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.commondata.Room.ACCESS access = 2;
  if (has_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->access(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomAccessControlRequest)
}

::google::protobuf::uint8* RoomAccessControlRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomAccessControlRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.commondata.Room.ACCESS access = 2;
  if (has_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->access(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomAccessControlRequest)
  return target;
}

int RoomAccessControlRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.commondata.Room.ACCESS access = 2;
    if (has_access()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->access());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomAccessControlRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomAccessControlRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomAccessControlRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomAccessControlRequest::MergeFrom(const RoomAccessControlRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_access()) {
      set_access(from.access());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomAccessControlRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomAccessControlRequest::CopyFrom(const RoomAccessControlRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAccessControlRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomAccessControlRequest::Swap(RoomAccessControlRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(access_, other->access_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomAccessControlRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomAccessControlRequest_descriptor_;
  metadata.reflection = RoomAccessControlRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomAccessControlResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RoomAccessControlResponse::RoomAccessControlResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomAccessControlResponse)
}

void RoomAccessControlResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomAccessControlResponse::RoomAccessControlResponse(const RoomAccessControlResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomAccessControlResponse)
}

void RoomAccessControlResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomAccessControlResponse::~RoomAccessControlResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomAccessControlResponse)
  SharedDtor();
}

void RoomAccessControlResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomAccessControlResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomAccessControlResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomAccessControlResponse_descriptor_;
}

const RoomAccessControlResponse& RoomAccessControlResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomAccessControlResponse* RoomAccessControlResponse::default_instance_ = NULL;

RoomAccessControlResponse* RoomAccessControlResponse::New() const {
  return new RoomAccessControlResponse;
}

void RoomAccessControlResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomAccessControlResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomAccessControlResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomAccessControlResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomAccessControlResponse)
  return false;
#undef DO_
}

void RoomAccessControlResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomAccessControlResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomAccessControlResponse)
}

::google::protobuf::uint8* RoomAccessControlResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomAccessControlResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomAccessControlResponse)
  return target;
}

int RoomAccessControlResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomAccessControlResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomAccessControlResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomAccessControlResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomAccessControlResponse::MergeFrom(const RoomAccessControlResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomAccessControlResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomAccessControlResponse::CopyFrom(const RoomAccessControlResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomAccessControlResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomAccessControlResponse::Swap(RoomAccessControlResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomAccessControlResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomAccessControlResponse_descriptor_;
  metadata.reflection = RoomAccessControlResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomMessageCommand::kRoomIdFieldNumber;
const int RoomMessageCommand::kReceiverIdFieldNumber;
const int RoomMessageCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

RoomMessageCommand::RoomMessageCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomMessageCommand)
}

void RoomMessageCommand::InitAsDefaultInstance() {
}

RoomMessageCommand::RoomMessageCommand(const RoomMessageCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomMessageCommand)
}

void RoomMessageCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receiver_id_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMessageCommand::~RoomMessageCommand() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomMessageCommand)
  SharedDtor();
}

void RoomMessageCommand::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void RoomMessageCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMessageCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMessageCommand_descriptor_;
}

const RoomMessageCommand& RoomMessageCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomMessageCommand* RoomMessageCommand::default_instance_ = NULL;

RoomMessageCommand* RoomMessageCommand::New() const {
  return new RoomMessageCommand;
}

void RoomMessageCommand::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    receiver_id_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMessageCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomMessageCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_receiver_id;
        break;
      }

      // optional int32 receiver_id = 2;
      case 2: {
        if (tag == 16) {
         parse_receiver_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiver_id_)));
          set_has_receiver_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required bytes message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomMessageCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomMessageCommand)
  return false;
#undef DO_
}

void RoomMessageCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomMessageCommand)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // optional int32 receiver_id = 2;
  if (has_receiver_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->receiver_id(), output);
  }

  // required bytes message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomMessageCommand)
}

::google::protobuf::uint8* RoomMessageCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomMessageCommand)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // optional int32 receiver_id = 2;
  if (has_receiver_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->receiver_id(), target);
  }

  // required bytes message = 3;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomMessageCommand)
  return target;
}

int RoomMessageCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 receiver_id = 2;
    if (has_receiver_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiver_id());
    }

    // required bytes message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMessageCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMessageCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMessageCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMessageCommand::MergeFrom(const RoomMessageCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_receiver_id()) {
      set_receiver_id(from.receiver_id());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMessageCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMessageCommand::CopyFrom(const RoomMessageCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMessageCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void RoomMessageCommand::Swap(RoomMessageCommand* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(receiver_id_, other->receiver_id_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMessageCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMessageCommand_descriptor_;
  metadata.reflection = RoomMessageCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomCreateNotify::kRoomIdFieldNumber;
const int RoomCreateNotify::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

RoomCreateNotify::RoomCreateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomCreateNotify)
}

void RoomCreateNotify::InitAsDefaultInstance() {
}

RoomCreateNotify::RoomCreateNotify(const RoomCreateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomCreateNotify)
}

void RoomCreateNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomCreateNotify::~RoomCreateNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomCreateNotify)
  SharedDtor();
}

void RoomCreateNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomCreateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomCreateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCreateNotify_descriptor_;
}

const RoomCreateNotify& RoomCreateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomCreateNotify* RoomCreateNotify::default_instance_ = NULL;

RoomCreateNotify* RoomCreateNotify::New() const {
  return new RoomCreateNotify;
}

void RoomCreateNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomCreateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomCreateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // required .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomCreateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomCreateNotify)
  return false;
#undef DO_
}

void RoomCreateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomCreateNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomCreateNotify)
}

::google::protobuf::uint8* RoomCreateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomCreateNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomCreateNotify)
  return target;
}

int RoomCreateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomCreateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomCreateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomCreateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomCreateNotify::MergeFrom(const RoomCreateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomCreateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomCreateNotify::CopyFrom(const RoomCreateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomCreateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomCreateNotify::Swap(RoomCreateNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomCreateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomCreateNotify_descriptor_;
  metadata.reflection = RoomCreateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomDeleteNotify::kRoomIdFieldNumber;
const int RoomDeleteNotify::kRoomTypeFieldNumber;
#endif  // !_MSC_VER

RoomDeleteNotify::RoomDeleteNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomDeleteNotify)
}

void RoomDeleteNotify::InitAsDefaultInstance() {
}

RoomDeleteNotify::RoomDeleteNotify(const RoomDeleteNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomDeleteNotify)
}

void RoomDeleteNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDeleteNotify::~RoomDeleteNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomDeleteNotify)
  SharedDtor();
}

void RoomDeleteNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomDeleteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDeleteNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDeleteNotify_descriptor_;
}

const RoomDeleteNotify& RoomDeleteNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomDeleteNotify* RoomDeleteNotify::default_instance_ = NULL;

RoomDeleteNotify* RoomDeleteNotify::New() const {
  return new RoomDeleteNotify;
}

void RoomDeleteNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomDeleteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomDeleteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // required .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomDeleteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomDeleteNotify)
  return false;
#undef DO_
}

void RoomDeleteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomDeleteNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomDeleteNotify)
}

::google::protobuf::uint8* RoomDeleteNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomDeleteNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomDeleteNotify)
  return target;
}

int RoomDeleteNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDeleteNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomDeleteNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomDeleteNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomDeleteNotify::MergeFrom(const RoomDeleteNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomDeleteNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDeleteNotify::CopyFrom(const RoomDeleteNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDeleteNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomDeleteNotify::Swap(RoomDeleteNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomDeleteNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDeleteNotify_descriptor_;
  metadata.reflection = RoomDeleteNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomParticipantJoinNotify::kRoomIdFieldNumber;
const int RoomParticipantJoinNotify::kRoomTypeFieldNumber;
const int RoomParticipantJoinNotify::kJoinerFieldNumber;
#endif  // !_MSC_VER

RoomParticipantJoinNotify::RoomParticipantJoinNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomParticipantJoinNotify)
}

void RoomParticipantJoinNotify::InitAsDefaultInstance() {
  joiner_ = const_cast< ::b2::protocol::channel::RoomParticipant*>(&::b2::protocol::channel::RoomParticipant::default_instance());
}

RoomParticipantJoinNotify::RoomParticipantJoinNotify(const RoomParticipantJoinNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomParticipantJoinNotify)
}

void RoomParticipantJoinNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  joiner_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomParticipantJoinNotify::~RoomParticipantJoinNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomParticipantJoinNotify)
  SharedDtor();
}

void RoomParticipantJoinNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
    delete joiner_;
  }
}

void RoomParticipantJoinNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomParticipantJoinNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomParticipantJoinNotify_descriptor_;
}

const RoomParticipantJoinNotify& RoomParticipantJoinNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomParticipantJoinNotify* RoomParticipantJoinNotify::default_instance_ = NULL;

RoomParticipantJoinNotify* RoomParticipantJoinNotify::New() const {
  return new RoomParticipantJoinNotify;
}

void RoomParticipantJoinNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
    if (has_joiner()) {
      if (joiner_ != NULL) joiner_->::b2::protocol::channel::RoomParticipant::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomParticipantJoinNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomParticipantJoinNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // required .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_joiner;
        break;
      }

      // required .b2.protocol.channel.RoomParticipant joiner = 3;
      case 3: {
        if (tag == 26) {
         parse_joiner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_joiner()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomParticipantJoinNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomParticipantJoinNotify)
  return false;
#undef DO_
}

void RoomParticipantJoinNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomParticipantJoinNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  // required .b2.protocol.channel.RoomParticipant joiner = 3;
  if (has_joiner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->joiner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomParticipantJoinNotify)
}

::google::protobuf::uint8* RoomParticipantJoinNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomParticipantJoinNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  // required .b2.protocol.channel.RoomParticipant joiner = 3;
  if (has_joiner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->joiner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomParticipantJoinNotify)
  return target;
}

int RoomParticipantJoinNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // required .b2.protocol.channel.RoomParticipant joiner = 3;
    if (has_joiner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joiner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomParticipantJoinNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomParticipantJoinNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomParticipantJoinNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomParticipantJoinNotify::MergeFrom(const RoomParticipantJoinNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_joiner()) {
      mutable_joiner()->::b2::protocol::channel::RoomParticipant::MergeFrom(from.joiner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomParticipantJoinNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomParticipantJoinNotify::CopyFrom(const RoomParticipantJoinNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomParticipantJoinNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_joiner()) {
    if (!this->joiner().IsInitialized()) return false;
  }
  return true;
}

void RoomParticipantJoinNotify::Swap(RoomParticipantJoinNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(joiner_, other->joiner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomParticipantJoinNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomParticipantJoinNotify_descriptor_;
  metadata.reflection = RoomParticipantJoinNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomParticipantLeaveNotify::kRoomIdFieldNumber;
const int RoomParticipantLeaveNotify::kRoomTypeFieldNumber;
const int RoomParticipantLeaveNotify::kLeaverFieldNumber;
#endif  // !_MSC_VER

RoomParticipantLeaveNotify::RoomParticipantLeaveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomParticipantLeaveNotify)
}

void RoomParticipantLeaveNotify::InitAsDefaultInstance() {
  leaver_ = const_cast< ::b2::protocol::channel::RoomParticipant*>(&::b2::protocol::channel::RoomParticipant::default_instance());
}

RoomParticipantLeaveNotify::RoomParticipantLeaveNotify(const RoomParticipantLeaveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomParticipantLeaveNotify)
}

void RoomParticipantLeaveNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  leaver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomParticipantLeaveNotify::~RoomParticipantLeaveNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomParticipantLeaveNotify)
  SharedDtor();
}

void RoomParticipantLeaveNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
    delete leaver_;
  }
}

void RoomParticipantLeaveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomParticipantLeaveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomParticipantLeaveNotify_descriptor_;
}

const RoomParticipantLeaveNotify& RoomParticipantLeaveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomParticipantLeaveNotify* RoomParticipantLeaveNotify::default_instance_ = NULL;

RoomParticipantLeaveNotify* RoomParticipantLeaveNotify::New() const {
  return new RoomParticipantLeaveNotify;
}

void RoomParticipantLeaveNotify::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
    if (has_leaver()) {
      if (leaver_ != NULL) leaver_->::b2::protocol::channel::RoomParticipant::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomParticipantLeaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomParticipantLeaveNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // required .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_leaver;
        break;
      }

      // required .b2.protocol.channel.RoomParticipant leaver = 3;
      case 3: {
        if (tag == 26) {
         parse_leaver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaver()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomParticipantLeaveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomParticipantLeaveNotify)
  return false;
#undef DO_
}

void RoomParticipantLeaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomParticipantLeaveNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  // required .b2.protocol.channel.RoomParticipant leaver = 3;
  if (has_leaver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomParticipantLeaveNotify)
}

::google::protobuf::uint8* RoomParticipantLeaveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomParticipantLeaveNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  // required .b2.protocol.channel.RoomParticipant leaver = 3;
  if (has_leaver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomParticipantLeaveNotify)
  return target;
}

int RoomParticipantLeaveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // required .b2.protocol.channel.RoomParticipant leaver = 3;
    if (has_leaver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaver());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomParticipantLeaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomParticipantLeaveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomParticipantLeaveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomParticipantLeaveNotify::MergeFrom(const RoomParticipantLeaveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_leaver()) {
      mutable_leaver()->::b2::protocol::channel::RoomParticipant::MergeFrom(from.leaver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomParticipantLeaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomParticipantLeaveNotify::CopyFrom(const RoomParticipantLeaveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomParticipantLeaveNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_leaver()) {
    if (!this->leaver().IsInitialized()) return false;
  }
  return true;
}

void RoomParticipantLeaveNotify::Swap(RoomParticipantLeaveNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(leaver_, other->leaver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomParticipantLeaveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomParticipantLeaveNotify_descriptor_;
  metadata.reflection = RoomParticipantLeaveNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomHostChangedNotify::kRoomIdFieldNumber;
const int RoomHostChangedNotify::kRoomTypeFieldNumber;
const int RoomHostChangedNotify::kHostIdFieldNumber;
#endif  // !_MSC_VER

RoomHostChangedNotify::RoomHostChangedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomHostChangedNotify)
}

void RoomHostChangedNotify::InitAsDefaultInstance() {
}

RoomHostChangedNotify::RoomHostChangedNotify(const RoomHostChangedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomHostChangedNotify)
}

void RoomHostChangedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  host_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomHostChangedNotify::~RoomHostChangedNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomHostChangedNotify)
  SharedDtor();
}

void RoomHostChangedNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomHostChangedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomHostChangedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomHostChangedNotify_descriptor_;
}

const RoomHostChangedNotify& RoomHostChangedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomHostChangedNotify* RoomHostChangedNotify::default_instance_ = NULL;

RoomHostChangedNotify* RoomHostChangedNotify::New() const {
  return new RoomHostChangedNotify;
}

void RoomHostChangedNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomHostChangedNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(room_type_, host_id_);
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomHostChangedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomHostChangedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // required .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_host_id;
        break;
      }

      // required int32 host_id = 3;
      case 3: {
        if (tag == 24) {
         parse_host_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &host_id_)));
          set_has_host_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomHostChangedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomHostChangedNotify)
  return false;
#undef DO_
}

void RoomHostChangedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomHostChangedNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  // required int32 host_id = 3;
  if (has_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->host_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomHostChangedNotify)
}

::google::protobuf::uint8* RoomHostChangedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomHostChangedNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  // required int32 host_id = 3;
  if (has_host_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->host_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomHostChangedNotify)
  return target;
}

int RoomHostChangedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // required int32 host_id = 3;
    if (has_host_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->host_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomHostChangedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomHostChangedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomHostChangedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomHostChangedNotify::MergeFrom(const RoomHostChangedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_host_id()) {
      set_host_id(from.host_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomHostChangedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomHostChangedNotify::CopyFrom(const RoomHostChangedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomHostChangedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomHostChangedNotify::Swap(RoomHostChangedNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(host_id_, other->host_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomHostChangedNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomHostChangedNotify_descriptor_;
  metadata.reflection = RoomHostChangedNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomMessageNotify::kRoomIdFieldNumber;
const int RoomMessageNotify::kRoomTypeFieldNumber;
const int RoomMessageNotify::kSenderFieldNumber;
const int RoomMessageNotify::kMessageFieldNumber;
#endif  // !_MSC_VER

RoomMessageNotify::RoomMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomMessageNotify)
}

void RoomMessageNotify::InitAsDefaultInstance() {
  sender_ = const_cast< ::b2::protocol::channel::RoomParticipant*>(&::b2::protocol::channel::RoomParticipant::default_instance());
}

RoomMessageNotify::RoomMessageNotify(const RoomMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomMessageNotify)
}

void RoomMessageNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  room_type_ = 0;
  sender_ = NULL;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMessageNotify::~RoomMessageNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomMessageNotify)
  SharedDtor();
}

void RoomMessageNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
    delete sender_;
  }
}

void RoomMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMessageNotify_descriptor_;
}

const RoomMessageNotify& RoomMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomMessageNotify* RoomMessageNotify::default_instance_ = NULL;

RoomMessageNotify* RoomMessageNotify::New() const {
  return new RoomMessageNotify;
}

void RoomMessageNotify::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    room_type_ = 0;
    if (has_sender()) {
      if (sender_ != NULL) sender_->::b2::protocol::channel::RoomParticipant::Clear();
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_room_type;
        break;
      }

      // required .b2.protocol.channel.RoomType room_type = 2;
      case 2: {
        if (tag == 16) {
         parse_room_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::channel::RoomType_IsValid(value)) {
            set_room_type(static_cast< ::b2::protocol::channel::RoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // required .b2.protocol.channel.RoomParticipant sender = 3;
      case 3: {
        if (tag == 26) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sender()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_message;
        break;
      }

      // required bytes message = 4;
      case 4: {
        if (tag == 34) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomMessageNotify)
  return false;
#undef DO_
}

void RoomMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomMessageNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->room_type(), output);
  }

  // required .b2.protocol.channel.RoomParticipant sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sender(), output);
  }

  // required bytes message = 4;
  if (has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomMessageNotify)
}

::google::protobuf::uint8* RoomMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomMessageNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required .b2.protocol.channel.RoomType room_type = 2;
  if (has_room_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->room_type(), target);
  }

  // required .b2.protocol.channel.RoomParticipant sender = 3;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sender(), target);
  }

  // required bytes message = 4;
  if (has_message()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomMessageNotify)
  return target;
}

int RoomMessageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required .b2.protocol.channel.RoomType room_type = 2;
    if (has_room_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->room_type());
    }

    // required .b2.protocol.channel.RoomParticipant sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sender());
    }

    // required bytes message = 4;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMessageNotify::MergeFrom(const RoomMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_room_type()) {
      set_room_type(from.room_type());
    }
    if (from.has_sender()) {
      mutable_sender()->::b2::protocol::channel::RoomParticipant::MergeFrom(from.sender());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMessageNotify::CopyFrom(const RoomMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_sender()) {
    if (!this->sender().IsInitialized()) return false;
  }
  return true;
}

void RoomMessageNotify::Swap(RoomMessageNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(room_type_, other->room_type_);
    std::swap(sender_, other->sender_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMessageNotify_descriptor_;
  metadata.reflection = RoomMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomSetPropertyRequest::kRoomIdFieldNumber;
const int RoomSetPropertyRequest::kPropertiesFieldNumber;
#endif  // !_MSC_VER

RoomSetPropertyRequest::RoomSetPropertyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomSetPropertyRequest)
}

void RoomSetPropertyRequest::InitAsDefaultInstance() {
}

RoomSetPropertyRequest::RoomSetPropertyRequest(const RoomSetPropertyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomSetPropertyRequest)
}

void RoomSetPropertyRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomSetPropertyRequest::~RoomSetPropertyRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomSetPropertyRequest)
  SharedDtor();
}

void RoomSetPropertyRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomSetPropertyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomSetPropertyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomSetPropertyRequest_descriptor_;
}

const RoomSetPropertyRequest& RoomSetPropertyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomSetPropertyRequest* RoomSetPropertyRequest::default_instance_ = NULL;

RoomSetPropertyRequest* RoomSetPropertyRequest::New() const {
  return new RoomSetPropertyRequest;
}

void RoomSetPropertyRequest::Clear() {
  if (has_room_id()) {
    if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      room_id_->clear();
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomSetPropertyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomSetPropertyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // repeated .b2.protocol.channel.RoomProperty properties = 2;
      case 2: {
        if (tag == 18) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomSetPropertyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomSetPropertyRequest)
  return false;
#undef DO_
}

void RoomSetPropertyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomSetPropertyRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomSetPropertyRequest)
}

::google::protobuf::uint8* RoomSetPropertyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomSetPropertyRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomSetPropertyRequest)
  return target;
}

int RoomSetPropertyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomSetPropertyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomSetPropertyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomSetPropertyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomSetPropertyRequest::MergeFrom(const RoomSetPropertyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomSetPropertyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomSetPropertyRequest::CopyFrom(const RoomSetPropertyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomSetPropertyRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void RoomSetPropertyRequest::Swap(RoomSetPropertyRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomSetPropertyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomSetPropertyRequest_descriptor_;
  metadata.reflection = RoomSetPropertyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomSetPropertyResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RoomSetPropertyResponse::RoomSetPropertyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomSetPropertyResponse)
}

void RoomSetPropertyResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomSetPropertyResponse::RoomSetPropertyResponse(const RoomSetPropertyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomSetPropertyResponse)
}

void RoomSetPropertyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomSetPropertyResponse::~RoomSetPropertyResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomSetPropertyResponse)
  SharedDtor();
}

void RoomSetPropertyResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomSetPropertyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomSetPropertyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomSetPropertyResponse_descriptor_;
}

const RoomSetPropertyResponse& RoomSetPropertyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomSetPropertyResponse* RoomSetPropertyResponse::default_instance_ = NULL;

RoomSetPropertyResponse* RoomSetPropertyResponse::New() const {
  return new RoomSetPropertyResponse;
}

void RoomSetPropertyResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomSetPropertyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomSetPropertyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomSetPropertyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomSetPropertyResponse)
  return false;
#undef DO_
}

void RoomSetPropertyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomSetPropertyResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomSetPropertyResponse)
}

::google::protobuf::uint8* RoomSetPropertyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomSetPropertyResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomSetPropertyResponse)
  return target;
}

int RoomSetPropertyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomSetPropertyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomSetPropertyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomSetPropertyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomSetPropertyResponse::MergeFrom(const RoomSetPropertyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomSetPropertyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomSetPropertyResponse::CopyFrom(const RoomSetPropertyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomSetPropertyResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomSetPropertyResponse::Swap(RoomSetPropertyResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomSetPropertyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomSetPropertyResponse_descriptor_;
  metadata.reflection = RoomSetPropertyResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomPropertyUpdatedNotify::kRoomIdFieldNumber;
const int RoomPropertyUpdatedNotify::kPropertiesFieldNumber;
#endif  // !_MSC_VER

RoomPropertyUpdatedNotify::RoomPropertyUpdatedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomPropertyUpdatedNotify)
}

void RoomPropertyUpdatedNotify::InitAsDefaultInstance() {
}

RoomPropertyUpdatedNotify::RoomPropertyUpdatedNotify(const RoomPropertyUpdatedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomPropertyUpdatedNotify)
}

void RoomPropertyUpdatedNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomPropertyUpdatedNotify::~RoomPropertyUpdatedNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomPropertyUpdatedNotify)
  SharedDtor();
}

void RoomPropertyUpdatedNotify::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomPropertyUpdatedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomPropertyUpdatedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomPropertyUpdatedNotify_descriptor_;
}

const RoomPropertyUpdatedNotify& RoomPropertyUpdatedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomPropertyUpdatedNotify* RoomPropertyUpdatedNotify::default_instance_ = NULL;

RoomPropertyUpdatedNotify* RoomPropertyUpdatedNotify::New() const {
  return new RoomPropertyUpdatedNotify;
}

void RoomPropertyUpdatedNotify::Clear() {
  if (has_room_id()) {
    if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      room_id_->clear();
    }
  }
  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomPropertyUpdatedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomPropertyUpdatedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        break;
      }

      // repeated .b2.protocol.channel.RoomProperty properties = 2;
      case 2: {
        if (tag == 18) {
         parse_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_properties;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomPropertyUpdatedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomPropertyUpdatedNotify)
  return false;
#undef DO_
}

void RoomPropertyUpdatedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomPropertyUpdatedNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->properties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomPropertyUpdatedNotify)
}

::google::protobuf::uint8* RoomPropertyUpdatedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomPropertyUpdatedNotify)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  for (int i = 0; i < this->properties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->properties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomPropertyUpdatedNotify)
  return target;
}

int RoomPropertyUpdatedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  // repeated .b2.protocol.channel.RoomProperty properties = 2;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomPropertyUpdatedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomPropertyUpdatedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomPropertyUpdatedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomPropertyUpdatedNotify::MergeFrom(const RoomPropertyUpdatedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomPropertyUpdatedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomPropertyUpdatedNotify::CopyFrom(const RoomPropertyUpdatedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPropertyUpdatedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void RoomPropertyUpdatedNotify::Swap(RoomPropertyUpdatedNotify* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    properties_.Swap(&other->properties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomPropertyUpdatedNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomPropertyUpdatedNotify_descriptor_;
  metadata.reflection = RoomPropertyUpdatedNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInviteRequest::kRoomIdFieldNumber;
const int RoomInviteRequest::kInviteeFieldNumber;
const int RoomInviteRequest::kInvitationNumberFieldNumber;
const int RoomInviteRequest::kMapIdFieldNumber;
const int RoomInviteRequest::kDifficultyFieldNumber;
#endif  // !_MSC_VER

RoomInviteRequest::RoomInviteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomInviteRequest)
}

void RoomInviteRequest::InitAsDefaultInstance() {
}

RoomInviteRequest::RoomInviteRequest(const RoomInviteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomInviteRequest)
}

void RoomInviteRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitee_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invitation_number_ = 0;
  map_id_ = 0;
  difficulty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInviteRequest::~RoomInviteRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomInviteRequest)
  SharedDtor();
}

void RoomInviteRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (invitee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitee_;
  }
  if (this != default_instance_) {
  }
}

void RoomInviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInviteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInviteRequest_descriptor_;
}

const RoomInviteRequest& RoomInviteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomInviteRequest* RoomInviteRequest::default_instance_ = NULL;

RoomInviteRequest* RoomInviteRequest::New() const {
  return new RoomInviteRequest;
}

void RoomInviteRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RoomInviteRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(invitation_number_, difficulty_);
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    if (has_invitee()) {
      if (invitee_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitee_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomInviteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_invitee;
        break;
      }

      // required string invitee = 2;
      case 2: {
        if (tag == 18) {
         parse_invitee:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitee()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitee().data(), this->invitee().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitee");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_invitation_number;
        break;
      }

      // required int32 invitation_number = 3;
      case 3: {
        if (tag == 24) {
         parse_invitation_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invitation_number_)));
          set_has_invitation_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_map_id;
        break;
      }

      // optional int32 map_id = 4;
      case 4: {
        if (tag == 32) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_difficulty;
        break;
      }

      // optional int32 difficulty = 5;
      case 5: {
        if (tag == 40) {
         parse_difficulty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &difficulty_)));
          set_has_difficulty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomInviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomInviteRequest)
  return false;
#undef DO_
}

void RoomInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomInviteRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required string invitee = 2;
  if (has_invitee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee().data(), this->invitee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitee");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->invitee(), output);
  }

  // required int32 invitation_number = 3;
  if (has_invitation_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->invitation_number(), output);
  }

  // optional int32 map_id = 4;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->map_id(), output);
  }

  // optional int32 difficulty = 5;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->difficulty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomInviteRequest)
}

::google::protobuf::uint8* RoomInviteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomInviteRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required string invitee = 2;
  if (has_invitee()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitee().data(), this->invitee().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitee");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitee(), target);
  }

  // required int32 invitation_number = 3;
  if (has_invitation_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->invitation_number(), target);
  }

  // optional int32 map_id = 4;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->map_id(), target);
  }

  // optional int32 difficulty = 5;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->difficulty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomInviteRequest)
  return target;
}

int RoomInviteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required string invitee = 2;
    if (has_invitee()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitee());
    }

    // required int32 invitation_number = 3;
    if (has_invitation_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invitation_number());
    }

    // optional int32 map_id = 4;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_id());
    }

    // optional int32 difficulty = 5;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->difficulty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInviteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInviteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInviteRequest::MergeFrom(const RoomInviteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_invitee()) {
      set_invitee(from.invitee());
    }
    if (from.has_invitation_number()) {
      set_invitation_number(from.invitation_number());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInviteRequest::CopyFrom(const RoomInviteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInviteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomInviteRequest::Swap(RoomInviteRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(invitee_, other->invitee_);
    std::swap(invitation_number_, other->invitation_number_);
    std::swap(map_id_, other->map_id_);
    std::swap(difficulty_, other->difficulty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInviteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInviteRequest_descriptor_;
  metadata.reflection = RoomInviteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomInviteResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RoomInviteResponse::RoomInviteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomInviteResponse)
}

void RoomInviteResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomInviteResponse::RoomInviteResponse(const RoomInviteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomInviteResponse)
}

void RoomInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomInviteResponse::~RoomInviteResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomInviteResponse)
  SharedDtor();
}

void RoomInviteResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomInviteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomInviteResponse_descriptor_;
}

const RoomInviteResponse& RoomInviteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomInviteResponse* RoomInviteResponse::default_instance_ = NULL;

RoomInviteResponse* RoomInviteResponse::New() const {
  return new RoomInviteResponse;
}

void RoomInviteResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomInviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomInviteResponse)
  return false;
#undef DO_
}

void RoomInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomInviteResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomInviteResponse)
}

::google::protobuf::uint8* RoomInviteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomInviteResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomInviteResponse)
  return target;
}

int RoomInviteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomInviteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomInviteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomInviteResponse::MergeFrom(const RoomInviteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomInviteResponse::CopyFrom(const RoomInviteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInviteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomInviteResponse::Swap(RoomInviteResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomInviteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomInviteResponse_descriptor_;
  metadata.reflection = RoomInviteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomKickRequest::kRoomIdFieldNumber;
const int RoomKickRequest::kKickAccountIdFieldNumber;
#endif  // !_MSC_VER

RoomKickRequest::RoomKickRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomKickRequest)
}

void RoomKickRequest::InitAsDefaultInstance() {
}

RoomKickRequest::RoomKickRequest(const RoomKickRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomKickRequest)
}

void RoomKickRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_account_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomKickRequest::~RoomKickRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomKickRequest)
  SharedDtor();
}

void RoomKickRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomKickRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomKickRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomKickRequest_descriptor_;
}

const RoomKickRequest& RoomKickRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomKickRequest* RoomKickRequest::default_instance_ = NULL;

RoomKickRequest* RoomKickRequest::New() const {
  return new RoomKickRequest;
}

void RoomKickRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    kick_account_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomKickRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomKickRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kick_account_id;
        break;
      }

      // required int64 kick_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_kick_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kick_account_id_)));
          set_has_kick_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomKickRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomKickRequest)
  return false;
#undef DO_
}

void RoomKickRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomKickRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required int64 kick_account_id = 2;
  if (has_kick_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->kick_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomKickRequest)
}

::google::protobuf::uint8* RoomKickRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomKickRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required int64 kick_account_id = 2;
  if (has_kick_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->kick_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomKickRequest)
  return target;
}

int RoomKickRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required int64 kick_account_id = 2;
    if (has_kick_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kick_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomKickRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomKickRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomKickRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomKickRequest::MergeFrom(const RoomKickRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_kick_account_id()) {
      set_kick_account_id(from.kick_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomKickRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomKickRequest::CopyFrom(const RoomKickRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomKickRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomKickRequest::Swap(RoomKickRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(kick_account_id_, other->kick_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomKickRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomKickRequest_descriptor_;
  metadata.reflection = RoomKickRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomKickResponse::kResultFieldNumber;
const int RoomKickResponse::kKickedAccountIdFieldNumber;
#endif  // !_MSC_VER

RoomKickResponse::RoomKickResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomKickResponse)
}

void RoomKickResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomKickResponse::RoomKickResponse(const RoomKickResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomKickResponse)
}

void RoomKickResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  kicked_account_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomKickResponse::~RoomKickResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomKickResponse)
  SharedDtor();
}

void RoomKickResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomKickResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomKickResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomKickResponse_descriptor_;
}

const RoomKickResponse& RoomKickResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomKickResponse* RoomKickResponse::default_instance_ = NULL;

RoomKickResponse* RoomKickResponse::New() const {
  return new RoomKickResponse;
}

void RoomKickResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    kicked_account_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomKickResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomKickResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kicked_account_id;
        break;
      }

      // optional int64 kicked_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_kicked_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kicked_account_id_)));
          set_has_kicked_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomKickResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomKickResponse)
  return false;
#undef DO_
}

void RoomKickResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomKickResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional int64 kicked_account_id = 2;
  if (has_kicked_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->kicked_account_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomKickResponse)
}

::google::protobuf::uint8* RoomKickResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomKickResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional int64 kicked_account_id = 2;
  if (has_kicked_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->kicked_account_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomKickResponse)
  return target;
}

int RoomKickResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional int64 kicked_account_id = 2;
    if (has_kicked_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kicked_account_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomKickResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomKickResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomKickResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomKickResponse::MergeFrom(const RoomKickResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_kicked_account_id()) {
      set_kicked_account_id(from.kicked_account_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomKickResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomKickResponse::CopyFrom(const RoomKickResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomKickResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomKickResponse::Swap(RoomKickResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(kicked_account_id_, other->kicked_account_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomKickResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomKickResponse_descriptor_;
  metadata.reflection = RoomKickResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomLeaveResultRequest::kRoomIdFieldNumber;
const int RoomLeaveResultRequest::kLeavedAccountIdFieldNumber;
const int RoomLeaveResultRequest::kMatchTokenFieldNumber;
#endif  // !_MSC_VER

RoomLeaveResultRequest::RoomLeaveResultRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomLeaveResultRequest)
}

void RoomLeaveResultRequest::InitAsDefaultInstance() {
}

RoomLeaveResultRequest::RoomLeaveResultRequest(const RoomLeaveResultRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomLeaveResultRequest)
}

void RoomLeaveResultRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leaved_account_id_ = GOOGLE_LONGLONG(0);
  match_token_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomLeaveResultRequest::~RoomLeaveResultRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomLeaveResultRequest)
  SharedDtor();
}

void RoomLeaveResultRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete match_token_;
  }
  if (this != default_instance_) {
  }
}

void RoomLeaveResultRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLeaveResultRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomLeaveResultRequest_descriptor_;
}

const RoomLeaveResultRequest& RoomLeaveResultRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomLeaveResultRequest* RoomLeaveResultRequest::default_instance_ = NULL;

RoomLeaveResultRequest* RoomLeaveResultRequest::New() const {
  return new RoomLeaveResultRequest;
}

void RoomLeaveResultRequest::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    leaved_account_id_ = GOOGLE_LONGLONG(0);
    if (has_match_token()) {
      if (match_token_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        match_token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomLeaveResultRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomLeaveResultRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leaved_account_id;
        break;
      }

      // required int64 leaved_account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_leaved_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &leaved_account_id_)));
          set_has_leaved_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_match_token;
        break;
      }

      // required string match_token = 3;
      case 3: {
        if (tag == 26) {
         parse_match_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_match_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->match_token().data(), this->match_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "match_token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomLeaveResultRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomLeaveResultRequest)
  return false;
#undef DO_
}

void RoomLeaveResultRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomLeaveResultRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required int64 leaved_account_id = 2;
  if (has_leaved_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->leaved_account_id(), output);
  }

  // required string match_token = 3;
  if (has_match_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_token().data(), this->match_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->match_token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomLeaveResultRequest)
}

::google::protobuf::uint8* RoomLeaveResultRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomLeaveResultRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required int64 leaved_account_id = 2;
  if (has_leaved_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->leaved_account_id(), target);
  }

  // required string match_token = 3;
  if (has_match_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->match_token().data(), this->match_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "match_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->match_token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomLeaveResultRequest)
  return target;
}

int RoomLeaveResultRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required int64 leaved_account_id = 2;
    if (has_leaved_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->leaved_account_id());
    }

    // required string match_token = 3;
    if (has_match_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->match_token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLeaveResultRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomLeaveResultRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomLeaveResultRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomLeaveResultRequest::MergeFrom(const RoomLeaveResultRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_leaved_account_id()) {
      set_leaved_account_id(from.leaved_account_id());
    }
    if (from.has_match_token()) {
      set_match_token(from.match_token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomLeaveResultRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLeaveResultRequest::CopyFrom(const RoomLeaveResultRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLeaveResultRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoomLeaveResultRequest::Swap(RoomLeaveResultRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(leaved_account_id_, other->leaved_account_id_);
    std::swap(match_token_, other->match_token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomLeaveResultRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomLeaveResultRequest_descriptor_;
  metadata.reflection = RoomLeaveResultRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomLeaveResultResponse::kResultFieldNumber;
#endif  // !_MSC_VER

RoomLeaveResultResponse::RoomLeaveResultResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomLeaveResultResponse)
}

void RoomLeaveResultResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomLeaveResultResponse::RoomLeaveResultResponse(const RoomLeaveResultResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomLeaveResultResponse)
}

void RoomLeaveResultResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomLeaveResultResponse::~RoomLeaveResultResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomLeaveResultResponse)
  SharedDtor();
}

void RoomLeaveResultResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomLeaveResultResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomLeaveResultResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomLeaveResultResponse_descriptor_;
}

const RoomLeaveResultResponse& RoomLeaveResultResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomLeaveResultResponse* RoomLeaveResultResponse::default_instance_ = NULL;

RoomLeaveResultResponse* RoomLeaveResultResponse::New() const {
  return new RoomLeaveResultResponse;
}

void RoomLeaveResultResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomLeaveResultResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomLeaveResultResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomLeaveResultResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomLeaveResultResponse)
  return false;
#undef DO_
}

void RoomLeaveResultResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomLeaveResultResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomLeaveResultResponse)
}

::google::protobuf::uint8* RoomLeaveResultResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomLeaveResultResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomLeaveResultResponse)
  return target;
}

int RoomLeaveResultResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomLeaveResultResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomLeaveResultResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomLeaveResultResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomLeaveResultResponse::MergeFrom(const RoomLeaveResultResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomLeaveResultResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomLeaveResultResponse::CopyFrom(const RoomLeaveResultResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomLeaveResultResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomLeaveResultResponse::Swap(RoomLeaveResultResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomLeaveResultResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomLeaveResultResponse_descriptor_;
  metadata.reflection = RoomLeaveResultResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomHeartbeatCommand::kRoomIdFieldNumber;
#endif  // !_MSC_VER

RoomHeartbeatCommand::RoomHeartbeatCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomHeartbeatCommand)
}

void RoomHeartbeatCommand::InitAsDefaultInstance() {
}

RoomHeartbeatCommand::RoomHeartbeatCommand(const RoomHeartbeatCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomHeartbeatCommand)
}

void RoomHeartbeatCommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomHeartbeatCommand::~RoomHeartbeatCommand() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomHeartbeatCommand)
  SharedDtor();
}

void RoomHeartbeatCommand::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomHeartbeatCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomHeartbeatCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomHeartbeatCommand_descriptor_;
}

const RoomHeartbeatCommand& RoomHeartbeatCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomHeartbeatCommand* RoomHeartbeatCommand::default_instance_ = NULL;

RoomHeartbeatCommand* RoomHeartbeatCommand::New() const {
  return new RoomHeartbeatCommand;
}

void RoomHeartbeatCommand::Clear() {
  if (has_room_id()) {
    if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      room_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomHeartbeatCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomHeartbeatCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomHeartbeatCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomHeartbeatCommand)
  return false;
#undef DO_
}

void RoomHeartbeatCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomHeartbeatCommand)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomHeartbeatCommand)
}

::google::protobuf::uint8* RoomHeartbeatCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomHeartbeatCommand)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomHeartbeatCommand)
  return target;
}

int RoomHeartbeatCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomHeartbeatCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomHeartbeatCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomHeartbeatCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomHeartbeatCommand::MergeFrom(const RoomHeartbeatCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomHeartbeatCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomHeartbeatCommand::CopyFrom(const RoomHeartbeatCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomHeartbeatCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoomHeartbeatCommand::Swap(RoomHeartbeatCommand* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomHeartbeatCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomHeartbeatCommand_descriptor_;
  metadata.reflection = RoomHeartbeatCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoomHeartbeatNotify::RoomHeartbeatNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomHeartbeatNotify)
}

void RoomHeartbeatNotify::InitAsDefaultInstance() {
}

RoomHeartbeatNotify::RoomHeartbeatNotify(const RoomHeartbeatNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomHeartbeatNotify)
}

void RoomHeartbeatNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomHeartbeatNotify::~RoomHeartbeatNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomHeartbeatNotify)
  SharedDtor();
}

void RoomHeartbeatNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomHeartbeatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomHeartbeatNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomHeartbeatNotify_descriptor_;
}

const RoomHeartbeatNotify& RoomHeartbeatNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomHeartbeatNotify* RoomHeartbeatNotify::default_instance_ = NULL;

RoomHeartbeatNotify* RoomHeartbeatNotify::New() const {
  return new RoomHeartbeatNotify;
}

void RoomHeartbeatNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomHeartbeatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomHeartbeatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomHeartbeatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomHeartbeatNotify)
  return false;
#undef DO_
}

void RoomHeartbeatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomHeartbeatNotify)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomHeartbeatNotify)
}

::google::protobuf::uint8* RoomHeartbeatNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomHeartbeatNotify)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomHeartbeatNotify)
  return target;
}

int RoomHeartbeatNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomHeartbeatNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomHeartbeatNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomHeartbeatNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomHeartbeatNotify::MergeFrom(const RoomHeartbeatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomHeartbeatNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomHeartbeatNotify::CopyFrom(const RoomHeartbeatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomHeartbeatNotify::IsInitialized() const {

  return true;
}

void RoomHeartbeatNotify::Swap(RoomHeartbeatNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomHeartbeatNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomHeartbeatNotify_descriptor_;
  metadata.reflection = RoomHeartbeatNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomHeartbeatRequest::kRoomIdFieldNumber;
const int RoomHeartbeatRequest::kSeqFieldNumber;
#endif  // !_MSC_VER

RoomHeartbeatRequest::RoomHeartbeatRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomHeartbeatRequest)
}

void RoomHeartbeatRequest::InitAsDefaultInstance() {
}

RoomHeartbeatRequest::RoomHeartbeatRequest(const RoomHeartbeatRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomHeartbeatRequest)
}

void RoomHeartbeatRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomHeartbeatRequest::~RoomHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomHeartbeatRequest)
  SharedDtor();
}

void RoomHeartbeatRequest::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
  }
}

void RoomHeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomHeartbeatRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomHeartbeatRequest_descriptor_;
}

const RoomHeartbeatRequest& RoomHeartbeatRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomHeartbeatRequest* RoomHeartbeatRequest::default_instance_ = NULL;

RoomHeartbeatRequest* RoomHeartbeatRequest::New() const {
  return new RoomHeartbeatRequest;
}

void RoomHeartbeatRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomHeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomHeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string room_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seq;
        break;
      }

      // required int32 seq = 2;
      case 2: {
        if (tag == 16) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomHeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomHeartbeatRequest)
  return false;
#undef DO_
}

void RoomHeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomHeartbeatRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_id(), output);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomHeartbeatRequest)
}

::google::protobuf::uint8* RoomHeartbeatRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomHeartbeatRequest)
  // required string room_id = 1;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_id(), target);
  }

  // required int32 seq = 2;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomHeartbeatRequest)
  return target;
}

int RoomHeartbeatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string room_id = 1;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // required int32 seq = 2;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomHeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomHeartbeatRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomHeartbeatRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomHeartbeatRequest::MergeFrom(const RoomHeartbeatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomHeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomHeartbeatRequest::CopyFrom(const RoomHeartbeatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomHeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomHeartbeatRequest::Swap(RoomHeartbeatRequest* other) {
  if (other != this) {
    std::swap(room_id_, other->room_id_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomHeartbeatRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomHeartbeatRequest_descriptor_;
  metadata.reflection = RoomHeartbeatRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomHeartbeatResponse::kResultFieldNumber;
const int RoomHeartbeatResponse::kRoomIdFieldNumber;
const int RoomHeartbeatResponse::kSeqFieldNumber;
#endif  // !_MSC_VER

RoomHeartbeatResponse::RoomHeartbeatResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.RoomHeartbeatResponse)
}

void RoomHeartbeatResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

RoomHeartbeatResponse::RoomHeartbeatResponse(const RoomHeartbeatResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.RoomHeartbeatResponse)
}

void RoomHeartbeatResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  room_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  seq_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomHeartbeatResponse::~RoomHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.RoomHeartbeatResponse)
  SharedDtor();
}

void RoomHeartbeatResponse::SharedDtor() {
  if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete room_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void RoomHeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomHeartbeatResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomHeartbeatResponse_descriptor_;
}

const RoomHeartbeatResponse& RoomHeartbeatResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

RoomHeartbeatResponse* RoomHeartbeatResponse::default_instance_ = NULL;

RoomHeartbeatResponse* RoomHeartbeatResponse::New() const {
  return new RoomHeartbeatResponse;
}

void RoomHeartbeatResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_room_id()) {
      if (room_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        room_id_->clear();
      }
    }
    seq_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomHeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.RoomHeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_room_id;
        break;
      }

      // optional string room_id = 10;
      case 10: {
        if (tag == 82) {
         parse_room_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->room_id().data(), this->room_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "room_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_seq;
        break;
      }

      // optional int32 seq = 11;
      case 11: {
        if (tag == 88) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.RoomHeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.RoomHeartbeatResponse)
  return false;
#undef DO_
}

void RoomHeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.RoomHeartbeatResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string room_id = 10;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->room_id(), output);
  }

  // optional int32 seq = 11;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.RoomHeartbeatResponse)
}

::google::protobuf::uint8* RoomHeartbeatResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.RoomHeartbeatResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string room_id = 10;
  if (has_room_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->room_id().data(), this->room_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "room_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->room_id(), target);
  }

  // optional int32 seq = 11;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.RoomHeartbeatResponse)
  return target;
}

int RoomHeartbeatResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string room_id = 10;
    if (has_room_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room_id());
    }

    // optional int32 seq = 11;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomHeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomHeartbeatResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomHeartbeatResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomHeartbeatResponse::MergeFrom(const RoomHeartbeatResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_room_id()) {
      set_room_id(from.room_id());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomHeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomHeartbeatResponse::CopyFrom(const RoomHeartbeatResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomHeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void RoomHeartbeatResponse::Swap(RoomHeartbeatResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(room_id_, other->room_id_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomHeartbeatResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomHeartbeatResponse_descriptor_;
  metadata.reflection = RoomHeartbeatResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRoomDebugModeRequest::kSkipRoomHeartBeatCheckFieldNumber;
#endif  // !_MSC_VER

SetRoomDebugModeRequest::SetRoomDebugModeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.SetRoomDebugModeRequest)
}

void SetRoomDebugModeRequest::InitAsDefaultInstance() {
}

SetRoomDebugModeRequest::SetRoomDebugModeRequest(const SetRoomDebugModeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.SetRoomDebugModeRequest)
}

void SetRoomDebugModeRequest::SharedCtor() {
  _cached_size_ = 0;
  skip_room_heart_beat_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRoomDebugModeRequest::~SetRoomDebugModeRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.SetRoomDebugModeRequest)
  SharedDtor();
}

void SetRoomDebugModeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetRoomDebugModeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoomDebugModeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRoomDebugModeRequest_descriptor_;
}

const SetRoomDebugModeRequest& SetRoomDebugModeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

SetRoomDebugModeRequest* SetRoomDebugModeRequest::default_instance_ = NULL;

SetRoomDebugModeRequest* SetRoomDebugModeRequest::New() const {
  return new SetRoomDebugModeRequest;
}

void SetRoomDebugModeRequest::Clear() {
  skip_room_heart_beat_check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRoomDebugModeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.SetRoomDebugModeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool skip_room_heart_beat_check = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_room_heart_beat_check_)));
          set_has_skip_room_heart_beat_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.SetRoomDebugModeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.SetRoomDebugModeRequest)
  return false;
#undef DO_
}

void SetRoomDebugModeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.SetRoomDebugModeRequest)
  // optional bool skip_room_heart_beat_check = 1;
  if (has_skip_room_heart_beat_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->skip_room_heart_beat_check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.SetRoomDebugModeRequest)
}

::google::protobuf::uint8* SetRoomDebugModeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.SetRoomDebugModeRequest)
  // optional bool skip_room_heart_beat_check = 1;
  if (has_skip_room_heart_beat_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->skip_room_heart_beat_check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.SetRoomDebugModeRequest)
  return target;
}

int SetRoomDebugModeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool skip_room_heart_beat_check = 1;
    if (has_skip_room_heart_beat_check()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoomDebugModeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRoomDebugModeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRoomDebugModeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRoomDebugModeRequest::MergeFrom(const SetRoomDebugModeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skip_room_heart_beat_check()) {
      set_skip_room_heart_beat_check(from.skip_room_heart_beat_check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRoomDebugModeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoomDebugModeRequest::CopyFrom(const SetRoomDebugModeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoomDebugModeRequest::IsInitialized() const {

  return true;
}

void SetRoomDebugModeRequest::Swap(SetRoomDebugModeRequest* other) {
  if (other != this) {
    std::swap(skip_room_heart_beat_check_, other->skip_room_heart_beat_check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRoomDebugModeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRoomDebugModeRequest_descriptor_;
  metadata.reflection = SetRoomDebugModeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetRoomDebugModeResponse::kResultFieldNumber;
#endif  // !_MSC_VER

SetRoomDebugModeResponse::SetRoomDebugModeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.SetRoomDebugModeResponse)
}

void SetRoomDebugModeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

SetRoomDebugModeResponse::SetRoomDebugModeResponse(const SetRoomDebugModeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.SetRoomDebugModeResponse)
}

void SetRoomDebugModeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetRoomDebugModeResponse::~SetRoomDebugModeResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.SetRoomDebugModeResponse)
  SharedDtor();
}

void SetRoomDebugModeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void SetRoomDebugModeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRoomDebugModeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRoomDebugModeResponse_descriptor_;
}

const SetRoomDebugModeResponse& SetRoomDebugModeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

SetRoomDebugModeResponse* SetRoomDebugModeResponse::default_instance_ = NULL;

SetRoomDebugModeResponse* SetRoomDebugModeResponse::New() const {
  return new SetRoomDebugModeResponse;
}

void SetRoomDebugModeResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetRoomDebugModeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.SetRoomDebugModeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.SetRoomDebugModeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.SetRoomDebugModeResponse)
  return false;
#undef DO_
}

void SetRoomDebugModeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.SetRoomDebugModeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.SetRoomDebugModeResponse)
}

::google::protobuf::uint8* SetRoomDebugModeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.SetRoomDebugModeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.SetRoomDebugModeResponse)
  return target;
}

int SetRoomDebugModeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRoomDebugModeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetRoomDebugModeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetRoomDebugModeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRoomDebugModeResponse::MergeFrom(const SetRoomDebugModeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetRoomDebugModeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRoomDebugModeResponse::CopyFrom(const SetRoomDebugModeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRoomDebugModeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void SetRoomDebugModeResponse::Swap(SetRoomDebugModeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetRoomDebugModeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRoomDebugModeResponse_descriptor_;
  metadata.reflection = SetRoomDebugModeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelPublishRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

ChannelPublishRequest::ChannelPublishRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ChannelPublishRequest)
}

void ChannelPublishRequest::InitAsDefaultInstance() {
}

ChannelPublishRequest::ChannelPublishRequest(const ChannelPublishRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ChannelPublishRequest)
}

void ChannelPublishRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelPublishRequest::~ChannelPublishRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ChannelPublishRequest)
  SharedDtor();
}

void ChannelPublishRequest::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (this != default_instance_) {
  }
}

void ChannelPublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelPublishRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelPublishRequest_descriptor_;
}

const ChannelPublishRequest& ChannelPublishRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ChannelPublishRequest* ChannelPublishRequest::default_instance_ = NULL;

ChannelPublishRequest* ChannelPublishRequest::New() const {
  return new ChannelPublishRequest;
}

void ChannelPublishRequest::Clear() {
  if (has_channel_id()) {
    if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      channel_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelPublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ChannelPublishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ChannelPublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ChannelPublishRequest)
  return false;
#undef DO_
}

void ChannelPublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ChannelPublishRequest)
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ChannelPublishRequest)
}

::google::protobuf::uint8* ChannelPublishRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ChannelPublishRequest)
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ChannelPublishRequest)
  return target;
}

int ChannelPublishRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelPublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelPublishRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelPublishRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelPublishRequest::MergeFrom(const ChannelPublishRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelPublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelPublishRequest::CopyFrom(const ChannelPublishRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelPublishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChannelPublishRequest::Swap(ChannelPublishRequest* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelPublishRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelPublishRequest_descriptor_;
  metadata.reflection = ChannelPublishRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelPublishResponse::kResultFieldNumber;
const int ChannelPublishResponse::kChannelIdFieldNumber;
#endif  // !_MSC_VER

ChannelPublishResponse::ChannelPublishResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ChannelPublishResponse)
}

void ChannelPublishResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ChannelPublishResponse::ChannelPublishResponse(const ChannelPublishResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ChannelPublishResponse)
}

void ChannelPublishResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelPublishResponse::~ChannelPublishResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ChannelPublishResponse)
  SharedDtor();
}

void ChannelPublishResponse::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ChannelPublishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelPublishResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelPublishResponse_descriptor_;
}

const ChannelPublishResponse& ChannelPublishResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ChannelPublishResponse* ChannelPublishResponse::default_instance_ = NULL;

ChannelPublishResponse* ChannelPublishResponse::New() const {
  return new ChannelPublishResponse;
}

void ChannelPublishResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelPublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ChannelPublishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ChannelPublishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ChannelPublishResponse)
  return false;
#undef DO_
}

void ChannelPublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ChannelPublishResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ChannelPublishResponse)
}

::google::protobuf::uint8* ChannelPublishResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ChannelPublishResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ChannelPublishResponse)
  return target;
}

int ChannelPublishResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelPublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelPublishResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelPublishResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelPublishResponse::MergeFrom(const ChannelPublishResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelPublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelPublishResponse::CopyFrom(const ChannelPublishResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelPublishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ChannelPublishResponse::Swap(ChannelPublishResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelPublishResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelPublishResponse_descriptor_;
  metadata.reflection = ChannelPublishResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelSubscribeRequest::kChannelIdFieldNumber;
#endif  // !_MSC_VER

ChannelSubscribeRequest::ChannelSubscribeRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ChannelSubscribeRequest)
}

void ChannelSubscribeRequest::InitAsDefaultInstance() {
}

ChannelSubscribeRequest::ChannelSubscribeRequest(const ChannelSubscribeRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ChannelSubscribeRequest)
}

void ChannelSubscribeRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelSubscribeRequest::~ChannelSubscribeRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ChannelSubscribeRequest)
  SharedDtor();
}

void ChannelSubscribeRequest::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (this != default_instance_) {
  }
}

void ChannelSubscribeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelSubscribeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelSubscribeRequest_descriptor_;
}

const ChannelSubscribeRequest& ChannelSubscribeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ChannelSubscribeRequest* ChannelSubscribeRequest::default_instance_ = NULL;

ChannelSubscribeRequest* ChannelSubscribeRequest::New() const {
  return new ChannelSubscribeRequest;
}

void ChannelSubscribeRequest::Clear() {
  if (has_channel_id()) {
    if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      channel_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelSubscribeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ChannelSubscribeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ChannelSubscribeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ChannelSubscribeRequest)
  return false;
#undef DO_
}

void ChannelSubscribeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ChannelSubscribeRequest)
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ChannelSubscribeRequest)
}

::google::protobuf::uint8* ChannelSubscribeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ChannelSubscribeRequest)
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ChannelSubscribeRequest)
  return target;
}

int ChannelSubscribeRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelSubscribeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelSubscribeRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelSubscribeRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelSubscribeRequest::MergeFrom(const ChannelSubscribeRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelSubscribeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelSubscribeRequest::CopyFrom(const ChannelSubscribeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelSubscribeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChannelSubscribeRequest::Swap(ChannelSubscribeRequest* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelSubscribeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelSubscribeRequest_descriptor_;
  metadata.reflection = ChannelSubscribeRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelSubscribeResponse::kResultFieldNumber;
const int ChannelSubscribeResponse::kChannelIdFieldNumber;
#endif  // !_MSC_VER

ChannelSubscribeResponse::ChannelSubscribeResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ChannelSubscribeResponse)
}

void ChannelSubscribeResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ChannelSubscribeResponse::ChannelSubscribeResponse(const ChannelSubscribeResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ChannelSubscribeResponse)
}

void ChannelSubscribeResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelSubscribeResponse::~ChannelSubscribeResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ChannelSubscribeResponse)
  SharedDtor();
}

void ChannelSubscribeResponse::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void ChannelSubscribeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelSubscribeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelSubscribeResponse_descriptor_;
}

const ChannelSubscribeResponse& ChannelSubscribeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ChannelSubscribeResponse* ChannelSubscribeResponse::default_instance_ = NULL;

ChannelSubscribeResponse* ChannelSubscribeResponse::New() const {
  return new ChannelSubscribeResponse;
}

void ChannelSubscribeResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelSubscribeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ChannelSubscribeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_channel_id;
        break;
      }

      // optional string channel_id = 2;
      case 2: {
        if (tag == 18) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ChannelSubscribeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ChannelSubscribeResponse)
  return false;
#undef DO_
}

void ChannelSubscribeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ChannelSubscribeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ChannelSubscribeResponse)
}

::google::protobuf::uint8* ChannelSubscribeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ChannelSubscribeResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ChannelSubscribeResponse)
  return target;
}

int ChannelSubscribeResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelSubscribeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelSubscribeResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelSubscribeResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelSubscribeResponse::MergeFrom(const ChannelSubscribeResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelSubscribeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelSubscribeResponse::CopyFrom(const ChannelSubscribeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelSubscribeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ChannelSubscribeResponse::Swap(ChannelSubscribeResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelSubscribeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelSubscribeResponse_descriptor_;
  metadata.reflection = ChannelSubscribeResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelMessageNotify::kChannelIdFieldNumber;
const int ChannelMessageNotify::kMessageFieldNumber;
#endif  // !_MSC_VER

ChannelMessageNotify::ChannelMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ChannelMessageNotify)
}

void ChannelMessageNotify::InitAsDefaultInstance() {
}

ChannelMessageNotify::ChannelMessageNotify(const ChannelMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ChannelMessageNotify)
}

void ChannelMessageNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelMessageNotify::~ChannelMessageNotify() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ChannelMessageNotify)
  SharedDtor();
}

void ChannelMessageNotify::SharedDtor() {
  if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete channel_id_;
  }
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void ChannelMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelMessageNotify_descriptor_;
}

const ChannelMessageNotify& ChannelMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ChannelMessageNotify* ChannelMessageNotify::default_instance_ = NULL;

ChannelMessageNotify* ChannelMessageNotify::New() const {
  return new ChannelMessageNotify;
}

void ChannelMessageNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_channel_id()) {
      if (channel_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        channel_id_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ChannelMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string channel_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "channel_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // required string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ChannelMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ChannelMessageNotify)
  return false;
#undef DO_
}

void ChannelMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ChannelMessageNotify)
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_id(), output);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ChannelMessageNotify)
}

::google::protobuf::uint8* ChannelMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ChannelMessageNotify)
  // required string channel_id = 1;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "channel_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_id(), target);
  }

  // required string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ChannelMessageNotify)
  return target;
}

int ChannelMessageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }

    // required string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelMessageNotify::MergeFrom(const ChannelMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessageNotify::CopyFrom(const ChannelMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessageNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChannelMessageNotify::Swap(ChannelMessageNotify* other) {
  if (other != this) {
    std::swap(channel_id_, other->channel_id_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelMessageNotify_descriptor_;
  metadata.reflection = ChannelMessageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldJoinRequest::kWorldIdFieldNumber;
#endif  // !_MSC_VER

WorldJoinRequest::WorldJoinRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.WorldJoinRequest)
}

void WorldJoinRequest::InitAsDefaultInstance() {
}

WorldJoinRequest::WorldJoinRequest(const WorldJoinRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.WorldJoinRequest)
}

void WorldJoinRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldJoinRequest::~WorldJoinRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.WorldJoinRequest)
  SharedDtor();
}

void WorldJoinRequest::SharedDtor() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (this != default_instance_) {
  }
}

void WorldJoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldJoinRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldJoinRequest_descriptor_;
}

const WorldJoinRequest& WorldJoinRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

WorldJoinRequest* WorldJoinRequest::default_instance_ = NULL;

WorldJoinRequest* WorldJoinRequest::New() const {
  return new WorldJoinRequest;
}

void WorldJoinRequest::Clear() {
  if (has_world_id()) {
    if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      world_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldJoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.WorldJoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string world_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world_id().data(), this->world_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "world_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.WorldJoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.WorldJoinRequest)
  return false;
#undef DO_
}

void WorldJoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.WorldJoinRequest)
  // optional string world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->world_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.WorldJoinRequest)
}

::google::protobuf::uint8* WorldJoinRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.WorldJoinRequest)
  // optional string world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->world_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.WorldJoinRequest)
  return target;
}

int WorldJoinRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string world_id = 1;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->world_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldJoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldJoinRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldJoinRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldJoinRequest::MergeFrom(const WorldJoinRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldJoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldJoinRequest::CopyFrom(const WorldJoinRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldJoinRequest::IsInitialized() const {

  return true;
}

void WorldJoinRequest::Swap(WorldJoinRequest* other) {
  if (other != this) {
    std::swap(world_id_, other->world_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldJoinRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldJoinRequest_descriptor_;
  metadata.reflection = WorldJoinRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldJoinResponse::kResultFieldNumber;
const int WorldJoinResponse::kWorldIdFieldNumber;
#endif  // !_MSC_VER

WorldJoinResponse::WorldJoinResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.WorldJoinResponse)
}

void WorldJoinResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

WorldJoinResponse::WorldJoinResponse(const WorldJoinResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.WorldJoinResponse)
}

void WorldJoinResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldJoinResponse::~WorldJoinResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.WorldJoinResponse)
  SharedDtor();
}

void WorldJoinResponse::SharedDtor() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (this != default_instance_) {
    delete result_;
  }
}

void WorldJoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldJoinResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldJoinResponse_descriptor_;
}

const WorldJoinResponse& WorldJoinResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

WorldJoinResponse* WorldJoinResponse::default_instance_ = NULL;

WorldJoinResponse* WorldJoinResponse::New() const {
  return new WorldJoinResponse;
}

void WorldJoinResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_result()) {
      if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
    }
    if (has_world_id()) {
      if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        world_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.WorldJoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_world_id;
        break;
      }

      // optional string world_id = 10;
      case 10: {
        if (tag == 82) {
         parse_world_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world_id().data(), this->world_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "world_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.WorldJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.WorldJoinResponse)
  return false;
#undef DO_
}

void WorldJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.WorldJoinResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // optional string world_id = 10;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->world_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.WorldJoinResponse)
}

::google::protobuf::uint8* WorldJoinResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.WorldJoinResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // optional string world_id = 10;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->world_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.WorldJoinResponse)
  return target;
}

int WorldJoinResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

    // optional string world_id = 10;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->world_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldJoinResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldJoinResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldJoinResponse::MergeFrom(const WorldJoinResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldJoinResponse::CopyFrom(const WorldJoinResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldJoinResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void WorldJoinResponse::Swap(WorldJoinResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(world_id_, other->world_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldJoinResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldJoinResponse_descriptor_;
  metadata.reflection = WorldJoinResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldLeaveRequest::kWorldIdFieldNumber;
#endif  // !_MSC_VER

WorldLeaveRequest::WorldLeaveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.WorldLeaveRequest)
}

void WorldLeaveRequest::InitAsDefaultInstance() {
}

WorldLeaveRequest::WorldLeaveRequest(const WorldLeaveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.WorldLeaveRequest)
}

void WorldLeaveRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  world_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldLeaveRequest::~WorldLeaveRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.WorldLeaveRequest)
  SharedDtor();
}

void WorldLeaveRequest::SharedDtor() {
  if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete world_id_;
  }
  if (this != default_instance_) {
  }
}

void WorldLeaveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldLeaveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldLeaveRequest_descriptor_;
}

const WorldLeaveRequest& WorldLeaveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

WorldLeaveRequest* WorldLeaveRequest::default_instance_ = NULL;

WorldLeaveRequest* WorldLeaveRequest::New() const {
  return new WorldLeaveRequest;
}

void WorldLeaveRequest::Clear() {
  if (has_world_id()) {
    if (world_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      world_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldLeaveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.WorldLeaveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string world_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world_id().data(), this->world_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "world_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.WorldLeaveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.WorldLeaveRequest)
  return false;
#undef DO_
}

void WorldLeaveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.WorldLeaveRequest)
  // optional string world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->world_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.WorldLeaveRequest)
}

::google::protobuf::uint8* WorldLeaveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.WorldLeaveRequest)
  // optional string world_id = 1;
  if (has_world_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id().data(), this->world_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->world_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.WorldLeaveRequest)
  return target;
}

int WorldLeaveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string world_id = 1;
    if (has_world_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->world_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldLeaveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldLeaveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldLeaveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldLeaveRequest::MergeFrom(const WorldLeaveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_id()) {
      set_world_id(from.world_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldLeaveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldLeaveRequest::CopyFrom(const WorldLeaveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldLeaveRequest::IsInitialized() const {

  return true;
}

void WorldLeaveRequest::Swap(WorldLeaveRequest* other) {
  if (other != this) {
    std::swap(world_id_, other->world_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldLeaveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldLeaveRequest_descriptor_;
  metadata.reflection = WorldLeaveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldLeaveResponse::kResultFieldNumber;
const int WorldLeaveResponse::kWorldIdListFieldNumber;
#endif  // !_MSC_VER

WorldLeaveResponse::WorldLeaveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.WorldLeaveResponse)
}

void WorldLeaveResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

WorldLeaveResponse::WorldLeaveResponse(const WorldLeaveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.WorldLeaveResponse)
}

void WorldLeaveResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldLeaveResponse::~WorldLeaveResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.WorldLeaveResponse)
  SharedDtor();
}

void WorldLeaveResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void WorldLeaveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldLeaveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldLeaveResponse_descriptor_;
}

const WorldLeaveResponse& WorldLeaveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

WorldLeaveResponse* WorldLeaveResponse::default_instance_ = NULL;

WorldLeaveResponse* WorldLeaveResponse::New() const {
  return new WorldLeaveResponse;
}

void WorldLeaveResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  world_id_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldLeaveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.WorldLeaveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_world_id_list;
        break;
      }

      // repeated string world_id_list = 2;
      case 2: {
        if (tag == 18) {
         parse_world_id_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_world_id_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->world_id_list(this->world_id_list_size() - 1).data(),
            this->world_id_list(this->world_id_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "world_id_list");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_world_id_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.WorldLeaveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.WorldLeaveResponse)
  return false;
#undef DO_
}

void WorldLeaveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.WorldLeaveResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  // repeated string world_id_list = 2;
  for (int i = 0; i < this->world_id_list_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->world_id_list(i).data(), this->world_id_list(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "world_id_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->world_id_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.WorldLeaveResponse)
}

::google::protobuf::uint8* WorldLeaveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.WorldLeaveResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  // repeated string world_id_list = 2;
  for (int i = 0; i < this->world_id_list_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->world_id_list(i).data(), this->world_id_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "world_id_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->world_id_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.WorldLeaveResponse)
  return target;
}

int WorldLeaveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated string world_id_list = 2;
  total_size += 1 * this->world_id_list_size();
  for (int i = 0; i < this->world_id_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->world_id_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldLeaveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldLeaveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldLeaveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldLeaveResponse::MergeFrom(const WorldLeaveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  world_id_list_.MergeFrom(from.world_id_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldLeaveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldLeaveResponse::CopyFrom(const WorldLeaveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldLeaveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void WorldLeaveResponse::Swap(WorldLeaveResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    world_id_list_.Swap(&other->world_id_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldLeaveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldLeaveResponse_descriptor_;
  metadata.reflection = WorldLeaveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportUserViaChannelRequest::kTargetAccountIdFieldNumber;
const int ReportUserViaChannelRequest::kModeTypeFieldNumber;
const int ReportUserViaChannelRequest::kReasonTypeFieldNumber;
const int ReportUserViaChannelRequest::kExplainFieldNumber;
#endif  // !_MSC_VER

ReportUserViaChannelRequest::ReportUserViaChannelRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ReportUserViaChannelRequest)
}

void ReportUserViaChannelRequest::InitAsDefaultInstance() {
}

ReportUserViaChannelRequest::ReportUserViaChannelRequest(const ReportUserViaChannelRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ReportUserViaChannelRequest)
}

void ReportUserViaChannelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  target_account_id_ = GOOGLE_LONGLONG(0);
  mode_type_ = 1;
  reason_type_ = 0;
  explain_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportUserViaChannelRequest::~ReportUserViaChannelRequest() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ReportUserViaChannelRequest)
  SharedDtor();
}

void ReportUserViaChannelRequest::SharedDtor() {
  if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete explain_;
  }
  if (this != default_instance_) {
  }
}

void ReportUserViaChannelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportUserViaChannelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportUserViaChannelRequest_descriptor_;
}

const ReportUserViaChannelRequest& ReportUserViaChannelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ReportUserViaChannelRequest* ReportUserViaChannelRequest::default_instance_ = NULL;

ReportUserViaChannelRequest* ReportUserViaChannelRequest::New() const {
  return new ReportUserViaChannelRequest;
}

void ReportUserViaChannelRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    target_account_id_ = GOOGLE_LONGLONG(0);
    mode_type_ = 1;
    reason_type_ = 0;
    if (has_explain()) {
      if (explain_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        explain_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportUserViaChannelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ReportUserViaChannelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 target_account_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &target_account_id_)));
          set_has_target_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mode_type;
        break;
      }

      // required .b2.protocol.commondata.ReportModeType mode_type = 2;
      case 2: {
        if (tag == 16) {
         parse_mode_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::b2::protocol::commondata::ReportModeType_IsValid(value)) {
            set_mode_type(static_cast< ::b2::protocol::commondata::ReportModeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reason_type;
        break;
      }

      // required int32 reason_type = 3;
      case 3: {
        if (tag == 24) {
         parse_reason_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_type_)));
          set_has_reason_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_explain;
        break;
      }

      // optional string explain = 4;
      case 4: {
        if (tag == 34) {
         parse_explain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_explain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->explain().data(), this->explain().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "explain");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ReportUserViaChannelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ReportUserViaChannelRequest)
  return false;
#undef DO_
}

void ReportUserViaChannelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ReportUserViaChannelRequest)
  // required int64 target_account_id = 1;
  if (has_target_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->target_account_id(), output);
  }

  // required .b2.protocol.commondata.ReportModeType mode_type = 2;
  if (has_mode_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode_type(), output);
  }

  // required int32 reason_type = 3;
  if (has_reason_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reason_type(), output);
  }

  // optional string explain = 4;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->explain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ReportUserViaChannelRequest)
}

::google::protobuf::uint8* ReportUserViaChannelRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ReportUserViaChannelRequest)
  // required int64 target_account_id = 1;
  if (has_target_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->target_account_id(), target);
  }

  // required .b2.protocol.commondata.ReportModeType mode_type = 2;
  if (has_mode_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode_type(), target);
  }

  // required int32 reason_type = 3;
  if (has_reason_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reason_type(), target);
  }

  // optional string explain = 4;
  if (has_explain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->explain().data(), this->explain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "explain");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->explain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ReportUserViaChannelRequest)
  return target;
}

int ReportUserViaChannelRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 target_account_id = 1;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->target_account_id());
    }

    // required .b2.protocol.commondata.ReportModeType mode_type = 2;
    if (has_mode_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode_type());
    }

    // required int32 reason_type = 3;
    if (has_reason_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason_type());
    }

    // optional string explain = 4;
    if (has_explain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->explain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportUserViaChannelRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportUserViaChannelRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportUserViaChannelRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportUserViaChannelRequest::MergeFrom(const ReportUserViaChannelRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_account_id()) {
      set_target_account_id(from.target_account_id());
    }
    if (from.has_mode_type()) {
      set_mode_type(from.mode_type());
    }
    if (from.has_reason_type()) {
      set_reason_type(from.reason_type());
    }
    if (from.has_explain()) {
      set_explain(from.explain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportUserViaChannelRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportUserViaChannelRequest::CopyFrom(const ReportUserViaChannelRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportUserViaChannelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReportUserViaChannelRequest::Swap(ReportUserViaChannelRequest* other) {
  if (other != this) {
    std::swap(target_account_id_, other->target_account_id_);
    std::swap(mode_type_, other->mode_type_);
    std::swap(reason_type_, other->reason_type_);
    std::swap(explain_, other->explain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportUserViaChannelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportUserViaChannelRequest_descriptor_;
  metadata.reflection = ReportUserViaChannelRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportUserViaChannelResponse::kResultFieldNumber;
#endif  // !_MSC_VER

ReportUserViaChannelResponse::ReportUserViaChannelResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:b2.protocol.channel.ReportUserViaChannelResponse)
}

void ReportUserViaChannelResponse::InitAsDefaultInstance() {
  result_ = const_cast< ::b2::protocol::commondata::Result*>(&::b2::protocol::commondata::Result::default_instance());
}

ReportUserViaChannelResponse::ReportUserViaChannelResponse(const ReportUserViaChannelResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:b2.protocol.channel.ReportUserViaChannelResponse)
}

void ReportUserViaChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportUserViaChannelResponse::~ReportUserViaChannelResponse() {
  // @@protoc_insertion_point(destructor:b2.protocol.channel.ReportUserViaChannelResponse)
  SharedDtor();
}

void ReportUserViaChannelResponse::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void ReportUserViaChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportUserViaChannelResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportUserViaChannelResponse_descriptor_;
}

const ReportUserViaChannelResponse& ReportUserViaChannelResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChannelProtocol_2eproto();
  return *default_instance_;
}

ReportUserViaChannelResponse* ReportUserViaChannelResponse::default_instance_ = NULL;

ReportUserViaChannelResponse* ReportUserViaChannelResponse::New() const {
  return new ReportUserViaChannelResponse;
}

void ReportUserViaChannelResponse::Clear() {
  if (has_result()) {
    if (result_ != NULL) result_->::b2::protocol::commondata::Result::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportUserViaChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:b2.protocol.channel.ReportUserViaChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .b2.protocol.commondata.Result result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:b2.protocol.channel.ReportUserViaChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:b2.protocol.channel.ReportUserViaChannelResponse)
  return false;
#undef DO_
}

void ReportUserViaChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:b2.protocol.channel.ReportUserViaChannelResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:b2.protocol.channel.ReportUserViaChannelResponse)
}

::google::protobuf::uint8* ReportUserViaChannelResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:b2.protocol.channel.ReportUserViaChannelResponse)
  // required .b2.protocol.commondata.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:b2.protocol.channel.ReportUserViaChannelResponse)
  return target;
}

int ReportUserViaChannelResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .b2.protocol.commondata.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportUserViaChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportUserViaChannelResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportUserViaChannelResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportUserViaChannelResponse::MergeFrom(const ReportUserViaChannelResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      mutable_result()->::b2::protocol::commondata::Result::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportUserViaChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportUserViaChannelResponse::CopyFrom(const ReportUserViaChannelResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportUserViaChannelResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_result()) {
    if (!this->result().IsInitialized()) return false;
  }
  return true;
}

void ReportUserViaChannelResponse::Swap(ReportUserViaChannelResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportUserViaChannelResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportUserViaChannelResponse_descriptor_;
  metadata.reflection = ReportUserViaChannelResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace protocol
}  // namespace b2

// @@protoc_insertion_point(global_scope)
